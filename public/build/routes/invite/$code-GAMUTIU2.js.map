{
  "version": 3,
  "sources": ["../../../../app/routes/invite/$code.tsx"],
  "sourcesContent": ["import { useCallback, useEffect, useState } from 'react';\nimport { Trans } from 'react-i18next';\nimport { z } from 'zod';\n\nimport type { ActionArgs, LoaderArgs, MetaFunction } from '@remix-run/node';\nimport { json, redirect } from '@remix-run/node';\nimport { useLoaderData, useSubmit, useTransition } from '@remix-run/react';\nimport { useAuth, useSigninCheck } from 'reactfire';\n\nimport {\n  acceptInviteToOrganization,\n  getInviteByCode,\n  getUserRoleByOrganization,\n} from '~/lib/server/organizations/memberships.server';\n\nimport { serializeOrganizationIdCookie } from '~/lib/server/cookies/organization.cookie';\nimport { serializeCsrfSecretCookie } from '~/lib/server/cookies/csrf-secret.cookie';\n\nimport {\n  getSessionIdCookie,\n  parseSessionIdCookie,\n} from '~/lib/server/cookies/session.cookie';\n\nimport If from '~/core/ui/If';\nimport Button from '~/core/ui/Button';\nimport Heading from '~/core/ui/Heading';\n\nimport configuration from '~/configuration';\nimport isBrowser from '~/core/generic/is-browser';\n\nimport OAuthProviders from '~/components/auth/OAuthProviders';\nimport PageLoadingIndicator from '~/core/ui/PageLoadingIndicator';\n\nimport GuardedPage from '~/core/firebase/components/GuardedPage';\nimport getLoggedInUser from '~/core/firebase/admin/auth/get-logged-in-user';\nimport createCsrfToken from '~/core/generic/create-csrf-token';\nimport createServerSideSession from '~/core/firebase/admin/auth/create-server-side-session';\n\nimport {\n  throwBadRequestException,\n  throwForbiddenException,\n  throwNotFoundException,\n} from '~/core/http-exceptions';\n\nimport EmailPasswordSignUpContainer from '~/components/auth/EmailPasswordSignUpContainer';\nimport EmailPasswordSignInContainer from '~/components/auth/EmailPasswordSignInContainer';\nimport PhoneNumberSignInContainer from '~/components/auth/PhoneNumberSignInContainer';\nimport EmailLinkAuth from '~/components/auth/EmailLinkAuth';\n\nimport useGetCsrfToken from '~/core/firebase/hooks/use-get-csrf-token';\nimport withCsrf from '~/core/middleware/with-csrf';\nimport type { SerializedUserAuthData } from '~/core/session/types/user-session';\nimport withFirebaseAdmin from '~/core/middleware/with-firebase-admin';\nimport getUserInfoById from '~/core/firebase/admin/auth/get-user-info-by-id';\nimport getLogger from '~/core/logger';\nimport AuthCatchBoundary from '~/components/auth/AuthCatchBoundary';\n\nenum Mode {\n  SignUp,\n  SignIn,\n}\n\ninterface Invite {\n  code: string;\n\n  organization: {\n    id: string;\n    name: string;\n  };\n}\n\nexport const CatchBoundary = AuthCatchBoundary;\n\nexport const meta: MetaFunction = ({ data }) => {\n  return {\n    title: `Join Organization`,\n    'csrf-token': data?.csrfToken,\n  };\n};\n\nconst InvitePage = () => {\n  const data = useLoaderData<typeof loader>();\n  const [user, setUser] = useState(data.user);\n  const signInCheck = useSigninCheck();\n\n  const transition = useTransition();\n  const invite = data.invite as Invite;\n  const organization = invite.organization;\n\n  useEffect(() => {\n    if (signInCheck.status === 'success' && !signInCheck.data.signedIn) {\n      setUser(undefined);\n    }\n  }, [signInCheck]);\n\n  if (transition.state === 'submitting') {\n    return (\n      <PageLoadingIndicator>\n        <Trans\n          i18nKey={'auth:addingToOrganization'}\n          values={{ name: organization.name }}\n          components={{ b: <b /> }}\n        />\n      </PageLoadingIndicator>\n    );\n  }\n\n  return (\n    <>\n      <Heading type={4}>\n        <Trans\n          i18nKey={'auth:joinOrganizationHeading'}\n          values={{\n            organization: invite.organization.name,\n          }}\n        />\n      </Heading>\n\n      <div>\n        <p className={'text-center'}>\n          <Trans\n            i18nKey={'auth:joinOrganizationSubHeading'}\n            values={{\n              organization: invite.organization.name,\n            }}\n            components={{ b: <b /> }}\n          />\n        </p>\n\n        <p className={'text-center'}>\n          <If condition={!user}>\n            <Trans i18nKey={'auth:signUpToAcceptInvite'} />\n          </If>\n        </p>\n      </div>\n\n      <AcceptInviteContainer inviteCode={invite.code} user={user} />\n    </>\n  );\n};\n\nfunction AcceptInviteContainer({\n  inviteCode,\n  user,\n}: React.PropsWithChildren<{\n  inviteCode: string;\n  user: Maybe<SerializedUserAuthData> | null;\n}>) {\n  const auth = useAuth();\n  const submit = useSubmit();\n  const getCsrfToken = useGetCsrfToken();\n  const transition = useTransition();\n  const redirectOnSignOut = getRedirectPath();\n  const [mode, setMode] = useState<Mode>(Mode.SignUp);\n\n  const onInviteAccepted = useCallback(\n    (idToken: string) => {\n      const csrfToken = getCsrfToken() ?? '';\n\n      const body = {\n        code: inviteCode,\n        idToken,\n        csrfToken,\n      };\n\n      return submit(body, {\n        method: 'post',\n      });\n    },\n    [getCsrfToken, inviteCode, submit]\n  );\n\n  if (transition.state !== 'idle') {\n    return <PageLoadingIndicator />;\n  }\n\n  return (\n    <>\n      {/* FLOW FOR AUTHENTICATED USERS */}\n      <If condition={user}>\n        <GuardedPage whenSignedOut={redirectOnSignOut}>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              return onInviteAccepted('');\n            }}\n            className={'flex flex-col space-y-8'}\n          >\n            <p className={'text-center text-sm'}>\n              <Trans\n                i18nKey={'auth:clickToAcceptAs'}\n                values={{ email: user?.email }}\n                components={{ b: <b /> }}\n              />\n            </p>\n\n            <Button data-cy={'accept-invite-submit-button'} type={'submit'}>\n              <Trans i18nKey={'auth:acceptInvite'} />\n            </Button>\n\n            <div>\n              <div className={'flex flex-col space-y-2'}>\n                <p className={'text-center'}>\n                  <span\n                    className={\n                      'text-center text-sm text-gray-700 dark:text-gray-300'\n                    }\n                  >\n                    <Trans i18nKey={'auth:acceptInviteWithDifferentAccount'} />\n                  </span>\n                </p>\n\n                <Button\n                  block\n                  color={'transparent'}\n                  size={'small'}\n                  onClick={() => auth.signOut()}\n                  type={'button'}\n                >\n                  <Trans i18nKey={'auth:signOut'} />\n                </Button>\n              </div>\n            </div>\n          </form>\n        </GuardedPage>\n      </If>\n\n      {/* FLOW FOR NEW USERS */}\n      <If condition={!user}>\n        <OAuthProviders onSignIn={onInviteAccepted} />\n\n        <If condition={configuration.auth.providers.emailPassword}>\n          <If condition={mode === Mode.SignUp}>\n            <div className={'flex w-full flex-col items-center space-y-4'}>\n              <EmailPasswordSignUpContainer onSignUp={onInviteAccepted} />\n\n              <Button\n                block\n                color={'transparent'}\n                size={'small'}\n                onClick={() => setMode(Mode.SignIn)}\n              >\n                <Trans i18nKey={'auth:alreadyHaveAccountStatement'} />\n              </Button>\n            </div>\n          </If>\n\n          <If condition={mode === Mode.SignIn}>\n            <div className={'flex w-full flex-col items-center space-y-4'}>\n              <EmailPasswordSignInContainer onSignIn={onInviteAccepted} />\n\n              <Button\n                block\n                color={'transparent'}\n                size={'small'}\n                onClick={() => setMode(Mode.SignUp)}\n              >\n                <Trans i18nKey={'auth:doNotHaveAccountStatement'} />\n              </Button>\n            </div>\n          </If>\n        </If>\n\n        <If condition={configuration.auth.providers.phoneNumber}>\n          <PhoneNumberSignInContainer onSignIn={onInviteAccepted} />\n        </If>\n\n        <If condition={configuration.auth.providers.emailLink}>\n          <EmailLinkAuth />\n        </If>\n      </If>\n    </>\n  );\n}\n\nexport default InvitePage;\n\nexport async function loader(args: LoaderArgs) {\n  await withFirebaseAdmin();\n\n  const code = args.params.code;\n  const logger = getLogger();\n\n  // if the code wasn't provided we cannot continue\n  // so, we redirect to 404\n  if (!code) {\n    return throwNotFoundException();\n  }\n\n  const inviteRef = await getInviteByCode(code).catch(() => undefined);\n  const invite = inviteRef?.data();\n\n  // if the invite wasn't found, it's 404\n  if (!invite) {\n    logger.warn(\n      {\n        code,\n      },\n      `User navigated to invite page, but it wasn't found. Redirecting to home page...`\n    );\n\n    return throwNotFoundException();\n  }\n\n  try {\n    const sessionId = await parseSessionIdCookie(args.request);\n    const user = await getLoggedInUser(sessionId).catch(() => undefined);\n    const userId = user?.uid;\n    const userData = userId ? await getUserInfoById(userId) : undefined;\n\n    const organizationId = invite.organization.id;\n\n    // We check if the user is already part of the organization\n    if (userId) {\n      const userRole = await getUserRoleByOrganization({\n        organizationId,\n        userId,\n      });\n\n      const isPartOfOrganization = userRole !== undefined;\n\n      // if yes, we redirect the user to the error page\n      if (isPartOfOrganization) {\n        return throwForbiddenException();\n      }\n    }\n\n    const { token: csrfToken, secret } = await createCsrfToken();\n\n    return json(\n      {\n        user: userData,\n        invite,\n        csrfToken,\n      },\n      {\n        headers: {\n          'Set-Cookie': await serializeCsrfSecretCookie(secret),\n        },\n      }\n    );\n  } catch (e) {\n    logger.debug(e);\n\n    logger.error(\n      `Error encountered while fetching invite. Redirecting to home page...`\n    );\n\n    return redirectToHomePage();\n  }\n}\n\n/**\n * @name action\n * @param args\n */\nexport async function action(args: ActionArgs) {\n  const req = args.request;\n  const formData = await req.formData();\n  const fields = Object.fromEntries(formData.entries());\n  const result = await getBodySchema().safeParseAsync(fields);\n\n  if (!result.success) {\n    return throwBadRequestException();\n  }\n\n  await withCsrf(req, result.data.csrfToken);\n\n  const logger = getLogger();\n  const headers = new Headers();\n  const { code, idToken } = result.data;\n\n  let userId: string;\n\n  if (idToken) {\n    const serializedSessionId = await createServerSideSession(idToken);\n    const cookie = await getSessionIdCookie();\n    const sessionId = await cookie.parse(serializedSessionId);\n    const user = await getLoggedInUser(sessionId);\n\n    userId = user?.uid;\n\n    headers.append('Set-Cookie', serializedSessionId);\n  } else {\n    userId = await getUserIdFromSession(req);\n  }\n\n  logger.info(\n    {\n      code,\n      userId,\n    },\n    `Adding member to organization...`\n  );\n\n  const invite = await acceptInviteToOrganization({ code, userId });\n  const organizationId = invite.organization.id;\n\n  logger.info(\n    {\n      code,\n      organizationId,\n      userId,\n    },\n    `Member successfully added to organization`\n  );\n\n  headers.append(\n    'Set-Cookie',\n    await serializeOrganizationIdCookie(organizationId)\n  );\n\n  return redirect(configuration.paths.appHome, {\n    headers,\n  });\n}\n\nfunction redirectToHomePage() {\n  return redirect('/');\n}\n\nfunction getRedirectPath() {\n  return isBrowser() ? window.location.pathname : undefined;\n}\n\nfunction getBodySchema() {\n  return z.object({\n    code: z.string().min(1),\n    idToken: z.string(),\n    csrfToken: z.string().min(1),\n  });\n}\n\nasync function getUserIdFromSession(request: Request) {\n  const sessionId = await parseSessionIdCookie(request);\n  const user = await getLoggedInUser(sessionId);\n\n  return user.uid;\n}\n"],
  "mappings": "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",
  "names": []
}
