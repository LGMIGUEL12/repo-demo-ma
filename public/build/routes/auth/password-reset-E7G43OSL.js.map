{
  "version": 3,
  "sources": ["../../../../app/routes/auth/password-reset.tsx"],
  "sourcesContent": ["import type { FormEvent } from 'react';\nimport { useCallback } from 'react';\nimport { Link } from '@remix-run/react';\nimport type { MetaFunction } from '@remix-run/node';\nimport { sendPasswordResetEmail } from '@firebase/auth';\nimport { Trans } from 'react-i18next';\nimport { useAuth } from 'reactfire';\n\nimport configuration from '~/configuration';\n\nimport Heading from '~/core/ui/Heading';\nimport Button from '~/core/ui/Button';\nimport Alert from '~/core/ui/Alert';\nimport If from '~/core/ui/If';\nimport TextField from '~/core/ui/TextField';\n\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\nimport useRequestState from '~/core/hooks/use-request-state';\nimport AuthErrorMessage from '~/components/auth/AuthErrorMessage';\nimport loadAuthPageData from '~/lib/server/loaders/load-auth-page-data';\n\nexport const loader = loadAuthPageData;\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Password Reset',\n  };\n};\n\nfunction PasswordResetPage() {\n  const auth = useAuth();\n  const { state, setError, setData, setLoading } = useRequestState();\n\n  const onSubmit = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      const data = new FormData(event.currentTarget);\n      const email = data.get('email') as string;\n\n      setLoading(true);\n\n      try {\n        const returnUrl = getReturnUrl();\n\n        await sendPasswordResetEmail(auth, email, {\n          url: returnUrl,\n        });\n\n        setData(true);\n      } catch (e) {\n        setError(getFirebaseErrorCode(e));\n      }\n    },\n    [auth, setData, setError, setLoading]\n  );\n\n  return (\n    <>\n      <div>\n        <Heading type={4}>\n          <Trans i18nKey={'auth:passwordResetLabel'} />\n        </Heading>\n      </div>\n\n      <div className={'flex flex-col space-y-4'}>\n        <If condition={state.success}>\n          <Alert type={'success'}>\n            <Trans i18nKey={'auth:passwordResetSuccessMessage'} />\n          </Alert>\n        </If>\n\n        <If condition={!state.data}>\n          <>\n            <form\n              onSubmit={(e) => void onSubmit(e)}\n              className={'container mx-auto flex justify-center'}\n            >\n              <div className={'flex-col space-y-4'}>\n                <div>\n                  <p className={'text-sm text-gray-700 dark:text-gray-400'}>\n                    <Trans i18nKey={'auth:passwordResetSubheading'} />\n                  </p>\n                </div>\n\n                <div>\n                  <TextField.Label>\n                    <Trans i18nKey={'common:emailAddress'} />\n\n                    <TextField.Input\n                      name=\"email\"\n                      required\n                      type=\"email\"\n                      placeholder={'your@email.com'}\n                    />\n                  </TextField.Label>\n                </div>\n\n                <If condition={state.error}>\n                  <AuthErrorMessage error={state.error as string} />\n                </If>\n\n                <Button\n                  loading={state.loading}\n                  type=\"submit\"\n                  size=\"large\"\n                  block\n                >\n                  <Trans i18nKey={'auth:passwordResetLabel'} />\n                </Button>\n              </div>\n            </form>\n          </>\n        </If>\n\n        <div className={'flex justify-center text-xs'}>\n          <p className={'flex space-x-1'}>\n            <span>\n              <Trans i18nKey={'auth:passwordRecoveredQuestion'} />\n            </span>\n\n            <Link\n              className={\n                'text-primary-800 hover:underline dark:text-primary-500'\n              }\n              to={configuration.paths.signIn}\n            >\n              <Trans i18nKey={'auth:signIn'} />\n            </Link>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default PasswordResetPage;\n\n/**\n * @description\n * Return the URL where the user will be redirected to after resetting\n * their password. By default, we will redirect to the sign-in page\n */\nfunction getReturnUrl() {\n  return `${window.location.origin}${configuration.paths.signIn}`;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,mBAA4B;AAC5B;AAGA;AALA;AAuBO,IAAM,OAAqB,MAAM;AACtC,SAAO;AAAA,IACL,OAAO;AAAA,EACT;AACF;AAEA,SAAS,oBAAoB;AAC3B,QAAM,OAAO,GAAQ;AACrB,QAAM,EAAE,OAAO,UAAU,SAAS,WAAW,IAAI,gBAAgB;AAEjE,QAAM,eAAW;AAAA,IACf,OAAO,UAAsC;AAC3C,YAAM,eAAe;AAErB,YAAM,OAAO,IAAI,SAAS,MAAM,aAAa;AAC7C,YAAM,QAAQ,KAAK,IAAI,OAAO;AAE9B,iBAAW,IAAI;AAEf,UAAI;AACF,cAAM,YAAY,aAAa;AAE/B,cAAM,uBAAuB,MAAM,OAAO;AAAA,UACxC,KAAK;AAAA,QACP,CAAC;AAED,gBAAQ,IAAI;AAAA,MACd,SAAS,GAAP;AACA,iBAAS,qBAAqB,CAAC,CAAC;AAAA,MAClC;AAAA,IACF;AAAA,IACA,CAAC,MAAM,SAAS,UAAU,UAAU;AAAA,EACtC;AAEA,SACE;AAAA,IACE;AAAA,yDAAC;AAAA,QACC,6DAAC;AAAA,UAAQ,MAAM;AAAA,UACb,6DAAC;AAAA,YAAM,SAAS;AAAA,aAAhB;AAAA;AAAA;AAAA;AAAA,iBAA2C;AAAA,WAD7C;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,SAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MAEA,mDAAC;AAAA,QAAI,WAAW;AAAA,QACd;AAAA,6DAAC;AAAA,YAAG,WAAW,MAAM;AAAA,YACnB,6DAAC;AAAA,cAAM,MAAM;AAAA,cACX,6DAAC;AAAA,gBAAM,SAAS;AAAA,iBAAhB;AAAA;AAAA;AAAA;AAAA,qBAAoD;AAAA,eADtD;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,aAHF;AAAA;AAAA;AAAA;AAAA,iBAIA;AAAA,UAEA,mDAAC;AAAA,YAAG,WAAW,CAAC,MAAM;AAAA,YACpB;AAAA,cACE,6DAAC;AAAA,gBACC,UAAU,CAAC,MAAM,KAAK,SAAS,CAAC;AAAA,gBAChC,WAAW;AAAA,gBAEX,6DAAC;AAAA,kBAAI,WAAW;AAAA,kBACd;AAAA,uEAAC;AAAA,sBACC,6DAAC;AAAA,wBAAE,WAAW;AAAA,wBACZ,6DAAC;AAAA,0BAAM,SAAS;AAAA,2BAAhB;AAAA;AAAA;AAAA;AAAA,+BAAgD;AAAA,yBADlD;AAAA;AAAA;AAAA;AAAA,6BAEA;AAAA,uBAHF;AAAA;AAAA;AAAA;AAAA,2BAIA;AAAA,oBAEA,mDAAC;AAAA,sBACC,6DAAC,kBAAU,OAAV;AAAA,wBACC;AAAA,6EAAC;AAAA,4BAAM,SAAS;AAAA,6BAAhB;AAAA;AAAA;AAAA;AAAA,iCAAuC;AAAA,0BAEvC,mDAAC,kBAAU,OAAV;AAAA,4BACC,MAAK;AAAA,4BACL,UAAQ;AAAA,4BACR,MAAK;AAAA,4BACL,aAAa;AAAA,6BAJf;AAAA;AAAA;AAAA;AAAA,iCAKA;AAAA;AAAA,yBARF;AAAA;AAAA;AAAA;AAAA,6BASA;AAAA,uBAVF;AAAA;AAAA;AAAA;AAAA,2BAWA;AAAA,oBAEA,mDAAC;AAAA,sBAAG,WAAW,MAAM;AAAA,sBACnB,6DAAC;AAAA,wBAAiB,OAAO,MAAM;AAAA,yBAA/B;AAAA;AAAA;AAAA;AAAA,6BAAgD;AAAA,uBADlD;AAAA;AAAA;AAAA;AAAA,2BAEA;AAAA,oBAEA,mDAAC;AAAA,sBACC,SAAS,MAAM;AAAA,sBACf,MAAK;AAAA,sBACL,MAAK;AAAA,sBACL,OAAK;AAAA,sBAEL,6DAAC;AAAA,wBAAM,SAAS;AAAA,yBAAhB;AAAA;AAAA;AAAA;AAAA,6BAA2C;AAAA,uBAN7C;AAAA;AAAA;AAAA;AAAA,2BAOA;AAAA;AAAA,mBA/BF;AAAA;AAAA;AAAA;AAAA,uBAgCA;AAAA,iBApCF;AAAA;AAAA;AAAA;AAAA,qBAqCA;AAAA,eAtCF;AAAA;AAAA;AAAA;AAAA,mBAuCA;AAAA,aAxCF;AAAA;AAAA;AAAA;AAAA,iBAyCA;AAAA,UAEA,mDAAC;AAAA,YAAI,WAAW;AAAA,YACd,6DAAC;AAAA,cAAE,WAAW;AAAA,cACZ;AAAA,mEAAC;AAAA,kBACC,6DAAC;AAAA,oBAAM,SAAS;AAAA,qBAAhB;AAAA;AAAA;AAAA;AAAA,yBAAkD;AAAA,mBADpD;AAAA;AAAA;AAAA;AAAA,uBAEA;AAAA,gBAEA,mDAAC;AAAA,kBACC,WACE;AAAA,kBAEF,IAAI,sBAAc,MAAM;AAAA,kBAExB,6DAAC;AAAA,oBAAM,SAAS;AAAA,qBAAhB;AAAA;AAAA;AAAA;AAAA,yBAA+B;AAAA,mBANjC;AAAA;AAAA;AAAA;AAAA,uBAOA;AAAA;AAAA,eAZF;AAAA;AAAA;AAAA;AAAA,mBAaA;AAAA,aAdF;AAAA;AAAA;AAAA;AAAA,iBAeA;AAAA;AAAA,SAjEF;AAAA;AAAA;AAAA;AAAA,aAkEA;AAAA;AAAA,KAzEF;AAAA;AAAA;AAAA;AAAA,SA0EA;AAEJ;AAEA,IAAO,yBAAQ;AAOf,SAAS,eAAe;AACtB,SAAO,GAAG,OAAO,SAAS,SAAS,sBAAc,MAAM;AACzD;",
  "names": []
}
