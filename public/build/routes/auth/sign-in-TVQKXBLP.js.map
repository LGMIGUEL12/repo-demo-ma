{
  "version": 3,
  "sources": ["../../../../app/routes/auth/sign-in.tsx", "../../../../app/core/generic/get-client-query-params.ts"],
  "sourcesContent": ["import { useCallback, useEffect, useMemo } from 'react';\nimport type { MetaFunction } from '@remix-run/node';\nimport { Link, useSubmit, useTransition } from '@remix-run/react';\n\nimport { Trans } from 'react-i18next';\nimport { useAuth } from 'reactfire';\n\nimport createServerSessionAction from '~/lib/server/auth/actions/create-server-session.action';\n\nimport Heading from '~/core/ui/Heading';\nimport If from '~/core/ui/If';\nimport isBrowser from '~/core/generic/is-browser';\n\nimport getClientQueryParams from '~/core/generic/get-client-query-params';\nimport useGetCsrfToken from '~/core/firebase/hooks/use-get-csrf-token';\n\nimport OAuthProviders from '~/components/auth/OAuthProviders';\nimport EmailLinkAuth from '~/components/auth/EmailLinkAuth';\nimport PhoneNumberSignInContainer from '~/components/auth/PhoneNumberSignInContainer';\nimport EmailPasswordSignInContainer from '~/components/auth/EmailPasswordSignInContainer';\n\nimport configuration from '~/configuration';\nimport PageLoadingIndicator from '~/core/ui/PageLoadingIndicator';\nimport AuthCatchBoundary from '~/components/auth/AuthCatchBoundary';\n\nexport const action = createServerSessionAction;\nexport const CatchBoundary = AuthCatchBoundary;\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Sign In',\n  };\n};\n\nconst SIGN_UP_PATH = configuration.paths.signUp;\nconst FORCE_SIGN_OUT_QUERY_PARAM = 'signOut';\n\nfunction SignInPage() {\n  const auth = useAuth();\n  const submit = useSubmit();\n  const getCsrfToken = useGetCsrfToken();\n  const transition = useTransition();\n\n  const onSignIn = useCallback(\n    (idToken: string) => {\n      const csrfToken = getCsrfToken() ?? '';\n      const payload = { idToken, csrfToken };\n\n      submit(payload, { method: 'post' });\n    },\n    [submit, getCsrfToken]\n  );\n\n  const shouldForceSignOut = useMemo(() => {\n    if (!isBrowser()) {\n      return false;\n    }\n\n    const params = getClientQueryParams();\n\n    return params.has(FORCE_SIGN_OUT_QUERY_PARAM);\n  }, []);\n\n  // force user signOut if the query parameter has been passed\n  useEffect(() => {\n    if (shouldForceSignOut) {\n      void auth.signOut();\n    }\n  }, [auth, shouldForceSignOut]);\n\n  if (transition.state !== 'idle') {\n    return <PageLoadingIndicator />;\n  }\n\n  return (\n    <>\n      <div>\n        <Heading type={4}>\n          <Trans i18nKey={'auth:signInHeading'} />\n        </Heading>\n      </div>\n\n      <OAuthProviders onSignIn={onSignIn} />\n\n      <If condition={configuration.auth.providers.emailPassword}>\n        <div>\n          <span className={'text-xs text-gray-400'}>\n            <Trans i18nKey={'auth:orContinueWithEmail'} />\n          </span>\n        </div>\n\n        <EmailPasswordSignInContainer onSignIn={onSignIn} />\n      </If>\n\n      <If condition={configuration.auth.providers.phoneNumber}>\n        <PhoneNumberSignInContainer onSignIn={onSignIn} />\n      </If>\n\n      <If condition={configuration.auth.providers.emailLink}>\n        <EmailLinkAuth />\n      </If>\n\n      <div className={'flex justify-center text-xs'}>\n        <p className={'flex space-x-1'}>\n          <span>\n            <Trans i18nKey={'auth:doNotHaveAccountYet'} />\n          </span>\n\n          <Link\n            className={'text-primary-800 hover:underline dark:text-primary-500'}\n            to={SIGN_UP_PATH}\n          >\n            <Trans i18nKey={'auth:signUp'} />\n          </Link>\n        </p>\n      </div>\n    </>\n  );\n}\n\nexport default SignInPage;\n", "function getClientQueryParams() {\n  return new URLSearchParams(window.location.search);\n}\n\nexport default getClientQueryParams;\n"],
  "mappings": "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",
  "names": []
}
