{
  "version": 3,
  "sources": ["../../../../../../app/routes/__app/settings/profile/index.tsx", "../../../../../../app/components/profile/UpdateProfileForm.tsx", "../../../../../../app/lib/profile/hooks/use-update-profile.ts"],
  "sourcesContent": ["import type { MetaFunction } from '@remix-run/node';\nimport { useCallback, useContext } from 'react';\nimport { Trans } from 'react-i18next';\nimport type { UserInfo } from 'firebase/auth';\nimport { useUser } from 'reactfire';\n\nimport FirebaseStorageProvider from '~/core/firebase/components/FirebaseStorageProvider';\nimport UserSessionContext from '~/core/session/contexts/user-session';\n\nimport UpdateProfileForm from '~/components/profile/UpdateProfileForm';\nimport SettingsTile from '~/components/settings/SettingsTile';\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Profile Settings',\n  };\n};\n\ntype ProfileData = Partial<UserInfo>;\n\nconst ProfileDetailsPage = () => {\n  const { userSession, setUserSession } = useContext(UserSessionContext);\n  const { data: user } = useUser();\n\n  const onUpdate = useCallback(\n    (data: ProfileData) => {\n      const authData = userSession?.auth;\n\n      if (authData) {\n        setUserSession({\n          auth: {\n            ...authData,\n            ...data,\n          },\n          data: userSession.data,\n        });\n      }\n    },\n    [setUserSession, userSession]\n  );\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <SettingsTile\n      heading={<Trans i18nKey={'profile:generalTab'} />}\n      subHeading={<Trans i18nKey={'profile:generalTabSubheading'} />}\n    >\n      <FirebaseStorageProvider>\n        <UpdateProfileForm user={user} onUpdate={onUpdate} />\n      </FirebaseStorageProvider>\n    </SettingsTile>\n  );\n};\n\nexport default ProfileDetailsPage;\n", "import { useCallback, useEffect, useState } from 'react';\nimport { useStorage } from 'reactfire';\nimport type { User } from 'firebase/auth';\nimport { Trans, useTranslation } from 'react-i18next';\nimport toaster from 'react-hot-toast';\nimport { useForm } from 'react-hook-form';\n\nimport type { FirebaseStorage } from 'firebase/storage';\n\nimport {\n  deleteObject,\n  getDownloadURL,\n  ref,\n  uploadBytes,\n} from 'firebase/storage';\n\nimport { PhoneAuthProvider, unlink } from 'firebase/auth';\n\nimport configuration from '~/configuration';\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\nimport useRequestState from '~/core/hooks/use-request-state';\n\nimport useUpdateProfile from '~/lib/profile/hooks/use-update-profile';\nimport LinkPhoneNumberModal from '~/components/profile/accounts/LinkPhoneNumberModal';\nimport AuthErrorMessage from '~/components/auth/AuthErrorMessage';\n\nimport Button from '~/core/ui/Button';\nimport TextField from '~/core/ui/TextField';\nimport ImageUploadInput from '~/core/ui/ImageUploadInput';\nimport If from '~/core/ui/If';\nimport Modal from '~/core/ui/Modal';\n\ninterface ProfileData {\n  photoURL?: string | null;\n  displayName?: string | null;\n  phoneNumber?: string | null;\n}\n\nfunction UpdateProfileForm({\n  user,\n  onUpdate,\n}: {\n  user: User;\n  onUpdate: (user: ProfileData) => void;\n}) {\n  const [updateProfile, { loading }] = useUpdateProfile();\n\n  const [displayUpdatePhoneNumber, setDisplayUpdatePhoneNumber] =\n    useState(false);\n\n  const storage = useStorage();\n  const { t } = useTranslation();\n\n  const currentPhotoURL = user?.photoURL ?? '';\n  const currentDisplayName = user?.displayName ?? '';\n  const currentPhoneNumber = user?.phoneNumber ?? '';\n\n  const { register, handleSubmit, reset } = useForm({\n    defaultValues: {\n      displayName: currentDisplayName,\n      photoURL: '',\n    },\n  });\n\n  const [avatarIsDirty, setAvatarIsDirty] = useState(false);\n\n  const onAvatarCleared = useCallback(() => {\n    setAvatarIsDirty(true);\n  }, []);\n\n  const onSubmit = async (displayName: string, photoFile: Maybe<File>) => {\n    const photoName = photoFile?.name;\n\n    const photoUrl = photoName\n      ? await uploadUserProfilePhoto(storage, photoFile, user.uid)\n      : currentPhotoURL;\n\n    const isAvatarRemoved = avatarIsDirty && !photoName;\n\n    const info = {\n      displayName,\n      photoURL: isAvatarRemoved ? '' : photoUrl,\n    };\n\n    // delete existing photo if different\n    if (isAvatarRemoved && currentPhotoURL) {\n      try {\n        await deleteObject(ref(storage, currentPhotoURL));\n      } catch (e) {\n        // old photo not found\n      }\n    }\n\n    const promise = updateProfile(info).then(() => {\n      onUpdate(info);\n    });\n\n    return toaster.promise(promise, {\n      success: t<string>(`profile:updateProfileSuccess`),\n      error: t<string>(`profile:updateProfileError`),\n      loading: t<string>(`profile:updateProfileLoading`),\n    });\n  };\n\n  const displayNameControl = register('displayName', {\n    value: currentDisplayName,\n  });\n\n  const photoURLControl = register('photoURL');\n\n  useEffect(() => {\n    reset({\n      displayName: currentDisplayName ?? '',\n      photoURL: currentPhotoURL ?? '',\n    });\n  }, [currentDisplayName, currentPhotoURL, reset]);\n\n  return (\n    <>\n      <form\n        data-cy={'update-profile-form'}\n        onSubmit={handleSubmit((value) => {\n          return onSubmit(value.displayName, getPhotoFile(value.photoURL));\n        })}\n      >\n        <div className={'flex flex-col space-y-4'}>\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:displayNameLabel'} />\n\n              <TextField.Input\n                innerRef={displayNameControl.ref}\n                onChange={displayNameControl.onChange}\n                onBlur={displayNameControl.onBlur}\n                name={displayNameControl.name}\n                data-cy={'profile-display-name'}\n                minLength={2}\n                placeholder={''}\n              />\n            </TextField.Label>\n          </TextField>\n\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:profilePictureLabel'} />\n\n              <ImageUploadInput\n                multiple={false}\n                onClear={onAvatarCleared}\n                name={photoURLControl.name}\n                image={currentPhotoURL}\n                onChange={photoURLControl.onChange}\n                onBlur={photoURLControl.onBlur}\n                innerRef={photoURLControl.ref}\n              >\n                <Trans i18nKey={'common:imageInputLabel'} />\n              </ImageUploadInput>\n            </TextField.Label>\n          </TextField>\n\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:emailLabel'} />\n\n              <TextField.Input disabled value={user.email ?? ''} />\n            </TextField.Label>\n\n            <If condition={user.email}>\n              <div>\n                <Button\n                  type={'button'}\n                  color={'transparent'}\n                  size={'small'}\n                  href={configuration.paths.settings.email}\n                >\n                  <span className={'text-xs font-normal'}>\n                    <Trans i18nKey={'profile:updateEmailSubmitLabel'} />\n                  </span>\n                </Button>\n              </div>\n            </If>\n\n            <If condition={!user.email}>\n              <div>\n                <Button\n                  type={'button'}\n                  color={'transparent'}\n                  size={'small'}\n                  href={configuration.paths.settings.authentication}\n                >\n                  <span className={'text-xs font-normal'}>\n                    <Trans i18nKey={'profile:addEmailAddress'} />\n                  </span>\n                </Button>\n              </div>\n            </If>\n          </TextField>\n\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:phoneNumberLabel'} />\n\n              <TextField.Input disabled value={currentPhoneNumber} />\n            </TextField.Label>\n\n            {/* Only show this if phone number is enabled */}\n            <If condition={configuration.auth.providers.phoneNumber}>\n              <div>\n                <If\n                  condition={!currentPhoneNumber}\n                  fallback={\n                    <RemovePhoneNumberButton\n                      user={user}\n                      onSuccess={() => {\n                        onUpdate({\n                          phoneNumber: null,\n                        });\n                      }}\n                    />\n                  }\n                >\n                  <AddPhoneNumberButton\n                    onClick={() => setDisplayUpdatePhoneNumber(true)}\n                  />\n                </If>\n              </div>\n            </If>\n          </TextField>\n\n          <div>\n            <Button className={'w-full md:w-auto'} loading={loading}>\n              <Trans i18nKey={'profile:updateProfileSubmitLabel'} />\n            </Button>\n          </div>\n        </div>\n      </form>\n\n      <If condition={displayUpdatePhoneNumber}>\n        <LinkPhoneNumberModal\n          isOpen={true}\n          setIsOpen={setDisplayUpdatePhoneNumber}\n          onSuccess={(phoneNumber) => {\n            onUpdate({\n              phoneNumber,\n            });\n          }}\n        />\n      </If>\n    </>\n  );\n}\n\n/**\n * @name getPhotoFile\n * @param value\n * @description Returns the file of the photo when submitted\n * It returns undefined when the user hasn't selected a file\n */\nfunction getPhotoFile(value: string | null | FileList) {\n  if (!value || typeof value === 'string') {\n    return;\n  }\n\n  return value.item(0) ?? undefined;\n}\n\nasync function uploadUserProfilePhoto(\n  storage: FirebaseStorage,\n  photoFile: File,\n  userId: string\n) {\n  const url = `/profiles/${userId}/${photoFile.name}`;\n  const bytes = await photoFile.arrayBuffer();\n  const fileRef = ref(storage, url);\n\n  await uploadBytes(fileRef, bytes);\n\n  return await getDownloadURL(fileRef);\n}\n\nfunction RemovePhoneNumberButton({\n  user,\n  onSuccess,\n}: React.PropsWithChildren<{\n  user: User;\n  onSuccess: () => void;\n}>) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const requestState = useRequestState();\n  const { t } = useTranslation();\n\n  const onUnlinkPhoneNumber = useCallback(() => {\n    const promise = unlink(user, PhoneAuthProvider.PROVIDER_ID)\n      .then(() => {\n        setIsModalOpen(false);\n        onSuccess();\n      })\n      .catch((error) => {\n        requestState.setError(error);\n\n        throw getFirebaseErrorCode(error);\n      });\n\n    requestState.setLoading(true);\n\n    return toaster.promise(promise, {\n      loading: t<string>(`profile:unlinkActionLoading`),\n      success: t<string>(`profile:unlinkActionSuccess`),\n      error: t<string>(`profile:unlinkActionError`),\n    });\n  }, [user, requestState, t, onSuccess]);\n\n  return (\n    <>\n      <Button\n        type={'button'}\n        color={'transparent'}\n        size={'small'}\n        onClick={() => setIsModalOpen(true)}\n      >\n        <span className={'text-xs font-normal'}>\n          <Trans i18nKey={'profile:removePhoneNumber'} />\n        </span>\n      </Button>\n\n      <Modal\n        heading={<Trans i18nKey={'profile:removePhoneNumber'} />}\n        isOpen={isModalOpen}\n        setIsOpen={setIsModalOpen}\n      >\n        <div className={'flex flex-col space-y-3'}>\n          <div>\n            <Trans i18nKey={'profile:confirmRemovePhoneNumberDescription'} />\n          </div>\n\n          <div>\n            <Trans i18nKey={'common:modalConfirmationQuestion'} />\n          </div>\n\n          <If condition={requestState.state.error}>\n            {(error) => <AuthErrorMessage error={error as string} />}\n          </If>\n\n          <Button\n            block\n            loading={requestState.state.loading}\n            color={'danger'}\n            onClick={onUnlinkPhoneNumber}\n          >\n            <Trans i18nKey={'profile:confirmRemovePhoneNumber'} />\n          </Button>\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nfunction AddPhoneNumberButton(\n  props: React.PropsWithChildren<{\n    onClick: EmptyCallback;\n  }>\n) {\n  return (\n    <Button\n      type={'button'}\n      color={'transparent'}\n      size={'small'}\n      onClick={props.onClick}\n    >\n      <span className={'text-xs font-normal'}>\n        <Trans i18nKey={'profile:addPhoneNumber'} />\n      </span>\n    </Button>\n  );\n}\n\nexport default UpdateProfileForm;\n", "import { useCallback } from 'react';\nimport { useUser } from 'reactfire';\nimport { updateProfile } from 'firebase/auth';\nimport useRequestState from '~/core/hooks/use-request-state';\n\ntype ProfileInfo = {\n  displayName: string | null;\n  photoURL: string | null;\n};\n\nexport default function useUpdateProfile() {\n  const { data: user } = useUser();\n  const { state, setLoading, setData, setError } = useRequestState<void>();\n\n  const updateProfileCallback = useCallback(\n    async (info: Maybe<ProfileInfo>) => {\n      if (info && user) {\n        setLoading(true);\n\n        try {\n          await updateProfile(user, info);\n\n          setData();\n        } catch (e) {\n          setError(`Could not update Profile`);\n\n          return Promise.reject(e);\n        }\n      }\n    },\n    [setData, setError, setLoading, user]\n  );\n\n  return [updateProfileCallback, state] as [\n    typeof updateProfileCallback,\n    typeof state\n  ];\n}\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "updateProfile"]
}
