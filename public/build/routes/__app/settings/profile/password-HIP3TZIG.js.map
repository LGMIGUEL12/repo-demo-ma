{
  "version": 3,
  "sources": ["../../../../../../app/routes/__app/settings/profile/password.tsx", "../../../../../../app/components/profile/UpdatePasswordForm.tsx"],
  "sourcesContent": ["import type { MetaFunction } from '@remix-run/node';\nimport { useUser } from 'reactfire';\n\nimport { Trans } from 'react-i18next';\nimport { EmailAuthProvider } from 'firebase/auth';\n\nimport Alert from '~/core/ui/Alert';\nimport If from '~/core/ui/If';\n\nimport UpdatePasswordForm from '~/components/profile/UpdatePasswordForm';\nimport SettingsTile from '~/components/settings/SettingsTile';\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Update Password',\n  };\n};\n\nconst ProfilePasswordSettings = () => {\n  const { data: user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  const canUpdatePassword = user.providerData.find(\n    (item) => item.providerId === EmailAuthProvider.PROVIDER_ID\n  );\n\n  return (\n    <SettingsTile\n      heading={<Trans i18nKey={'profile:passwordTab'} />}\n      subHeading={<Trans i18nKey={'profile:passwordTabSubheading'} />}\n    >\n      <If\n        condition={canUpdatePassword}\n        fallback={<WarnCannotUpdatePasswordAlert />}\n      >\n        <UpdatePasswordForm user={user} />\n      </If>\n    </SettingsTile>\n  );\n};\n\nfunction WarnCannotUpdatePasswordAlert() {\n  return (\n    <Alert type={'warn'}>\n      <Trans i18nKey={'profile:cannotUpdatePassword'} />\n    </Alert>\n  );\n}\n\nexport default ProfilePasswordSettings;\n", "import { useCallback, useEffect, useState } from 'react';\nimport type { MultiFactorError, User, UserCredential } from 'firebase/auth';\n\nimport {\n  EmailAuthProvider,\n  reauthenticateWithCredential,\n  updatePassword,\n} from 'firebase/auth';\n\nimport toast from 'react-hot-toast';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useForm } from 'react-hook-form';\n\nimport Button from '~/core/ui/Button';\nimport TextField from '~/core/ui/TextField';\nimport Alert from '~/core/ui/Alert';\nimport If from '~/core/ui/If';\n\nimport MultiFactorAuthChallengeModal from '~/components/auth/MultiFactorAuthChallengeModal';\nimport isMultiFactorError from '~/core/firebase/utils/is-multi-factor-error';\nimport useCreateServerSideSession from '~/core/hooks/use-create-server-side-session';\nimport useRequestState from '~/core/hooks/use-request-state';\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\n\nconst UpdatePasswordForm: React.FCC<{ user: User }> = ({ user }) => {\n  const { t } = useTranslation();\n  const [createServerSideSession] = useCreateServerSideSession();\n  const requestState = useRequestState<void>();\n\n  const [multiFactorAuthError, setMultiFactorAuthError] =\n    useState<Maybe<MultiFactorError>>();\n\n  const { register, handleSubmit, reset, getValues, formState } = useForm({\n    defaultValues: {\n      currentPassword: '',\n      newPassword: '',\n      repeatPassword: '',\n    },\n  });\n\n  const errors = formState.errors;\n\n  const currentPasswordControl = register('currentPassword', {\n    value: '',\n    required: true,\n    minLength: {\n      value: 6,\n      message: t<string>(`auth:passwordLengthError`),\n    },\n  });\n\n  const newPasswordControl = register('newPassword', {\n    value: '',\n    required: true,\n    minLength: {\n      value: 6,\n      message: t<string>(`auth:passwordLengthError`),\n    },\n    validate: (value) => {\n      // current password cannot be the same as the current one\n      if (value === getValues('currentPassword')) {\n        return t<string>(`profile:passwordNotChanged`);\n      }\n    },\n  });\n\n  const repeatPasswordControl = register('repeatPassword', {\n    value: '',\n    required: true,\n    minLength: {\n      value: 6,\n      message: t<string>(`profile:passwordLengthError`),\n    },\n    validate: (value) => {\n      // new password and repeat new password must match\n      if (value !== getValues('newPassword')) {\n        return t<string>(`profile:passwordNotMatching`);\n      }\n    },\n  });\n\n  const reauthenticateUser = useCallback(\n    (email: string, currentPassword: string) => {\n      const emailAuthCredential = EmailAuthProvider.credential(\n        email,\n        currentPassword\n      );\n\n      // first, we check if the password is correct\n      return reauthenticateWithCredential(user, emailAuthCredential).catch(\n        (error) => {\n          // if we hit a MFA error, it means we need to display an MFA modal\n          // and request the verification code sent by SMS\n          if (isMultiFactorError(error)) {\n            setMultiFactorAuthError(error);\n          } else {\n            // otherwise, it's a simple error, meaning the user wasn't able\n            // to authenticate\n            requestState.setError(getFirebaseErrorCode(error));\n            return Promise.reject(error);\n          }\n        }\n      );\n    },\n    [user, setMultiFactorAuthError, requestState]\n  );\n\n  const updatePasswordFromCredential = useCallback(\n    async (credential: UserCredential, newPassword: string) => {\n      const promise = new Promise<void>(async (resolve, reject) => {\n        try {\n          // then, we update the user password\n          await updatePassword(user, newPassword);\n\n          // finally, we re-create the server token\n          await createServerSideSession(credential.user);\n\n          // set request as successful, so we can reset the form\n          requestState.setData();\n\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n\n      return await toast.promise(promise, {\n        success: t<string>(`profile:updatePasswordSuccess`),\n        error: t<string>(`profile:updatePasswordError`),\n        loading: t<string>(`profile:updatePasswordLoading`),\n      });\n    },\n    [requestState, createServerSideSession, t, user]\n  );\n\n  const updatePasswordCallback = useCallback(\n    async (user: User, currentPassword: string, newPassword: string) => {\n      const email = user.email;\n\n      // if the user does not have an email assigned, it's possible they\n      // don't have an email/password factor linked, and the UI is out of sync\n      if (!email) {\n        return Promise.reject(t(`profile:cannotUpdatePassword`));\n      }\n\n      try {\n        // first, we check if the password is correct\n        const credential = await reauthenticateUser(email, currentPassword);\n\n        // when credential does not exist, it's possible we're in the MFA\n        // flow or an error was raised\n        // either way, we cannot continue without\n        if (!credential) {\n          return;\n        }\n\n        return await updatePasswordFromCredential(credential, newPassword);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n    [reauthenticateUser, updatePasswordFromCredential, t]\n  );\n\n  const onSubmit = useCallback(\n    async (params: { currentPassword: string; newPassword: string }) => {\n      const { newPassword, currentPassword } = params;\n\n      requestState.setLoading(true);\n\n      return updatePasswordCallback(user, currentPassword, newPassword).catch(\n        (e) => {\n          requestState.setError(t(`profile:updatePasswordError`));\n\n          return e;\n        }\n      );\n    },\n    [t, user, requestState, updatePasswordCallback]\n  );\n\n  // reset form on success\n  useEffect(() => {\n    if (requestState.state.success) {\n      reset();\n      requestState.resetState();\n    }\n  }, [reset, requestState]);\n\n  return (\n    <>\n      <form data-cy={'update-password-form'} onSubmit={handleSubmit(onSubmit)}>\n        <div className={'flex flex-col space-y-4'}>\n          <If condition={requestState.state.error}>\n            <div data-cy={'update-password-error-alert'}>\n              <Alert type={'error'}>{requestState.state.error as string}</Alert>\n            </div>\n          </If>\n\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:currentPassword'} />\n\n              <TextField.Input\n                data-cy={'current-password'}\n                required\n                type={'password'}\n                name={currentPasswordControl.name}\n                innerRef={currentPasswordControl.ref}\n                onChange={currentPasswordControl.onChange}\n                onBlur={currentPasswordControl.onBlur}\n              />\n            </TextField.Label>\n          </TextField>\n\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:newPassword'} />\n\n              <TextField.Input\n                data-cy={'new-password'}\n                required\n                type={'password'}\n                name={newPasswordControl.name}\n                innerRef={newPasswordControl.ref}\n                onChange={newPasswordControl.onChange}\n                onBlur={newPasswordControl.onBlur}\n              />\n\n              <TextField.Error\n                data-cy={'new-password-error'}\n                error={errors.newPassword?.message}\n              />\n            </TextField.Label>\n          </TextField>\n\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:repeatPassword'} />\n\n              <TextField.Input\n                data-cy={'repeat-new-password'}\n                required\n                type={'password'}\n                name={repeatPasswordControl.name}\n                innerRef={repeatPasswordControl.ref}\n                onChange={repeatPasswordControl.onChange}\n                onBlur={repeatPasswordControl.onBlur}\n              />\n\n              <TextField.Error\n                data-cy={'repeat-password-error'}\n                error={errors.repeatPassword?.message}\n              />\n            </TextField.Label>\n          </TextField>\n\n          <div>\n            <Button\n              className={'w-full md:w-auto'}\n              loading={requestState.state.loading}\n            >\n              <Trans i18nKey={'profile:updatePasswordSubmitLabel'} />\n            </Button>\n          </div>\n        </div>\n      </form>\n\n      <If condition={multiFactorAuthError}>\n        {(error) => (\n          <MultiFactorAuthChallengeModal\n            error={error}\n            isOpen={true}\n            setIsOpen={() => setMultiFactorAuthError(undefined)}\n            onSuccess={async (credential) => {\n              await updatePasswordFromCredential(\n                credential,\n                getValues('newPassword')\n              );\n\n              setMultiFactorAuthError(undefined);\n            }}\n          />\n        )}\n      </If>\n    </>\n  );\n};\n\nexport default UpdatePasswordForm;\n"],
  "mappings": "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",
  "names": ["user"]
}
