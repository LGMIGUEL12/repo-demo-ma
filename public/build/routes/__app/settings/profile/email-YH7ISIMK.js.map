{
  "version": 3,
  "sources": ["../../../../../../app/routes/__app/settings/profile/email.tsx", "../../../../../../app/components/profile/UpdateEmailForm.tsx"],
  "sourcesContent": ["import { EmailAuthProvider } from 'firebase/auth';\nimport { Trans } from 'react-i18next';\nimport type { MetaFunction } from '@remix-run/node';\nimport { useUser } from 'reactfire';\n\nimport If from '~/core/ui/If';\nimport Alert from '~/core/ui/Alert';\n\nimport UpdateEmailForm from '~/components/profile/UpdateEmailForm';\nimport SettingsTile from '~/components/settings/SettingsTile';\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Update Email',\n  };\n};\n\nconst ProfileEmailSettings = () => {\n  const { data: user } = useUser();\n\n  if (!user) {\n    return null;\n  }\n\n  const canUpdateEmail = user.providerData.find(\n    (item) => item.providerId === EmailAuthProvider.PROVIDER_ID\n  );\n\n  return (\n    <>\n      <SettingsTile\n        heading={<Trans i18nKey={'profile:emailTab'} />}\n        subHeading={<Trans i18nKey={'profile:emailTabTabSubheading'} />}\n      >\n        <If\n          condition={canUpdateEmail}\n          fallback={<WarnCannotUpdateEmailAlert />}\n        >\n          <UpdateEmailForm user={user} />\n        </If>\n      </SettingsTile>\n    </>\n  );\n};\n\nfunction WarnCannotUpdateEmailAlert() {\n  return (\n    <Alert type={'warn'}>\n      <Trans i18nKey={'profile:cannotUpdateEmail'} />\n    </Alert>\n  );\n}\n\nexport default ProfileEmailSettings;\n", "import type { MultiFactorError, User, UserCredential } from 'firebase/auth';\n\nimport {\n  EmailAuthProvider,\n  reauthenticateWithCredential,\n  updateEmail,\n} from 'firebase/auth';\n\nimport { useCallback, useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useForm } from 'react-hook-form';\n\nimport Button from '~/core/ui/Button';\nimport TextField from '~/core/ui/TextField';\nimport Alert from '~/core/ui/Alert';\nimport If from '~/core/ui/If';\n\nimport MultiFactorAuthChallengeModal from '~/components/auth/MultiFactorAuthChallengeModal';\nimport isMultiFactorError from '~/core/firebase/utils/is-multi-factor-error';\nimport useRequestState from '~/core/hooks/use-request-state';\nimport useCreateServerSideSession from '~/core/hooks/use-create-server-side-session';\n\nconst UpdateEmailForm: React.FC<{ user: User }> = ({ user }) => {\n  const [errorMessage, setErrorMessage] = useState<Maybe<string>>();\n  const { t } = useTranslation();\n  const [createServerSideSession] = useCreateServerSideSession();\n  const requestState = useRequestState<void>();\n\n  const [multiFactorAuthError, setMultiFactorAuthError] =\n    useState<Maybe<MultiFactorError>>();\n\n  const updateEmailWithCredential = useCallback(\n    (credential: UserCredential, email: string) => {\n      // then, we update the user's email address\n      const promise = updateEmail(credential.user, email)\n        .then(() => {\n          return createServerSideSession(credential.user);\n        })\n        .then(() => {\n          setErrorMessage(undefined);\n        })\n        .catch((e) => {\n          setErrorMessage(t<string>(`profile:updateEmailError`));\n\n          return e;\n        });\n\n      return toast.promise(promise, {\n        success: t<string>(`profile:updateEmailSuccess`),\n        loading: t<string>(`profile:updateEmailLoading`),\n        error: t<string>(`profile:updateEmailError`),\n      });\n    },\n    [createServerSideSession, setErrorMessage, t]\n  );\n\n  const currentEmail = user?.email as string;\n\n  const { register, handleSubmit, getValues, reset } = useForm({\n    defaultValues: {\n      email: '',\n      repeatEmail: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = useCallback(\n    async (params: {\n      email: string;\n      repeatEmail: string;\n      password: string;\n    }) => {\n      const { email, repeatEmail, password } = params;\n\n      if (email !== repeatEmail) {\n        const message = t(`profile:emailsNotMatching`);\n        setErrorMessage(message);\n\n        return;\n      }\n\n      if (email === currentEmail) {\n        const message = t(`profile:updatingSameEmail`);\n        setErrorMessage(message);\n\n        return;\n      }\n\n      requestState.setLoading(true);\n\n      // first, we need to verify that the password is correct\n      // by reauthenticating the user\n      const emailAuthCredential = EmailAuthProvider.credential(\n        currentEmail,\n        password\n      );\n\n      const promise = reauthenticateWithCredential(user, emailAuthCredential);\n\n      const credential = await promise.catch((error) => {\n        // if we hit a MFA error, it means we need to display an MFA modal\n        // and request the verification code sent by SMS\n        if (isMultiFactorError(error)) {\n          setMultiFactorAuthError(error);\n        } else {\n          // otherwise, it's a simple error, meaning the user wasn't able\n          // to authenticate\n          const message = t<string>(`profile:updateEmailError`);\n          setErrorMessage(message);\n        }\n\n        requestState.setError(error);\n      });\n\n      // if no valid credential was returned, it's that likely we hit an error\n      // and therefore we cannot proceed\n      if (!credential) {\n        return;\n      }\n\n      // otherwise, go ahead and update the email\n      return await updateEmailWithCredential(credential, email).finally(() => {\n        requestState.setData();\n      });\n    },\n    [currentEmail, t, requestState, updateEmailWithCredential, user]\n  );\n\n  const emailControl = register('email', {\n    value: '',\n    required: true,\n  });\n\n  const repeatEmailControl = register('repeatEmail', {\n    value: '',\n    required: true,\n  });\n\n  const passwordControl = register('password', {\n    value: '',\n    required: true,\n  });\n\n  // reset the form on success\n  useEffect(() => {\n    if (requestState.state.success) {\n      reset();\n      requestState.resetState();\n    }\n  }, [reset, requestState]);\n\n  return (\n    <>\n      <form data-cy={'update-email-form'} onSubmit={handleSubmit(onSubmit)}>\n        <div className={'flex flex-col space-y-4'}>\n          <If condition={errorMessage}>\n            <div data-cy={'update-email-error-alert'}>\n              <Alert type={'error'}>{errorMessage}</Alert>\n            </div>\n          </If>\n\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:newEmail'} />\n\n              <TextField.Input\n                data-cy={'profile-new-email-input'}\n                name={emailControl.name}\n                onChange={emailControl.onChange}\n                onBlur={emailControl.onBlur}\n                innerRef={emailControl.ref}\n                required\n                type={'email'}\n                placeholder={''}\n              />\n            </TextField.Label>\n          </TextField>\n\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:repeatEmail'} />\n\n              <TextField.Input\n                data-cy={'profile-repeat-email-input'}\n                name={repeatEmailControl.name}\n                onChange={repeatEmailControl.onChange}\n                onBlur={repeatEmailControl.onBlur}\n                innerRef={repeatEmailControl.ref}\n                required\n                type={'email'}\n              />\n            </TextField.Label>\n          </TextField>\n\n          <TextField>\n            <TextField.Label>\n              <Trans i18nKey={'profile:yourPassword'} />\n\n              <TextField.Input\n                data-cy={'profile-password-input'}\n                required\n                type={'password'}\n                name={passwordControl.name}\n                onChange={passwordControl.onChange}\n                onBlur={passwordControl.onBlur}\n                innerRef={passwordControl.ref}\n                placeholder={''}\n              />\n            </TextField.Label>\n          </TextField>\n\n          <div>\n            <Button\n              className={'w-full md:w-auto'}\n              loading={requestState.state.loading}\n            >\n              <Trans i18nKey={'profile:updateEmailSubmitLabel'} />\n            </Button>\n          </div>\n        </div>\n      </form>\n\n      <If condition={multiFactorAuthError}>\n        {(error) => (\n          <MultiFactorAuthChallengeModal\n            error={error}\n            isOpen={true}\n            setIsOpen={() => setMultiFactorAuthError(undefined)}\n            onSuccess={async (credential) => {\n              await updateEmailWithCredential(credential, getValues('email'));\n\n              setMultiFactorAuthError(undefined);\n              requestState.setData();\n            }}\n          />\n        )}\n      </If>\n    </>\n  );\n};\n\nexport default UpdateEmailForm;\n"],
  "mappings": "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",
  "names": []
}
