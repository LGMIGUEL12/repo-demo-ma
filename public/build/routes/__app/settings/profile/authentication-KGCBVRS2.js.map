{
  "version": 3,
  "sources": ["../../../../../../app/routes/__app/settings/profile/authentication.tsx", "../../../../../../app/components/profile/accounts/ConnectedAccountsContainer.tsx", "../../../../../../app/components/profile/accounts/LinkEmailPasswordModal.tsx", "../../../../../../app/core/firebase/utils/get-firebase-auth-provider-id.ts", "../../../../../../app/components/profile/mfa/MultiFactorAuthSetupContainer.tsx", "../../../../../../app/components/profile/mfa/EnrolMultiFactorAuthContainer.tsx", "../../../../../../app/components/profile/mfa/MultiFactorAuthPhoneNumberForm.tsx", "../../../../../../app/components/profile/mfa/VerificationCodeForm.tsx", "../../../../../../app/components/auth/ReauthenticationForm.tsx", "../../../../../../app/components/profile/mfa/EmailVerificationAlert.tsx", "../../../../../../app/components/profile/mfa/DisableMultiFactorButton.tsx", "../../../../../../app/lib/profile/hooks/use-disable-multi-factor-auth.ts", "../../../../../../app/components/auth/ReauthenticationModal.tsx"],
  "sourcesContent": ["import { useCallback, useMemo, useState } from 'react';\nimport { Trans } from 'react-i18next';\nimport type { MetaFunction } from '@remix-run/node';\n\nimport SettingsTile from '~/components/settings/SettingsTile';\nimport ConnectedAccountsContainer from '~/components/profile/accounts/ConnectedAccountsContainer';\nimport MultiFactorAuthSetupContainer from '~/components/profile/mfa/MultiFactorAuthSetupContainer';\nimport DisableMultiFactorButton from '~/components/profile/mfa/DisableMultiFactorButton';\nimport ReauthenticationModal from '~/components/auth/ReauthenticationModal';\n\nimport If from '~/core/ui/If';\nimport Alert from '~/core/ui/Alert';\nimport Heading from '~/core/ui/Heading';\n\nimport configuration from '~/configuration';\nimport useUserSession from '~/core/hooks/use-user-session';\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Authentication',\n  };\n};\n\nconst ProfileAuthenticationPage = () => {\n  const user = useUserSession();\n\n  const multiFactor = useMemo(\n    () => user?.auth?.multiFactor ?? [],\n    [user?.auth?.multiFactor]\n  );\n\n  const [shouldReauthenticate, setShouldReauthenticate] = useState(false);\n\n  const refreshPage = useCallback((success: boolean) => {\n    if (success) {\n      // this little trick forces the page to refresh\n      // it's quick & dirty way to provide UI feedback with the updated\n      // user data when enabling/disabling MFA\n      window.location.reload();\n    }\n  }, []);\n\n  return (\n    <>\n      <div className={'flex flex-col space-y-8'}>\n        <SettingsTile\n          heading={<Trans i18nKey={'profile:manageConnectedAccounts'} />}\n          subHeading={\n            <Trans i18nKey={'profile:manageConnectedAccountsSubheading'} />\n          }\n        >\n          <ConnectedAccountsContainer />\n        </SettingsTile>\n\n        {/* DISPLAY TILE IF APP SUPPORTS MFA */}\n        <If condition={configuration.auth.enableMultiFactorAuth}>\n          <SettingsTile\n            heading={<Trans i18nKey={'profile:multiFactorAuth'} />}\n            subHeading={<Trans i18nKey={'profile:multiFactorAuthSubheading'} />}\n          >\n            {/* MFA DISABLED BY USER: SHOW SETUP CONTAINER */}\n            <If condition={!multiFactor}>\n              <MultiFactorAuthSetupContainer onComplete={refreshPage} />\n            </If>\n\n            {/* MFA ENABLED BY USER: SHOW DISABLE BUTTON */}\n            <If condition={multiFactor}>\n              <div className={'flex flex-col space-y-2'}>\n                <MultiFactorSuccessAlert />\n\n                <DisableMultiFactorButton\n                  onDisable={async () => {\n                    // After the user Disables MFA, Firebase will revoke the\n                    // session cookie permissions. We must ask the user\n                    // to reauthenticate\n                    setShouldReauthenticate(true);\n                  }}\n                />\n              </div>\n            </If>\n\n            <If condition={shouldReauthenticate}>\n              <ReauthenticationModal\n                isOpen={true}\n                setIsOpen={async () => {\n                  setShouldReauthenticate(false);\n\n                  // After the user Disables MFA, Firebase will revoke the\n                  // session cookie permissions. Therefore, we need to\n                  // refresh the page only after reauthenticating\n                  await refreshPage(true);\n                }}\n              />\n            </If>\n          </SettingsTile>\n        </If>\n      </div>\n    </>\n  );\n};\n\nexport default ProfileAuthenticationPage;\n\nfunction MultiFactorSuccessAlert() {\n  return (\n    <Alert type={'success'} className={'flex flex-col space-y-2'}>\n      <Heading type={4}>\n        <Trans i18nKey={'profile:mfaEnabledSuccessTitle'} />\n      </Heading>\n\n      <p>\n        <Trans i18nKey={'profile:mfaEnabledSuccessDescription'} />\n      </p>\n    </Alert>\n  );\n}\n", "import {\n  Fragment,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport toaster from 'react-hot-toast';\nimport { useUser } from 'reactfire';\n\nimport type {\n  OAuthProvider,\n  MultiFactorError,\n  AuthProvider,\n} from 'firebase/auth';\n\nimport {\n  browserPopupRedirectResolver,\n  EmailAuthProvider,\n  linkWithPopup,\n  unlink,\n  PhoneAuthProvider,\n} from 'firebase/auth';\n\nimport { Trans, useTranslation } from 'react-i18next';\nimport { CheckCircleIcon } from '@heroicons/react/24/outline';\n\nimport type FirebaseAuthProviderClass from '~/core/firebase/types/auth-provider-class';\n\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\nimport Modal from '~/core/ui/Modal';\nimport Heading from '~/core/ui/Heading';\n\nimport MultiFactorAuthChallengeModal from '~/components/auth/MultiFactorAuthChallengeModal';\nimport isMultiFactorError from '~/core/firebase/utils/is-multi-factor-error';\n\nimport LinkPhoneNumberModal from '~/components/profile/accounts/LinkPhoneNumberModal';\nimport LinkEmailPasswordModal from '~/components/profile/accounts/LinkEmailPasswordModal';\nimport AuthProviderButton from '~/core/ui/AuthProviderButton';\nimport AuthProviderLogo from '~/core/ui/AuthProviderLogo';\nimport getFirebaseAuthProviderId from '~/core/firebase/utils/get-firebase-auth-provider-id';\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\n\nimport configuration from '~/configuration';\n\ntype GenericOAuthProvider = { new (): AuthProvider } & typeof OAuthProvider;\n\nconst ConnectedAccountsContainer = () => {\n  const { data: user } = useUser();\n  const { t } = useTranslation();\n  const supportedProviders = useSupportedAuthProviders();\n\n  const [linkWithPhoneNumber, setLinkWithPhoneNumber] = useState(false);\n  const [linkWithPassword, setLinkWithPassword] = useState(false);\n\n  const [displayUnlinkConfirmationModal, setDisplayUnlinkConfirmationModal] =\n    useState(false);\n\n  const [multiFactorAuthError, setMultiFactorAuthError] =\n    useState<Maybe<MultiFactorError>>();\n\n  const selectedUnlinkProvider = useRef<string>();\n\n  const providerData = useMemo(\n    () => user?.providerData ?? [],\n    [user?.providerData]\n  );\n\n  const [providers, setProviders] = useState(providerData);\n  const canUnlink = providers.length > 1;\n\n  const onUnlinkRequested = useCallback(\n    async (providerId: string) => {\n      if (!user || user.providerData.length < 2) {\n        return;\n      }\n\n      const promise = unlink(user, providerId);\n\n      await toaster.promise(promise, {\n        success: t<string>(`profile:unlinkActionSuccess`),\n        loading: t<string>(`profile:unlinkActionLoading`),\n        error: t<string>(`profile:unlinkActionError`),\n      });\n\n      setProviders((providers) =>\n        providers.filter((provider) => provider.providerId !== providerId)\n      );\n    },\n    [user, t]\n  );\n\n  const onLinkSuccess = useCallback(() => {\n    const message = t<string>(`profile:linkActionSuccess`);\n    return toaster.success(message);\n  }, [t]);\n\n  const onLinkError = useCallback(\n    (error?: Maybe<string>) => {\n      const message = error\n        ? t<string>(`auth:errors.${error}`)\n        : t<string>(`profile:linkActionError`);\n\n      toaster.error(message);\n    },\n    [t]\n  );\n\n  const connectedProviders = useMemo(() => {\n    return supportedProviders.filter((supportedProvider) => {\n      return providers.some(\n        (connectedProvider) =>\n          connectedProvider.providerId ===\n          getFirebaseAuthProviderId(supportedProvider)\n      );\n    });\n  }, [providers, supportedProviders]);\n\n  const notConnectedProviders = useMemo(() => {\n    return supportedProviders.filter((supportedProvider) => {\n      return !connectedProviders.includes(supportedProvider);\n    });\n  }, [connectedProviders, supportedProviders]);\n\n  const linkPopupAuthProvider = useCallback(\n    async (AuthProviderClass: GenericOAuthProvider) => {\n      if (!user) {\n        return null;\n      }\n\n      try {\n        const authCredential = await linkWithPopup(\n          user,\n          new AuthProviderClass(),\n          browserPopupRedirectResolver\n        );\n\n        const oAuthCredential =\n          AuthProviderClass.credentialFromResult(authCredential);\n\n        return oAuthCredential ? onLinkSuccess() : onLinkError();\n      } catch (error) {\n        if (isMultiFactorError(error)) {\n          setMultiFactorAuthError(error);\n        } else {\n          onLinkError(getFirebaseErrorCode(error));\n        }\n      }\n    },\n    [onLinkError, onLinkSuccess, user]\n  );\n\n  const onLinkRequested = useCallback(\n    async (provider: FirebaseAuthProviderClass) => {\n      if (!user) {\n        return null;\n      }\n\n      const providerId = getFirebaseAuthProviderId(provider);\n\n      switch (providerId) {\n        case EmailAuthProvider.PROVIDER_ID:\n          return setLinkWithPassword(true);\n\n        case PhoneAuthProvider.PROVIDER_ID:\n          return setLinkWithPhoneNumber(true);\n\n        default:\n          return linkPopupAuthProvider(provider as GenericOAuthProvider);\n      }\n    },\n    [linkPopupAuthProvider, user]\n  );\n\n  useEffect(() => {\n    setProviders(providerData);\n  }, [providerData]);\n\n  return (\n    <div className={'flex flex-col space-y-6'}>\n      <div>\n        <div className={'mb-2'}>\n          <Heading type={4}>\n            <Trans i18nKey={'profile:connectedAccounts'} />\n          </Heading>\n\n          <div>\n            <span className={'text-gray-500 dark:text-gray-400'}>\n              <Trans i18nKey={'profile:connectedAccountsSubheading'} />\n            </span>\n          </div>\n        </div>\n\n        <div\n          className={\n            'mt-4 flex flex-col divide-y divide-gray-50 dark:divide-black-400'\n          }\n        >\n          {connectedProviders.map((provider, index) => {\n            const providerId = getFirebaseAuthProviderId(provider);\n\n            return (\n              <Fragment key={index}>\n                <UnlinkAuthProviderButton\n                  canUnlink={canUnlink}\n                  providerId={providerId}\n                  onUnlink={() => {\n                    if (!canUnlink) {\n                      return;\n                    }\n\n                    selectedUnlinkProvider.current = providerId;\n                    setDisplayUnlinkConfirmationModal(true);\n                  }}\n                />\n              </Fragment>\n            );\n          })}\n        </div>\n      </div>\n\n      <If condition={notConnectedProviders.length}>\n        <div>\n          <div className={'mb-4'}>\n            <Heading type={4}>\n              <Trans i18nKey={'profile:availableProviders'} />\n            </Heading>\n\n            <p>\n              <span className={'text-gray-500 dark:text-gray-400'}>\n                <Trans i18nKey={'profile:availableProvidersSubheading'} />\n              </span>\n            </p>\n          </div>\n\n          <div className={'flex flex-col space-y-1.5'}>\n            {notConnectedProviders.map((provider, index) => {\n              return (\n                <div key={index}>\n                  <ConnectAuthProviderButton\n                    provider={provider}\n                    onLink={() => onLinkRequested(provider)}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </If>\n\n      <If condition={multiFactorAuthError}>\n        {(error) => (\n          <MultiFactorAuthChallengeModal\n            error={error}\n            isOpen={true}\n            setIsOpen={() => setMultiFactorAuthError(undefined)}\n            onSuccess={async () => {\n              return;\n            }}\n          />\n        )}\n      </If>\n\n      <If condition={linkWithPassword}>\n        <LinkEmailPasswordModal isOpen={true} setIsOpen={setLinkWithPassword} />\n      </If>\n\n      <If condition={linkWithPhoneNumber}>\n        {() => (\n          <LinkPhoneNumberModal\n            isOpen={true}\n            setIsOpen={setLinkWithPhoneNumber}\n          />\n        )}\n      </If>\n\n      <ConfirmUnlinkAccountModal\n        isOpen={displayUnlinkConfirmationModal}\n        setIsOpen={(isOpen) => {\n          if (!isOpen) {\n            selectedUnlinkProvider.current = undefined;\n          }\n\n          setDisplayUnlinkConfirmationModal(isOpen);\n        }}\n        onUnlink={async () => {\n          if (selectedUnlinkProvider.current) {\n            await onUnlinkRequested(selectedUnlinkProvider.current);\n\n            setDisplayUnlinkConfirmationModal(false);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nfunction ConnectAuthProviderButton({\n  onLink,\n  provider,\n}: React.PropsWithChildren<{\n  provider: FirebaseAuthProviderClass;\n  onLink: EmptyCallback;\n}>) {\n  const providerId = getFirebaseAuthProviderId(provider);\n  const providerName = capitalize(providerId);\n\n  return (\n    <div className={'max-w-md'}>\n      <AuthProviderButton\n        data-cy={'link-provider-button'}\n        data-provider={providerId}\n        providerId={providerId}\n        onClick={onLink}\n      >\n        <Trans\n          i18nKey={`profile:connectWithProvider`}\n          values={{ provider: providerName }}\n        />\n      </AuthProviderButton>\n    </div>\n  );\n}\n\nfunction UnlinkAuthProviderButton({\n  providerId,\n  canUnlink,\n  onUnlink,\n}: React.PropsWithChildren<{\n  providerId: string;\n  canUnlink: boolean;\n  onUnlink: EmptyCallback;\n}>) {\n  const provider = capitalize(providerId);\n\n  return (\n    <div className={'flex items-center justify-between py-1'}>\n      <div className={'flex items-center space-x-6'}>\n        <span className={'flex items-center space-x-4 font-medium'}>\n          <AuthProviderLogo firebaseProviderId={providerId} />\n\n          <span\n            className={\n              'flex items-center space-x-2 text-sm font-semibold' +\n              ' text-green-600 dark:text-green-500'\n            }\n          >\n            <span>\n              <Trans\n                i18nKey={`profile:connectedWithProvider`}\n                values={{ provider }}\n              />\n            </span>\n\n            <CheckCircleIcon className={'h-5'} />\n          </span>\n        </span>\n      </div>\n\n      <If condition={canUnlink}>\n        <Button\n          data-cy={'unlink-provider-button'}\n          data-provider={providerId}\n          className={'font-medium'}\n          color={'danger'}\n          variant={'flat'}\n          onClick={onUnlink}\n        >\n          <span>\n            <Trans i18nKey={`profile:unlinkActionLabel`} />\n          </span>\n        </Button>\n      </If>\n    </div>\n  );\n}\n\nfunction ConfirmUnlinkAccountModal({\n  isOpen,\n  setIsOpen,\n  onUnlink,\n}: React.PropsWithChildren<{\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  onUnlink: EmptyCallback;\n}>) {\n  return (\n    <Modal\n      heading={<Trans i18nKey={'profile:unlinkAccountModalHeading'} />}\n      isOpen={isOpen}\n      setIsOpen={setIsOpen}\n    >\n      <div className={'flex flex-col space-y-4'}>\n        <div>\n          <p>\n            <Trans i18nKey={'profile:confirmUnlink'} />\n          </p>\n\n          <p>\n            <Trans i18nKey={'common:modalConfirmationQuestion'} />\n          </p>\n        </div>\n\n        <Button\n          data-cy={'confirm-unlink-provider-button'}\n          block\n          color={'danger'}\n          onClick={onUnlink}\n        >\n          <Trans i18nKey={'profile:confirmUnlinkSubmitLabel'} />\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction useSupportedAuthProviders() {\n  return useMemo(() => {\n    const providers = configuration.auth.providers;\n\n    return [\n      ...(providers.phoneNumber ? [PhoneAuthProvider] : []),\n      ...(providers.emailPassword ? [EmailAuthProvider] : []),\n      ...(providers.oAuth ?? []),\n    ];\n  }, []);\n}\n\nfunction capitalize(providerId: string) {\n  return providerId.slice(0, 1).toUpperCase() + providerId.slice(1);\n}\n\nexport default ConnectedAccountsContainer;\n", "import { useAuth } from 'reactfire';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport type { MultiFactorError } from 'firebase/auth';\nimport {\n  EmailAuthProvider,\n  linkWithCredential,\n  signInWithCredential,\n} from 'firebase/auth';\n\nimport { useForm } from 'react-hook-form';\nimport toaster from 'react-hot-toast';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport isMultiFactorError from '~/core/firebase/utils/is-multi-factor-error';\nimport useCreateServerSideSession from '~/core/hooks/use-create-server-side-session';\nimport useRequestState from '~/core/hooks/use-request-state';\n\nimport AuthErrorMessage from '~/components/auth/AuthErrorMessage';\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\nimport MultiFactorAuthChallengeModal from '~/components/auth/MultiFactorAuthChallengeModal';\n\nimport Modal from '~/core/ui/Modal';\nimport TextField from '~/core/ui/TextField';\nimport If from '~/core/ui/If';\nimport Button from '~/core/ui/Button';\n\nfunction LinkEmailPasswordModal({\n  isOpen,\n  setIsOpen,\n}: React.PropsWithChildren<{\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n}>) {\n  const { t } = useTranslation();\n  const { state, setLoading, setError, resetState } = useRequestState<void>();\n  const auth = useAuth();\n  const [sessionRequest] = useCreateServerSideSession();\n\n  const [multiFactorAuthError, setMultiFactorAuthError] =\n    useState<Maybe<MultiFactorError>>();\n\n  const user = auth.currentUser;\n\n  const { register, handleSubmit, watch, reset, formState } = useForm({\n    defaultValues: {\n      email: '',\n      password: '',\n      repeatPassword: '',\n    },\n  });\n\n  const errors = formState.errors;\n  const emailControl = register('email', { required: true });\n\n  const passwordControl = register('password', {\n    required: true,\n    minLength: {\n      value: 6,\n      message: t<string>(`auth:passwordLengthError`),\n    },\n  });\n\n  const passwordValue = watch(`password`);\n\n  const repeatPasswordControl = register('repeatPassword', {\n    required: true,\n    minLength: {\n      value: 6,\n      message: t<string>(`auth:passwordLengthError`),\n    },\n    validate: (value) => {\n      if (value !== passwordValue) {\n        return t<string>(`auth:passwordsDoNotMatch`);\n      }\n\n      return true;\n    },\n  });\n\n  const onSubmit = useCallback(\n    async (params: { email: string; password: string }) => {\n      if (state.loading || !user) {\n        return;\n      }\n\n      setLoading(true);\n\n      const authCredential = EmailAuthProvider.credential(\n        params.email,\n        params.password\n      );\n\n      const promise = new Promise<void>((resolve, reject) => {\n        return linkWithCredential(user, authCredential)\n          .then(async () => {\n            const newCredential = await signInWithCredential(\n              auth,\n              authCredential\n            );\n\n            // we need to re-create the server-side session, because for\n            // some reason Firebase expires the session cookie after linking\n            // a password\n            await sessionRequest(newCredential.user);\n\n            resolve();\n          })\n          .catch((error) => {\n            if (isMultiFactorError(error)) {\n              setMultiFactorAuthError(error);\n              setIsOpen(false);\n              toaster.dismiss();\n            } else {\n              setError(error);\n\n              return reject();\n            }\n          });\n      });\n\n      await toaster.promise(promise, {\n        success: t<string>(`profile:linkActionSuccess`),\n        error: t<string>(`profile:linkActionError`),\n        loading: t<string>(`profile:linkActionLoading`),\n      });\n\n      resetState();\n      setIsOpen(false);\n      reset();\n    },\n    [\n      state.loading,\n      setLoading,\n      t,\n      resetState,\n      setIsOpen,\n      reset,\n      user,\n      auth,\n      sessionRequest,\n      setError,\n    ]\n  );\n\n  useEffect(() => {\n    if (!isOpen) {\n      reset();\n    }\n\n    return () => {\n      reset();\n    };\n  }, [reset, isOpen]);\n\n  return (\n    <>\n      <Modal heading={`Link Password`} isOpen={isOpen} setIsOpen={setIsOpen}>\n        <form className={'w-full'} onSubmit={handleSubmit(onSubmit)}>\n          <div className={'flex-col space-y-2.5'}>\n            <TextField>\n              <TextField.Label>\n                <Trans i18nKey={'common:emailAddress'} />\n\n                <TextField.Input\n                  data-cy={'email-input'}\n                  required\n                  type=\"email\"\n                  placeholder={'your@email.com'}\n                  innerRef={emailControl.ref}\n                  onBlur={emailControl.onBlur}\n                  onChange={emailControl.onChange}\n                  name={emailControl.name}\n                />\n              </TextField.Label>\n            </TextField>\n\n            <TextField>\n              <TextField.Label>\n                <Trans i18nKey={'common:password'} />\n\n                <TextField.Input\n                  data-cy={'password-input'}\n                  required\n                  type=\"password\"\n                  placeholder={''}\n                  innerRef={passwordControl.ref}\n                  onBlur={passwordControl.onBlur}\n                  onChange={passwordControl.onChange}\n                  name={passwordControl.name}\n                />\n\n                <TextField.Hint>\n                  <Trans i18nKey={'auth:passwordHint'} />\n                </TextField.Hint>\n\n                <TextField.Error error={errors.password?.message} />\n              </TextField.Label>\n            </TextField>\n\n            <TextField>\n              <TextField.Label>\n                <Trans i18nKey={'auth:repeatPassword'} />\n\n                <TextField.Input\n                  data-cy={'repeat-password-input'}\n                  required\n                  type=\"password\"\n                  placeholder={''}\n                  innerRef={repeatPasswordControl.ref}\n                  onBlur={repeatPasswordControl.onBlur}\n                  onChange={repeatPasswordControl.onChange}\n                  name={repeatPasswordControl.name}\n                />\n              </TextField.Label>\n\n              <TextField.Error error={errors.repeatPassword?.message} />\n            </TextField>\n\n            <If condition={state.error}>\n              {(error) => (\n                <AuthErrorMessage error={getFirebaseErrorCode(error)} />\n              )}\n            </If>\n\n            <div>\n              <Button\n                size={'large'}\n                data-cy={'auth-submit-button'}\n                className={'w-full'}\n                color={'primary'}\n                type=\"submit\"\n                loading={state.loading}\n              >\n                <If\n                  condition={state.loading}\n                  fallback={<Trans i18nKey={'profile:linkAccount'} />}\n                >\n                  <Trans i18nKey={'profile:linkActionLoading'} />\n                </If>\n              </Button>\n            </div>\n          </div>\n        </form>\n      </Modal>\n\n      <If condition={multiFactorAuthError}>\n        {(error) => (\n          <MultiFactorAuthChallengeModal\n            error={error}\n            isOpen={true}\n            setIsOpen={() => setMultiFactorAuthError(undefined)}\n            onSuccess={async (credential) => {\n              await sessionRequest(credential.user);\n\n              setMultiFactorAuthError(undefined);\n              reset();\n              resetState();\n            }}\n          />\n        )}\n      </If>\n    </>\n  );\n}\n\nexport default LinkEmailPasswordModal;\n", "import type FirebaseAuthProviderClass from '~/core/firebase/types/auth-provider-class';\nimport type { EmailAuthProvider, PhoneAuthProvider } from 'firebase/auth';\n\nconst cache = new WeakMap();\n\n/**\n * @name getFirebaseAuthProviderId\n * @param AuthProviderClass\n */\nfunction getFirebaseAuthProviderId(\n  AuthProviderClass:\n    | FirebaseAuthProviderClass\n    | typeof EmailAuthProvider\n    | typeof PhoneAuthProvider\n) {\n  if (cache.has(AuthProviderClass)) {\n    return cache.get(AuthProviderClass);\n  }\n\n  // if it's a default Firebase Auth class\n  // we have already the ID defined as PROVIDER_ID\n  if ('PROVIDER_ID' in AuthProviderClass) {\n    const id = AuthProviderClass.PROVIDER_ID as string;\n\n    cache.set(AuthProviderClass, id);\n\n    return id;\n  }\n\n  // if it's a custom AuthProvider, we need to get the ID by instantiating it\n  const id = new AuthProviderClass().providerId;\n\n  cache.set(AuthProviderClass, id);\n\n  return id;\n}\n\nexport default getFirebaseAuthProviderId;\n", "import { Trans } from 'react-i18next';\nimport { ShieldCheckIcon } from '@heroicons/react/24/outline';\nimport { useState } from 'react';\nimport { useUser } from 'reactfire';\n\nimport Alert from '~/core/ui/Alert';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\n\nimport EnrolMultiFactorAuthContainer from '~/components/profile/mfa/EnrolMultiFactorAuthContainer';\nimport EmailVerificationAlert from '~/components/profile/mfa/EmailVerificationAlert';\n\nconst MultiFactorAuthSetupContainer: React.FC<{\n  onComplete: (success: boolean) => void;\n}> = ({ onComplete }) => {\n  const [enableMFAVisible, setEnableMFAVisible] = useState(false);\n  const { data: user, status } = useUser();\n\n  if (!user || status === `loading`) {\n    return null;\n  }\n\n  const isEmailVerified = user.emailVerified;\n\n  return (\n    <>\n      <div className={'flex flex-col space-y-6'}>\n        <Alert type={'info'}>\n          <Alert.Heading>\n            <Trans i18nKey={'profile:multiFactorAuthHeading'} />\n          </Alert.Heading>\n\n          <p>\n            <Trans i18nKey={'profile:multiFactorAuthDescription'} />\n          </p>\n        </Alert>\n\n        <If condition={isEmailVerified}>\n          <div>\n            <EnableMFAButton onClick={() => setEnableMFAVisible(true)} />\n          </div>\n        </If>\n\n        <If\n          condition={isEmailVerified}\n          fallback={<EmailVerificationAlert user={user} />}\n        >\n          <If condition={enableMFAVisible}>\n            <EnrolMultiFactorAuthContainer\n              onComplete={(success) => {\n                onComplete(success);\n                setEnableMFAVisible(false);\n              }}\n            />\n          </If>\n        </If>\n      </div>\n    </>\n  );\n};\n\nfunction EnableMFAButton(\n  props: React.PropsWithChildren<{ onClick: EmptyCallback }>\n) {\n  return (\n    <Button color={'primary'} onClick={props.onClick}>\n      <span className={'flex space-x-2'}>\n        <ShieldCheckIcon className={'h-5'} />\n\n        <span>\n          <Trans i18nKey={'profile:setupMfaButtonLabel'} />\n        </span>\n      </span>\n    </Button>\n  );\n}\n\nexport default MultiFactorAuthSetupContainer;\n", "import { useCallback, useRef, useState } from 'react';\nimport { Trans } from 'react-i18next';\nimport { useAuth } from 'reactfire';\n\nimport Modal from '~/core/ui/Modal';\nimport If from '~/core/ui/If';\n\nimport MultiFactorAuthPhoneNumberForm from '~/components/profile/mfa/MultiFactorAuthPhoneNumberForm';\nimport MultiFactorAuthVerificationCodeForm from '~/components/profile/mfa/VerificationCodeForm';\nimport ReauthenticationForm from '~/components/auth/ReauthenticationForm';\nimport useCreateServerSideSession from '~/core/hooks/use-create-server-side-session';\n\nenum Status {\n  Reauthenticate,\n  PhoneNumberForm,\n  VerificationCodeForm,\n}\n\nconst EnrolMultiFactorAuthContainer: React.FC<{\n  onComplete: (success: boolean) => void;\n}> = ({ onComplete }) => {\n  const auth = useAuth();\n  const [createServerSideSession] = useCreateServerSideSession();\n  const [status, setStatus] = useState<Status>(Status.PhoneNumberForm);\n  const verificationIdRef = useRef<string>();\n\n  const onSuccessfulEnrollment = useCallback(async () => {\n    const user = await auth.currentUser;\n\n    if (user) {\n      await createServerSideSession(user);\n    }\n  }, [createServerSideSession, auth]);\n\n  return (\n    <Modal\n      heading={<Trans i18nKey={'profile:multiFactorAuth'} />}\n      isOpen={true}\n      setIsOpen={() => onComplete(false)}\n    >\n      <If condition={status === Status.Reauthenticate}>\n        <div className={'my-4'}>\n          <p>\n            <Trans i18nKey={'auth:reauthenticateDescription'} />\n          </p>\n        </div>\n\n        <ReauthenticationForm\n          onSuccess={() => setStatus(Status.PhoneNumberForm)}\n        />\n      </If>\n\n      <If condition={status === Status.PhoneNumberForm}>\n        <MultiFactorAuthPhoneNumberForm\n          onReauthenticateError={() => {\n            setStatus(Status.Reauthenticate);\n          }}\n          onComplete={(verificationId) => {\n            verificationIdRef.current = verificationId;\n            setStatus(Status.VerificationCodeForm);\n          }}\n        />\n      </If>\n\n      <If condition={status === Status.VerificationCodeForm}>\n        <If condition={verificationIdRef.current}>\n          {(verificationId) => {\n            return (\n              <MultiFactorAuthVerificationCodeForm\n                verificationId={verificationId}\n                onComplete={async (isSuccessful) => {\n                  if (isSuccessful) {\n                    await onSuccessfulEnrollment();\n                  }\n\n                  onComplete(isSuccessful);\n                }}\n              />\n            );\n          }}\n        </If>\n      </If>\n    </Modal>\n  );\n};\n\nexport default EnrolMultiFactorAuthContainer;\n", "import type { FormEventHandler } from 'react';\nimport { useCallback } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { multiFactor, PhoneAuthProvider } from 'firebase/auth';\nimport type { FirebaseError } from 'firebase/app';\n\nimport toaster from 'react-hot-toast';\nimport { useAuth } from 'reactfire';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\n\nimport AuthErrorMessage from '~/components/auth/AuthErrorMessage';\nimport useRequestState from '~/core/hooks/use-request-state';\nimport useRecaptchaVerifier from '~/core/firebase/hooks/use-recaptcha-verifier';\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\n\nconst buttonId = `multi-factor-auth-phone-number-button`;\n\nconst MultiFactorAuthPhoneNumberForm: React.FC<{\n  onComplete: (verificationId: string) => void;\n  onReauthenticateError: () => void;\n}> = ({ onComplete, onReauthenticateError }) => {\n  const auth = useAuth();\n  const { t } = useTranslation();\n  const requestState = useRequestState<void>();\n  const getRecaptchaVerifier = useRecaptchaVerifier(buttonId);\n\n  const onVerifyPhoneNumber = useCallback(\n    async (phoneNumber: string) => {\n      const user = auth.currentUser;\n\n      if (!user || requestState.state.loading) {\n        return;\n      }\n\n      requestState.setLoading(true);\n\n      const multiFactorSession = await multiFactor(user).getSession();\n\n      const phoneInfoOptions = {\n        phoneNumber: phoneNumber,\n        session: multiFactorSession,\n      };\n\n      const phoneAuthProvider = new PhoneAuthProvider(auth);\n      const recaptchaVerifier = await getRecaptchaVerifier();\n\n      const promise = phoneAuthProvider\n        .verifyPhoneNumber(phoneInfoOptions, recaptchaVerifier)\n        .then((verificationId) => {\n          requestState.setData();\n\n          onComplete(verificationId);\n\n          return t<string>(`profile:verifyPhoneNumberSuccess`);\n        })\n        .catch((error: FirebaseError) => {\n          // when we receive a reauthentication error\n          // we simply ask the container to change form rather than displaying\n          // an actual error\n          if (isNeedsReauthenticationError(error)) {\n            onReauthenticateError();\n\n            return t<string>(`auth:auth/requires-recent-login`);\n          } else {\n            // otherwise, it's a real error and we display it\n            requestState.setError(error);\n\n            throw error.code;\n          }\n        });\n\n      await toaster.promise(promise, {\n        success: (value) => value,\n        error: t<string>(`profile:verifyPhoneNumberError`),\n        loading: t<string>(`profile:verifyPhoneNumberLoading`),\n      });\n    },\n    [\n      auth,\n      requestState,\n      getRecaptchaVerifier,\n      t,\n      onComplete,\n      onReauthenticateError,\n    ]\n  );\n\n  const onSubmit: FormEventHandler<HTMLFormElement> = useCallback(\n    async (e) => {\n      e.preventDefault();\n\n      const data = new FormData(e.currentTarget);\n      const phoneNumber = data.get('phoneNumber') as string;\n\n      return onVerifyPhoneNumber(phoneNumber);\n    },\n    [onVerifyPhoneNumber]\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className={'mb-2.5 text-gray-400 dark:text-gray-400'}>\n        <Trans i18nKey={'profile:verifyPhoneNumberDescription'} />\n      </div>\n\n      <div className={'flex flex-col space-y-2'}>\n        <TextField.Label>\n          <Trans i18nKey={'profile:phoneNumberLabel'} />\n\n          <TextField.Input\n            required\n            pattern={'^\\\\+?[1-9]\\\\d{1,14}$'}\n            name={'phoneNumber'}\n            type={'tel'}\n            placeholder={'Ex. +919367788755'}\n            disabled={requestState.state.loading}\n          />\n        </TextField.Label>\n\n        <If condition={requestState.state.error}>\n          <AuthErrorMessage\n            error={getFirebaseErrorCode(requestState.state.error)}\n          />\n        </If>\n\n        <Button\n          id={buttonId}\n          block\n          type={'submit'}\n          loading={requestState.state.loading}\n        >\n          <Trans i18nKey={'profile:verifyPhoneNumberSubmitLabel'} />\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nfunction isNeedsReauthenticationError(error: FirebaseError) {\n  return error.code === 'auth/requires-recent-login';\n}\n\nexport default MultiFactorAuthPhoneNumberForm;\n", "import type { FormEventHandler } from 'react';\nimport { useCallback } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport {\n  multiFactor,\n  PhoneAuthProvider,\n  PhoneMultiFactorGenerator,\n} from 'firebase/auth';\n\nimport toaster from 'react-hot-toast';\nimport { useAuth } from 'reactfire';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport useRequestState from '~/core/hooks/use-request-state';\n\nconst MultiFactorAuthVerificationCodeForm: React.FC<{\n  verificationId: string;\n  onComplete: (success: boolean) => void;\n}> = ({ onComplete, verificationId }) => {\n  const auth = useAuth();\n  const { t } = useTranslation();\n  const requestState = useRequestState<void>();\n  const user = auth.currentUser;\n\n  const onEnrolRequested = useCallback(\n    async (params: { verificationCode: string; authFactorName: string }) => {\n      if (!user || requestState.state.loading) {\n        return;\n      }\n\n      requestState.setLoading(true);\n\n      const { verificationCode, authFactorName } = params;\n\n      const phoneAuthCredential = PhoneAuthProvider.credential(\n        verificationId,\n        verificationCode\n      );\n\n      const multiFactorAssertion =\n        PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\n\n      const displayName = authFactorName ?? null;\n\n      const promise = multiFactor(user)\n        .enroll(multiFactorAssertion, displayName)\n        .then(() => {\n          const success = true;\n          onComplete(success);\n        })\n        .catch((error) => {\n          requestState.setError(error);\n\n          throw error.code;\n        });\n\n      return await toaster.promise(promise, {\n        success: t<string>(`profile:mfaEnabledSuccessTitle`),\n        error: t<string>(`profile:verificationCodeError`),\n        loading: t<string>(`profile:mfaActivationLoading`),\n      });\n    },\n    [verificationId, t, onComplete, user, requestState]\n  );\n\n  const onSubmit: FormEventHandler<HTMLFormElement> = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      const data = new FormData(e.currentTarget);\n      const verificationCode = data.get('verificationCode') as string;\n      const authFactorName = data.get('authFactorName') as string;\n\n      return onEnrolRequested({ verificationCode, authFactorName });\n    },\n    [onEnrolRequested]\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className={'mb-2.5 text-gray-400 dark:text-gray-400'}>\n        <Trans i18nKey={'profile:verifyActivationCodeDescription'} />\n      </div>\n\n      <div className={'flex flex-col space-y-3'}>\n        <TextField.Label>\n          <Trans i18nKey={'profile:verificationCode'} />\n          <TextField.Input\n            required\n            autoComplete={'off'}\n            name={'verificationCode'}\n          />\n        </TextField.Label>\n\n        <TextField.Label>\n          <Trans i18nKey={'profile:authFactorName'} />\n          <TextField.Input name={'authFactorName'} />\n          <TextField.Hint>\n            <Trans i18nKey={'profile:authFactorNameHint'} />\n          </TextField.Hint>\n        </TextField.Label>\n\n        <Button block type={'submit'} loading={requestState.state.loading}>\n          <Trans i18nKey={'profile:verifyActivationCodeSubmitLabel'} />\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default MultiFactorAuthVerificationCodeForm;\n", "import OAuthProviders from '~/components/auth/OAuthProviders';\nimport EmailPasswordSignInContainer from '~/components/auth/EmailPasswordSignInContainer';\n\nconst ReauthenticationForm: React.FC<{\n  onSuccess: EmptyCallback;\n}> = ({ onSuccess }) => {\n  return (\n    <div className={'flex flex-col space-y-4'}>\n      <OAuthProviders onSignIn={onSuccess} />\n      <EmailPasswordSignInContainer onSignIn={onSuccess} />\n    </div>\n  );\n};\n\nexport default ReauthenticationForm;\n", "import type { User } from 'firebase/auth';\nimport { sendEmailVerification } from 'firebase/auth';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useCallback } from 'react';\nimport toaster from 'react-hot-toast';\n\nimport useRequestState from '~/core/hooks/use-request-state';\nimport Alert from '~/core/ui/Alert';\nimport If from '~/core/ui/If';\nimport Button from '~/core/ui/Button';\n\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\nimport AuthErrorMessage from '~/components/auth/AuthErrorMessage';\n\nfunction EmailVerificationAlert(\n  props: React.PropsWithChildren<{\n    user: User;\n  }>\n) {\n  const requestState = useRequestState<void>();\n  const { t } = useTranslation();\n\n  const onLinkRequested = useCallback(async () => {\n    requestState.setLoading(true);\n\n    const promise = sendEmailVerification(props.user)\n      .then(() => {\n        requestState.setData();\n      })\n      .catch((error) => {\n        requestState.setError(error);\n\n        throw getFirebaseErrorCode(error);\n      });\n\n    await toaster.promise(promise, {\n      loading: t<string>(`profile:sendingEmailVerificationLink`),\n      success: t<string>(`profile:sendEmailVerificationLinkSuccess`),\n      error: t<string>(`profile:sendEmailVerificationLinkError`),\n    });\n  }, [props, requestState, t]);\n\n  return (\n    <div className={'flex flex-col space-y-3'}>\n      <div>\n        <Alert type={'warn'}>\n          <Alert.Heading>\n            <Trans i18nKey={'profile:verifyEmailAlertHeading'} />\n          </Alert.Heading>\n\n          <div>\n            <p>\n              <Trans i18nKey={'profile:verificationLinkAlertDescription'} />\n            </p>\n          </div>\n        </Alert>\n      </div>\n\n      <If condition={requestState.state.error}>\n        <div>\n          <AuthErrorMessage\n            error={getFirebaseErrorCode(requestState.state.error)}\n          />\n        </div>\n      </If>\n\n      <div>\n        <If\n          condition={requestState.state.success}\n          fallback={\n            <Button\n              loading={requestState.state.loading}\n              onClick={onLinkRequested}\n            >\n              <Trans i18nKey={'profile:sendVerificationLinkSubmitLabel'} />\n            </Button>\n          }\n        >\n          <EmailSentSuccessAlert />\n        </If>\n      </div>\n    </div>\n  );\n}\n\nfunction EmailSentSuccessAlert() {\n  return (\n    <Alert type={'success'}>\n      <span>\n        <Trans i18nKey={'profile:sendVerificationLinkSuccessLabel'} />\n      </span>\n    </Alert>\n  );\n}\n\nexport default EmailVerificationAlert;\n", "import { useCallback, useState } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport toaster from 'react-hot-toast';\n\nimport Button from '~/core/ui/Button';\nimport Modal from '~/core/ui/Modal';\n\nimport useDisableMultiFactorAuthentication from '~/lib/profile/hooks/use-disable-multi-factor-auth';\n\nconst DisableMultiFactorButton: React.FC<{\n  onDisable: EmptyCallback;\n}> = ({ onDisable }) => {\n  const [disableMultiFactorAuthentication, { loading }] =\n    useDisableMultiFactorAuthentication();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { t } = useTranslation();\n\n  const onDisableSubmit = useCallback(async () => {\n    const promise = disableMultiFactorAuthentication().then(onDisable);\n\n    return toaster.promise(promise, {\n      loading: t<string>(`profile:disablingMfa`),\n      error: t<string>(`profile:disableMfaError`),\n      success: t<string>(`profile:disableMfaSuccess`),\n    });\n  }, [disableMultiFactorAuthentication, onDisable, t]);\n\n  return (\n    <>\n      <div>\n        <Button\n          color={'danger'}\n          variant={'flat'}\n          onClick={() => setIsModalOpen(true)}\n        >\n          <span className={'font-medium'}>\n            <Trans i18nKey={'profile:disableMfaButtonLabel'} />\n          </span>\n        </Button>\n      </div>\n\n      <Modal\n        heading={<Trans i18nKey={'profile:disableMfa'} />}\n        isOpen={isModalOpen}\n        setIsOpen={setIsModalOpen}\n      >\n        <div className={'flex flex-col space-y-4'}>\n          <div>\n            <p>\n              <Trans i18nKey={'common:modalConfirmationQuestion'} />\n            </p>\n          </div>\n\n          <Button\n            color={'danger'}\n            block\n            loading={loading}\n            onClick={onDisableSubmit}\n          >\n            <Trans i18nKey={'profile:confirmDisableMfaButtonLabel'} />\n          </Button>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default DisableMultiFactorButton;\n", "import useApiRequest from '~/core/hooks/use-api';\n\nfunction useDisableMultiFactorAuthentication() {\n  return useApiRequest(`/api/user/mfa/disable`, `POST`);\n}\n\nexport default useDisableMultiFactorAuthentication;\n", "import { useCallback } from 'react';\nimport { Trans } from 'react-i18next';\n\nimport Modal from '~/core/ui/Modal';\nimport ReauthenticationForm from '~/components/auth/ReauthenticationForm';\n\nconst ReauthenticationModal: React.FC<{\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n}> = ({ isOpen, setIsOpen }) => {\n  const onSuccess = useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  return (\n    <Modal\n      heading={<Trans i18nKey={'auth:reauthenticate'} />}\n      isOpen={isOpen}\n      setIsOpen={setIsOpen}\n      closeButton={false}\n    >\n      <div className={'my-4'}>\n        <p>\n          <Trans i18nKey={'auth:reauthenticateDescription'} />\n        </p>\n      </div>\n\n      <ReauthenticationForm onSuccess={onSuccess} />\n    </Modal>\n  );\n};\n\nexport default ReauthenticationModal;\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "id", "providers", "import_react", "import_react", "import_react", "import_react", "import_react", "import_react", "import_react", "multiFactor"]
}
