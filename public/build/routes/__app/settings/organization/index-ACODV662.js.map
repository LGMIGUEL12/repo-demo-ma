{
  "version": 3,
  "sources": ["../../../../../../app/routes/__app/settings/organization/index.tsx", "../../../../../../app/components/organizations/UpdateOrganizationForm.tsx", "../../../../../../app/lib/organizations/hooks/use-update-organization.ts"],
  "sourcesContent": ["import { Trans } from 'react-i18next';\nimport type { MetaFunction } from '@remix-run/node';\n\nimport FirebaseStorageProvider from '~/core/firebase/components/FirebaseStorageProvider';\nimport UpdateOrganizationForm from '~/components/organizations/UpdateOrganizationForm';\nimport SettingsTile from '~/components/settings/SettingsTile';\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Organization Details',\n  };\n};\n\nconst OrganizationSettingsPage = () => {\n  return (\n    <SettingsTile\n      heading={<Trans i18nKey={'organization:generalTabLabel'} />}\n      subHeading={<Trans i18nKey={'organization:generalTabLabelSubheading'} />}\n    >\n      <FirebaseStorageProvider>\n        <UpdateOrganizationForm />\n      </FirebaseStorageProvider>\n    </SettingsTile>\n  );\n};\n\nexport default OrganizationSettingsPage;\n", "import { useCallback, useContext, useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { useStorage } from 'reactfire';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { useForm } from 'react-hook-form';\n\nimport type { FirebaseStorage } from 'firebase/storage';\n\nimport {\n  deleteObject,\n  getDownloadURL,\n  ref,\n  uploadBytes,\n} from 'firebase/storage';\n\nimport OrganizationContext from '~/lib/contexts/organization';\nimport useUpdateOrganization from '~/lib/organizations/hooks/use-update-organization';\nimport type Organization from '~/lib/organizations/types/organization';\n\nimport Button from '~/core/ui/Button';\nimport TextField from '~/core/ui/TextField';\nimport ImageUploadInput from '~/core/ui/ImageUploadInput';\nimport Label from '~/core/ui/Label';\n\nconst UpdateOrganizationForm = () => {\n  const storage = useStorage();\n  const { organization, setOrganization } = useContext(OrganizationContext);\n  const [updateOrganization, { loading }] = useUpdateOrganization();\n\n  const [logoIsDirty, setLogoIsDirty] = useState(false);\n  const { t } = useTranslation('organization');\n\n  const currentOrganizationName = organization?.name ?? '';\n  const currentLogoUrl = organization?.logoURL || null;\n\n  const { register, handleSubmit, reset } = useForm({\n    defaultValues: {\n      name: currentOrganizationName,\n      logoURL: currentLogoUrl,\n    },\n  });\n\n  const onLogoCleared = useCallback(() => {\n    setLogoIsDirty(true);\n  }, []);\n\n  const onSubmit = useCallback(\n    async (organizationName: string, logoFile: Maybe<File>) => {\n      const organizationId = organization?.id;\n\n      if (!organizationId) {\n        const errorMessage = t<string>(`updateOrganizationErrorMessage`);\n        return toast.error(errorMessage);\n      }\n\n      const logoName = logoFile?.name;\n\n      const logoURL = logoName\n        ? await uploadLogo({\n            logo: logoFile,\n            storage,\n            organizationId,\n          }).catch(() => {\n            const errorMessage = t<string>(`updateLogoErrorMessage`);\n            toast.error(errorMessage);\n\n            return undefined;\n          })\n        : currentLogoUrl;\n\n      const isLogoRemoved = logoIsDirty && !logoName;\n\n      // delete existing logo if different\n      if (isLogoRemoved && currentLogoUrl) {\n        try {\n          await deleteObject(ref(storage, currentLogoUrl));\n        } catch (e) {\n          // old logo not found\n        }\n      }\n\n      const organizationData: WithId<Partial<Organization>> = {\n        id: organization.id,\n        name: organizationName,\n        logoURL: isLogoRemoved ? null : logoURL,\n      };\n\n      const promise = updateOrganization(organizationData).then(() => {\n        setOrganization({\n          ...organization,\n          ...organizationData,\n        });\n      });\n\n      await toast.promise(promise, {\n        loading: t<string>(`updateOrganizationLoadingMessage`),\n        success: t<string>(`updateOrganizationSuccessMessage`),\n        error: t<string>(`updateOrganizationErrorMessage`),\n      });\n    },\n    [\n      logoIsDirty,\n      currentLogoUrl,\n      organization,\n      setOrganization,\n      storage,\n      t,\n      updateOrganization,\n    ]\n  );\n\n  useEffect(() => {\n    reset({\n      name: organization?.name,\n      logoURL: organization?.logoURL,\n    });\n  }, [organization, reset]);\n\n  const nameControl = register('name', {\n    required: true,\n  });\n\n  const logoControl = register('logoURL');\n\n  return (\n    <form\n      onSubmit={handleSubmit((value) => {\n        return onSubmit(value.name, getLogoFile(value.logoURL));\n      })}\n      className={'space-y-4'}\n    >\n      <div className={'flex flex-col space-y-4'}>\n        <TextField>\n          <TextField.Label>\n            <Trans i18nKey={'organization:organizationNameInputLabel'} />\n\n            <TextField.Input\n              data-cy={'organization-name-input'}\n              required\n              name={nameControl.name}\n              innerRef={nameControl.ref}\n              onChange={nameControl.onChange}\n              onBlur={nameControl.onBlur}\n              placeholder={'ex. IndieCorp'}\n            />\n          </TextField.Label>\n        </TextField>\n\n        <Label>\n          <Trans i18nKey={'organization:organizationLogoInputLabel'} />\n\n          <ImageUploadInput\n            name={logoControl.name}\n            onChange={logoControl.onChange}\n            onBlur={logoControl.onBlur}\n            innerRef={logoControl.ref}\n            image={currentLogoUrl}\n            onClear={onLogoCleared}\n          >\n            <Trans i18nKey={'common:imageInputLabel'} />\n          </ImageUploadInput>\n        </Label>\n\n        <div>\n          <Button\n            className={'w-full md:w-auto'}\n            data-cy={'update-organization-submit-button'}\n            loading={loading}\n          >\n            <Trans i18nKey={'organization:updateOrganizationSubmitLabel'} />\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\n/**\n * @description Upload file to Storage\n * @param storage\n * @param organizationId\n * @param logo\n */\nasync function uploadLogo({\n  storage,\n  organizationId,\n  logo,\n}: {\n  storage: FirebaseStorage;\n  organizationId: string;\n  logo: File;\n}) {\n  const path = getLogoStoragePath(organizationId, logo.name);\n  const bytes = await logo.arrayBuffer();\n  const fileRef = ref(storage, path);\n\n  // first, we upload the logo to Firebase Storage\n  await uploadBytes(fileRef, bytes);\n\n  // now we can get the download URL from its reference\n  return await getDownloadURL(fileRef);\n}\n\n/**\n *\n * @param organizationId\n * @param fileName\n */\nfunction getLogoStoragePath(organizationId: string, fileName: string) {\n  return [`/organizations`, organizationId, fileName].join('/');\n}\n\nfunction getLogoFile(value: string | null | FileList) {\n  if (!value || typeof value === 'string') {\n    return;\n  }\n\n  return value.item(0) ?? undefined;\n}\n\nexport default UpdateOrganizationForm;\n", "import type { FirebaseError } from 'firebase/app';\nimport { doc, updateDoc } from 'firebase/firestore';\nimport { useFirestore } from 'reactfire';\nimport { useCallback } from 'react';\n\nimport useRequestState from '~/core/hooks/use-request-state';\nimport type Organization from '~/lib/organizations/types/organization';\n\nimport { ORGANIZATIONS_COLLECTION } from '~/lib/firestore-collections';\n\n/**\n * @name useUpdateOrganization\n * @description Hook to update an organization's general information (name, logo and timezone)\n */\nexport default function useUpdateOrganization() {\n  const { state, setError, setData, setLoading } =\n    useRequestState<Partial<WithId<Organization>>>();\n\n  const firestore = useFirestore();\n\n  const updateOrganization = useCallback(\n    async (organization: WithId<Partial<Organization>>) => {\n      setLoading(true);\n\n      try {\n        const ref = doc(firestore, ORGANIZATIONS_COLLECTION, organization.id);\n\n        await updateDoc(ref, organization);\n\n        setData(organization);\n      } catch (e) {\n        setError((e as FirebaseError).message);\n      }\n    },\n    [firestore, setData, setError, setLoading]\n  );\n\n  return [updateOrganization, state] as [\n    typeof updateOrganization,\n    typeof state\n  ];\n}\n"],
  "mappings": "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",
  "names": ["import_react", "ref", "organization_default"]
}
