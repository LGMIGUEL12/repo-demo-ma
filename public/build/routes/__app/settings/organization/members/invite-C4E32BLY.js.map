{
  "version": 3,
  "sources": ["../../../../../../../node_modules/@heroicons/react/24/outline/ArrowLeftIcon.js", "../../../../../../../node_modules/@heroicons/react/24/outline/PlusCircleIcon.js", "../../../../../../../app/routes/__app/settings/organization/members/invite.tsx", "../../../../../../../app/components/organizations/InviteMembersForm.tsx", "../../../../../../../app/lib/organizations/hooks/use-invite-members.ts"],
  "sourcesContent": ["const React = require(\"react\");\n\nfunction ArrowLeftIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ArrowLeftIcon);\nmodule.exports = ForwardRef;", "const React = require(\"react\");\n\nfunction PlusCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(PlusCircleIcon);\nmodule.exports = ForwardRef;", "import { Trans } from 'react-i18next';\nimport type { ActionArgs, MetaFunction } from '@remix-run/node';\nimport { redirect } from '@remix-run/node';\nimport ArrowLeftIcon from '@heroicons/react/24/outline/ArrowLeftIcon';\nimport { z } from 'zod';\n\nimport {\n  throwBadRequestException,\n  throwInternalServerErrorException,\n} from '~/core/http-exceptions';\n\nimport getLoggedInUser from '~/core/firebase/admin/auth/get-logged-in-user';\nimport inviteMembers from '~/lib/server/organizations/invite-members';\n\nimport InviteMembersForm from '~/components/organizations/InviteMembersForm';\nimport SettingsTile from '~/components/settings/SettingsTile';\n\nimport Button from '~/core/ui/Button';\nimport MembershipRole from '~/lib/organizations/types/membership-role';\nimport withCsrf from '~/core/middleware/with-csrf';\nimport withMethodsGuard from '~/core/middleware/with-methods-guard';\nimport { parseSessionIdCookie } from '~/lib/server/cookies/session.cookie';\nimport { parseOrganizationIdCookie } from '~/lib/server/cookies/organization.cookie';\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: 'Invite Members',\n  };\n};\n\nexport async function action(props: ActionArgs) {\n  const req = props.request;\n\n  await withCsrf(req);\n  await withMethodsGuard(req, ['POST']);\n\n  const session = await parseSessionIdCookie(req);\n  const organizationId = await parseOrganizationIdCookie(req);\n  const user = await getLoggedInUser(session);\n\n  const json = await req.json();\n  const result = await getInviteMembersBodySchema().safeParseAsync(json);\n\n  if (!result.success) {\n    return throwBadRequestException();\n  }\n\n  const params = {\n    invites: result.data,\n    organizationId,\n    inviterId: user.uid,\n  };\n\n  try {\n    await inviteMembers(params);\n\n    return redirect('/settings/organization/members');\n  } catch (e) {\n    return throwInternalServerErrorException();\n  }\n}\n\nconst OrganizationMembersInvitePage = () => {\n  return (\n    <>\n      <SettingsTile\n        heading={<Trans i18nKey={'organization:inviteMembersPageHeading'} />}\n        subHeading={\n          <Trans i18nKey={'organization:inviteMembersPageSubheading'} />\n        }\n      >\n        <InviteMembersForm />\n      </SettingsTile>\n\n      <div className={'mt-4'}>\n        <GoBackToMembersButton />\n      </div>\n    </>\n  );\n};\n\nexport default OrganizationMembersInvitePage;\n\nfunction GoBackToMembersButton() {\n  return (\n    <Button\n      size={'small'}\n      color={'transparent'}\n      href={'/settings/organization/members'}\n    >\n      <span className={'flex items-center space-x-1'}>\n        <ArrowLeftIcon className={'h-3'} />\n\n        <span>\n          <Trans i18nKey={'organization:goBackToMembersPage'} />\n        </span>\n      </span>\n    </Button>\n  );\n}\n\nfunction getInviteMembersBodySchema() {\n  return z.array(\n    z.object({\n      role: z.nativeEnum(MembershipRole),\n      email: z.string().email(),\n    })\n  );\n}\n", "import { Trans, useTranslation } from 'react-i18next';\nimport { Fragment, useCallback } from 'react';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport toast from 'react-hot-toast';\n\nimport PlusCircleIcon from '@heroicons/react/24/outline/PlusCircleIcon';\nimport XMarkIcon from '@heroicons/react/24/outline/XMarkIcon';\n\nimport MembershipRole from '~/lib/organizations/types/membership-role';\nimport { useInviteMembers } from '~/lib/organizations/hooks/use-invite-members';\n\nimport If from '~/core/ui/If';\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport IconButton from '~/core/ui/IconButton';\nimport Tooltip from '~/core/ui/Tooltip';\n\nimport MembershipRoleSelector from './MembershipRoleSelector';\nimport useUserSession from '~/core/hooks/use-user-session';\n\ntype InviteModel = ReturnType<typeof memberFactory>;\n\nconst InviteMembersForm = () => {\n  const { t } = useTranslation('organization');\n  const user = useUserSession();\n  const [inviteMembers, { loading }] = useInviteMembers();\n\n  const { register, handleSubmit, setValue, control, clearErrors, watch } =\n    useInviteMembersForm();\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'members',\n    shouldUnregister: true,\n  });\n\n  const watchFieldArray = watch('members');\n\n  const controlledFields = fields.map((field, index) => {\n    return {\n      ...field,\n      ...watchFieldArray[index],\n    };\n  });\n\n  const onSubmit = useCallback(\n    async ({ members }: { members: InviteModel[] }) => {\n      const promise = inviteMembers(members);\n\n      return toast.promise(promise, {\n        success: t<string>(`inviteMembersSuccess`),\n        error: t<string>(`inviteMembersError`),\n        loading: t<string>(`inviteMembersLoading`),\n      });\n    },\n    [inviteMembers, t]\n  );\n\n  return (\n    <form\n      className={'flex flex-col space-y-4'}\n      data-cy={'invite-members-form'}\n      onSubmit={(event) => {\n        void handleSubmit(onSubmit)(event);\n      }}\n    >\n      <div className=\"flex flex-col space-y-2\">\n        {controlledFields.map((field, index) => {\n          const emailInputName = `members.${index}.email` as const;\n          const roleInputName = `members.${index}.role` as const;\n\n          // register email control\n          const emailControl = register(emailInputName, {\n            required: true,\n            validate: (value) => {\n              const invalid = getFormValidator(watchFieldArray)(value, index);\n\n              if (invalid) {\n                return t<string>(`duplicateInviteEmailError`);\n              }\n\n              const isSameAsCurrentUserEmail = user?.auth?.email === value;\n\n              if (isSameAsCurrentUserEmail) {\n                return t<string>(`invitingOwnAccountError`);\n              }\n\n              return true;\n            },\n          });\n\n          // register role control\n          register(roleInputName, {\n            value: field.role,\n          });\n\n          return (\n            <Fragment key={field.id}>\n              <div className={'flex items-center space-x-0.5 md:space-x-2'}>\n                <div className={'w-7/12 md:w-8/12'}>\n                  <TextField.Input\n                    data-cy={'invite-email-input'}\n                    name={emailControl.name}\n                    onChange={(event) => {\n                      void emailControl.onChange(event);\n                    }}\n                    onBlur={(event) => {\n                      void emailControl.onBlur(event);\n                    }}\n                    innerRef={emailControl.ref}\n                    placeholder=\"member@email.com\"\n                    type=\"email\"\n                    required\n                  />\n                </div>\n\n                <div className={'w-4/12 md:w-3/12'}>\n                  <MembershipRoleSelector\n                    value={field.role}\n                    onChange={(role) => {\n                      setValue(roleInputName, role);\n                    }}\n                  />\n                </div>\n\n                <If condition={fields.length > 1}>\n                  <div className={'w-1/12'}>\n                    <Tooltip\n                      className={'flex justify-center'}\n                      content={t('removeInviteButtonLabel')}\n                    >\n                      <IconButton\n                        data-cy={'remove-invite-button'}\n                        label={t<string>('removeInviteButtonLabel')}\n                        onClick={() => {\n                          remove(index);\n                          clearErrors(emailInputName);\n                        }}\n                      >\n                        <XMarkIcon className={'h-4 lg:h-5'} />\n                      </IconButton>\n                    </Tooltip>\n                  </div>\n                </If>\n              </div>\n            </Fragment>\n          );\n        })}\n\n        <div>\n          <Button\n            data-cy={'append-new-invite-button'}\n            type={'button'}\n            color={'transparent'}\n            size={'small'}\n            disabled={loading}\n            onClick={() => append(memberFactory())}\n          >\n            <span className={'flex items-center space-x-2'}>\n              <PlusCircleIcon className={'h-5'} />\n\n              <span>\n                <Trans i18nKey={'organization:addAnotherMemberButtonLabel'} />\n              </span>\n            </span>\n          </Button>\n        </div>\n      </div>\n\n      <div>\n        <Button\n          className={'w-full lg:w-auto'}\n          data-cy={'send-invites-button'}\n          type={'submit'}\n          loading={loading}\n        >\n          <If condition={!loading}>\n            <Trans i18nKey={'organization:inviteMembersSubmitLabel'} />\n          </If>\n\n          <If condition={loading}>\n            <Trans i18nKey={'organization:inviteMembersLoading'} />\n          </If>\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nfunction memberFactory() {\n  return {\n    email: '',\n    role: MembershipRole.Member,\n  };\n}\n\nfunction useInviteMembersForm() {\n  return useForm({\n    defaultValues: {\n      members: [memberFactory()],\n    },\n    shouldUseNativeValidation: true,\n    shouldFocusError: true,\n    shouldUnregister: true,\n  });\n}\n\nfunction getFormValidator(members: InviteModel[]) {\n  return function isValueInvalid(value: string, index: number) {\n    const emails = members.map((member) => member.email);\n    const valueIndex = emails.indexOf(value);\n\n    return valueIndex >= 0 && valueIndex !== index;\n  };\n}\n\nexport default InviteMembersForm;\n", "import useApiRequest from '~/core/hooks/use-api';\nimport type MembershipRole from '../types/membership-role';\n\ninterface Invite {\n  email: string;\n  role: MembershipRole;\n}\n\nexport function useInviteMembers() {\n  return useApiRequest<void, Invite[]>(\n    `/settings/organization/members/invite`,\n    'POST',\n    {\n      redirect: 'follow',\n    }\n  );\n}\n"],
  "mappings": "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",
  "names": ["ArrowLeftIcon", "PlusCircleIcon", "XMarkIcon", "PlusCircleIcon", "ArrowLeftIcon"]
}
