{
  "version": 3,
  "sources": ["../../../app/lib/organizations/permissions.ts", "../../../app/lib/organizations/hooks/use-current-organization.ts", "../../../app/lib/organizations/hooks/use-current-user-role.ts"],
  "sourcesContent": ["import MembershipRole from '~/lib/organizations/types/membership-role';\n\n/**\n * Permissions\n *\n * Permissions should be kept here or in a centralized place. Assuming you will add new custom\n * functions to check the user's permission to perform an action, it's recommended that you do it here\n *\n * This helps track down behavior rather than changing logic in every single place, which is\n * going to make it difficult to track down the logic. Keep this lightweight, so you don't need to make\n * different files for server vs client\n *\n * Permissions are defined such that a user can perform a disruptive option on other users\n * only if they have a greater role. For example, an Admin cannot remove another Admin from an organization\n *\n * You can update {@link MembershipRole} however you wish according to your app's domain\n */\n\n/**\n *\n * @param currentUserRole The current logged-in user\n * @param targetUser The role of the target of the action\n * @description Checks if a user can perform actions (such as update a role) of another user\n * @name canUpdateUser\n */\nexport function canUpdateUser(\n  currentUserRole: MembershipRole,\n  targetUser: MembershipRole\n) {\n  return currentUserRole > targetUser;\n}\n\n/**\n * @name canChangeBilling\n * @param currentUserRole\n * @description Checks if a role can change billing information.\n * By default, only Owners and Admin can invite users\n */\nexport function canChangeBilling(currentUserRole: MembershipRole) {\n  return currentUserRole === MembershipRole.Owner;\n}\n\n/**\n * @name canInviteUsers\n * @param currentUserRole\n * @description Checks if a role can change invite new users to an organization.\n * By default, only Owners and Admin can invite users\n */\nexport function canInviteUsers(currentUserRole: MembershipRole) {\n  return currentUserRole >= MembershipRole.Admin;\n}\n\n/**\n * @description Check a user with role {@link inviterRole} can invite a user\n * with role {@link inviteeRole}.\n *\n * By default, users can invite users having the same or inferior role, and\n * ownership can only be transferred\n * @param inviterRole\n * @param inviteeRole\n * @name canInviteUser\n */\nexport function canInviteUser(\n  inviterRole: MembershipRole,\n  inviteeRole: MembershipRole\n) {\n  const canInvite = canInviteUsers(inviterRole);\n  const hasGreaterRole = inviterRole >= inviteeRole;\n  const isNotOwner = inviteeRole !== MembershipRole.Owner;\n\n  return canInvite && hasGreaterRole && isNotOwner;\n}\n\n/**\n * @description Check if a user can delete invites\n * @param inviterRole\n * @name canDeleteInvites\n */\nexport function canDeleteInvites(inviterRole: MembershipRole) {\n  return canInviteUsers(inviterRole);\n}\n", "import { useContext } from 'react';\nimport OrganizationContext from '~/lib/contexts/organization';\n\nexport default function useCurrentOrganization() {\n  const { organization } = useContext(OrganizationContext);\n\n  return organization;\n}\n", "import useCurrentOrganization from './use-current-organization';\nimport useUserSession from '~/core/hooks/use-user-session';\n\n/**\n * @name useCurrentUserRole\n * @description Hook to fetch the user's current role {@link MembershipRole}\n */\nexport default function useCurrentUserRole() {\n  const organization = useCurrentOrganization();\n  const user = useUserSession();\n  const userId = user?.auth?.uid;\n\n  if (!userId) {\n    return;\n  }\n\n  return organization?.members[userId]?.role;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAyBO,SAAS,cACd,iBACA,YACA;AACA,SAAO,kBAAkB;AAC3B;AAQO,SAAS,iBAAiB,iBAAiC;AAChE,SAAO,oBAAoB,wBAAe;AAC5C;AAQO,SAAS,eAAe,iBAAiC;AAC9D,SAAO,mBAAmB,wBAAe;AAC3C;AAYO,SAAS,cACd,aACA,aACA;AACA,QAAM,YAAY,eAAe,WAAW;AAC5C,QAAM,iBAAiB,eAAe;AACtC,QAAM,aAAa,gBAAgB,wBAAe;AAElD,SAAO,aAAa,kBAAkB;AACxC;AAOO,SAAS,iBAAiB,aAA6B;AAC5D,SAAO,eAAe,WAAW;AACnC;;;AChFA,mBAA2B;AAGZ,SAAR,yBAA0C;AAC/C,QAAM,EAAE,aAAa,QAAI,yBAAW,oBAAmB;AAEvD,SAAO;AACT;;;ACAe,SAAR,qBAAsC;AAC3C,QAAM,eAAe,uBAAuB;AAC5C,QAAM,OAAO,eAAe;AAC5B,QAAM,SAAS,MAAM,MAAM;AAE3B,MAAI,CAAC,QAAQ;AACX;AAAA,EACF;AAEA,SAAO,cAAc,QAAQ,SAAS;AACxC;",
  "names": []
}
