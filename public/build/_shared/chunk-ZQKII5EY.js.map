{
  "version": 3,
  "sources": ["../../../app/core/hooks/use-api.ts"],
  "sourcesContent": ["import { useCallback, useContext, useRef } from 'react';\nimport { AppCheckSdkContext } from 'reactfire';\n\nimport useRequestState from '~/core/hooks/use-request-state';\nimport useGetCsrfToken from '~/core/firebase/hooks/use-get-csrf-token';\n\nconst FIREBASE_APP_CHECK_HEADER = 'X-Firebase-AppCheck';\nconst CSRF_TOKEN_HEADER = 'x-csrf-token';\n\n/**\n * @name useApiRequest\n * @param path\n * @param method\n * @param config\n */\nexport default function useApiRequest<Resp = unknown, Body = void>(\n  path: string,\n  method: HttpMethod = 'POST',\n  config?: Partial<{\n    headers: StringObject;\n    redirect: RequestRedirect;\n  }>\n) {\n  const { setError, setLoading, setData, state } = useRequestState<\n    Resp,\n    string\n  >();\n\n  const headersRef = useRef(config?.headers);\n  const getAppCheckToken = useGetAppCheckToken();\n  const getCsrfToken = useGetCsrfToken();\n\n  const fn = useCallback(\n    async (body: Body) => {\n      setLoading(true);\n\n      try {\n        const payload = JSON.stringify(body);\n        const appCheckToken = await getAppCheckToken();\n        const csrfToken = getCsrfToken();\n\n        if (!headersRef.current) {\n          headersRef.current = {};\n        }\n\n        // if the app-check token was found\n        // we add the header to the API request\n        if (appCheckToken) {\n          headersRef.current[FIREBASE_APP_CHECK_HEADER] = appCheckToken;\n        }\n\n        if (csrfToken) {\n          headersRef.current[CSRF_TOKEN_HEADER] = csrfToken;\n        }\n\n        const data = await executeFetchRequest<Resp>({\n          url: path,\n          payload,\n          method,\n          headers: headersRef.current,\n        });\n\n        setData(data);\n\n        return Promise.resolve(data);\n      } catch (error) {\n        const message =\n          error instanceof Error ? error.message : `Unknown error`;\n\n        setError(message);\n\n        return Promise.reject(error);\n      }\n    },\n    [\n      setLoading,\n      getAppCheckToken,\n      getCsrfToken,\n      path,\n      method,\n      setData,\n      setError,\n    ]\n  );\n\n  return [fn, state] as [typeof fn, typeof state];\n}\n\nasync function executeFetchRequest<Resp = unknown>(params: {\n  url: string;\n  payload: string;\n  method: string;\n  redirect?: RequestRedirect;\n  headers?: StringObject;\n}) {\n  const { url, method, payload, redirect, headers } = params;\n\n  const options: RequestInit = {\n    method,\n    redirect,\n    headers: {\n      accept: 'application/json',\n      'Content-Type': 'application/json',\n      ...(headers ?? {}),\n    },\n  };\n\n  const methodsSupportingBody: HttpMethod[] = ['POST', 'PUT', 'DELETE'];\n  const supportsBody = methodsSupportingBody.includes(method as HttpMethod);\n\n  if (payload && supportsBody) {\n    options.body = payload;\n  }\n\n  try {\n    const response = await fetch(url, options);\n\n    if (response.redirected) {\n      window.location.href = response.url;\n\n      return Promise.resolve() as Promise<Resp>;\n    }\n\n    if (response.ok) {\n      return (await response.json()) as Promise<Resp>;\n    }\n\n    return Promise.reject(response.statusText);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\nfunction useGetAppCheckToken() {\n  // instead of using useAppCheck()\n  // we manually request the SDK\n  // because we *may not have initialized it*\n  const sdk = useContext(AppCheckSdkContext);\n\n  return useCallback(async () => {\n    try {\n      // if the SDK does not exist, we cannot generate a token\n      if (!sdk) {\n        return;\n      }\n\n      const forceRefresh = false;\n      const { getToken } = await import('firebase/app-check');\n      const { token } = await getToken(sdk, forceRefresh);\n\n      return token;\n    } catch (e) {\n      return;\n    }\n  }, [sdk]);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA,mBAAgD;AAMhD,IAAM,4BAA4B;AAClC,IAAM,oBAAoB;AAQX,SAAR,cACL,MACA,SAAqB,QACrB,QAIA;AACA,QAAM,EAAE,UAAU,YAAY,SAAS,MAAM,IAAI,gBAG/C;AAEF,QAAM,iBAAa,qBAAO,QAAQ,OAAO;AACzC,QAAM,mBAAmB,oBAAoB;AAC7C,QAAM,eAAe,gBAAgB;AAErC,QAAM,SAAK;AAAA,IACT,OAAO,SAAe;AACpB,iBAAW,IAAI;AAEf,UAAI;AACF,cAAM,UAAU,KAAK,UAAU,IAAI;AACnC,cAAM,gBAAgB,MAAM,iBAAiB;AAC7C,cAAM,YAAY,aAAa;AAE/B,YAAI,CAAC,WAAW,SAAS;AACvB,qBAAW,UAAU,CAAC;AAAA,QACxB;AAIA,YAAI,eAAe;AACjB,qBAAW,QAAQ,6BAA6B;AAAA,QAClD;AAEA,YAAI,WAAW;AACb,qBAAW,QAAQ,qBAAqB;AAAA,QAC1C;AAEA,cAAM,OAAO,MAAM,oBAA0B;AAAA,UAC3C,KAAK;AAAA,UACL;AAAA,UACA;AAAA,UACA,SAAS,WAAW;AAAA,QACtB,CAAC;AAED,gBAAQ,IAAI;AAEZ,eAAO,QAAQ,QAAQ,IAAI;AAAA,MAC7B,SAAS,OAAP;AACA,cAAM,UACJ,iBAAiB,QAAQ,MAAM,UAAU;AAE3C,iBAAS,OAAO;AAEhB,eAAO,QAAQ,OAAO,KAAK;AAAA,MAC7B;AAAA,IACF;AAAA,IACA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,SAAO,CAAC,IAAI,KAAK;AACnB;AAEA,eAAe,oBAAoC,QAMhD;AACD,QAAM,EAAE,KAAK,QAAQ,SAAS,UAAU,QAAQ,IAAI;AAEpD,QAAM,UAAuB;AAAA,IAC3B;AAAA,IACA;AAAA,IACA,SAAS;AAAA,MACP,QAAQ;AAAA,MACR,gBAAgB;AAAA,MAChB,GAAI,WAAW,CAAC;AAAA,IAClB;AAAA,EACF;AAEA,QAAM,wBAAsC,CAAC,QAAQ,OAAO,QAAQ;AACpE,QAAM,eAAe,sBAAsB,SAAS,MAAoB;AAExE,MAAI,WAAW,cAAc;AAC3B,YAAQ,OAAO;AAAA,EACjB;AAEA,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,KAAK,OAAO;AAEzC,QAAI,SAAS,YAAY;AACvB,aAAO,SAAS,OAAO,SAAS;AAEhC,aAAO,QAAQ,QAAQ;AAAA,IACzB;AAEA,QAAI,SAAS,IAAI;AACf,aAAQ,MAAM,SAAS,KAAK;AAAA,IAC9B;AAEA,WAAO,QAAQ,OAAO,SAAS,UAAU;AAAA,EAC3C,SAAS,GAAP;AACA,WAAO,QAAQ,OAAO,CAAC;AAAA,EACzB;AACF;AAEA,SAAS,sBAAsB;AAI7B,QAAM,UAAM,yBAAW,EAAkB;AAEzC,aAAO,0BAAY,YAAY;AAC7B,QAAI;AAEF,UAAI,CAAC,KAAK;AACR;AAAA,MACF;AAEA,YAAM,eAAe;AACrB,YAAM,EAAE,SAAS,IAAI,MAAM,OAAO;AAClC,YAAM,EAAE,MAAM,IAAI,MAAM,SAAS,KAAK,YAAY;AAElD,aAAO;AAAA,IACT,SAAS,GAAP;AACA;AAAA,IACF;AAAA,EACF,GAAG,CAAC,GAAG,CAAC;AACV;",
  "names": []
}
