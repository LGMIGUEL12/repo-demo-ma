{
  "version": 3,
  "sources": ["../../../app/components/auth/PhoneNumberCredentialForm.tsx"],
  "sourcesContent": ["import type { FormEventHandler } from 'react';\nimport { useCallback } from 'react';\nimport type { FirebaseError } from 'firebase/app';\nimport type { ConfirmationResult, UserCredential } from 'firebase/auth';\nimport { useAuth } from 'reactfire';\nimport toaster from 'react-hot-toast';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport useRecaptchaVerifier from '~/core/firebase/hooks/use-recaptcha-verifier';\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\nimport useRequestState from '~/core/hooks/use-request-state';\n\nimport If from '~/core/ui/If';\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\n\nimport AuthErrorMessage from '~/components/auth/AuthErrorMessage';\n\ntype ActionType = 'signIn' | 'link';\n\nconst RECAPTCHA_ACTION_BUTTON_ID = 'phone-recaptcha-button';\n\nconst PhoneNumberCredentialForm: React.FC<{\n  action: ActionType;\n  onSuccess: (credential: UserCredential) => void;\n}> = ({ action, onSuccess }) => {\n  const { t } = useTranslation();\n\n  const verifyPhoneNumberState = useRequestState<ConfirmationResult>();\n  const verifyVerificationCodeState = useRequestState<void>();\n  const getPhoneNumberSignInMethod = useGetPhoneNumberSignInMethod(action);\n\n  const onLinkPhoneNumberSubmit: FormEventHandler<HTMLFormElement> =\n    useCallback(\n      async (event) => {\n        event.preventDefault();\n\n        verifyPhoneNumberState.setLoading(true);\n\n        const data = new FormData(event.currentTarget);\n        const phoneNumber = data.get('phoneNumber') as string;\n\n        const promise = getPhoneNumberSignInMethod(phoneNumber)\n          .then((confirmationResult) => {\n            // when confirmationResult is received\n            // we set it as the state of verifyPhoneNumberState\n            verifyPhoneNumberState.setData(confirmationResult);\n          })\n          .catch((error) => {\n            verifyPhoneNumberState.setError(error);\n\n            throw getFirebaseErrorCode(error);\n          });\n\n        await toaster.promise(promise, {\n          loading: t<string>(`profile:verifyPhoneNumberLoading`),\n          success: t<string>(`profile:verifyPhoneNumberSuccess`),\n          error: t<string>(`profile:verifyPhoneNumberError`),\n        });\n      },\n      [verifyPhoneNumberState, getPhoneNumberSignInMethod, t]\n    );\n\n  const onVerificationCodeSubmit: FormEventHandler<HTMLFormElement> =\n    useCallback(\n      async (event) => {\n        event.preventDefault();\n\n        const data = new FormData(event.currentTarget);\n        const verificationCode = data.get('verificationCode') as string;\n\n        // confirmation code is stored as the state of verifyPhoneNumberState\n        const confirmationResult = verifyPhoneNumberState.state.data;\n\n        // in the weird event we do not have a verifyPhoneNumberState\n        // we simply exit the function\n        if (!confirmationResult) {\n          return;\n        }\n\n        verifyVerificationCodeState.setLoading(true);\n\n        // we verify that the verification code is correct\n        const promise = confirmationResult\n          .confirm(verificationCode)\n          .then(onSuccess)\n          .catch((error: FirebaseError) => {\n            verifyVerificationCodeState.setError(error);\n\n            throw getFirebaseErrorCode(error);\n          });\n\n        await toaster.promise(promise, {\n          loading: t<string>(`profile:verificationCodeLoading`),\n          success: t<string>(`profile:verificationCodeSuccess`),\n          error: t<string>(`profile:verificationCodeError`),\n        });\n      },\n      [\n        verifyPhoneNumberState.state.data,\n        verifyVerificationCodeState,\n        t,\n        onSuccess,\n      ]\n    );\n\n  // if verifyPhoneNumberState's state is not set, we dispplay the phone\n  // number form\n  const shouldDisplayPhoneNumberForm =\n    verifyPhoneNumberState.state.data === undefined;\n\n  // otherwise, we display the verification code form\n  const shouldDisplayVerificationCodeForm = !shouldDisplayPhoneNumberForm;\n\n  return (\n    <>\n      <If condition={shouldDisplayPhoneNumberForm}>\n        <form className={'w-full'} onSubmit={onLinkPhoneNumberSubmit}>\n          <div className={'flex flex-col space-y-2'}>\n            <TextField.Label>\n              <Trans i18nKey={'profile:phoneNumberLabel'} />\n\n              <TextField.Input\n                required\n                pattern={'^\\\\+?[1-9]\\\\d{1,14}$'}\n                name={'phoneNumber'}\n                type={'tel'}\n                placeholder={'Ex. +919367788755'}\n                disabled={verifyPhoneNumberState.state.loading}\n              />\n            </TextField.Label>\n\n            <If condition={verifyPhoneNumberState.state.error}>\n              {(error) => (\n                <AuthErrorMessage error={getFirebaseErrorCode(error)} />\n              )}\n            </If>\n\n            <Button\n              size={'large'}\n              id={RECAPTCHA_ACTION_BUTTON_ID}\n              block\n              type={'submit'}\n              loading={verifyPhoneNumberState.state.loading}\n            >\n              <If condition={action === 'link'}>\n                <Trans i18nKey={'profile:verifyPhoneNumberSubmitLabel'} />\n              </If>\n\n              <If condition={action === 'signIn'}>\n                <Trans i18nKey={'auth:signInWithPhoneNumber'} />\n              </If>\n            </Button>\n          </div>\n        </form>\n      </If>\n\n      <If condition={shouldDisplayVerificationCodeForm}>\n        <form className={'w-full'} onSubmit={onVerificationCodeSubmit}>\n          <div className={'flex flex-col space-y-3'}>\n            <TextField.Label>\n              <Trans i18nKey={'profile:verificationCode'} />\n\n              <TextField.Input\n                required\n                autoComplete={'off'}\n                name={'verificationCode'}\n              />\n\n              <TextField.Hint>\n                <Trans i18nKey={'profile:verifyActivationCodeDescription'} />\n              </TextField.Hint>\n            </TextField.Label>\n\n            <If condition={verifyVerificationCodeState.state.error}>\n              {(error) => (\n                <AuthErrorMessage error={getFirebaseErrorCode(error)} />\n              )}\n            </If>\n\n            <Button\n              size={'large'}\n              block\n              loading={verifyVerificationCodeState.state.loading}\n            >\n              <Trans i18nKey={'profile:verifyActivationCodeSubmitLabel'} />\n            </Button>\n          </div>\n        </form>\n      </If>\n    </>\n  );\n};\n\nfunction useGetPhoneNumberSignInMethod(action: ActionType) {\n  const auth = useAuth();\n  const getRecaptchaVerifier = useRecaptchaVerifier(RECAPTCHA_ACTION_BUTTON_ID);\n\n  return useCallback(\n    async (phoneNumber: string) => {\n      const verifier = await getRecaptchaVerifier();\n\n      if (action === `link`) {\n        const { linkWithPhoneNumber } = await import('firebase/auth');\n        const user = auth.currentUser;\n\n        if (!user) {\n          return Promise.reject(`User is not logged in`);\n        }\n\n        return linkWithPhoneNumber(user, phoneNumber, verifier);\n      }\n\n      if (action === `signIn`) {\n        const { signInWithPhoneNumber } = await import('firebase/auth');\n\n        return signInWithPhoneNumber(auth, phoneNumber, verifier);\n      }\n\n      return Promise.reject(`Invalid action \"${action}\"`);\n    },\n    [action, auth, getRecaptchaVerifier]\n  );\n}\n\nexport default PhoneNumberCredentialForm;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,mBAA4B;AAK5B;AANA;AAoBA,IAAM,6BAA6B;AAEnC,IAAM,4BAGD,CAAC,EAAE,QAAQ,UAAU,MAAM;AAC9B,QAAM,EAAE,EAAE,IAAI,eAAe;AAE7B,QAAM,yBAAyB,gBAAoC;AACnE,QAAM,8BAA8B,gBAAsB;AAC1D,QAAM,6BAA6B,8BAA8B,MAAM;AAEvE,QAAM,8BACJ;AAAA,IACE,OAAO,UAAU;AACf,YAAM,eAAe;AAErB,6BAAuB,WAAW,IAAI;AAEtC,YAAM,OAAO,IAAI,SAAS,MAAM,aAAa;AAC7C,YAAM,cAAc,KAAK,IAAI,aAAa;AAE1C,YAAM,UAAU,2BAA2B,WAAW,EACnD,KAAK,CAAC,uBAAuB;AAG5B,+BAAuB,QAAQ,kBAAkB;AAAA,MACnD,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,+BAAuB,SAAS,KAAK;AAErC,cAAM,qBAAqB,KAAK;AAAA,MAClC,CAAC;AAEH,YAAM,GAAQ,QAAQ,SAAS;AAAA,QAC7B,SAAS,EAAU,kCAAkC;AAAA,QACrD,SAAS,EAAU,kCAAkC;AAAA,QACrD,OAAO,EAAU,gCAAgC;AAAA,MACnD,CAAC;AAAA,IACH;AAAA,IACA,CAAC,wBAAwB,4BAA4B,CAAC;AAAA,EACxD;AAEF,QAAM,+BACJ;AAAA,IACE,OAAO,UAAU;AACf,YAAM,eAAe;AAErB,YAAM,OAAO,IAAI,SAAS,MAAM,aAAa;AAC7C,YAAM,mBAAmB,KAAK,IAAI,kBAAkB;AAGpD,YAAM,qBAAqB,uBAAuB,MAAM;AAIxD,UAAI,CAAC,oBAAoB;AACvB;AAAA,MACF;AAEA,kCAA4B,WAAW,IAAI;AAG3C,YAAM,UAAU,mBACb,QAAQ,gBAAgB,EACxB,KAAK,SAAS,EACd,MAAM,CAAC,UAAyB;AAC/B,oCAA4B,SAAS,KAAK;AAE1C,cAAM,qBAAqB,KAAK;AAAA,MAClC,CAAC;AAEH,YAAM,GAAQ,QAAQ,SAAS;AAAA,QAC7B,SAAS,EAAU,iCAAiC;AAAA,QACpD,SAAS,EAAU,iCAAiC;AAAA,QACpD,OAAO,EAAU,+BAA+B;AAAA,MAClD,CAAC;AAAA,IACH;AAAA,IACA;AAAA,MACE,uBAAuB,MAAM;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAIF,QAAM,+BACJ,uBAAuB,MAAM,SAAS;AAGxC,QAAM,oCAAoC,CAAC;AAE3C,SACE;AAAA,IACE;AAAA,yDAAC;AAAA,QAAG,WAAW;AAAA,QACb,6DAAC;AAAA,UAAK,WAAW;AAAA,UAAU,UAAU;AAAA,UACnC,6DAAC;AAAA,YAAI,WAAW;AAAA,YACd;AAAA,iEAAC,kBAAU,OAAV;AAAA,gBACC;AAAA,qEAAC;AAAA,oBAAM,SAAS;AAAA,qBAAhB;AAAA;AAAA;AAAA;AAAA,yBAA4C;AAAA,kBAE5C,mDAAC,kBAAU,OAAV;AAAA,oBACC,UAAQ;AAAA,oBACR,SAAS;AAAA,oBACT,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,aAAa;AAAA,oBACb,UAAU,uBAAuB,MAAM;AAAA,qBANzC;AAAA;AAAA;AAAA;AAAA,yBAOA;AAAA;AAAA,iBAVF;AAAA;AAAA;AAAA;AAAA,qBAWA;AAAA,cAEA,mDAAC;AAAA,gBAAG,WAAW,uBAAuB,MAAM;AAAA,gBACzC,WAAC,UACA,mDAAC;AAAA,kBAAiB,OAAO,qBAAqB,KAAK;AAAA,mBAAnD;AAAA;AAAA;AAAA;AAAA,uBAAsD;AAAA,iBAF1D;AAAA;AAAA;AAAA;AAAA,qBAIA;AAAA,cAEA,mDAAC;AAAA,gBACC,MAAM;AAAA,gBACN,IAAI;AAAA,gBACJ,OAAK;AAAA,gBACL,MAAM;AAAA,gBACN,SAAS,uBAAuB,MAAM;AAAA,gBAEtC;AAAA,qEAAC;AAAA,oBAAG,WAAW,WAAW;AAAA,oBACxB,6DAAC;AAAA,sBAAM,SAAS;AAAA,uBAAhB;AAAA;AAAA;AAAA;AAAA,2BAAwD;AAAA,qBAD1D;AAAA;AAAA;AAAA;AAAA,yBAEA;AAAA,kBAEA,mDAAC;AAAA,oBAAG,WAAW,WAAW;AAAA,oBACxB,6DAAC;AAAA,sBAAM,SAAS;AAAA,uBAAhB;AAAA;AAAA;AAAA;AAAA,2BAA8C;AAAA,qBADhD;AAAA;AAAA;AAAA;AAAA,yBAEA;AAAA;AAAA,iBAbF;AAAA;AAAA;AAAA;AAAA,qBAcA;AAAA;AAAA,aAlCF;AAAA;AAAA;AAAA;AAAA,iBAmCA;AAAA,WApCF;AAAA;AAAA;AAAA;AAAA,eAqCA;AAAA,SAtCF;AAAA;AAAA;AAAA;AAAA,aAuCA;AAAA,MAEA,mDAAC;AAAA,QAAG,WAAW;AAAA,QACb,6DAAC;AAAA,UAAK,WAAW;AAAA,UAAU,UAAU;AAAA,UACnC,6DAAC;AAAA,YAAI,WAAW;AAAA,YACd;AAAA,iEAAC,kBAAU,OAAV;AAAA,gBACC;AAAA,qEAAC;AAAA,oBAAM,SAAS;AAAA,qBAAhB;AAAA;AAAA;AAAA;AAAA,yBAA4C;AAAA,kBAE5C,mDAAC,kBAAU,OAAV;AAAA,oBACC,UAAQ;AAAA,oBACR,cAAc;AAAA,oBACd,MAAM;AAAA,qBAHR;AAAA;AAAA;AAAA;AAAA,yBAIA;AAAA,kBAEA,mDAAC,kBAAU,MAAV;AAAA,oBACC,6DAAC;AAAA,sBAAM,SAAS;AAAA,uBAAhB;AAAA;AAAA;AAAA;AAAA,2BAA2D;AAAA,qBAD7D;AAAA;AAAA;AAAA;AAAA,yBAEA;AAAA;AAAA,iBAXF;AAAA;AAAA;AAAA;AAAA,qBAYA;AAAA,cAEA,mDAAC;AAAA,gBAAG,WAAW,4BAA4B,MAAM;AAAA,gBAC9C,WAAC,UACA,mDAAC;AAAA,kBAAiB,OAAO,qBAAqB,KAAK;AAAA,mBAAnD;AAAA;AAAA;AAAA;AAAA,uBAAsD;AAAA,iBAF1D;AAAA;AAAA;AAAA;AAAA,qBAIA;AAAA,cAEA,mDAAC;AAAA,gBACC,MAAM;AAAA,gBACN,OAAK;AAAA,gBACL,SAAS,4BAA4B,MAAM;AAAA,gBAE3C,6DAAC;AAAA,kBAAM,SAAS;AAAA,mBAAhB;AAAA;AAAA;AAAA;AAAA,uBAA2D;AAAA,iBAL7D;AAAA;AAAA;AAAA;AAAA,qBAMA;AAAA;AAAA,aA3BF;AAAA;AAAA;AAAA;AAAA,iBA4BA;AAAA,WA7BF;AAAA;AAAA;AAAA;AAAA,eA8BA;AAAA,SA/BF;AAAA;AAAA;AAAA;AAAA,aAgCA;AAAA;AAAA,KA1EF;AAAA;AAAA;AAAA;AAAA,SA2EA;AAEJ;AAEA,SAAS,8BAA8B,QAAoB;AACzD,QAAM,OAAO,GAAQ;AACrB,QAAM,uBAAuB,+BAAqB,0BAA0B;AAE5E,aAAO;AAAA,IACL,OAAO,gBAAwB;AAC7B,YAAM,WAAW,MAAM,qBAAqB;AAE5C,UAAI,WAAW,QAAQ;AACrB,cAAM,EAAE,oBAAoB,IAAI,MAAM,OAAO;AAC7C,cAAM,OAAO,KAAK;AAElB,YAAI,CAAC,MAAM;AACT,iBAAO,QAAQ,OAAO,uBAAuB;AAAA,QAC/C;AAEA,eAAO,oBAAoB,MAAM,aAAa,QAAQ;AAAA,MACxD;AAEA,UAAI,WAAW,UAAU;AACvB,cAAM,EAAE,sBAAsB,IAAI,MAAM,OAAO;AAE/C,eAAO,sBAAsB,MAAM,aAAa,QAAQ;AAAA,MAC1D;AAEA,aAAO,QAAQ,OAAO,mBAAmB,SAAS;AAAA,IACpD;AAAA,IACA,CAAC,QAAQ,MAAM,oBAAoB;AAAA,EACrC;AACF;AAEA,IAAO,oCAAQ;",
  "names": []
}
