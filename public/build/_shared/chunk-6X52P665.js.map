{
  "version": 3,
  "sources": ["../../../app/core/firebase/components/FirebaseStorageProvider.tsx", "../../../app/core/ui/ImageUploadInput.tsx"],
  "sourcesContent": ["import React from 'react';\nimport configuration from '~/configuration';\n\nimport type { FirebaseStorage } from 'firebase/storage';\nimport { StorageProvider, useInitStorage } from 'reactfire';\nimport firebaseConfig from '../../../firebase.config';\n\nexport default function FirebaseStorageProvider({\n  children,\n  useEmulator,\n}: React.PropsWithChildren<{ useEmulator?: boolean }>) {\n  const emulator = useEmulator ?? firebaseConfig.emulator;\n\n  const { data: sdk, status } = useInitStorage(async (app) => {\n    const bucketUrl = firebaseConfig.storageBucket;\n    const { getStorage } = await import('firebase/storage');\n    const storage = getStorage(app, bucketUrl);\n\n    if (emulator) {\n      await connectToEmulator(storage);\n    }\n\n    return storage;\n  });\n\n  const loading = status === 'loading';\n\n  // while loading, we display an indicator\n  // this will avoid issue where the SDK was not initialized\n  // when using the Storage SDK by calling useStorage()\n  // NB: it also means SSR won't work for children of this provider\n  if (loading) {\n    return null;\n  }\n\n  return <StorageProvider sdk={sdk}>{children}</StorageProvider>;\n}\n\nasync function connectToEmulator(storage: FirebaseStorage) {\n  const { connectStorageEmulator } = await import('firebase/storage');\n\n  const port = 9199;\n  const emulatorHost = configuration.emulatorHost ?? 'localhost';\n\n  connectStorageEmulator(storage, emulatorHost, port);\n}\n", "import type { FormEvent, MouseEventHandler, RefCallback } from 'react';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { CloudArrowUpIcon, XMarkIcon } from '@heroicons/react/24/outline';\n\nimport Label from '~/core/ui/Label';\nimport If from '~/core/ui/If';\nimport IconButton from '~/core/ui/IconButton';\n\ntype Props = Omit<React.InputHTMLAttributes<unknown>, 'value'> & {\n  innerRef?: RefCallback<HTMLInputElement>;\n  image?: string | null;\n  onClear?: () => void;\n};\n\nconst IMAGE_SIZE = 22;\n\nconst ImageUploadInput: React.FCC<Props> = ({\n  children,\n  image,\n  onClear,\n  innerRef,\n  ...props\n}) => {\n  const propValue = image ?? null;\n  const [value, setValue] = useState<string | null>(propValue);\n  const [fileName, setFileName] = useState<string>('');\n  const ref = useRef<HTMLInputElement>();\n\n  const onInput = (e: FormEvent<HTMLInputElement>) => {\n    e.preventDefault();\n\n    const files = e.currentTarget.files;\n\n    if (files?.length) {\n      const file = files[0];\n      const data = URL.createObjectURL(file);\n\n      setValue(data);\n      setFileName(file.name);\n    }\n\n    if (props.onInput) {\n      props.onInput(e);\n    }\n  };\n\n  const imageRemoved: MouseEventHandler = (e) => {\n    e.preventDefault();\n\n    setValue('');\n    setFileName('');\n\n    if (ref.current) {\n      ref.current.value = '';\n    }\n\n    if (onClear) {\n      onClear();\n    }\n  };\n\n  useEffect(() => {\n    setValue(propValue);\n  }, [propValue]);\n\n  return (\n    <div className={'ImageUploadInput'}>\n      <input\n        {...props}\n        ref={(inputRef) => {\n          ref.current = inputRef ?? undefined;\n\n          if (innerRef) {\n            innerRef(inputRef);\n          }\n        }}\n        className={'hidden'}\n        type={'file'}\n        onInput={onInput}\n        accept=\"image/*\"\n      />\n\n      <div className={'flex items-center space-x-4'}>\n        <div className={'flex'}>\n          <If condition={!value}>\n            <CloudArrowUpIcon\n              className={'h-5 text-gray-500 dark:text-black-100'}\n            />\n          </If>\n\n          <If condition={value}>\n            <img\n              loading={'lazy'}\n              style={{\n                width: IMAGE_SIZE,\n                height: IMAGE_SIZE,\n              }}\n              className={'object-contain'}\n              width={IMAGE_SIZE}\n              height={IMAGE_SIZE}\n              src={value as string}\n              alt={props.alt ?? ''}\n            />\n          </If>\n        </div>\n\n        <If condition={!value}>\n          <div className={'flex flex-auto'}>\n            <Label as={'span'} className={'cursor-pointer text-xs'}>\n              {children}\n            </Label>\n          </div>\n        </If>\n\n        <If condition={value as string}>\n          <div className={'flex flex-auto'}>\n            <If\n              condition={fileName}\n              fallback={\n                <Label\n                  as={'span'}\n                  className={'cursor-pointer text-xs ellipsify'}\n                >\n                  {children}\n                </Label>\n              }\n            >\n              <Label as=\"span\" className={'text-xs ellipsify'}>\n                {fileName}\n              </Label>\n            </If>\n          </div>\n        </If>\n\n        <If condition={value}>\n          <IconButton onClick={imageRemoved}>\n            <XMarkIcon className=\"h-3 w-3\" />\n          </IconButton>\n        </If>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageUploadInput;\n"],
  "mappings": "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",
  "names": []
}
