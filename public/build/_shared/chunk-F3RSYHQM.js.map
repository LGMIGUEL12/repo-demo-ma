{
  "version": 3,
  "sources": ["../../../app/core/ui/Logo/Logo.tsx", "../../../app/core/firebase/components/FirebaseAppShell.tsx", "../../../app/core/firebase/components/FirebaseAuthProvider.tsx", "../../../app/core/hooks/use-destroy-session.ts"],
  "sourcesContent": ["import { Link } from '@remix-run/react';\nimport LogoImage from './LogoImage';\n\nconst Logo: React.FCC<{ href?: string; className?: string }> = ({\n  href,\n  className,\n}) => {\n  return (\n    <Link to={href ?? '/'}>\n      <LogoImage className={className} />\n    </Link>\n  );\n};\n\nexport default Logo;\n", "import type { FirebaseOptions } from 'firebase/app';\nimport { FirebaseAppProvider } from 'reactfire';\n\nfunction FirebaseAppShell({\n  children,\n  config,\n}: React.PropsWithChildren<{\n  config: FirebaseOptions;\n}>) {\n  return (\n    <FirebaseAppProvider firebaseConfig={config}>\n      {children}\n    </FirebaseAppProvider>\n  );\n}\n\nexport default FirebaseAppShell;\n", "import type { Dispatch } from 'react';\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { AuthProvider, useAuth, useFirebaseApp } from 'reactfire';\n\nimport type { User } from 'firebase/auth';\n\nimport {\n  initializeAuth,\n  indexedDBLocalPersistence,\n  connectAuthEmulator,\n  inMemoryPersistence,\n} from 'firebase/auth';\n\nimport isBrowser from '~/core/generic/is-browser';\nimport useDestroySession from '~/core/hooks/use-destroy-session';\nimport type UserSession from '~/core/session/types/user-session';\n\nexport const FirebaseAuthStateListener: React.FCC<{\n  onAuthStateChange: (user: User | null) => void | Promise<void>;\n}> = ({ children, onAuthStateChange }) => {\n  const auth = useAuth();\n\n  // {@link onIdTokenChanged} will call the\n  // callback when the user ID token changes\n  // for example, when the user signs out\n  // we update user context when ID token changes\n  useEffect(() => {\n    const subscription = auth.onIdTokenChanged(onAuthStateChange);\n\n    return () => subscription();\n  }, [auth, onAuthStateChange]);\n\n  return <>{children}</>;\n};\n\nexport default function FirebaseAuthProvider({\n  userSession,\n  setUserSession,\n  children,\n  useEmulator,\n}: React.PropsWithChildren<{\n  useEmulator: boolean;\n  userSession: Maybe<UserSession>;\n  setUserSession: Dispatch<Maybe<UserSession>>;\n}>) {\n  const app = useFirebaseApp();\n  const signOut = useDestroySession();\n  const userRef = useRef<Maybe<User>>();\n\n  // make sure we're not using IndexedDB when SSR\n  // as it is only supported on browser environments\n  const persistence = useMemo(() => {\n    return isBrowser() ? indexedDBLocalPersistence : inMemoryPersistence;\n  }, []);\n\n  const sdk = useMemo(\n    () => initializeAuth(app, { persistence }),\n    [app, persistence]\n  );\n  const shouldConnectEmulator = useEmulator && !('emulator' in sdk.config);\n\n  const onAuthStateChanged = useCallback(\n    async (user: User | null) => {\n      if (user) {\n        const session: UserSession = {\n          auth: {\n            ...user,\n            customClaims: {},\n            disabled: userSession?.auth?.disabled ?? false,\n            multiFactor: userSession?.auth?.multiFactor ?? [],\n          },\n          data: userSession?.data,\n        };\n\n        userRef.current = user;\n\n        return setUserSession(session);\n      }\n\n      // if the user is no longer defined and user was originally signed-in\n      // (because userSession?.auth is defined) then we need to clear the\n      // session cookie\n      if (userRef.current) {\n        try {\n          // we need to delete the session cookie used for SSR\n          signOut();\n        } finally {\n          setUserSession(undefined);\n          userRef.current = undefined;\n        }\n      }\n    },\n    [\n      setUserSession,\n      signOut,\n      userSession?.auth?.disabled,\n      userSession?.auth?.multiFactor,\n      userSession?.data,\n    ]\n  );\n\n  useEffect(() => {\n    if (shouldConnectEmulator) {\n      const host = getAuthEmulatorHost();\n\n      connectAuthEmulator(sdk, host);\n    }\n  }, [sdk, shouldConnectEmulator]);\n\n  return (\n    <AuthProvider sdk={sdk}>\n      <FirebaseAuthStateListener onAuthStateChange={onAuthStateChanged}>\n        {children}\n      </FirebaseAuthStateListener>\n    </AuthProvider>\n  );\n}\n\nfunction getAuthEmulatorHost() {\n  const host = 'localhost';\n  const port = 9099;\n\n  return ['http://', host, ':', port].join('');\n}\n", "import { useFetcher } from '@remix-run/react';\nimport { useCallback } from 'react';\n\nfunction useDestroySession() {\n  const fetcher = useFetcher();\n\n  return useCallback(() => {\n    fetcher.submit(\n      {},\n      {\n        method: 'post',\n        action: '/auth/sign-out',\n      }\n    );\n\n    return fetcher;\n  }, [fetcher]);\n}\n\nexport default useDestroySession;\n"],
  "mappings": "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",
  "names": ["import_react", "import_react"]
}
