{
  "version": 3,
  "sources": ["../../../app/components/organizations/OrganizationMembersList.tsx", "../../../app/core/hooks/use-user-id.ts", "../../../app/lib/organizations/hooks/use-fetch-organization.ts", "../../../app/components/organizations/OrganizationMembersActionsContainer.tsx", "../../../app/components/organizations/TransferOrganizationOwnershipModal.tsx", "../../../app/lib/organizations/hooks/use-transfer-organization-ownership.ts", "../../../app/components/organizations/OrganizationMemberActionsDropdown.tsx", "../../../app/components/organizations/RemoveOrganizationMemberModal.tsx", "../../../app/lib/organizations/hooks/use-remove-member.ts", "../../../app/components/organizations/UpdateMemberRoleModal.tsx", "../../../app/lib/organizations/hooks/use-update-member-role.ts"],
  "sourcesContent": ["import { Trans } from 'react-i18next';\n\nimport If from '~/core/ui/If';\nimport Badge from '~/core/ui/Badge';\nimport useUserId from '~/core/hooks/use-user-id';\nimport RoleBadge from './RoleBadge';\nimport ProfileAvatar from '../ProfileAvatar';\nimport Alert from '~/core/ui/Alert';\n\nimport { canUpdateUser } from '~/lib/organizations/permissions';\nimport type Organization from '~/lib/organizations/types/organization';\nimport useFetchOrganization from '~/lib/organizations/hooks/use-fetch-organization';\n\nimport LoadingMembersSpinner from '~/components/organizations/LoadingMembersSpinner';\nimport OrganizationMembersActionsContainer from './OrganizationMembersActionsContainer';\nimport type { SerializedUserAuthData } from '~/core/session/types/user-session';\n\nfunction OrganizationMembersList({\n  organizationId,\n  membersMetadata,\n}: React.PropsWithChildren<{\n  organizationId: string;\n  membersMetadata: SerializedUserAuthData[];\n}>) {\n  const userId = useUserId();\n\n  // fetch the organization members with an active listener\n  // and re-render on changes\n  const {\n    data: organization,\n    status,\n    error,\n  } = useFetchOrganization(organizationId);\n\n  const isLoading = status === 'loading';\n\n  if (isLoading) {\n    return (\n      <LoadingMembersSpinner>\n        <Trans i18nKey={'organization:loadingMembers'} />\n      </LoadingMembersSpinner>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert type={'error'}>\n        <Trans i18nKey={'organization:loadMembersError'} />\n      </Alert>\n    );\n  }\n\n  const members = getSortedMembers(organization);\n  const currentUser = members.find((member) => member.id === userId);\n\n  if (!currentUser) {\n    return null;\n  }\n\n  const userRole = currentUser.role;\n\n  return (\n    <div className={'w-full space-y-10'}>\n      <div className=\"flex flex-col divide-y divide-gray-100 dark:divide-black-400\">\n        {members.map(({ role, id: memberId }) => {\n          const metadata = membersMetadata?.find((metadata) => {\n            return metadata.uid === memberId;\n          });\n\n          if (!metadata) {\n            return null;\n          }\n\n          const displayName = metadata.displayName\n            ? metadata.displayName\n            : metadata.email;\n\n          const isCurrentUser = userId === metadata.uid;\n\n          // check if user has the permissions to update another member of\n          // the organization. If it returns false, the actions' dropdown\n          // should be disabled\n          const shouldEnableActions = canUpdateUser(userRole, role);\n          const key = `${metadata.uid}:${userRole}`;\n\n          return (\n            <div\n              key={key}\n              data-cy={'organization-member'}\n              className={\n                'flex flex-col py-2 lg:flex-row lg:items-center lg:space-x-2' +\n                ' justify-between space-y-2 lg:space-y-0'\n              }\n            >\n              <div className={'flex flex-auto items-center space-x-4'}>\n                <ProfileAvatar user={metadata} />\n\n                <div className={'block truncate text-sm'}>{displayName}</div>\n\n                <If condition={isCurrentUser}>\n                  <Badge>\n                    <Trans i18nKey={'organization:youBadgeLabel'} />\n                  </Badge>\n                </If>\n              </div>\n\n              <div className={'flex items-center justify-end space-x-4'}>\n                <div>\n                  <RoleBadge role={role} />\n                </div>\n\n                <OrganizationMembersActionsContainer\n                  disabled={!shouldEnableActions}\n                  targetMember={metadata}\n                  targetMemberRole={role}\n                  currentUserRole={userRole}\n                />\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default OrganizationMembersList;\n\n/**\n * @description Return the list of members sorted by role {@link MembershipRole}\n * @param organization\n */\nfunction getSortedMembers(organization: WithId<Organization>) {\n  const membersIds = Object.keys(organization.members);\n\n  return membersIds\n    .map((memberId) => {\n      const member = organization.members[memberId];\n\n      return {\n        ...member,\n        id: memberId,\n      };\n    })\n    .sort((prev, next) => {\n      return next.role > prev.role ? 1 : -1;\n    });\n}\n", "import useUserSession from './use-user-session';\n\nexport default function useUserId() {\n  const session = useUserSession();\n\n  return session?.auth?.uid;\n}\n", "import { useFirestore, useFirestoreDocData } from 'reactfire';\nimport type { DocumentReference } from 'firebase/firestore';\nimport { doc } from 'firebase/firestore';\nimport type Organization from '~/lib/organizations/types/organization';\nimport { ORGANIZATIONS_COLLECTION } from '~/lib/firestore-collections';\n\ntype Response = WithId<Organization>;\n\n/**\n * @name useFetchOrganization\n * @description Returns a stream with the selected organization's data\n * @param organizationId\n */\nexport default function useFetchOrganization(organizationId: string) {\n  const firestore = useFirestore();\n\n  const ref = doc(\n    firestore,\n    ORGANIZATIONS_COLLECTION,\n    organizationId\n  ) as DocumentReference<Response>;\n\n  return useFirestoreDocData(ref, { idField: 'id' });\n}\n", "import { useState } from 'react';\nimport type { SerializedUserAuthData } from '~/core/session/types/user-session';\n\nimport MembershipRole from '~/lib/organizations/types/membership-role';\nimport TransferOrganizationOwnershipModal from '~/components/organizations/TransferOrganizationOwnershipModal';\n\nimport OrganizationMemberActionsDropdown from './OrganizationMemberActionsDropdown';\nimport RemoveOrganizationMemberModal from './RemoveOrganizationMemberModal';\nimport UpdateMemberRoleModal from './UpdateMemberRoleModal';\nimport If from '~/core/ui/If';\n\nconst OrganizationMembersActionsContainer: React.FCC<{\n  targetMember: SerializedUserAuthData;\n  targetMemberRole: MembershipRole;\n  currentUserRole: MembershipRole;\n  disabled: boolean;\n}> = (props) => {\n  const [isUpdatingRole, setIsUpdatingRole] = useState(false);\n  const [isRemovingUser, setIsRemovingUser] = useState(false);\n  const [isTransferringOwnership, setIsTransferringOwnership] = useState(false);\n\n  const isOwner = props.currentUserRole === MembershipRole.Owner;\n\n  return (\n    <>\n      <OrganizationMemberActionsDropdown\n        disabled={props.disabled}\n        isOwner={isOwner}\n        onRemoveSelected={() => setIsRemovingUser(true)}\n        onChangeRoleSelected={() => setIsUpdatingRole(true)}\n        onTransferOwnershipSelected={() => setIsTransferringOwnership(true)}\n      />\n\n      <RemoveOrganizationMemberModal\n        setIsOpen={setIsRemovingUser}\n        isOpen={isRemovingUser}\n        member={props.targetMember}\n      />\n\n      <UpdateMemberRoleModal\n        setIsOpen={setIsUpdatingRole}\n        isOpen={isUpdatingRole}\n        member={props.targetMember}\n        memberRole={props.targetMemberRole}\n      />\n\n      <If condition={isOwner}>\n        <TransferOrganizationOwnershipModal\n          setIsOpen={setIsTransferringOwnership}\n          isOpen={isTransferringOwnership}\n          member={props.targetMember}\n        />\n      </If>\n    </>\n  );\n};\n\nexport default OrganizationMembersActionsContainer;\n", "import { useCallback } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport toaster from 'react-hot-toast';\n\nimport useTransferOrganizationOwnership from '~/lib/organizations/hooks/use-transfer-organization-ownership';\nimport type { SerializedUserAuthData } from '~/core/session/types/user-session';\n\nimport Button from '~/core/ui/Button';\nimport Modal from '~/core/ui/Modal';\nimport If from '~/core/ui/If';\n\nconst TransferOrganizationOwnershipModal: React.FC<{\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  member: SerializedUserAuthData;\n}> = ({ isOpen, setIsOpen, member }) => {\n  const targetMemberDisplayName = member.displayName ?? member.email;\n  const targetMemberId = member.uid;\n  const { t } = useTranslation();\n  const heading = <Trans i18nKey=\"organization:transferOwnership\" />;\n\n  const [transferOrganizationOwnership, transferOrganizationOwnershipState] =\n    useTransferOrganizationOwnership();\n\n  const loading = transferOrganizationOwnershipState.loading;\n\n  const onConfirmTransferOwnership = useCallback(async () => {\n    const promise = transferOrganizationOwnership({\n      userId: targetMemberId,\n    });\n\n    await toaster.promise(promise, {\n      loading: t<string>('organization:transferringOwnership'),\n      success: t<string>('organization:transferOwnershipSuccess'),\n      error: t<string>('organization:transferOwnershipError'),\n    });\n\n    setIsOpen(false);\n  }, [setIsOpen, t, targetMemberId, transferOrganizationOwnership]);\n\n  return (\n    <Modal heading={heading} isOpen={isOpen} setIsOpen={setIsOpen}>\n      <div className={'flex flex-col space-y-4'}>\n        <p>\n          <Trans\n            i18nKey={'organization:transferOwnershipDisclaimer'}\n            values={{\n              member: targetMemberDisplayName,\n            }}\n            components={{ b: <b /> }}\n          />\n        </p>\n\n        <p>\n          <Trans i18nKey={'common:modalConfirmationQuestion'} />\n        </p>\n\n        <Button\n          block\n          data-cy={'confirm-transfer-ownership-button'}\n          color={'danger'}\n          onClick={onConfirmTransferOwnership}\n          loading={loading}\n        >\n          <If\n            condition={loading}\n            fallback={<Trans i18nKey={'organization:transferOwnership'} />}\n          >\n            <Trans i18nKey={'organization:transferringOwnership'} />\n          </If>\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default TransferOrganizationOwnershipModal;\n", "import useApiRequest from '~/core/hooks/use-api';\n\ntype TargetMemberId = string;\n\nfunction useTransferOrganizationOwnership() {\n  return useApiRequest<void, { userId: TargetMemberId }>(\n    `/settings/organization/members/owner`,\n    'PUT'\n  );\n}\n\nexport default useTransferOrganizationOwnership;\n", "import type { PropsWithChildren } from 'react';\nimport { Menu } from '@headlessui/react';\nimport { Trans } from 'react-i18next';\n\nimport {\n  AdjustmentsHorizontalIcon,\n  EllipsisVerticalIcon,\n  UserCircleIcon,\n  XMarkIcon,\n} from '@heroicons/react/24/outline';\n\nimport Dropdown from '~/core/ui/Dropdown';\nimport IconButton from '~/core/ui/IconButton';\nimport If from '~/core/ui/If';\n\nconst OrganizationMemberActionsDropdown: React.FCC<{\n  onRemoveSelected: EmptyCallback;\n  onChangeRoleSelected: EmptyCallback;\n  onTransferOwnershipSelected: EmptyCallback;\n  disabled: boolean;\n  isOwner: boolean;\n}> = (props) => {\n  const Button = <DropdownButton disabled={props.disabled} />;\n\n  return (\n    <Dropdown\n      button={Button}\n      items={[\n        <Dropdown.Item\n          key={1}\n          data-cy={'update-member-role-action'}\n          onClick={props.onChangeRoleSelected}\n        >\n          <span className={'flex items-center space-x-2'}>\n            <AdjustmentsHorizontalIcon className={'h-5'} />\n            <span>\n              <Trans i18nKey={'organization:changeRole'} />\n            </span>\n          </span>\n        </Dropdown.Item>,\n        <If key={2} condition={props.isOwner}>\n          <Dropdown.Item\n            data-cy={'transfer-ownership-action'}\n            onClick={props.onTransferOwnershipSelected}\n          >\n            <span className={'flex items-center space-x-2'}>\n              <UserCircleIcon className={'h-5'} />\n              <span>\n                <Trans i18nKey={'organization:transferOwnership'} />\n              </span>\n            </span>\n          </Dropdown.Item>\n        </If>,\n        <Dropdown.Divider key={'divider'} />,\n        <Dropdown.Item\n          key={3}\n          data-cy={'remove-member-action'}\n          onClick={props.onRemoveSelected}\n        >\n          <span\n            className={\n              'flex items-center space-x-2 text-red-700 dark:text-red-500'\n            }\n          >\n            <XMarkIcon className={'h-5'} />\n            <span>\n              <Trans i18nKey={'organization:removeMember'} />\n            </span>\n          </span>\n        </Dropdown.Item>,\n      ]}\n    />\n  );\n};\n\nfunction DropdownButton({\n  disabled,\n}: PropsWithChildren<{ disabled: boolean }>) {\n  return (\n    <Menu.Button\n      data-cy={'member-actions-dropdown'}\n      as={'button'}\n      disabled={disabled}\n    >\n      <IconButton label={'Open members actions menu'} as={'div'}>\n        <EllipsisVerticalIcon className={'h-6'} />\n      </IconButton>\n    </Menu.Button>\n  );\n}\n\nexport default OrganizationMemberActionsDropdown;\n", "import { useCallback } from 'react';\nimport { Trans } from 'react-i18next';\nimport { t } from 'i18next';\nimport toaster from 'react-hot-toast';\nimport useRemoveMemberRequest from '~/lib/organizations/hooks/use-remove-member';\n\nimport Button from '~/core/ui/Button';\nimport Modal from '~/core/ui/Modal';\n\nimport type { SerializedUserAuthData } from '~/core/session/types/user-session';\n\nconst RemoveOrganizationMemberModal: React.FCC<{\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  member: SerializedUserAuthData;\n}> = ({ isOpen, setIsOpen, member }) => {\n  const [removeMemberRequest, { loading }] = useRemoveMemberRequest(member.uid);\n\n  const onUserRemoved = useCallback(async () => {\n    await toaster.promise(removeMemberRequest(), {\n      success: t<string>(`removeMemberSuccessMessage`),\n      error: t<string>(`removeMemberErrorMessage`),\n      loading: t<string>(`removeMemberLoadingMessage`),\n    });\n\n    setIsOpen(false);\n  }, [removeMemberRequest, setIsOpen]);\n\n  const heading = <Trans i18nKey=\"organization:removeMemberModalHeading\" />;\n\n  return (\n    <Modal heading={heading} isOpen={isOpen} setIsOpen={setIsOpen}>\n      <div className={'flex flex-col space-y-4'}>\n        <p>\n          <Trans i18nKey={'common:modalConfirmationQuestion'} />\n        </p>\n\n        <Button\n          block\n          data-cy={'confirm-remove-member'}\n          color={'danger'}\n          onClick={onUserRemoved}\n          loading={loading}\n        >\n          <Trans i18nKey={'organization:removeMemberSubmitLabel'} />\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default RemoveOrganizationMemberModal;\n", "import useApiRequest from '~/core/hooks/use-api';\n\nfunction useRemoveMemberRequest(memberId: string) {\n  const path = `/settings/organization/members/${memberId}`;\n\n  return useApiRequest<void>(path, `DELETE`);\n}\n\nexport default useRemoveMemberRequest;\n", "import { useCallback, useState } from 'react';\nimport toaster from 'react-hot-toast';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport Button from '~/core/ui/Button';\nimport Modal from '~/core/ui/Modal';\nimport Label from '~/core/ui/Label';\n\nimport type MembershipRole from '~/lib/organizations/types/membership-role';\nimport MembershipRoleSelector from './MembershipRoleSelector';\nimport useUpdateMemberRequest from '~/lib/organizations/hooks/use-update-member-role';\nimport type { SerializedUserAuthData } from '~/core/session/types/user-session';\n\nconst UpdateMemberRoleModal: React.FCC<{\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  member: SerializedUserAuthData;\n  memberRole: MembershipRole;\n}> = ({ isOpen, setIsOpen, memberRole, member }) => {\n  const { t } = useTranslation('organization');\n  const [role, setRole] = useState<MembershipRole>(memberRole);\n  const [updateMember, state] = useUpdateMemberRequest(member.uid);\n\n  const onRoleUpdated = useCallback(async () => {\n    if (role === memberRole) {\n      const message = t<string>('chooseDifferentRoleError');\n\n      toaster.error(message, {\n        className: 'chooseDifferentRoleError',\n      });\n\n      return;\n    }\n\n    const promise = updateMember({ role });\n\n    await toaster.promise(promise, {\n      loading: t<string>('updateRoleLoadingMessage'),\n      success: t<string>('updateRoleSuccessMessage'),\n      error: t<string>('updatingRoleErrorMessage'),\n    });\n\n    setIsOpen(false);\n  }, [role, memberRole, updateMember, t, setIsOpen]);\n\n  const heading = (\n    <Trans i18nKey={'organization:updateMemberRoleModalHeading'} />\n  );\n\n  return (\n    <Modal heading={heading} isOpen={isOpen} setIsOpen={setIsOpen}>\n      <div className={'flex flex-col space-y-12'}>\n        <div className={'flex flex-col space-y-1'}>\n          <Label>\n            <Trans i18nKey={'organization:memberRoleInputLabel'} />\n          </Label>\n\n          <MembershipRoleSelector value={memberRole} onChange={setRole} />\n        </div>\n\n        <Button\n          data-cy={'confirm-update-member-role'}\n          block\n          loading={state.loading}\n          onClick={onRoleUpdated}\n        >\n          <Trans i18nKey={'organization:updateRoleSubmitLabel'} />\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default UpdateMemberRoleModal;\n", "import useApiRequest from '~/core/hooks/use-api';\nimport type MembershipRole from '../types/membership-role';\n\nfunction useUpdateMemberRequest(memberId: string) {\n  return useApiRequest<void, { role: MembershipRole }>(\n    `/settings/organization/members/${memberId}`,\n    'PUT'\n  );\n}\n\nexport default useUpdateMemberRequest;\n"],
  "mappings": "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",
  "names": ["import_react", "t", "import_react", "import_react", "t", "metadata"]
}
