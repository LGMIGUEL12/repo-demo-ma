{
  "version": 3,
  "sources": ["../../../app/core/ui/TextField.tsx"],
  "sourcesContent": ["import type { LegacyRef, RefObject } from 'react';\n\nimport React, {\n  createRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nimport classNames from 'classnames';\nimport { Transition } from '@headlessui/react';\nimport XMarkIcon from '@heroicons/react/24/outline/XMarkIcon';\n\nimport Label from './Label';\nimport If from '~/core/ui/If';\nimport IconButton from '~/core/ui/IconButton';\n\ntype Props = React.InputHTMLAttributes<unknown> & {\n  innerRef?: RefObject<HTMLInputElement> | LegacyRef<HTMLInputElement>;\n  useResetButton?: boolean;\n  onClear?: EmptyCallback;\n  onValueChange?: (value: string | number | readonly string[]) => void;\n};\n\nconst Hint: React.FC<React.PropsWithChildren> = ({ children }) => {\n  return <span className={`TextFieldHint`}>{children}</span>;\n};\n\nconst Input: React.FC<Props> = ({\n  className,\n  innerRef,\n  children,\n  useResetButton,\n  onClear,\n  defaultValue,\n  onValueChange,\n  ...props\n}) => {\n  const ref = innerRef ?? createRef<HTMLInputElement>();\n  const currentValue = props.value ?? '';\n  const [value, setValue] = useState(currentValue);\n\n  const onReset = useCallback(() => {\n    if (ref) {\n      setValue('');\n\n      if (onClear) {\n        onClear();\n      }\n    }\n  }, [onClear, ref]);\n\n  const shouldShowResetButton = useMemo(() => {\n    return Boolean(useResetButton && value);\n  }, [value, useResetButton]);\n\n  const onChange: React.FormEventHandler<HTMLInputElement> = useCallback(\n    (event) => {\n      if (props.onChange) {\n        props.onChange(event);\n      }\n\n      const nextValue = event.currentTarget.value ?? '';\n\n      if (onValueChange) {\n        onValueChange(nextValue);\n      }\n\n      setValue(nextValue);\n    },\n    [onValueChange, props]\n  );\n\n  useEffect(() => {\n    setValue(currentValue);\n  }, [currentValue, onValueChange]);\n\n  return (\n    <div\n      className={classNames(`TextFieldInputContainer`, className, {\n        [`TextFieldInputContainerDisabled`]: props.disabled,\n      })}\n    >\n      <If condition={children}>\n        <span className={'flex pl-2.5'}>{children}</span>\n      </If>\n\n      <input\n        value={innerRef ? undefined : value}\n        defaultValue={defaultValue}\n        className={`TextFieldInput flex-1 ${className ?? ''}`}\n        {...props}\n        ref={ref}\n        onChange={onChange}\n      />\n\n      <If condition={shouldShowResetButton}>\n        <div className={'flex pr-2.5'}>\n          <IconButton type={'button'} onClick={onReset}>\n            <XMarkIcon className={'h-5'} />\n          </IconButton>\n        </div>\n      </If>\n    </div>\n  );\n};\n\ntype TextFieldComponent = React.FC<\n  React.PropsWithChildren<{\n    className?: string;\n  }>\n> & {\n  Label: typeof Label;\n  Hint: typeof Hint;\n  Input: typeof Input;\n  Error: typeof ErrorMessage;\n};\n\nconst TextField: TextFieldComponent = ({ children, className }) => {\n  return <div className={`TextField ${className ?? ''}`}>{children}</div>;\n};\n\nconst ErrorMessage: React.FC<\n  { error: Maybe<string> } & React.HTMLAttributes<unknown>\n> = ({ error, ...props }) => {\n  const shouldDisplay = !!error;\n\n  return (\n    <Transition\n      show={shouldDisplay}\n      appear={shouldDisplay}\n      enter=\"ease-out duration-200\"\n      enterFrom=\"opacity-0\"\n      enterTo=\"opacity-100\"\n      leave=\"ease-in duration-50\"\n      leaveFrom=\"opacity-100\"\n      leaveTo=\"opacity-0\"\n    >\n      <Hint>\n        <span {...props} className={'py-0.5 text-red-700 dark:text-red-500'}>\n          {error}\n        </span>\n      </Hint>\n    </Transition>\n  );\n};\n\nTextField.Hint = Hint;\nTextField.Label = Label;\nTextField.Input = Input;\nTextField.Error = ErrorMessage;\n\nexport default TextField;\n"],
  "mappings": "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",
  "names": ["classNames", "XMarkIcon"]
}
