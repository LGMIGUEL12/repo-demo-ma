{
  "version": 3,
  "sources": ["../../../app/components/auth/MultiFactorAuthChallengeModal.tsx", "../../../app/core/firebase/utils/is-multi-factor-error.ts"],
  "sourcesContent": ["import type { MultiFactorError, UserCredential } from 'firebase/auth';\n\nimport {\n  getMultiFactorResolver,\n  PhoneAuthProvider,\n  PhoneMultiFactorGenerator,\n} from 'firebase/auth';\n\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useAuth } from 'reactfire';\nimport { SpringSpinner } from 'react-epic-spinners';\nimport type { FirebaseError } from 'firebase/app';\nimport { Trans } from 'react-i18next';\n\nimport Modal from '~/core/ui/Modal';\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\nimport Alert from '~/core/ui/Alert';\n\nimport useRequestState from '~/core/hooks/use-request-state';\nimport useRecaptchaVerifier from '~/core/firebase/hooks/use-recaptcha-verifier';\nimport AuthErrorMessage from '~/components/auth/AuthErrorMessage';\n\nconst buttonId = `multi-factor-auth-challenge-button`;\n\nconst MultiFactorAuthChallengeModal: React.FC<{\n  error: MultiFactorError;\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n  onSuccess: (credential: UserCredential) => unknown;\n  cancelButton?: boolean;\n}> = ({ error, isOpen, setIsOpen, onSuccess, cancelButton }) => {\n  const auth = useAuth();\n\n  const verificationIdState = useRequestState<string>();\n  const verificationCodeState = useRequestState<void>();\n  const getRecaptchaVerifier = useRecaptchaVerifier(buttonId);\n  const phoneVerificationSent = useRef(false);\n\n  const resolver = useMemo(() => {\n    return getMultiFactorResolver(auth, error);\n  }, [auth, error]);\n\n  const { setLoading, setData, setError, state } = verificationIdState;\n\n  const onCodeSubmit = useCallback(\n    async (verificationCode: string) => {\n      const verificationId = state.data;\n\n      if (!verificationId) {\n        return;\n      }\n\n      verificationCodeState.setLoading(true);\n\n      const phoneAuthCredential = PhoneAuthProvider.credential(\n        verificationId,\n        verificationCode\n      );\n\n      const multiFactorAssertion =\n        PhoneMultiFactorGenerator.assertion(phoneAuthCredential);\n\n      try {\n        const credential = await resolver.resolveSignIn(multiFactorAssertion);\n\n        onSuccess(credential);\n      } catch (e) {\n        const error = e as FirebaseError;\n        verificationCodeState.setError(error.code);\n      }\n    },\n    [onSuccess, resolver, state.data, verificationCodeState]\n  );\n\n  useEffect(() => {\n    if (state.loading || state.data || phoneVerificationSent.current) {\n      return;\n    }\n\n    setLoading(true);\n    phoneVerificationSent.current = true;\n\n    const phoneInfoOptions = {\n      multiFactorHint: resolver.hints[0],\n      session: resolver.session,\n    };\n\n    const phoneAuthProvider = new PhoneAuthProvider(auth);\n\n    void (async () => {\n      try {\n        const recaptchaVerifier = await getRecaptchaVerifier();\n\n        const verificationId = await phoneAuthProvider.verifyPhoneNumber(\n          phoneInfoOptions,\n          recaptchaVerifier\n        );\n\n        setData(verificationId);\n      } catch (e) {\n        console.error(e);\n        setError(e);\n      }\n    })();\n  }, [\n    auth,\n    resolver.session,\n    resolver.hints,\n    getRecaptchaVerifier,\n    setData,\n    setLoading,\n    setError,\n    state.data,\n    state.loading,\n  ]);\n\n  return (\n    <>\n      <div id={buttonId} />\n\n      <Modal\n        heading={<Trans i18nKey={'auth:verificationCode'} />}\n        isOpen={isOpen}\n        setIsOpen={setIsOpen}\n        closeButton={cancelButton}\n      >\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            const data = new FormData(e.currentTarget);\n            const code = data.get(`verificationCode`) as string;\n\n            if (!code) {\n              return;\n            }\n\n            await onCodeSubmit(code);\n          }}\n        >\n          <If condition={state.loading}>\n            <LoadingSpinner />\n          </If>\n\n          <If condition={state.error}>\n            <Alert type={'error'}>\n              <Trans i18nKey={'auth:sendMfaCodeError'} />\n            </Alert>\n          </If>\n\n          <If condition={state.data}>\n            <div className={'flex flex-col space-y-3'}>\n              <TextField.Label>\n                <Trans i18nKey={'auth:verificationCode'} />\n\n                <TextField.Input\n                  autoComplete={'off'}\n                  required\n                  name={'verificationCode'}\n                />\n\n                <TextField.Hint>\n                  <Trans i18nKey={'auth:verificationCodeHint'} />\n                </TextField.Hint>\n              </TextField.Label>\n\n              <If condition={verificationCodeState.state.error}>\n                <AuthErrorMessage\n                  error={verificationCodeState.state.error as string}\n                />\n              </If>\n\n              <Button\n                loading={verificationCodeState.state.loading}\n                block\n                type={'submit'}\n              >\n                <Trans i18nKey={'auth:verificationCodeSubmitButtonLabel'} />\n              </Button>\n            </div>\n          </If>\n        </form>\n      </Modal>\n    </>\n  );\n};\n\nfunction LoadingSpinner() {\n  return (\n    <div className={'my-6 flex flex-col items-center justify-center space-y-4'}>\n      <div>\n        <SpringSpinner color={'currentColor'} size={36} />\n      </div>\n\n      <div>\n        <p>\n          <Trans i18nKey={'auth:sendingMfaCode'} />\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default MultiFactorAuthChallengeModal;\n", "import { FirebaseError } from 'firebase/app';\nimport type { MultiFactorError } from 'firebase/auth';\n\nexport default function isMultiFactorError(\n  error: unknown\n): error is MultiFactorError {\n  if (error instanceof FirebaseError) {\n    return error.code === `auth/multi-factor-auth-required`;\n  }\n\n  return false;\n}\n"],
  "mappings": "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",
  "names": ["error"]
}
