{
  "version": 3,
  "sources": ["../../../app/components/auth/EmailPasswordSignUpContainer.tsx", "../../../app/core/firebase/hooks/use-sign-up-with-email-and-password.ts", "../../../app/components/auth/EmailPasswordSignUpForm.tsx"],
  "sourcesContent": ["import { useCallback, useEffect, useRef } from 'react';\nimport type { FirebaseError } from 'firebase/app';\nimport type { User } from 'firebase/auth';\n\nimport If from '~/core/ui/If';\nimport { useSignUpWithEmailAndPassword } from '~/core/firebase/hooks';\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\n\nimport AuthErrorMessage from './AuthErrorMessage';\nimport EmailPasswordSignUpForm from '~/components/auth/EmailPasswordSignUpForm';\n\nconst EmailPasswordSignUpContainer: React.FCC<{\n  onSignUp: (idToken: string) => unknown;\n  onError?: (error: FirebaseError) => unknown;\n}> = ({ onSignUp, onError }) => {\n  const [signUp, state] = useSignUpWithEmailAndPassword();\n  const redirecting = useRef(false);\n\n  const loading = state.loading || redirecting.current;\n\n  const callOnErrorCallback = useCallback(() => {\n    if (state.error && onError) {\n      onError(state.error);\n    }\n  }, [state.error, onError]);\n\n  const createSession = useCallback(\n    async (user: User) => {\n      // using the ID token, we will make a request to initiate the session\n      // to make SSR possible via session cookie\n      const idToken = await user.getIdToken();\n\n      redirecting.current = true;\n\n      // we notify the parent component that\n      // the user signed up successfully, so they can be redirected\n      onSignUp(idToken);\n    },\n    [onSignUp]\n  );\n\n  useEffect(() => {\n    callOnErrorCallback();\n  }, [callOnErrorCallback]);\n\n  const onSubmit = useCallback(\n    async (params: { email: string; password: string }) => {\n      if (loading) {\n        return;\n      }\n\n      const credential = await signUp(params.email, params.password);\n\n      if (credential) {\n        await createSession(credential.user);\n      }\n    },\n    [loading, signUp, createSession]\n  );\n\n  return (\n    <>\n      <If condition={state.error}>\n        {(error) => <AuthErrorMessage error={getFirebaseErrorCode(error)} />}\n      </If>\n\n      <EmailPasswordSignUpForm onSubmit={onSubmit} loading={loading} />\n    </>\n  );\n};\n\nexport default EmailPasswordSignUpContainer;\n", "import { useCallback } from 'react';\n\nimport { useAuth } from 'reactfire';\nimport type { FirebaseError } from 'firebase/app';\nimport type { UserCredential } from 'firebase/auth';\n\nimport useRequestState from '../../hooks/use-request-state';\n\nexport function useSignUpWithEmailAndPassword() {\n  const auth = useAuth();\n\n  const { state, setLoading, setData, setError } = useRequestState<\n    UserCredential,\n    FirebaseError\n  >();\n\n  const signUp = useCallback(\n    async (email: string, password: string) => {\n      setLoading(true);\n\n      try {\n        const { createUserWithEmailAndPassword } = await import(\n          'firebase/auth'\n        );\n\n        const credential = await createUserWithEmailAndPassword(\n          auth,\n          email,\n          password\n        );\n\n        setData(credential);\n\n        return credential;\n      } catch (error) {\n        setError(error as FirebaseError);\n      }\n    },\n    [auth, setData, setError, setLoading]\n  );\n\n  return [signUp, state] as [typeof signUp, typeof state];\n}\n", "import { Trans, useTranslation } from 'react-i18next';\nimport { useForm } from 'react-hook-form';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\n\nconst EmailPasswordSignUpForm: React.FCC<{\n  onSubmit: (params: {\n    email: string;\n    password: string;\n    repeatPassword: string;\n  }) => unknown;\n  loading: boolean;\n}> = ({ onSubmit, loading }) => {\n  const { t } = useTranslation();\n\n  const { register, handleSubmit, watch, formState } = useForm({\n    defaultValues: {\n      email: '',\n      password: '',\n      repeatPassword: '',\n    },\n  });\n\n  const emailControl = register('email', { required: true });\n  const errors = formState.errors;\n\n  const passwordControl = register('password', {\n    required: true,\n    minLength: {\n      value: 6,\n      message: t<string>(`auth:passwordLengthError`),\n    },\n  });\n\n  const passwordValue = watch(`password`);\n\n  const repeatPasswordControl = register('repeatPassword', {\n    required: true,\n    minLength: {\n      value: 6,\n      message: t<string>(`auth:passwordLengthError`),\n    },\n    validate: (value) => {\n      if (value !== passwordValue) {\n        return t<string>(`auth:passwordsDoNotMatch`);\n      }\n\n      return true;\n    },\n  });\n\n  return (\n    <form className={'w-full'} onSubmit={handleSubmit(onSubmit)}>\n      <div className={'flex-col space-y-4'}>\n        <TextField>\n          <TextField.Label>\n            <Trans i18nKey={'common:emailAddress'} />\n\n            <TextField.Input\n              data-cy={'email-input'}\n              required\n              type=\"email\"\n              placeholder={'your@email.com'}\n              innerRef={emailControl.ref}\n              onBlur={emailControl.onBlur}\n              onChange={emailControl.onChange}\n              name={emailControl.name}\n            />\n          </TextField.Label>\n\n          <TextField.Error error={errors.email?.message} />\n        </TextField>\n\n        <TextField>\n          <TextField.Label>\n            <Trans i18nKey={'common:password'} />\n\n            <TextField.Input\n              data-cy={'password-input'}\n              required\n              type=\"password\"\n              placeholder={''}\n              innerRef={passwordControl.ref}\n              onBlur={passwordControl.onBlur}\n              onChange={passwordControl.onChange}\n              name={passwordControl.name}\n            />\n\n            <TextField.Hint>\n              <Trans i18nKey={'auth:passwordHint'} />\n            </TextField.Hint>\n\n            <TextField.Error\n              data-cy=\"password-error\"\n              error={errors.password?.message}\n            />\n          </TextField.Label>\n        </TextField>\n\n        <TextField>\n          <TextField.Label>\n            <Trans i18nKey={'auth:repeatPassword'} />\n\n            <TextField.Input\n              data-cy={'repeat-password-input'}\n              required\n              type=\"password\"\n              placeholder={''}\n              innerRef={repeatPasswordControl.ref}\n              onBlur={repeatPasswordControl.onBlur}\n              onChange={repeatPasswordControl.onChange}\n              name={repeatPasswordControl.name}\n            />\n\n            <TextField.Hint>\n              <Trans i18nKey={'auth:repeatPasswordHint'} />\n            </TextField.Hint>\n\n            <TextField.Error\n              data-cy=\"repeat-password-error\"\n              error={errors.repeatPassword?.message}\n            />\n          </TextField.Label>\n        </TextField>\n\n        <div>\n          <Button\n            size={'large'}\n            data-cy={'auth-submit-button'}\n            className={'w-full'}\n            color={'primary'}\n            type=\"submit\"\n            loading={loading}\n          >\n            <If\n              condition={loading}\n              fallback={<Trans i18nKey={'auth:getStarted'} />}\n            >\n              <Trans i18nKey={'auth:signingUp'} />\n            </If>\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default EmailPasswordSignUpForm;\n"],
  "mappings": "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",
  "names": ["import_react"]
}
