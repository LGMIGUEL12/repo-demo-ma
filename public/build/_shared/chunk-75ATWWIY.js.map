{
  "version": 3,
  "sources": ["../../../app/core/ui/Alert.tsx"],
  "sourcesContent": ["import { useState, useMemo } from 'react';\n\nimport {\n  XMarkIcon,\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ShieldExclamationIcon,\n  InformationCircleIcon,\n} from '@heroicons/react/24/outline';\n\nimport IconButton from '~/core/ui/IconButton';\nimport If from '~/core/ui/If';\nimport Heading from '~/core/ui/Heading';\n\nconst colorClassNames = {\n  success: `AlertSuccess`,\n  error: `AlertError`,\n  warn: `AlertWarn`,\n  info: `AlertInfo`,\n};\n\nconst icons = {\n  success: () => <CheckCircleIcon className={'AlertIcon h-6'} />,\n  error: () => <ExclamationCircleIcon className={'AlertIcon h-6'} />,\n  warn: () => <ShieldExclamationIcon className={'AlertIcon h-6'} />,\n  info: () => <InformationCircleIcon className={'AlertIcon h-6'} />,\n};\n\nconst Alert: React.FCC<{\n  type: 'success' | 'error' | 'warn' | 'info';\n  useCloseButton?: boolean;\n  className?: string;\n}> & {\n  Heading: typeof AlertHeading;\n} = ({ children, type, useCloseButton, className }) => {\n  const [visible, setVisible] = useState(true);\n  const Icon = useMemo(() => icons[type](), [type]);\n\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    <div className={`Alert ${colorClassNames[type]} ${className ?? ''}`}>\n      <span className={'flex items-center space-x-2'}>\n        <span>{Icon}</span>\n        <span>{children}</span>\n      </span>\n\n      <If condition={useCloseButton ?? false}>\n        <IconButton\n          className={'dark:hover:bg-transparent'}\n          onClick={() => setVisible(false)}\n        >\n          <XMarkIcon className={'h-6'} />\n        </IconButton>\n      </If>\n    </div>\n  );\n};\n\nfunction AlertHeading({ children }: React.PropsWithChildren) {\n  return (\n    <div className={'mb-2'}>\n      <Heading type={4}>\n        <span className={'font-bold'}>{children}</span>\n      </Heading>\n    </div>\n  );\n}\n\nAlert.Heading = AlertHeading;\n\nexport default Alert;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mBAAkC;AAAlC;AAcA,IAAM,kBAAkB;AAAA,EACtB,SAAS;AAAA,EACT,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AACR;AAEA,IAAM,QAAQ;AAAA,EACZ,SAAS,MAAM,mDAAC;AAAA,IAAgB,WAAW;AAAA,KAA5B;AAAA;AAAA;AAAA;AAAA,SAA6C;AAAA,EAC5D,OAAO,MAAM,mDAAC;AAAA,IAAsB,WAAW;AAAA,KAAlC;AAAA;AAAA;AAAA;AAAA,SAAmD;AAAA,EAChE,MAAM,MAAM,mDAAC;AAAA,IAAsB,WAAW;AAAA,KAAlC;AAAA;AAAA;AAAA;AAAA,SAAmD;AAAA,EAC/D,MAAM,MAAM,mDAAC;AAAA,IAAsB,WAAW;AAAA,KAAlC;AAAA;AAAA;AAAA;AAAA,SAAmD;AACjE;AAEA,IAAM,QAMF,CAAC,EAAE,UAAU,MAAM,gBAAgB,UAAU,MAAM;AACrD,QAAM,CAAC,SAAS,UAAU,QAAI,uBAAS,IAAI;AAC3C,QAAM,WAAO,sBAAQ,MAAM,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC;AAEhD,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACT;AAEA,SACE,mDAAC;AAAA,IAAI,WAAW,SAAS,gBAAgB,SAAS,aAAa;AAAA,IAC7D;AAAA,yDAAC;AAAA,QAAK,WAAW;AAAA,QACf;AAAA,6DAAC;AAAA,YAAM;AAAA,aAAP;AAAA;AAAA;AAAA;AAAA,iBAAY;AAAA,UACZ,mDAAC;AAAA,YAAM;AAAA,aAAP;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAAA;AAAA,SAFlB;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MAEA,mDAAC;AAAA,QAAG,WAAW,kBAAkB;AAAA,QAC/B,6DAAC;AAAA,UACC,WAAW;AAAA,UACX,SAAS,MAAM,WAAW,KAAK;AAAA,UAE/B,6DAAC;AAAA,YAAU,WAAW;AAAA,aAAtB;AAAA;AAAA;AAAA;AAAA,iBAA6B;AAAA,WAJ/B;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA,SANF;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA;AAAA,KAbF;AAAA;AAAA;AAAA;AAAA,SAcA;AAEJ;AAEA,SAAS,aAAa,EAAE,SAAS,GAA4B;AAC3D,SACE,mDAAC;AAAA,IAAI,WAAW;AAAA,IACd,6DAAC;AAAA,MAAQ,MAAM;AAAA,MACb,6DAAC;AAAA,QAAK,WAAW;AAAA,QAAc;AAAA,SAA/B;AAAA;AAAA;AAAA;AAAA,aAAwC;AAAA,OAD1C;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA;AAEJ;AAEA,MAAM,UAAU;AAEhB,IAAO,gBAAQ;",
  "names": []
}
