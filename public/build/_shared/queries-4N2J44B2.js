import {
  require_assert,
  require_browser as require_browser2
} from "/build/_shared/chunk-HIGJ6TCQ.js";
import {
  require_app,
  require_buffer,
  require_buffer_equal_constant_time,
  require_credential_internal,
  require_ecdsa_sig_formatter,
  require_error,
  require_lib,
  require_package,
  require_safe_buffer,
  require_utils,
  require_validator
} from "/build/_shared/chunk-RK4TBYVM.js";
import {
  require_child_process,
  require_net,
  require_tls
} from "/build/_shared/chunk-BQRAC5F3.js";
import {
  init_querystring,
  querystring_exports,
  require_events,
  require_https,
  require_url
} from "/build/_shared/chunk-AB7SNNYG.js";
import {
  ORGANIZATIONS_COLLECTION,
  USERS_COLLECTION
} from "/build/_shared/chunk-MLX6CK2L.js";
import {
  require_browser
} from "/build/_shared/chunk-EYLCNKMF.js";
import {
  require_crypto,
  require_fs,
  require_os,
  require_path,
  require_stream,
  require_util
} from "/build/_shared/chunk-U3LVU62Z.js";
import {
  __commonJS,
  __require,
  __toCommonJS,
  __toESM
} from "/build/_shared/chunk-CUPSZOF3.js";

// node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json
var require_firestore_client_config = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.firestore.v1.Firestore": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ],
            deadline_exceeded_resource_exhausted_internal_unavailable: [
              "DEADLINE_EXCEEDED",
              "RESOURCE_EXHAUSTED",
              "INTERNAL",
              "UNAVAILABLE"
            ],
            resource_exhausted_unavailable: [
              "RESOURCE_EXHAUSTED",
              "UNAVAILABLE"
            ],
            resource_exhausted_aborted_unavailable: [
              "RESOURCE_EXHAUSTED",
              "ABORTED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            GetDocument: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            ListDocuments: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            UpdateDocument: {
              timeout_millis: 6e4,
              retry_codes_name: "resource_exhausted_unavailable",
              retry_params_name: "default"
            },
            DeleteDocument: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            BatchGetDocuments: {
              timeout_millis: 3e5,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            BeginTransaction: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            Commit: {
              timeout_millis: 6e4,
              retry_codes_name: "resource_exhausted_unavailable",
              retry_params_name: "default"
            },
            Rollback: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            RunQuery: {
              timeout_millis: 3e5,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            RunAggregationQuery: {
              timeout_millis: 3e5,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            PartitionQuery: {
              timeout_millis: 3e5,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            Write: {
              timeout_millis: 864e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            Listen: {
              timeout_millis: 864e5,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            ListCollectionIds: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_resource_exhausted_internal_unavailable",
              retry_params_name: "default"
            },
            BatchWrite: {
              timeout_millis: 6e4,
              retry_codes_name: "resource_exhausted_aborted_unavailable",
              retry_params_name: "default"
            },
            CreateDocument: {
              timeout_millis: 6e4,
              retry_codes_name: "resource_exhausted_unavailable",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/object-hash/dist/object_hash.js
var require_object_hash = __commonJS({
  "node_modules/object-hash/dist/object_hash.js"(exports2, module2) {
    !function(e) {
      var t;
      "object" == typeof exports2 ? module2.exports = e() : "function" == typeof define && define.amd ? define(e) : ("undefined" != typeof window ? t = window : "undefined" != typeof globalThis ? t = globalThis : "undefined" != typeof self && (t = self), t.objectHash = e());
    }(function() {
      return function r(o, i, u) {
        function s(n, e2) {
          if (!i[n]) {
            if (!o[n]) {
              var t = "function" == typeof __require && __require;
              if (!e2 && t)
                return t(n, true);
              if (a)
                return a(n, true);
              throw new Error("Cannot find module '" + n + "'");
            }
            e2 = i[n] = { exports: {} };
            o[n][0].call(e2.exports, function(e3) {
              var t2 = o[n][1][e3];
              return s(t2 || e3);
            }, e2, e2.exports, r, o, i, u);
          }
          return i[n].exports;
        }
        for (var a = "function" == typeof __require && __require, e = 0; e < u.length; e++)
          s(u[e]);
        return s;
      }({ 1: [function(w, b, m) {
        !function(e, n, s, c, d, h, p, g, y) {
          "use strict";
          var r = w("crypto");
          function t(e2, t2) {
            t2 = u(e2, t2);
            var n2;
            return void 0 === (n2 = "passthrough" !== t2.algorithm ? r.createHash(t2.algorithm) : new l()).write && (n2.write = n2.update, n2.end = n2.update), f(t2, n2).dispatch(e2), n2.update || n2.end(""), n2.digest ? n2.digest("buffer" === t2.encoding ? void 0 : t2.encoding) : (e2 = n2.read(), "buffer" !== t2.encoding ? e2.toString(t2.encoding) : e2);
          }
          (m = b.exports = t).sha1 = function(e2) {
            return t(e2);
          }, m.keys = function(e2) {
            return t(e2, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
          }, m.MD5 = function(e2) {
            return t(e2, { algorithm: "md5", encoding: "hex" });
          }, m.keysMD5 = function(e2) {
            return t(e2, { algorithm: "md5", encoding: "hex", excludeValues: true });
          };
          var o = r.getHashes ? r.getHashes().slice() : ["sha1", "md5"], i = (o.push("passthrough"), ["buffer", "hex", "binary", "base64"]);
          function u(e2, t2) {
            var n2 = {};
            if (n2.algorithm = (t2 = t2 || {}).algorithm || "sha1", n2.encoding = t2.encoding || "hex", n2.excludeValues = !!t2.excludeValues, n2.algorithm = n2.algorithm.toLowerCase(), n2.encoding = n2.encoding.toLowerCase(), n2.ignoreUnknown = true === t2.ignoreUnknown, n2.respectType = false !== t2.respectType, n2.respectFunctionNames = false !== t2.respectFunctionNames, n2.respectFunctionProperties = false !== t2.respectFunctionProperties, n2.unorderedArrays = true === t2.unorderedArrays, n2.unorderedSets = false !== t2.unorderedSets, n2.unorderedObjects = false !== t2.unorderedObjects, n2.replacer = t2.replacer || void 0, n2.excludeKeys = t2.excludeKeys || void 0, void 0 === e2)
              throw new Error("Object argument required.");
            for (var r2 = 0; r2 < o.length; ++r2)
              o[r2].toLowerCase() === n2.algorithm.toLowerCase() && (n2.algorithm = o[r2]);
            if (-1 === o.indexOf(n2.algorithm))
              throw new Error('Algorithm "' + n2.algorithm + '"  not supported. supported values: ' + o.join(", "));
            if (-1 === i.indexOf(n2.encoding) && "passthrough" !== n2.algorithm)
              throw new Error('Encoding "' + n2.encoding + '"  not supported. supported values: ' + i.join(", "));
            return n2;
          }
          function a(e2) {
            if ("function" == typeof e2)
              return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(e2));
          }
          function f(o2, t2, i2) {
            i2 = i2 || [];
            function u2(e2) {
              return t2.update ? t2.update(e2, "utf8") : t2.write(e2, "utf8");
            }
            return { dispatch: function(e2) {
              return this["_" + (null === (e2 = o2.replacer ? o2.replacer(e2) : e2) ? "null" : typeof e2)](e2);
            }, _object: function(t3) {
              var n2, e2 = Object.prototype.toString.call(t3), r2 = /\[object (.*)\]/i.exec(e2);
              r2 = (r2 = r2 ? r2[1] : "unknown:[" + e2 + "]").toLowerCase();
              if (0 <= (e2 = i2.indexOf(t3)))
                return this.dispatch("[CIRCULAR:" + e2 + "]");
              if (i2.push(t3), void 0 !== s && s.isBuffer && s.isBuffer(t3))
                return u2("buffer:"), u2(t3);
              if ("object" === r2 || "function" === r2 || "asyncfunction" === r2)
                return e2 = Object.keys(t3), o2.unorderedObjects && (e2 = e2.sort()), false === o2.respectType || a(t3) || e2.splice(0, 0, "prototype", "__proto__", "constructor"), o2.excludeKeys && (e2 = e2.filter(function(e3) {
                  return !o2.excludeKeys(e3);
                })), u2("object:" + e2.length + ":"), n2 = this, e2.forEach(function(e3) {
                  n2.dispatch(e3), u2(":"), o2.excludeValues || n2.dispatch(t3[e3]), u2(",");
                });
              if (!this["_" + r2]) {
                if (o2.ignoreUnknown)
                  return u2("[" + r2 + "]");
                throw new Error('Unknown object type "' + r2 + '"');
              }
              this["_" + r2](t3);
            }, _array: function(e2, t3) {
              t3 = void 0 !== t3 ? t3 : false !== o2.unorderedArrays;
              var n2 = this;
              if (u2("array:" + e2.length + ":"), !t3 || e2.length <= 1)
                return e2.forEach(function(e3) {
                  return n2.dispatch(e3);
                });
              var r2 = [], t3 = e2.map(function(e3) {
                var t4 = new l(), n3 = i2.slice();
                return f(o2, t4, n3).dispatch(e3), r2 = r2.concat(n3.slice(i2.length)), t4.read().toString();
              });
              return i2 = i2.concat(r2), t3.sort(), this._array(t3, false);
            }, _date: function(e2) {
              return u2("date:" + e2.toJSON());
            }, _symbol: function(e2) {
              return u2("symbol:" + e2.toString());
            }, _error: function(e2) {
              return u2("error:" + e2.toString());
            }, _boolean: function(e2) {
              return u2("bool:" + e2.toString());
            }, _string: function(e2) {
              u2("string:" + e2.length + ":"), u2(e2.toString());
            }, _function: function(e2) {
              u2("fn:"), a(e2) ? this.dispatch("[native]") : this.dispatch(e2.toString()), false !== o2.respectFunctionNames && this.dispatch("function-name:" + String(e2.name)), o2.respectFunctionProperties && this._object(e2);
            }, _number: function(e2) {
              return u2("number:" + e2.toString());
            }, _xml: function(e2) {
              return u2("xml:" + e2.toString());
            }, _null: function() {
              return u2("Null");
            }, _undefined: function() {
              return u2("Undefined");
            }, _regexp: function(e2) {
              return u2("regex:" + e2.toString());
            }, _uint8array: function(e2) {
              return u2("uint8array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _uint8clampedarray: function(e2) {
              return u2("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _int8array: function(e2) {
              return u2("int8array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _uint16array: function(e2) {
              return u2("uint16array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _int16array: function(e2) {
              return u2("int16array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _uint32array: function(e2) {
              return u2("uint32array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _int32array: function(e2) {
              return u2("int32array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _float32array: function(e2) {
              return u2("float32array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _float64array: function(e2) {
              return u2("float64array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _arraybuffer: function(e2) {
              return u2("arraybuffer:"), this.dispatch(new Uint8Array(e2));
            }, _url: function(e2) {
              return u2("url:" + e2.toString());
            }, _map: function(e2) {
              u2("map:");
              e2 = Array.from(e2);
              return this._array(e2, false !== o2.unorderedSets);
            }, _set: function(e2) {
              u2("set:");
              e2 = Array.from(e2);
              return this._array(e2, false !== o2.unorderedSets);
            }, _file: function(e2) {
              return u2("file:"), this.dispatch([e2.name, e2.size, e2.type, e2.lastModfied]);
            }, _blob: function() {
              if (o2.ignoreUnknown)
                return u2("[blob]");
              throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
            }, _domwindow: function() {
              return u2("domwindow");
            }, _bigint: function(e2) {
              return u2("bigint:" + e2.toString());
            }, _process: function() {
              return u2("process");
            }, _timer: function() {
              return u2("timer");
            }, _pipe: function() {
              return u2("pipe");
            }, _tcp: function() {
              return u2("tcp");
            }, _udp: function() {
              return u2("udp");
            }, _tty: function() {
              return u2("tty");
            }, _statwatcher: function() {
              return u2("statwatcher");
            }, _securecontext: function() {
              return u2("securecontext");
            }, _connection: function() {
              return u2("connection");
            }, _zlib: function() {
              return u2("zlib");
            }, _context: function() {
              return u2("context");
            }, _nodescript: function() {
              return u2("nodescript");
            }, _httpparser: function() {
              return u2("httpparser");
            }, _dataview: function() {
              return u2("dataview");
            }, _signal: function() {
              return u2("signal");
            }, _fsevent: function() {
              return u2("fsevent");
            }, _tlswrap: function() {
              return u2("tlswrap");
            } };
          }
          function l() {
            return { buf: "", write: function(e2) {
              this.buf += e2;
            }, end: function(e2) {
              this.buf += e2;
            }, read: function() {
              return this.buf;
            } };
          }
          m.writeToStream = function(e2, t2, n2) {
            return void 0 === n2 && (n2 = t2, t2 = {}), f(t2 = u(e2, t2), n2).dispatch(e2);
          };
        }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_9a5aa49d.js", "/");
      }, { buffer: 3, crypto: 5, lYpoI2: 11 }], 2: [function(e, t, f) {
        !function(e2, t2, n, r, o, i, u, s, a) {
          !function(e3) {
            "use strict";
            var a2 = "undefined" != typeof Uint8Array ? Uint8Array : Array, t3 = "+".charCodeAt(0), n2 = "/".charCodeAt(0), r2 = "0".charCodeAt(0), o2 = "a".charCodeAt(0), i2 = "A".charCodeAt(0), u2 = "-".charCodeAt(0), s2 = "_".charCodeAt(0);
            function f2(e4) {
              e4 = e4.charCodeAt(0);
              return e4 === t3 || e4 === u2 ? 62 : e4 === n2 || e4 === s2 ? 63 : e4 < r2 ? -1 : e4 < r2 + 10 ? e4 - r2 + 26 + 26 : e4 < i2 + 26 ? e4 - i2 : e4 < o2 + 26 ? e4 - o2 + 26 : void 0;
            }
            e3.toByteArray = function(e4) {
              var t4, n3;
              if (0 < e4.length % 4)
                throw new Error("Invalid string. Length must be a multiple of 4");
              var r3 = e4.length, r3 = "=" === e4.charAt(r3 - 2) ? 2 : "=" === e4.charAt(r3 - 1) ? 1 : 0, o3 = new a2(3 * e4.length / 4 - r3), i3 = 0 < r3 ? e4.length - 4 : e4.length, u3 = 0;
              function s3(e5) {
                o3[u3++] = e5;
              }
              for (t4 = 0; t4 < i3; t4 += 4, 0)
                s3((16711680 & (n3 = f2(e4.charAt(t4)) << 18 | f2(e4.charAt(t4 + 1)) << 12 | f2(e4.charAt(t4 + 2)) << 6 | f2(e4.charAt(t4 + 3)))) >> 16), s3((65280 & n3) >> 8), s3(255 & n3);
              return 2 == r3 ? s3(255 & (n3 = f2(e4.charAt(t4)) << 2 | f2(e4.charAt(t4 + 1)) >> 4)) : 1 == r3 && (s3((n3 = f2(e4.charAt(t4)) << 10 | f2(e4.charAt(t4 + 1)) << 4 | f2(e4.charAt(t4 + 2)) >> 2) >> 8 & 255), s3(255 & n3)), o3;
            }, e3.fromByteArray = function(e4) {
              var t4, n3, r3, o3, i3 = e4.length % 3, u3 = "";
              function s3(e5) {
                return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e5);
              }
              for (t4 = 0, r3 = e4.length - i3; t4 < r3; t4 += 3)
                n3 = (e4[t4] << 16) + (e4[t4 + 1] << 8) + e4[t4 + 2], u3 += s3((o3 = n3) >> 18 & 63) + s3(o3 >> 12 & 63) + s3(o3 >> 6 & 63) + s3(63 & o3);
              switch (i3) {
                case 1:
                  u3 = (u3 += s3((n3 = e4[e4.length - 1]) >> 2)) + s3(n3 << 4 & 63) + "==";
                  break;
                case 2:
                  u3 = (u3 = (u3 += s3((n3 = (e4[e4.length - 2] << 8) + e4[e4.length - 1]) >> 10)) + s3(n3 >> 4 & 63)) + s3(n3 << 2 & 63) + "=";
              }
              return u3;
            };
          }(void 0 === f ? this.base64js = {} : f);
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js", "/node_modules/gulp-browserify/node_modules/base64-js/lib");
      }, { buffer: 3, lYpoI2: 11 }], 3: [function(O, e, H) {
        !function(e2, n, f, r, h, p, g, y, w) {
          var a = O("base64-js"), i = O("ieee754");
          function f(e3, t2, n2) {
            if (!(this instanceof f))
              return new f(e3, t2, n2);
            var r2, o2, i2, u2, s2 = typeof e3;
            if ("base64" === t2 && "string" == s2)
              for (e3 = (u2 = e3).trim ? u2.trim() : u2.replace(/^\s+|\s+$/g, ""); e3.length % 4 != 0; )
                e3 += "=";
            if ("number" == s2)
              r2 = j(e3);
            else if ("string" == s2)
              r2 = f.byteLength(e3, t2);
            else {
              if ("object" != s2)
                throw new Error("First argument needs to be a number, array or string.");
              r2 = j(e3.length);
            }
            if (f._useTypedArrays ? o2 = f._augment(new Uint8Array(r2)) : ((o2 = this).length = r2, o2._isBuffer = true), f._useTypedArrays && "number" == typeof e3.byteLength)
              o2._set(e3);
            else if (C(u2 = e3) || f.isBuffer(u2) || u2 && "object" == typeof u2 && "number" == typeof u2.length)
              for (i2 = 0; i2 < r2; i2++)
                f.isBuffer(e3) ? o2[i2] = e3.readUInt8(i2) : o2[i2] = e3[i2];
            else if ("string" == s2)
              o2.write(e3, 0, t2);
            else if ("number" == s2 && !f._useTypedArrays && !n2)
              for (i2 = 0; i2 < r2; i2++)
                o2[i2] = 0;
            return o2;
          }
          function b(e3, t2, n2, r2) {
            return f._charsWritten = c(function(e4) {
              for (var t3 = [], n3 = 0; n3 < e4.length; n3++)
                t3.push(255 & e4.charCodeAt(n3));
              return t3;
            }(t2), e3, n2, r2);
          }
          function m(e3, t2, n2, r2) {
            return f._charsWritten = c(function(e4) {
              for (var t3, n3, r3 = [], o2 = 0; o2 < e4.length; o2++)
                n3 = e4.charCodeAt(o2), t3 = n3 >> 8, n3 = n3 % 256, r3.push(n3), r3.push(t3);
              return r3;
            }(t2), e3, n2, r2);
          }
          function v(e3, t2, n2) {
            var r2 = "";
            n2 = Math.min(e3.length, n2);
            for (var o2 = t2; o2 < n2; o2++)
              r2 += String.fromCharCode(e3[o2]);
            return r2;
          }
          function o(e3, t2, n2, r2) {
            r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 1 < e3.length, "Trying to read beyond buffer length"));
            var o2, r2 = e3.length;
            if (!(r2 <= t2))
              return n2 ? (o2 = e3[t2], t2 + 1 < r2 && (o2 |= e3[t2 + 1] << 8)) : (o2 = e3[t2] << 8, t2 + 1 < r2 && (o2 |= e3[t2 + 1])), o2;
          }
          function u(e3, t2, n2, r2) {
            r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length"));
            var o2, r2 = e3.length;
            if (!(r2 <= t2))
              return n2 ? (t2 + 2 < r2 && (o2 = e3[t2 + 2] << 16), t2 + 1 < r2 && (o2 |= e3[t2 + 1] << 8), o2 |= e3[t2], t2 + 3 < r2 && (o2 += e3[t2 + 3] << 24 >>> 0)) : (t2 + 1 < r2 && (o2 = e3[t2 + 1] << 16), t2 + 2 < r2 && (o2 |= e3[t2 + 2] << 8), t2 + 3 < r2 && (o2 |= e3[t2 + 3]), o2 += e3[t2] << 24 >>> 0), o2;
          }
          function _(e3, t2, n2, r2) {
            if (r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 1 < e3.length, "Trying to read beyond buffer length")), !(e3.length <= t2))
              return r2 = o(e3, t2, n2, true), 32768 & r2 ? -1 * (65535 - r2 + 1) : r2;
          }
          function E(e3, t2, n2, r2) {
            if (r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length")), !(e3.length <= t2))
              return r2 = u(e3, t2, n2, true), 2147483648 & r2 ? -1 * (4294967295 - r2 + 1) : r2;
          }
          function I(e3, t2, n2, r2) {
            return r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length")), i.read(e3, t2, n2, 23, 4);
          }
          function A(e3, t2, n2, r2) {
            return r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(t2 + 7 < e3.length, "Trying to read beyond buffer length")), i.read(e3, t2, n2, 52, 8);
          }
          function s(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 1 < e3.length, "trying to write beyond buffer length"), Y(t2, 65535));
            o2 = e3.length;
            if (!(o2 <= n2))
              for (var i2 = 0, u2 = Math.min(o2 - n2, 2); i2 < u2; i2++)
                e3[n2 + i2] = (t2 & 255 << 8 * (r2 ? i2 : 1 - i2)) >>> 8 * (r2 ? i2 : 1 - i2);
          }
          function l(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "trying to write beyond buffer length"), Y(t2, 4294967295));
            o2 = e3.length;
            if (!(o2 <= n2))
              for (var i2 = 0, u2 = Math.min(o2 - n2, 4); i2 < u2; i2++)
                e3[n2 + i2] = t2 >>> 8 * (r2 ? i2 : 3 - i2) & 255;
          }
          function B(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 1 < e3.length, "Trying to write beyond buffer length"), F(t2, 32767, -32768)), e3.length <= n2 || s(e3, 0 <= t2 ? t2 : 65535 + t2 + 1, n2, r2, o2);
          }
          function L(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "Trying to write beyond buffer length"), F(t2, 2147483647, -2147483648)), e3.length <= n2 || l(e3, 0 <= t2 ? t2 : 4294967295 + t2 + 1, n2, r2, o2);
          }
          function U(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "Trying to write beyond buffer length"), D(t2, 34028234663852886e22, -34028234663852886e22)), e3.length <= n2 || i.write(e3, t2, n2, r2, 23, 4);
          }
          function x(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 7 < e3.length, "Trying to write beyond buffer length"), D(t2, 17976931348623157e292, -17976931348623157e292)), e3.length <= n2 || i.write(e3, t2, n2, r2, 52, 8);
          }
          H.Buffer = f, H.SlowBuffer = f, H.INSPECT_MAX_BYTES = 50, f.poolSize = 8192, f._useTypedArrays = function() {
            try {
              var e3 = new ArrayBuffer(0), t2 = new Uint8Array(e3);
              return t2.foo = function() {
                return 42;
              }, 42 === t2.foo() && "function" == typeof t2.subarray;
            } catch (e4) {
              return false;
            }
          }(), f.isEncoding = function(e3) {
            switch (String(e3).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "raw":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, f.isBuffer = function(e3) {
            return !(null == e3 || !e3._isBuffer);
          }, f.byteLength = function(e3, t2) {
            var n2;
            switch (e3 += "", t2 || "utf8") {
              case "hex":
                n2 = e3.length / 2;
                break;
              case "utf8":
              case "utf-8":
                n2 = T(e3).length;
                break;
              case "ascii":
              case "binary":
              case "raw":
                n2 = e3.length;
                break;
              case "base64":
                n2 = M(e3).length;
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                n2 = 2 * e3.length;
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return n2;
          }, f.concat = function(e3, t2) {
            if (d(C(e3), "Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."), 0 === e3.length)
              return new f(0);
            if (1 === e3.length)
              return e3[0];
            if ("number" != typeof t2)
              for (o2 = t2 = 0; o2 < e3.length; o2++)
                t2 += e3[o2].length;
            for (var n2 = new f(t2), r2 = 0, o2 = 0; o2 < e3.length; o2++) {
              var i2 = e3[o2];
              i2.copy(n2, r2), r2 += i2.length;
            }
            return n2;
          }, f.prototype.write = function(e3, t2, n2, r2) {
            isFinite(t2) ? isFinite(n2) || (r2 = n2, n2 = void 0) : (a2 = r2, r2 = t2, t2 = n2, n2 = a2), t2 = Number(t2) || 0;
            var o2, i2, u2, s2, a2 = this.length - t2;
            switch ((!n2 || a2 < (n2 = Number(n2))) && (n2 = a2), r2 = String(r2 || "utf8").toLowerCase()) {
              case "hex":
                o2 = function(e4, t3, n3, r3) {
                  n3 = Number(n3) || 0;
                  var o3 = e4.length - n3;
                  (!r3 || o3 < (r3 = Number(r3))) && (r3 = o3), d((o3 = t3.length) % 2 == 0, "Invalid hex string"), o3 / 2 < r3 && (r3 = o3 / 2);
                  for (var i3 = 0; i3 < r3; i3++) {
                    var u3 = parseInt(t3.substr(2 * i3, 2), 16);
                    d(!isNaN(u3), "Invalid hex string"), e4[n3 + i3] = u3;
                  }
                  return f._charsWritten = 2 * i3, i3;
                }(this, e3, t2, n2);
                break;
              case "utf8":
              case "utf-8":
                i2 = this, u2 = t2, s2 = n2, o2 = f._charsWritten = c(T(e3), i2, u2, s2);
                break;
              case "ascii":
              case "binary":
                o2 = b(this, e3, t2, n2);
                break;
              case "base64":
                i2 = this, u2 = t2, s2 = n2, o2 = f._charsWritten = c(M(e3), i2, u2, s2);
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                o2 = m(this, e3, t2, n2);
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return o2;
          }, f.prototype.toString = function(e3, t2, n2) {
            var r2, o2, i2, u2, s2 = this;
            if (e3 = String(e3 || "utf8").toLowerCase(), t2 = Number(t2) || 0, (n2 = void 0 !== n2 ? Number(n2) : s2.length) === t2)
              return "";
            switch (e3) {
              case "hex":
                r2 = function(e4, t3, n3) {
                  var r3 = e4.length;
                  (!t3 || t3 < 0) && (t3 = 0);
                  (!n3 || n3 < 0 || r3 < n3) && (n3 = r3);
                  for (var o3 = "", i3 = t3; i3 < n3; i3++)
                    o3 += k(e4[i3]);
                  return o3;
                }(s2, t2, n2);
                break;
              case "utf8":
              case "utf-8":
                r2 = function(e4, t3, n3) {
                  var r3 = "", o3 = "";
                  n3 = Math.min(e4.length, n3);
                  for (var i3 = t3; i3 < n3; i3++)
                    e4[i3] <= 127 ? (r3 += N(o3) + String.fromCharCode(e4[i3]), o3 = "") : o3 += "%" + e4[i3].toString(16);
                  return r3 + N(o3);
                }(s2, t2, n2);
                break;
              case "ascii":
              case "binary":
                r2 = v(s2, t2, n2);
                break;
              case "base64":
                o2 = s2, u2 = n2, r2 = 0 === (i2 = t2) && u2 === o2.length ? a.fromByteArray(o2) : a.fromByteArray(o2.slice(i2, u2));
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                r2 = function(e4, t3, n3) {
                  for (var r3 = e4.slice(t3, n3), o3 = "", i3 = 0; i3 < r3.length; i3 += 2)
                    o3 += String.fromCharCode(r3[i3] + 256 * r3[i3 + 1]);
                  return o3;
                }(s2, t2, n2);
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return r2;
          }, f.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          }, f.prototype.copy = function(e3, t2, n2, r2) {
            if (t2 = t2 || 0, (r2 = r2 || 0 === r2 ? r2 : this.length) !== (n2 = n2 || 0) && 0 !== e3.length && 0 !== this.length) {
              d(n2 <= r2, "sourceEnd < sourceStart"), d(0 <= t2 && t2 < e3.length, "targetStart out of bounds"), d(0 <= n2 && n2 < this.length, "sourceStart out of bounds"), d(0 <= r2 && r2 <= this.length, "sourceEnd out of bounds"), r2 > this.length && (r2 = this.length);
              var o2 = (r2 = e3.length - t2 < r2 - n2 ? e3.length - t2 + n2 : r2) - n2;
              if (o2 < 100 || !f._useTypedArrays)
                for (var i2 = 0; i2 < o2; i2++)
                  e3[i2 + t2] = this[i2 + n2];
              else
                e3._set(this.subarray(n2, n2 + o2), t2);
            }
          }, f.prototype.slice = function(e3, t2) {
            var n2 = this.length;
            if (e3 = S(e3, n2, 0), t2 = S(t2, n2, n2), f._useTypedArrays)
              return f._augment(this.subarray(e3, t2));
            for (var r2 = t2 - e3, o2 = new f(r2, void 0, true), i2 = 0; i2 < r2; i2++)
              o2[i2] = this[i2 + e3];
            return o2;
          }, f.prototype.get = function(e3) {
            return console.log(".get() is deprecated. Access using array indexes instead."), this.readUInt8(e3);
          }, f.prototype.set = function(e3, t2) {
            return console.log(".set() is deprecated. Access using array indexes instead."), this.writeUInt8(e3, t2);
          }, f.prototype.readUInt8 = function(e3, t2) {
            if (t2 || (d(null != e3, "missing offset"), d(e3 < this.length, "Trying to read beyond buffer length")), !(e3 >= this.length))
              return this[e3];
          }, f.prototype.readUInt16LE = function(e3, t2) {
            return o(this, e3, true, t2);
          }, f.prototype.readUInt16BE = function(e3, t2) {
            return o(this, e3, false, t2);
          }, f.prototype.readUInt32LE = function(e3, t2) {
            return u(this, e3, true, t2);
          }, f.prototype.readUInt32BE = function(e3, t2) {
            return u(this, e3, false, t2);
          }, f.prototype.readInt8 = function(e3, t2) {
            if (t2 || (d(null != e3, "missing offset"), d(e3 < this.length, "Trying to read beyond buffer length")), !(e3 >= this.length))
              return 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
          }, f.prototype.readInt16LE = function(e3, t2) {
            return _(this, e3, true, t2);
          }, f.prototype.readInt16BE = function(e3, t2) {
            return _(this, e3, false, t2);
          }, f.prototype.readInt32LE = function(e3, t2) {
            return E(this, e3, true, t2);
          }, f.prototype.readInt32BE = function(e3, t2) {
            return E(this, e3, false, t2);
          }, f.prototype.readFloatLE = function(e3, t2) {
            return I(this, e3, true, t2);
          }, f.prototype.readFloatBE = function(e3, t2) {
            return I(this, e3, false, t2);
          }, f.prototype.readDoubleLE = function(e3, t2) {
            return A(this, e3, true, t2);
          }, f.prototype.readDoubleBE = function(e3, t2) {
            return A(this, e3, false, t2);
          }, f.prototype.writeUInt8 = function(e3, t2, n2) {
            n2 || (d(null != e3, "missing value"), d(null != t2, "missing offset"), d(t2 < this.length, "trying to write beyond buffer length"), Y(e3, 255)), t2 >= this.length || (this[t2] = e3);
          }, f.prototype.writeUInt16LE = function(e3, t2, n2) {
            s(this, e3, t2, true, n2);
          }, f.prototype.writeUInt16BE = function(e3, t2, n2) {
            s(this, e3, t2, false, n2);
          }, f.prototype.writeUInt32LE = function(e3, t2, n2) {
            l(this, e3, t2, true, n2);
          }, f.prototype.writeUInt32BE = function(e3, t2, n2) {
            l(this, e3, t2, false, n2);
          }, f.prototype.writeInt8 = function(e3, t2, n2) {
            n2 || (d(null != e3, "missing value"), d(null != t2, "missing offset"), d(t2 < this.length, "Trying to write beyond buffer length"), F(e3, 127, -128)), t2 >= this.length || (0 <= e3 ? this.writeUInt8(e3, t2, n2) : this.writeUInt8(255 + e3 + 1, t2, n2));
          }, f.prototype.writeInt16LE = function(e3, t2, n2) {
            B(this, e3, t2, true, n2);
          }, f.prototype.writeInt16BE = function(e3, t2, n2) {
            B(this, e3, t2, false, n2);
          }, f.prototype.writeInt32LE = function(e3, t2, n2) {
            L(this, e3, t2, true, n2);
          }, f.prototype.writeInt32BE = function(e3, t2, n2) {
            L(this, e3, t2, false, n2);
          }, f.prototype.writeFloatLE = function(e3, t2, n2) {
            U(this, e3, t2, true, n2);
          }, f.prototype.writeFloatBE = function(e3, t2, n2) {
            U(this, e3, t2, false, n2);
          }, f.prototype.writeDoubleLE = function(e3, t2, n2) {
            x(this, e3, t2, true, n2);
          }, f.prototype.writeDoubleBE = function(e3, t2, n2) {
            x(this, e3, t2, false, n2);
          }, f.prototype.fill = function(e3, t2, n2) {
            if (t2 = t2 || 0, n2 = n2 || this.length, d("number" == typeof (e3 = "string" == typeof (e3 = e3 || 0) ? e3.charCodeAt(0) : e3) && !isNaN(e3), "value is not a number"), d(t2 <= n2, "end < start"), n2 !== t2 && 0 !== this.length) {
              d(0 <= t2 && t2 < this.length, "start out of bounds"), d(0 <= n2 && n2 <= this.length, "end out of bounds");
              for (var r2 = t2; r2 < n2; r2++)
                this[r2] = e3;
            }
          }, f.prototype.inspect = function() {
            for (var e3 = [], t2 = this.length, n2 = 0; n2 < t2; n2++)
              if (e3[n2] = k(this[n2]), n2 === H.INSPECT_MAX_BYTES) {
                e3[n2 + 1] = "...";
                break;
              }
            return "<Buffer " + e3.join(" ") + ">";
          }, f.prototype.toArrayBuffer = function() {
            if ("undefined" == typeof Uint8Array)
              throw new Error("Buffer.toArrayBuffer not supported in this browser");
            if (f._useTypedArrays)
              return new f(this).buffer;
            for (var e3 = new Uint8Array(this.length), t2 = 0, n2 = e3.length; t2 < n2; t2 += 1)
              e3[t2] = this[t2];
            return e3.buffer;
          };
          var t = f.prototype;
          function S(e3, t2, n2) {
            return "number" != typeof e3 ? n2 : t2 <= (e3 = ~~e3) ? t2 : 0 <= e3 || 0 <= (e3 += t2) ? e3 : 0;
          }
          function j(e3) {
            return (e3 = ~~Math.ceil(+e3)) < 0 ? 0 : e3;
          }
          function C(e3) {
            return (Array.isArray || function(e4) {
              return "[object Array]" === Object.prototype.toString.call(e4);
            })(e3);
          }
          function k(e3) {
            return e3 < 16 ? "0" + e3.toString(16) : e3.toString(16);
          }
          function T(e3) {
            for (var t2 = [], n2 = 0; n2 < e3.length; n2++) {
              var r2 = e3.charCodeAt(n2);
              if (r2 <= 127)
                t2.push(e3.charCodeAt(n2));
              else
                for (var o2 = n2, i2 = (55296 <= r2 && r2 <= 57343 && n2++, encodeURIComponent(e3.slice(o2, n2 + 1)).substr(1).split("%")), u2 = 0; u2 < i2.length; u2++)
                  t2.push(parseInt(i2[u2], 16));
            }
            return t2;
          }
          function M(e3) {
            return a.toByteArray(e3);
          }
          function c(e3, t2, n2, r2) {
            for (var o2 = 0; o2 < r2 && !(o2 + n2 >= t2.length || o2 >= e3.length); o2++)
              t2[o2 + n2] = e3[o2];
            return o2;
          }
          function N(e3) {
            try {
              return decodeURIComponent(e3);
            } catch (e4) {
              return String.fromCharCode(65533);
            }
          }
          function Y(e3, t2) {
            d("number" == typeof e3, "cannot write a non-number as a number"), d(0 <= e3, "specified a negative value for writing an unsigned value"), d(e3 <= t2, "value is larger than maximum value for type"), d(Math.floor(e3) === e3, "value has a fractional component");
          }
          function F(e3, t2, n2) {
            d("number" == typeof e3, "cannot write a non-number as a number"), d(e3 <= t2, "value larger than maximum allowed value"), d(n2 <= e3, "value smaller than minimum allowed value"), d(Math.floor(e3) === e3, "value has a fractional component");
          }
          function D(e3, t2, n2) {
            d("number" == typeof e3, "cannot write a non-number as a number"), d(e3 <= t2, "value larger than maximum allowed value"), d(n2 <= e3, "value smaller than minimum allowed value");
          }
          function d(e3, t2) {
            if (!e3)
              throw new Error(t2 || "Failed assertion");
          }
          f._augment = function(e3) {
            return e3._isBuffer = true, e3._get = e3.get, e3._set = e3.set, e3.get = t.get, e3.set = t.set, e3.write = t.write, e3.toString = t.toString, e3.toLocaleString = t.toString, e3.toJSON = t.toJSON, e3.copy = t.copy, e3.slice = t.slice, e3.readUInt8 = t.readUInt8, e3.readUInt16LE = t.readUInt16LE, e3.readUInt16BE = t.readUInt16BE, e3.readUInt32LE = t.readUInt32LE, e3.readUInt32BE = t.readUInt32BE, e3.readInt8 = t.readInt8, e3.readInt16LE = t.readInt16LE, e3.readInt16BE = t.readInt16BE, e3.readInt32LE = t.readInt32LE, e3.readInt32BE = t.readInt32BE, e3.readFloatLE = t.readFloatLE, e3.readFloatBE = t.readFloatBE, e3.readDoubleLE = t.readDoubleLE, e3.readDoubleBE = t.readDoubleBE, e3.writeUInt8 = t.writeUInt8, e3.writeUInt16LE = t.writeUInt16LE, e3.writeUInt16BE = t.writeUInt16BE, e3.writeUInt32LE = t.writeUInt32LE, e3.writeUInt32BE = t.writeUInt32BE, e3.writeInt8 = t.writeInt8, e3.writeInt16LE = t.writeInt16LE, e3.writeInt16BE = t.writeInt16BE, e3.writeInt32LE = t.writeInt32LE, e3.writeInt32BE = t.writeInt32BE, e3.writeFloatLE = t.writeFloatLE, e3.writeFloatBE = t.writeFloatBE, e3.writeDoubleLE = t.writeDoubleLE, e3.writeDoubleBE = t.writeDoubleBE, e3.fill = t.fill, e3.inspect = t.inspect, e3.toArrayBuffer = t.toArrayBuffer, e3;
          };
        }.call(this, O("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, O("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/buffer/index.js", "/node_modules/gulp-browserify/node_modules/buffer");
      }, { "base64-js": 2, buffer: 3, ieee754: 10, lYpoI2: 11 }], 4: [function(c, d, e) {
        !function(e2, t, a, n, r, o, i, u, s) {
          var a = c("buffer").Buffer, f = 4, l = new a(f);
          l.fill(0);
          d.exports = { hash: function(e3, t2, n2, r2) {
            for (var o2 = t2(function(e4, t3) {
              e4.length % f != 0 && (n3 = e4.length + (f - e4.length % f), e4 = a.concat([e4, l], n3));
              for (var n3, r3 = [], o3 = t3 ? e4.readInt32BE : e4.readInt32LE, i3 = 0; i3 < e4.length; i3 += f)
                r3.push(o3.call(e4, i3));
              return r3;
            }(e3 = a.isBuffer(e3) ? e3 : new a(e3), r2), 8 * e3.length), t2 = r2, i2 = new a(n2), u2 = t2 ? i2.writeInt32BE : i2.writeInt32LE, s2 = 0; s2 < o2.length; s2++)
              u2.call(i2, o2[s2], 4 * s2, true);
            return i2;
          } };
        }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { buffer: 3, lYpoI2: 11 }], 5: [function(v, e, _) {
        !function(l, c, u, d, h, p, g, y, w) {
          var u = v("buffer").Buffer, e2 = v("./sha"), t = v("./sha256"), n = v("./rng"), b = { sha1: e2, sha256: t, md5: v("./md5") }, s = 64, a = new u(s);
          function r(e3, n2) {
            var r2 = b[e3 = e3 || "sha1"], o2 = [];
            return r2 || i("algorithm:", e3, "is not yet supported"), { update: function(e4) {
              return u.isBuffer(e4) || (e4 = new u(e4)), o2.push(e4), e4.length, this;
            }, digest: function(e4) {
              var t2 = u.concat(o2), t2 = n2 ? function(e5, t3, n3) {
                u.isBuffer(t3) || (t3 = new u(t3)), u.isBuffer(n3) || (n3 = new u(n3)), t3.length > s ? t3 = e5(t3) : t3.length < s && (t3 = u.concat([t3, a], s));
                for (var r3 = new u(s), o3 = new u(s), i2 = 0; i2 < s; i2++)
                  r3[i2] = 54 ^ t3[i2], o3[i2] = 92 ^ t3[i2];
                return n3 = e5(u.concat([r3, n3])), e5(u.concat([o3, n3]));
              }(r2, n2, t2) : r2(t2);
              return o2 = null, e4 ? t2.toString(e4) : t2;
            } };
          }
          function i() {
            var e3 = [].slice.call(arguments).join(" ");
            throw new Error([e3, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify"].join("\n"));
          }
          a.fill(0), _.createHash = function(e3) {
            return r(e3);
          }, _.createHmac = r, _.randomBytes = function(e3, t2) {
            if (!t2 || !t2.call)
              return new u(n(e3));
            try {
              t2.call(this, void 0, new u(n(e3)));
            } catch (e4) {
              t2(e4);
            }
          };
          var o, f = ["createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman", "pbkdf2"], m = function(e3) {
            _[e3] = function() {
              i("sorry,", e3, "is not implemented yet");
            };
          };
          for (o in f)
            m(f[o], o);
        }.call(this, v("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, v("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./md5": 6, "./rng": 7, "./sha": 8, "./sha256": 9, buffer: 3, lYpoI2: 11 }], 6: [function(w, b, e) {
        !function(e2, r, o, i, u, a, f, l, y) {
          var t = w("./helpers");
          function n(e3, t2) {
            e3[t2 >> 5] |= 128 << t2 % 32, e3[14 + (t2 + 64 >>> 9 << 4)] = t2;
            for (var n2 = 1732584193, r2 = -271733879, o2 = -1732584194, i2 = 271733878, u2 = 0; u2 < e3.length; u2 += 16) {
              var s2 = n2, a2 = r2, f2 = o2, l2 = i2, n2 = c(n2, r2, o2, i2, e3[u2 + 0], 7, -680876936), i2 = c(i2, n2, r2, o2, e3[u2 + 1], 12, -389564586), o2 = c(o2, i2, n2, r2, e3[u2 + 2], 17, 606105819), r2 = c(r2, o2, i2, n2, e3[u2 + 3], 22, -1044525330);
              n2 = c(n2, r2, o2, i2, e3[u2 + 4], 7, -176418897), i2 = c(i2, n2, r2, o2, e3[u2 + 5], 12, 1200080426), o2 = c(o2, i2, n2, r2, e3[u2 + 6], 17, -1473231341), r2 = c(r2, o2, i2, n2, e3[u2 + 7], 22, -45705983), n2 = c(n2, r2, o2, i2, e3[u2 + 8], 7, 1770035416), i2 = c(i2, n2, r2, o2, e3[u2 + 9], 12, -1958414417), o2 = c(o2, i2, n2, r2, e3[u2 + 10], 17, -42063), r2 = c(r2, o2, i2, n2, e3[u2 + 11], 22, -1990404162), n2 = c(n2, r2, o2, i2, e3[u2 + 12], 7, 1804603682), i2 = c(i2, n2, r2, o2, e3[u2 + 13], 12, -40341101), o2 = c(o2, i2, n2, r2, e3[u2 + 14], 17, -1502002290), n2 = d(n2, r2 = c(r2, o2, i2, n2, e3[u2 + 15], 22, 1236535329), o2, i2, e3[u2 + 1], 5, -165796510), i2 = d(i2, n2, r2, o2, e3[u2 + 6], 9, -1069501632), o2 = d(o2, i2, n2, r2, e3[u2 + 11], 14, 643717713), r2 = d(r2, o2, i2, n2, e3[u2 + 0], 20, -373897302), n2 = d(n2, r2, o2, i2, e3[u2 + 5], 5, -701558691), i2 = d(i2, n2, r2, o2, e3[u2 + 10], 9, 38016083), o2 = d(o2, i2, n2, r2, e3[u2 + 15], 14, -660478335), r2 = d(r2, o2, i2, n2, e3[u2 + 4], 20, -405537848), n2 = d(n2, r2, o2, i2, e3[u2 + 9], 5, 568446438), i2 = d(i2, n2, r2, o2, e3[u2 + 14], 9, -1019803690), o2 = d(o2, i2, n2, r2, e3[u2 + 3], 14, -187363961), r2 = d(r2, o2, i2, n2, e3[u2 + 8], 20, 1163531501), n2 = d(n2, r2, o2, i2, e3[u2 + 13], 5, -1444681467), i2 = d(i2, n2, r2, o2, e3[u2 + 2], 9, -51403784), o2 = d(o2, i2, n2, r2, e3[u2 + 7], 14, 1735328473), n2 = h(n2, r2 = d(r2, o2, i2, n2, e3[u2 + 12], 20, -1926607734), o2, i2, e3[u2 + 5], 4, -378558), i2 = h(i2, n2, r2, o2, e3[u2 + 8], 11, -2022574463), o2 = h(o2, i2, n2, r2, e3[u2 + 11], 16, 1839030562), r2 = h(r2, o2, i2, n2, e3[u2 + 14], 23, -35309556), n2 = h(n2, r2, o2, i2, e3[u2 + 1], 4, -1530992060), i2 = h(i2, n2, r2, o2, e3[u2 + 4], 11, 1272893353), o2 = h(o2, i2, n2, r2, e3[u2 + 7], 16, -155497632), r2 = h(r2, o2, i2, n2, e3[u2 + 10], 23, -1094730640), n2 = h(n2, r2, o2, i2, e3[u2 + 13], 4, 681279174), i2 = h(i2, n2, r2, o2, e3[u2 + 0], 11, -358537222), o2 = h(o2, i2, n2, r2, e3[u2 + 3], 16, -722521979), r2 = h(r2, o2, i2, n2, e3[u2 + 6], 23, 76029189), n2 = h(n2, r2, o2, i2, e3[u2 + 9], 4, -640364487), i2 = h(i2, n2, r2, o2, e3[u2 + 12], 11, -421815835), o2 = h(o2, i2, n2, r2, e3[u2 + 15], 16, 530742520), n2 = p(n2, r2 = h(r2, o2, i2, n2, e3[u2 + 2], 23, -995338651), o2, i2, e3[u2 + 0], 6, -198630844), i2 = p(i2, n2, r2, o2, e3[u2 + 7], 10, 1126891415), o2 = p(o2, i2, n2, r2, e3[u2 + 14], 15, -1416354905), r2 = p(r2, o2, i2, n2, e3[u2 + 5], 21, -57434055), n2 = p(n2, r2, o2, i2, e3[u2 + 12], 6, 1700485571), i2 = p(i2, n2, r2, o2, e3[u2 + 3], 10, -1894986606), o2 = p(o2, i2, n2, r2, e3[u2 + 10], 15, -1051523), r2 = p(r2, o2, i2, n2, e3[u2 + 1], 21, -2054922799), n2 = p(n2, r2, o2, i2, e3[u2 + 8], 6, 1873313359), i2 = p(i2, n2, r2, o2, e3[u2 + 15], 10, -30611744), o2 = p(o2, i2, n2, r2, e3[u2 + 6], 15, -1560198380), r2 = p(r2, o2, i2, n2, e3[u2 + 13], 21, 1309151649), n2 = p(n2, r2, o2, i2, e3[u2 + 4], 6, -145523070), i2 = p(i2, n2, r2, o2, e3[u2 + 11], 10, -1120210379), o2 = p(o2, i2, n2, r2, e3[u2 + 2], 15, 718787259), r2 = p(r2, o2, i2, n2, e3[u2 + 9], 21, -343485551), n2 = g(n2, s2), r2 = g(r2, a2), o2 = g(o2, f2), i2 = g(i2, l2);
            }
            return Array(n2, r2, o2, i2);
          }
          function s(e3, t2, n2, r2, o2, i2) {
            return g((t2 = g(g(t2, e3), g(r2, i2))) << o2 | t2 >>> 32 - o2, n2);
          }
          function c(e3, t2, n2, r2, o2, i2, u2) {
            return s(t2 & n2 | ~t2 & r2, e3, t2, o2, i2, u2);
          }
          function d(e3, t2, n2, r2, o2, i2, u2) {
            return s(t2 & r2 | n2 & ~r2, e3, t2, o2, i2, u2);
          }
          function h(e3, t2, n2, r2, o2, i2, u2) {
            return s(t2 ^ n2 ^ r2, e3, t2, o2, i2, u2);
          }
          function p(e3, t2, n2, r2, o2, i2, u2) {
            return s(n2 ^ (t2 | ~r2), e3, t2, o2, i2, u2);
          }
          function g(e3, t2) {
            var n2 = (65535 & e3) + (65535 & t2);
            return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          b.exports = function(e3) {
            return t.hash(e3, n, 16);
          };
        }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 7: [function(e, l, t) {
        !function(e2, t2, n, r, o, i, u, s, f) {
          var a;
          l.exports = a || function(e3) {
            for (var t3, n2 = new Array(e3), r2 = 0; r2 < e3; r2++)
              0 == (3 & r2) && (t3 = 4294967296 * Math.random()), n2[r2] = t3 >>> ((3 & r2) << 3) & 255;
            return n2;
          };
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { buffer: 3, lYpoI2: 11 }], 8: [function(c, d, e) {
        !function(e2, t, n, r, o, s, a, f, l) {
          var i = c("./helpers");
          function u(l2, c2) {
            l2[c2 >> 5] |= 128 << 24 - c2 % 32, l2[15 + (c2 + 64 >> 9 << 4)] = c2;
            for (var e3, t2, n2, r2 = Array(80), o2 = 1732584193, i2 = -271733879, u2 = -1732584194, s2 = 271733878, d2 = -1009589776, h = 0; h < l2.length; h += 16) {
              for (var p = o2, g = i2, y = u2, w = s2, b = d2, a2 = 0; a2 < 80; a2++) {
                r2[a2] = a2 < 16 ? l2[h + a2] : v(r2[a2 - 3] ^ r2[a2 - 8] ^ r2[a2 - 14] ^ r2[a2 - 16], 1);
                var f2 = m(m(v(o2, 5), (f2 = i2, t2 = u2, n2 = s2, (e3 = a2) < 20 ? f2 & t2 | ~f2 & n2 : !(e3 < 40) && e3 < 60 ? f2 & t2 | f2 & n2 | t2 & n2 : f2 ^ t2 ^ n2)), m(m(d2, r2[a2]), (e3 = a2) < 20 ? 1518500249 : e3 < 40 ? 1859775393 : e3 < 60 ? -1894007588 : -899497514)), d2 = s2, s2 = u2, u2 = v(i2, 30), i2 = o2, o2 = f2;
              }
              o2 = m(o2, p), i2 = m(i2, g), u2 = m(u2, y), s2 = m(s2, w), d2 = m(d2, b);
            }
            return Array(o2, i2, u2, s2, d2);
          }
          function m(e3, t2) {
            var n2 = (65535 & e3) + (65535 & t2);
            return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          function v(e3, t2) {
            return e3 << t2 | e3 >>> 32 - t2;
          }
          d.exports = function(e3) {
            return i.hash(e3, u, 20, true);
          };
        }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 9: [function(c, d, e) {
        !function(e2, t, n, r, u, s, a, f, l) {
          function b(e3, t2) {
            var n2 = (65535 & e3) + (65535 & t2);
            return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          function o(e3, l2) {
            var c2, d2 = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298), t2 = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225), n2 = new Array(64);
            e3[l2 >> 5] |= 128 << 24 - l2 % 32, e3[15 + (l2 + 64 >> 9 << 4)] = l2;
            for (var r2, o2, h = 0; h < e3.length; h += 16) {
              for (var i2 = t2[0], u2 = t2[1], s2 = t2[2], p = t2[3], a2 = t2[4], g = t2[5], y = t2[6], w = t2[7], f2 = 0; f2 < 64; f2++)
                n2[f2] = f2 < 16 ? e3[f2 + h] : b(b(b((o2 = n2[f2 - 2], m(o2, 17) ^ m(o2, 19) ^ v(o2, 10)), n2[f2 - 7]), (o2 = n2[f2 - 15], m(o2, 7) ^ m(o2, 18) ^ v(o2, 3))), n2[f2 - 16]), c2 = b(b(b(b(w, m(o2 = a2, 6) ^ m(o2, 11) ^ m(o2, 25)), a2 & g ^ ~a2 & y), d2[f2]), n2[f2]), r2 = b(m(r2 = i2, 2) ^ m(r2, 13) ^ m(r2, 22), i2 & u2 ^ i2 & s2 ^ u2 & s2), w = y, y = g, g = a2, a2 = b(p, c2), p = s2, s2 = u2, u2 = i2, i2 = b(c2, r2);
              t2[0] = b(i2, t2[0]), t2[1] = b(u2, t2[1]), t2[2] = b(s2, t2[2]), t2[3] = b(p, t2[3]), t2[4] = b(a2, t2[4]), t2[5] = b(g, t2[5]), t2[6] = b(y, t2[6]), t2[7] = b(w, t2[7]);
            }
            return t2;
          }
          var i = c("./helpers"), m = function(e3, t2) {
            return e3 >>> t2 | e3 << 32 - t2;
          }, v = function(e3, t2) {
            return e3 >>> t2;
          };
          d.exports = function(e3) {
            return i.hash(e3, o, 32, true);
          };
        }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 10: [function(e, t, f) {
        !function(e2, t2, n, r, o, i, u, s, a) {
          f.read = function(e3, t3, n2, r2, o2) {
            var i2, u2, l = 8 * o2 - r2 - 1, c = (1 << l) - 1, d = c >> 1, s2 = -7, a2 = n2 ? o2 - 1 : 0, f2 = n2 ? -1 : 1, o2 = e3[t3 + a2];
            for (a2 += f2, i2 = o2 & (1 << -s2) - 1, o2 >>= -s2, s2 += l; 0 < s2; i2 = 256 * i2 + e3[t3 + a2], a2 += f2, s2 -= 8)
              ;
            for (u2 = i2 & (1 << -s2) - 1, i2 >>= -s2, s2 += r2; 0 < s2; u2 = 256 * u2 + e3[t3 + a2], a2 += f2, s2 -= 8)
              ;
            if (0 === i2)
              i2 = 1 - d;
            else {
              if (i2 === c)
                return u2 ? NaN : 1 / 0 * (o2 ? -1 : 1);
              u2 += Math.pow(2, r2), i2 -= d;
            }
            return (o2 ? -1 : 1) * u2 * Math.pow(2, i2 - r2);
          }, f.write = function(e3, t3, l, n2, r2, c) {
            var o2, i2, u2 = 8 * c - r2 - 1, s2 = (1 << u2) - 1, a2 = s2 >> 1, d = 23 === r2 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f2 = n2 ? 0 : c - 1, h = n2 ? 1 : -1, c = t3 < 0 || 0 === t3 && 1 / t3 < 0 ? 1 : 0;
            for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (i2 = isNaN(t3) ? 1 : 0, o2 = s2) : (o2 = Math.floor(Math.log(t3) / Math.LN2), t3 * (n2 = Math.pow(2, -o2)) < 1 && (o2--, n2 *= 2), 2 <= (t3 += 1 <= o2 + a2 ? d / n2 : d * Math.pow(2, 1 - a2)) * n2 && (o2++, n2 /= 2), s2 <= o2 + a2 ? (i2 = 0, o2 = s2) : 1 <= o2 + a2 ? (i2 = (t3 * n2 - 1) * Math.pow(2, r2), o2 += a2) : (i2 = t3 * Math.pow(2, a2 - 1) * Math.pow(2, r2), o2 = 0)); 8 <= r2; e3[l + f2] = 255 & i2, f2 += h, i2 /= 256, r2 -= 8)
              ;
            for (o2 = o2 << r2 | i2, u2 += r2; 0 < u2; e3[l + f2] = 255 & o2, f2 += h, o2 /= 256, u2 -= 8)
              ;
            e3[l + f2 - h] |= 128 * c;
          };
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/ieee754/index.js", "/node_modules/gulp-browserify/node_modules/ieee754");
      }, { buffer: 3, lYpoI2: 11 }], 11: [function(e, h, t) {
        !function(e2, t2, n, r, o, f, l, c, d) {
          var i, u, s;
          function a() {
          }
          (e2 = h.exports = {}).nextTick = (u = "undefined" != typeof window && window.setImmediate, s = "undefined" != typeof window && window.postMessage && window.addEventListener, u ? function(e3) {
            return window.setImmediate(e3);
          } : s ? (i = [], window.addEventListener("message", function(e3) {
            var t3 = e3.source;
            t3 !== window && null !== t3 || "process-tick" !== e3.data || (e3.stopPropagation(), 0 < i.length && i.shift()());
          }, true), function(e3) {
            i.push(e3), window.postMessage("process-tick", "*");
          }) : function(e3) {
            setTimeout(e3, 0);
          }), e2.title = "browser", e2.browser = true, e2.env = {}, e2.argv = [], e2.on = a, e2.addListener = a, e2.once = a, e2.off = a, e2.removeListener = a, e2.removeAllListeners = a, e2.emit = a, e2.binding = function(e3) {
            throw new Error("process.binding is not supported");
          }, e2.cwd = function() {
            return "/";
          }, e2.chdir = function(e3) {
            throw new Error("process.chdir is not supported");
          };
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/process/browser.js", "/node_modules/gulp-browserify/node_modules/process");
      }, { buffer: 3, lYpoI2: 11 }] }, {}, [1])(1);
    });
  }
});

// node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = asPromise;
    function asPromise(fn, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
      while (index < arguments.length)
        params[offset++] = arguments[index++];
      return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err) {
          if (pending) {
            pending = false;
            if (err)
              reject(err);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve.apply(null, params2);
            }
          }
        };
        try {
          fn.apply(ctx || null, params);
        } catch (err) {
          if (pending) {
            pending = false;
            reject(err);
          }
        }
      });
    }
  }
});

// node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    var base64 = exports2;
    base64.length = function length(string) {
      var p = string.length;
      if (!p)
        return 0;
      var n = 0;
      while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
      return Math.ceil(string.length * 3) / 4 - n;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i = 0; i < 64; )
      s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
    var i;
    base64.encode = function encode(buffer, start, end) {
      var parts = null, chunk = [];
      var i2 = 0, j = 0, t;
      while (start < end) {
        var b = buffer[start++];
        switch (j) {
          case 0:
            chunk[i2++] = b64[b >> 2];
            t = (b & 3) << 4;
            j = 1;
            break;
          case 1:
            chunk[i2++] = b64[t | b >> 4];
            t = (b & 15) << 2;
            j = 2;
            break;
          case 2:
            chunk[i2++] = b64[t | b >> 6];
            chunk[i2++] = b64[b & 63];
            j = 0;
            break;
        }
        if (i2 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i2 = 0;
        }
      }
      if (j) {
        chunk[i2++] = b64[t];
        chunk[i2++] = 61;
        if (j === 1)
          chunk[i2++] = 61;
      }
      if (parts) {
        if (i2)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i2));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer, offset) {
      var start = offset;
      var j = 0, t;
      for (var i2 = 0; i2 < string.length; ) {
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1)
          break;
        if ((c = s64[c]) === void 0)
          throw Error(invalidEncoding);
        switch (j) {
          case 0:
            t = c;
            j = 1;
            break;
          case 1:
            buffer[offset++] = t << 2 | (c & 48) >> 4;
            t = c;
            j = 2;
            break;
          case 2:
            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
            t = c;
            j = 3;
            break;
          case 3:
            buffer[offset++] = (t & 3) << 6 | c;
            j = 0;
            break;
        }
      }
      if (j === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i = 0; i < listeners.length; )
            if (listeners[i].fn === fn)
              listeners.splice(i, 1);
            else
              ++i;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i = 1;
        for (; i < arguments.length; )
          args.push(arguments[i++]);
        for (i = 0; i < listeners.length; )
          listeners[i].fn.apply(listeners[i++].ctx, args);
      }
      return this;
    };
  }
});

// node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e) {
      }
      return null;
    }
  }
});

// node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c = 0;
      for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
          len += 1;
        else if (c < 2048)
          len += 2;
        else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
          ++i;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i = 0, t;
      while (start < end) {
        t = buffer[start++];
        if (t < 128)
          chunk[i++] = t;
        else if (t > 191 && t < 224)
          chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i++] = 55296 + (t >> 10);
          chunk[i++] = 56320 + (t & 1023);
        } else
          chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i = 0;
        }
      }
      if (parts) {
        if (i)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c2;
      for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
          ++i;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash) {
      if (hash === zeroHash)
        return zero;
      return new LongBits(
        (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
        (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.isNode = Boolean(typeof globalThis !== "undefined" && globalThis && globalThis.process && globalThis.process.versions && globalThis.process.versions.node);
    util.global = util.isNode && globalThis || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : [];
    util.emptyObject = Object.freeze ? Object.freeze({}) : {};
    util.isInteger = Number.isInteger || function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject(value) {
      return value && typeof value === "object";
    };
    util.isset = util.isSet = function isSet(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : null;
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = util.global.dcodeIO && util.global.dcodeIO.Long || util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash, unsigned) {
      var bits = util.LongBits.fromHash(hash);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      CustomError.prototype = Object.create(Error.prototype, {
        constructor: {
          value: CustomError,
          writable: true,
          enumerable: false,
          configurable: true
        },
        name: {
          get() {
            return name;
          },
          set: void 0,
          enumerable: false,
          configurable: true
        },
        toString: {
          value() {
            return this.name + ": " + this.message;
          },
          writable: true,
          enumerable: false,
          configurable: true
        }
      });
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i = 0; i < val.length; )
            buf[pos++] = val[i++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util.Long ? "toLong" : "toNumber";
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err, response) {
            if (err) {
              self2.emit("error", err, method);
              return callback(err);
            }
            if (response === null) {
              self2.end(true);
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err2) {
                self2.emit("error", err2, method);
                return callback(err2);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err) {
        self2.emit("error", err, method);
        setTimeout(function() {
          callback(err);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// node_modules/@protobufjs/codegen/index.js
var require_codegen = __commonJS({
  "node_modules/@protobufjs/codegen/index.js"(exports2, module2) {
    "use strict";
    module2.exports = codegen;
    function codegen(functionParams, functionName) {
      if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = void 0;
      }
      var body = [];
      function Codegen(formatStringOrScope) {
        if (typeof formatStringOrScope !== "string") {
          var source = toString();
          if (codegen.verbose)
            console.log("codegen: " + source);
          source = "return " + source;
          if (formatStringOrScope) {
            var scopeKeys = Object.keys(formatStringOrScope), scopeParams = new Array(scopeKeys.length + 1), scopeValues = new Array(scopeKeys.length), scopeOffset = 0;
            while (scopeOffset < scopeKeys.length) {
              scopeParams[scopeOffset] = scopeKeys[scopeOffset];
              scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
            }
            scopeParams[scopeOffset] = source;
            return Function.apply(null, scopeParams).apply(null, scopeValues);
          }
          return Function(source)();
        }
        var formatParams = new Array(arguments.length - 1), formatOffset = 0;
        while (formatOffset < formatParams.length)
          formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
          var value = formatParams[formatOffset++];
          switch ($1) {
            case "d":
            case "f":
              return String(Number(value));
            case "i":
              return String(Math.floor(value));
            case "j":
              return JSON.stringify(value);
            case "s":
              return String(value);
          }
          return "%";
        });
        if (formatOffset !== formatParams.length)
          throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
      }
      function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
      }
      Codegen.toString = toString;
      return Codegen;
    }
    codegen.verbose = false;
  }
});

// node_modules/@protobufjs/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/@protobufjs/fetch/index.js"(exports2, module2) {
    "use strict";
    module2.exports = fetch;
    var asPromise = require_aspromise();
    var inquire2 = require_inquire();
    var fs = inquire2("fs");
    function fetch(filename, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      } else if (!options)
        options = {};
      if (!callback)
        return asPromise(fetch, this, filename, options);
      if (!options.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
          return err && typeof XMLHttpRequest !== "undefined" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString("utf8"));
        });
      return fetch.xhr(filename, options, callback);
    }
    fetch.xhr = function fetch_xhr(filename, options, callback) {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function fetchOnReadyStateChange() {
        if (xhr.readyState !== 4)
          return void 0;
        if (xhr.status !== 0 && xhr.status !== 200)
          return callback(Error("status " + xhr.status));
        if (options.binary) {
          var buffer = xhr.response;
          if (!buffer) {
            buffer = [];
            for (var i = 0; i < xhr.responseText.length; ++i)
              buffer.push(xhr.responseText.charCodeAt(i) & 255);
          }
          return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
      };
      if (options.binary) {
        if ("overrideMimeType" in xhr)
          xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
      }
      xhr.open("GET", filename);
      xhr.send();
    };
  }
});

// node_modules/@protobufjs/path/index.js
var require_path2 = __commonJS({
  "node_modules/@protobufjs/path/index.js"(exports2) {
    "use strict";
    var path = exports2;
    var isAbsolute = path.isAbsolute = function isAbsolute2(path2) {
      return /^(?:\/|\w+:)/.test(path2);
    };
    var normalize = path.normalize = function normalize2(path2) {
      path2 = path2.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
      var parts = path2.split("/"), absolute = isAbsolute(path2), prefix = "";
      if (absolute)
        prefix = parts.shift() + "/";
      for (var i = 0; i < parts.length; ) {
        if (parts[i] === "..") {
          if (i > 0 && parts[i - 1] !== "..")
            parts.splice(--i, 2);
          else if (absolute)
            parts.splice(i, 1);
          else
            ++i;
        } else if (parts[i] === ".")
          parts.splice(i, 1);
        else
          ++i;
      }
      return prefix + parts.join("/");
    };
    path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
      if (!alreadyNormalized)
        includePath = normalize(includePath);
      if (isAbsolute(includePath))
        return includePath;
      if (!alreadyNormalized)
        originPath = normalize(originPath);
      return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/types.js
var require_types = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/types.js"(exports2) {
    "use strict";
    var types = exports2;
    var util = require_util2();
    var s = [
      "double",
      "float",
      "int32",
      "uint32",
      "sint32",
      "fixed32",
      "sfixed32",
      "int64",
      "uint64",
      "sint64",
      "fixed64",
      "sfixed64",
      "bool",
      "string",
      "bytes"
    ];
    function bake(values, offset) {
      var i = 0, o = {};
      offset |= 0;
      while (i < values.length)
        o[s[i + offset]] = values[i++];
      return o;
    }
    types.basic = bake([
      1,
      5,
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0,
      2,
      2
    ]);
    types.defaults = bake([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      false,
      "",
      util.emptyArray,
      null
    ]);
    types.long = bake([
      0,
      0,
      0,
      1,
      1
    ], 7);
    types.mapKey = bake([
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0,
      2
    ], 2);
    types.packed = bake([
      1,
      5,
      0,
      0,
      0,
      5,
      5,
      0,
      0,
      0,
      1,
      1,
      0
    ]);
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/field.js
var require_field = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/field.js"(exports2, module2) {
    "use strict";
    module2.exports = Field;
    var ReflectionObject = require_object();
    ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";
    var Enum = require_enum();
    var types = require_types();
    var util = require_util2();
    var Type;
    var ruleRe = /^required|optional|repeated$/;
    Field.fromJSON = function fromJSON(name, json) {
      return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
    };
    function Field(name, id, type, rule, extend, options, comment) {
      if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = void 0;
      } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = void 0;
      }
      ReflectionObject.call(this, name, options);
      if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");
      if (!util.isString(type))
        throw TypeError("type must be a string");
      if (rule !== void 0 && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");
      if (extend !== void 0 && !util.isString(extend))
        throw TypeError("extend must be a string");
      if (rule === "proto3_optional") {
        rule = "optional";
      }
      this.rule = rule && rule !== "optional" ? rule : void 0;
      this.type = type;
      this.id = id;
      this.extend = extend || void 0;
      this.required = rule === "required";
      this.optional = !this.required;
      this.repeated = rule === "repeated";
      this.map = false;
      this.message = null;
      this.partOf = null;
      this.typeDefault = null;
      this.defaultValue = null;
      this.long = util.Long ? types.long[type] !== void 0 : false;
      this.bytes = type === "bytes";
      this.resolvedType = null;
      this.extensionField = null;
      this.declaringField = null;
      this._packed = null;
      this.comment = comment;
    }
    Object.defineProperty(Field.prototype, "packed", {
      get: function() {
        if (this._packed === null)
          this._packed = this.getOption("packed") !== false;
        return this._packed;
      }
    });
    Field.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (name === "packed")
        this._packed = null;
      return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
    };
    Field.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "rule",
        this.rule !== "optional" && this.rule || void 0,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Field.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if ((this.typeDefault = types.defaults[this.type]) === void 0) {
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
          this.typeDefault = null;
        else
          this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]];
      } else if (this.options && this.options.proto3_optional) {
        this.typeDefault = null;
      }
      if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
          this.typeDefault = this.resolvedType.values[this.typeDefault];
      }
      if (this.options) {
        if (this.options.packed === true || this.options.packed !== void 0 && this.resolvedType && !(this.resolvedType instanceof Enum))
          delete this.options.packed;
        if (!Object.keys(this.options).length)
          this.options = void 0;
      }
      if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
        if (Object.freeze)
          Object.freeze(this.typeDefault);
      } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
          util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
          util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
      }
      if (this.map)
        this.defaultValue = util.emptyObject;
      else if (this.repeated)
        this.defaultValue = util.emptyArray;
      else
        this.defaultValue = this.typeDefault;
      if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;
      return ReflectionObject.prototype.resolve.call(this);
    };
    Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
      if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;
      else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;
      return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
      };
    };
    Field._configure = function configure(Type_) {
      Type = Type_;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/oneof.js
var require_oneof = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/oneof.js"(exports2, module2) {
    "use strict";
    module2.exports = OneOf;
    var ReflectionObject = require_object();
    ((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";
    var Field = require_field();
    var util = require_util2();
    function OneOf(name, fieldNames, options, comment) {
      if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = void 0;
      }
      ReflectionObject.call(this, name, options);
      if (!(fieldNames === void 0 || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");
      this.oneof = fieldNames || [];
      this.fieldsArray = [];
      this.comment = comment;
    }
    OneOf.fromJSON = function fromJSON(name, json) {
      return new OneOf(name, json.oneof, json.options, json.comment);
    };
    OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "oneof",
        this.oneof,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    function addFieldsToParent(oneof) {
      if (oneof.parent) {
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
          if (!oneof.fieldsArray[i].parent)
            oneof.parent.add(oneof.fieldsArray[i]);
      }
    }
    OneOf.prototype.add = function add(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
      this.oneof.push(field.name);
      this.fieldsArray.push(field);
      field.partOf = this;
      addFieldsToParent(this);
      return this;
    };
    OneOf.prototype.remove = function remove(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      var index = this.fieldsArray.indexOf(field);
      if (index < 0)
        throw Error(field + " is not a member of " + this);
      this.fieldsArray.splice(index, 1);
      index = this.oneof.indexOf(field.name);
      if (index > -1)
        this.oneof.splice(index, 1);
      field.partOf = null;
      return this;
    };
    OneOf.prototype.onAdd = function onAdd(parent) {
      ReflectionObject.prototype.onAdd.call(this, parent);
      var self2 = this;
      for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
          field.partOf = self2;
          self2.fieldsArray.push(field);
        }
      }
      addFieldsToParent(this);
    };
    OneOf.prototype.onRemove = function onRemove(parent) {
      for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
          field.parent.remove(field);
      ReflectionObject.prototype.onRemove.call(this, parent);
    };
    OneOf.d = function decorateOneOf() {
      var fieldNames = new Array(arguments.length), index = 0;
      while (index < arguments.length)
        fieldNames[index] = arguments[index++];
      return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
          get: util.oneOfGetter(fieldNames),
          set: util.oneOfSetter(fieldNames)
        });
      };
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/namespace.js
var require_namespace = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/namespace.js"(exports2, module2) {
    "use strict";
    module2.exports = Namespace;
    var ReflectionObject = require_object();
    ((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";
    var Field = require_field();
    var util = require_util2();
    var OneOf = require_oneof();
    var Type;
    var Service;
    var Enum;
    Namespace.fromJSON = function fromJSON(name, json) {
      return new Namespace(name, json.options).addJSON(json.nested);
    };
    function arrayToJSON(array, toJSONOptions) {
      if (!(array && array.length))
        return void 0;
      var obj = {};
      for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
      return obj;
    }
    Namespace.arrayToJSON = arrayToJSON;
    Namespace.isReservedId = function isReservedId(reserved, id) {
      if (reserved) {
        for (var i = 0; i < reserved.length; ++i)
          if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id)
            return true;
      }
      return false;
    };
    Namespace.isReservedName = function isReservedName(reserved, name) {
      if (reserved) {
        for (var i = 0; i < reserved.length; ++i)
          if (reserved[i] === name)
            return true;
      }
      return false;
    };
    function Namespace(name, options) {
      ReflectionObject.call(this, name, options);
      this.nested = void 0;
      this._nestedArray = null;
    }
    function clearCache(namespace) {
      namespace._nestedArray = null;
      return namespace;
    }
    Object.defineProperty(Namespace.prototype, "nestedArray", {
      get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
      }
    });
    Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
      return util.toObject([
        "options",
        this.options,
        "nested",
        arrayToJSON(this.nestedArray, toJSONOptions)
      ]);
    };
    Namespace.prototype.addJSON = function addJSON(nestedJson) {
      var ns = this;
      if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
          nested = nestedJson[names[i]];
          ns.add(
            (nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : nested.id !== void 0 ? Field.fromJSON : Namespace.fromJSON)(names[i], nested)
          );
        }
      }
      return this;
    };
    Namespace.prototype.get = function get(name) {
      return this.nested && this.nested[name] || null;
    };
    Namespace.prototype.getEnum = function getEnum(name) {
      if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
      throw Error("no such enum: " + name);
    };
    Namespace.prototype.add = function add(object) {
      if (!(object instanceof Field && object.extend !== void 0 || object instanceof Type || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace))
        throw TypeError("object must be a valid nested object");
      if (!this.nested)
        this.nested = {};
      else {
        var prev = this.get(object.name);
        if (prev) {
          if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
            var nested = prev.nestedArray;
            for (var i = 0; i < nested.length; ++i)
              object.add(nested[i]);
            this.remove(prev);
            if (!this.nested)
              this.nested = {};
            object.setOptions(prev.options, true);
          } else
            throw Error("duplicate name '" + object.name + "' in " + this);
        }
      }
      this.nested[object.name] = object;
      object.onAdd(this);
      return clearCache(this);
    };
    Namespace.prototype.remove = function remove(object) {
      if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
      if (object.parent !== this)
        throw Error(object + " is not a member of " + this);
      delete this.nested[object.name];
      if (!Object.keys(this.nested).length)
        this.nested = void 0;
      object.onRemove(this);
      return clearCache(this);
    };
    Namespace.prototype.define = function define2(path, json) {
      if (util.isString(path))
        path = path.split(".");
      else if (!Array.isArray(path))
        throw TypeError("illegal path");
      if (path && path.length && path[0] === "")
        throw Error("path must be relative");
      var ptr = this;
      while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
          ptr = ptr.nested[part];
          if (!(ptr instanceof Namespace))
            throw Error("path conflicts with non-namespace objects");
        } else
          ptr.add(ptr = new Namespace(part));
      }
      if (json)
        ptr.addJSON(json);
      return ptr;
    };
    Namespace.prototype.resolveAll = function resolveAll() {
      var nested = this.nestedArray, i = 0;
      while (i < nested.length)
        if (nested[i] instanceof Namespace)
          nested[i++].resolveAll();
        else
          nested[i++].resolve();
      return this.resolve();
    };
    Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
      if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = void 0;
      } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [filterTypes];
      if (util.isString(path) && path.length) {
        if (path === ".")
          return this.root;
        path = path.split(".");
      } else if (!path.length)
        return this;
      if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);
      var found = this.get(path[0]);
      if (found) {
        if (path.length === 1) {
          if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
            return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
          return found;
      } else
        for (var i = 0; i < this.nestedArray.length; ++i)
          if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
            return found;
      if (this.parent === null || parentAlreadyChecked)
        return null;
      return this.parent.lookup(path, filterTypes);
    };
    Namespace.prototype.lookupType = function lookupType(path) {
      var found = this.lookup(path, [Type]);
      if (!found)
        throw Error("no such type: " + path);
      return found;
    };
    Namespace.prototype.lookupEnum = function lookupEnum(path) {
      var found = this.lookup(path, [Enum]);
      if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
      var found = this.lookup(path, [Type, Enum]);
      if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupService = function lookupService(path) {
      var found = this.lookup(path, [Service]);
      if (!found)
        throw Error("no such Service '" + path + "' in " + this);
      return found;
    };
    Namespace._configure = function(Type_, Service_, Enum_) {
      Type = Type_;
      Service = Service_;
      Enum = Enum_;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/mapfield.js
var require_mapfield = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/mapfield.js"(exports2, module2) {
    "use strict";
    module2.exports = MapField;
    var Field = require_field();
    ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";
    var types = require_types();
    var util = require_util2();
    function MapField(name, id, keyType, type, options, comment) {
      Field.call(this, name, id, type, void 0, void 0, options, comment);
      if (!util.isString(keyType))
        throw TypeError("keyType must be a string");
      this.keyType = keyType;
      this.resolvedKeyType = null;
      this.map = true;
    }
    MapField.fromJSON = function fromJSON(name, json) {
      return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
    };
    MapField.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "keyType",
        this.keyType,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    MapField.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if (types.mapKey[this.keyType] === void 0)
        throw Error("invalid key type: " + this.keyType);
      return Field.prototype.resolve.call(this);
    };
    MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
      if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;
      else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;
      return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
      };
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/method.js
var require_method = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/method.js"(exports2, module2) {
    "use strict";
    module2.exports = Method;
    var ReflectionObject = require_object();
    ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";
    var util = require_util2();
    function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {
      if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = void 0;
      } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = void 0;
      }
      if (!(type === void 0 || util.isString(type)))
        throw TypeError("type must be a string");
      if (!util.isString(requestType))
        throw TypeError("requestType must be a string");
      if (!util.isString(responseType))
        throw TypeError("responseType must be a string");
      ReflectionObject.call(this, name, options);
      this.type = type || "rpc";
      this.requestType = requestType;
      this.requestStream = requestStream ? true : void 0;
      this.responseType = responseType;
      this.responseStream = responseStream ? true : void 0;
      this.resolvedRequestType = null;
      this.resolvedResponseType = null;
      this.comment = comment;
      this.parsedOptions = parsedOptions;
    }
    Method.fromJSON = function fromJSON(name, json) {
      return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
    };
    Method.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "type",
        this.type !== "rpc" && this.type || void 0,
        "requestType",
        this.requestType,
        "requestStream",
        this.requestStream,
        "responseType",
        this.responseType,
        "responseStream",
        this.responseStream,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0,
        "parsedOptions",
        this.parsedOptions
      ]);
    };
    Method.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      this.resolvedRequestType = this.parent.lookupType(this.requestType);
      this.resolvedResponseType = this.parent.lookupType(this.responseType);
      return ReflectionObject.prototype.resolve.call(this);
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/service.js
var require_service2 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var Namespace = require_namespace();
    ((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";
    var Method = require_method();
    var util = require_util2();
    var rpc = require_rpc();
    function Service(name, options) {
      Namespace.call(this, name, options);
      this.methods = {};
      this._methodsArray = null;
    }
    Service.fromJSON = function fromJSON(name, json) {
      var service = new Service(name, json.options);
      if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
          service.add(Method.fromJSON(names[i], json.methods[names[i]]));
      if (json.nested)
        service.addJSON(json.nested);
      service.comment = json.comment;
      return service;
    };
    Service.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "methods",
        Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || {},
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Object.defineProperty(Service.prototype, "methodsArray", {
      get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
      }
    });
    function clearCache(service) {
      service._methodsArray = null;
      return service;
    }
    Service.prototype.get = function get(name) {
      return this.methods[name] || Namespace.prototype.get.call(this, name);
    };
    Service.prototype.resolveAll = function resolveAll() {
      var methods = this.methodsArray;
      for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
      return Namespace.prototype.resolve.call(this);
    };
    Service.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Service.prototype.remove = function remove(object) {
      if (object instanceof Method) {
        if (this.methods[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
      var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
      for (var i = 0, method; i < this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r", "c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
          m: method,
          q: method.resolvedRequestType.ctor,
          s: method.resolvedResponseType.ctor
        });
      }
      return rpcService;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/message.js
var require_message = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/message.js"(exports2, module2) {
    "use strict";
    module2.exports = Message;
    var util = require_minimal();
    function Message(properties) {
      if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          this[keys[i]] = properties[keys[i]];
    }
    Message.create = function create(properties) {
      return this.$type.create(properties);
    };
    Message.encode = function encode(message, writer) {
      return this.$type.encode(message, writer);
    };
    Message.encodeDelimited = function encodeDelimited(message, writer) {
      return this.$type.encodeDelimited(message, writer);
    };
    Message.decode = function decode(reader) {
      return this.$type.decode(reader);
    };
    Message.decodeDelimited = function decodeDelimited(reader) {
      return this.$type.decodeDelimited(reader);
    };
    Message.verify = function verify(message) {
      return this.$type.verify(message);
    };
    Message.fromObject = function fromObject(object) {
      return this.$type.fromObject(object);
    };
    Message.toObject = function toObject(message, options) {
      return this.$type.toObject(message, options);
    };
    Message.prototype.toJSON = function toJSON() {
      return this.$type.toObject(this, util.toJSONOptions);
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/decoder.js
var require_decoder = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/decoder.js"(exports2, module2) {
    "use strict";
    module2.exports = decoder;
    var Enum = require_enum();
    var types = require_types();
    var util = require_util2();
    function missing(field) {
      return "missing required '" + field.name + "'";
    }
    function decoder(mtype) {
      var gen = util.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field2) {
        return field2.map;
      }).length ? ",k,value" : ""))("while(r.pos<c){")("var t=r.uint32()");
      if (mtype.group)
        gen("if((t&7)===4)")("break");
      gen("switch(t>>>3){");
      var i = 0;
      for (; i < mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? "int32" : field.type, ref = "m" + util.safeProp(field.name);
        gen("case %i: {", field.id);
        if (field.map) {
          gen("if(%s===util.emptyObject)", ref)("%s={}", ref)("var c2 = r.uint32()+r.pos");
          if (types.defaults[field.keyType] !== void 0)
            gen("k=%j", types.defaults[field.keyType]);
          else
            gen("k=null");
          if (types.defaults[type] !== void 0)
            gen("value=%j", types.defaults[type]);
          else
            gen("value=null");
          gen("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break", field.keyType)("case 2:");
          if (types.basic[type] === void 0)
            gen("value=types[%i].decode(r,r.uint32())", i);
          else
            gen("value=r.%s()", type);
          gen("break")("default:")("r.skipType(tag2&7)")("break")("}")("}");
          if (types.long[field.keyType] !== void 0)
            gen('%s[typeof k==="object"?util.longToHash(k):k]=value', ref);
          else
            gen("%s[k]=value", ref);
        } else if (field.repeated) {
          gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
          if (types.packed[type] !== void 0)
            gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else");
          if (types.basic[type] === void 0)
            gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
          else
            gen("%s.push(r.%s())", ref, type);
        } else if (types.basic[type] === void 0)
          gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else
          gen("%s=r.%s()", ref, type);
        gen("break")("}");
      }
      gen("default:")("r.skipType(t&7)")("break")("}")("}");
      for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required)
          gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
      }
      return gen("return m");
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/verifier.js
var require_verifier = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/verifier.js"(exports2, module2) {
    "use strict";
    module2.exports = verifier;
    var Enum = require_enum();
    var util = require_util2();
    function invalid(field, expected) {
      return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
    }
    function genVerifyValue(gen, field, fieldIndex, ref) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));
          for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j)
            gen("case %i:", field.resolvedType.values[keys[j]]);
          gen("break")("}");
        } else {
          gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".")("}");
        }
      } else {
        switch (field.type) {
          case "int32":
          case "uint32":
          case "sint32":
          case "fixed32":
          case "sfixed32":
            gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
            break;
          case "int64":
          case "uint64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
            break;
          case "float":
          case "double":
            gen('if(typeof %s!=="number")', ref)("return%j", invalid(field, "number"));
            break;
          case "bool":
            gen('if(typeof %s!=="boolean")', ref)("return%j", invalid(field, "boolean"));
            break;
          case "string":
            gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
            break;
          case "bytes":
            gen('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', ref, ref, ref)("return%j", invalid(field, "buffer"));
            break;
        }
      }
      return gen;
    }
    function genVerifyKey(gen, field, ref) {
      switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32":
          gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
          break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
          gen("if(!util.key64Re.test(%s))", ref)("return%j", invalid(field, "integer|Long key"));
          break;
        case "bool":
          gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
          break;
      }
      return gen;
    }
    function verifier(mtype) {
      var gen = util.codegen(["m"], mtype.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
      var oneofs = mtype.oneofsArray, seenFirstField = {};
      if (oneofs.length)
        gen("var p={}");
      for (var i = 0; i < mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), ref = "m" + util.safeProp(field.name);
        if (field.optional)
          gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name);
        if (field.map) {
          gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
          genVerifyKey(gen, field, "k[i]");
          genVerifyValue(gen, field, i, ref + "[k[i]]")("}");
        } else if (field.repeated) {
          gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
          genVerifyValue(gen, field, i, ref + "[i]")("}");
        } else {
          if (field.partOf) {
            var oneofProp = util.safeProp(field.partOf.name);
            if (seenFirstField[field.partOf.name] === 1)
              gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
            seenFirstField[field.partOf.name] = 1;
            gen("p%s=1", oneofProp);
          }
          genVerifyValue(gen, field, i, ref);
        }
        if (field.optional)
          gen("}");
      }
      return gen("return null");
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/converter.js
var require_converter = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/converter.js"(exports2) {
    "use strict";
    var converter = exports2;
    var Enum = require_enum();
    var util = require_util2();
    function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
      var defaultAlreadyEmitted = false;
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(d%s){", prop);
          for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
            if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) {
              gen("default:")('if(typeof(d%s)==="number"){m%s=d%s;break}', prop, prop, prop);
              if (!field.repeated)
                gen("break");
              defaultAlreadyEmitted = true;
            }
            gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
          }
          gen("}");
        } else
          gen('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("m%s=Number(d%s)", prop, prop);
            break;
          case "uint32":
          case "fixed32":
            gen("m%s=d%s>>>0", prop, prop);
            break;
          case "int32":
          case "sint32":
          case "sfixed32":
            gen("m%s=d%s|0", prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)('else if(typeof d%s==="string")', prop)("m%s=parseInt(d%s,10)", prop, prop)('else if(typeof d%s==="number")', prop)("m%s=d%s", prop, prop)('else if(typeof d%s==="object")', prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
            break;
          case "bytes":
            gen('if(typeof d%s==="string")', prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length >= 0)", prop)("m%s=d%s", prop, prop);
            break;
          case "string":
            gen("m%s=String(d%s)", prop, prop);
            break;
          case "bool":
            gen("m%s=Boolean(d%s)", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.fromObject = function fromObject(mtype) {
      var fields = mtype.fieldsArray;
      var gen = util.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
      if (!fields.length)
        return gen("return new this.ctor");
      gen("var m=new this.ctor");
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), prop = util.safeProp(field.name);
        if (field.map) {
          gen("if(d%s){", prop)('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
          genValuePartial_fromObject(gen, field, i, prop + "[ks[i]]")("}")("}");
        } else if (field.repeated) {
          gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
          genValuePartial_fromObject(gen, field, i, prop + "[i]")("}")("}");
        } else {
          if (!(field.resolvedType instanceof Enum))
            gen("if(d%s!=null){", prop);
          genValuePartial_fromObject(gen, field, i, prop);
          if (!(field.resolvedType instanceof Enum))
            gen("}");
        }
      }
      return gen("return m");
    };
    function genValuePartial_toObject(gen, field, fieldIndex, prop) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum)
          gen("d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);
        else
          gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen('if(typeof m%s==="number")', prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
            break;
          case "bytes":
            gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
            break;
          default:
            gen("d%s=m%s", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.toObject = function toObject(mtype) {
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      if (!fields.length)
        return util.codegen()("return {}");
      var gen = util.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
      var repeatedFields = [], mapFields = [], normalFields = [], i = 0;
      for (; i < fields.length; ++i)
        if (!fields[i].partOf)
          (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
      if (repeatedFields.length) {
        gen("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i)
          gen("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen("}");
      }
      if (mapFields.length) {
        gen("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i)
          gen("d%s={}", util.safeProp(mapFields[i].name));
        gen("}");
      }
      if (normalFields.length) {
        gen("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
          var field = normalFields[i], prop = util.safeProp(field.name);
          if (field.resolvedType instanceof Enum)
            gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
          else if (field.long)
            gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
          else if (field.bytes) {
            var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
            gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
          } else
            gen("d%s=%j", prop, field.typeDefault);
        }
        gen("}");
      }
      var hasKs2 = false;
      for (i = 0; i < fields.length; ++i) {
        var field = fields[i], index = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);
        if (field.map) {
          if (!hasKs2) {
            hasKs2 = true;
            gen("var ks2");
          }
          gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
          genValuePartial_toObject(gen, field, index, prop + "[ks2[j]]")("}");
        } else if (field.repeated) {
          gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
          genValuePartial_toObject(gen, field, index, prop + "[j]")("}");
        } else {
          gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name);
          genValuePartial_toObject(gen, field, index, prop);
          if (field.partOf)
            gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen("}");
      }
      return gen("return d");
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/wrappers.js"(exports2) {
    "use strict";
    var wrappers = exports2;
    var Message = require_message();
    wrappers[".google.protobuf.Any"] = {
      fromObject: function(object) {
        if (object && object["@type"]) {
          var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type) {
            var type_url = object["@type"].charAt(0) === "." ? object["@type"].slice(1) : object["@type"];
            if (type_url.indexOf("/") === -1) {
              type_url = "/" + type_url;
            }
            return this.create({
              type_url,
              value: type.encode(type.fromObject(object)).finish()
            });
          }
        }
        return this.fromObject(object);
      },
      toObject: function(message, options) {
        var googleApi = "type.googleapis.com/";
        var prefix = "";
        var name = "";
        if (options && options.json && message.type_url && message.value) {
          name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
          prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type)
            message = type.decode(message.value);
        }
        if (!(message instanceof this.ctor) && message instanceof Message) {
          var object = message.$type.toObject(message, options);
          var messageName = message.$type.fullName[0] === "." ? message.$type.fullName.slice(1) : message.$type.fullName;
          if (prefix === "") {
            prefix = googleApi;
          }
          name = prefix + messageName;
          object["@type"] = name;
          return object;
        }
        return this.toObject(message, options);
      }
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/type.js
var require_type = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/type.js"(exports2, module2) {
    "use strict";
    module2.exports = Type;
    var Namespace = require_namespace();
    ((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";
    var Enum = require_enum();
    var OneOf = require_oneof();
    var Field = require_field();
    var MapField = require_mapfield();
    var Service = require_service2();
    var Message = require_message();
    var Reader = require_reader();
    var Writer = require_writer();
    var util = require_util2();
    var encoder = require_encoder();
    var decoder = require_decoder();
    var verifier = require_verifier();
    var converter = require_converter();
    var wrappers = require_wrappers();
    function Type(name, options) {
      Namespace.call(this, name, options);
      this.fields = {};
      this.oneofs = void 0;
      this.extensions = void 0;
      this.reserved = void 0;
      this.group = void 0;
      this._fieldsById = null;
      this._fieldsArray = null;
      this._oneofsArray = null;
      this._ctor = null;
    }
    Object.defineProperties(Type.prototype, {
      fieldsById: {
        get: function() {
          if (this._fieldsById)
            return this._fieldsById;
          this._fieldsById = {};
          for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
            var field = this.fields[names[i]], id = field.id;
            if (this._fieldsById[id])
              throw Error("duplicate id " + id + " in " + this);
            this._fieldsById[id] = field;
          }
          return this._fieldsById;
        }
      },
      fieldsArray: {
        get: function() {
          return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
      },
      oneofsArray: {
        get: function() {
          return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
      },
      ctor: {
        get: function() {
          return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {
          var prototype = ctor.prototype;
          if (!(prototype instanceof Message)) {
            (ctor.prototype = new Message()).constructor = ctor;
            util.merge(ctor.prototype, prototype);
          }
          ctor.$type = ctor.prototype.$type = this;
          util.merge(ctor, Message, true);
          this._ctor = ctor;
          var i = 0;
          for (; i < this.fieldsArray.length; ++i)
            this._fieldsArray[i].resolve();
          var ctorProperties = {};
          for (i = 0; i < this.oneofsArray.length; ++i)
            ctorProperties[this._oneofsArray[i].resolve().name] = {
              get: util.oneOfGetter(this._oneofsArray[i].oneof),
              set: util.oneOfSetter(this._oneofsArray[i].oneof)
            };
          if (i)
            Object.defineProperties(ctor.prototype, ctorProperties);
        }
      }
    });
    Type.generateConstructor = function generateConstructor(mtype) {
      var gen = util.codegen(["p"], mtype.name);
      for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map)
          gen("this%s={}", util.safeProp(field.name));
        else if (field.repeated)
          gen("this%s=[]", util.safeProp(field.name));
      return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
    };
    function clearCache(type) {
      type._fieldsById = type._fieldsArray = type._oneofsArray = null;
      delete type.encode;
      delete type.decode;
      delete type.verify;
      return type;
    }
    Type.fromJSON = function fromJSON(name, json) {
      var type = new Type(name, json.options);
      type.extensions = json.extensions;
      type.reserved = json.reserved;
      var names = Object.keys(json.fields), i = 0;
      for (; i < names.length; ++i)
        type.add(
          (typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]])
        );
      if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
          type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
      if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
          var nested = json.nested[names[i]];
          type.add(
            (nested.id !== void 0 ? Field.fromJSON : nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : Namespace.fromJSON)(names[i], nested)
          );
        }
      if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
      if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
      if (json.group)
        type.group = true;
      if (json.comment)
        type.comment = json.comment;
      return type;
    };
    Type.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "oneofs",
        Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields",
        Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {
          return !obj.declaringField;
        }), toJSONOptions) || {},
        "extensions",
        this.extensions && this.extensions.length ? this.extensions : void 0,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "group",
        this.group || void 0,
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Type.prototype.resolveAll = function resolveAll() {
      var fields = this.fieldsArray, i = 0;
      while (i < fields.length)
        fields[i++].resolve();
      var oneofs = this.oneofsArray;
      i = 0;
      while (i < oneofs.length)
        oneofs[i++].resolve();
      return Namespace.prototype.resolveAll.call(this);
    };
    Type.prototype.get = function get(name) {
      return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
    };
    Type.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Field && object.extend === void 0) {
        if (this._fieldsById ? this._fieldsById[object.id] : this.fieldsById[object.id])
          throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
          throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
          throw Error("name '" + object.name + "' is reserved in " + this);
        if (object.parent)
          object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs)
          this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Type.prototype.remove = function remove(object) {
      if (object instanceof Field && object.extend === void 0) {
        if (!this.fields || this.fields[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs || this.oneofs[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Type.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Type.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
    Type.prototype.create = function create(properties) {
      return new this.ctor(properties);
    };
    Type.prototype.setup = function setup() {
      var fullName = this.fullName, types = [];
      for (var i = 0; i < this.fieldsArray.length; ++i)
        types.push(this._fieldsArray[i].resolve().resolvedType);
      this.encode = encoder(this)({
        Writer,
        types,
        util
      });
      this.decode = decoder(this)({
        Reader,
        types,
        util
      });
      this.verify = verifier(this)({
        types,
        util
      });
      this.fromObject = converter.fromObject(this)({
        types,
        util
      });
      this.toObject = converter.toObject(this)({
        types,
        util
      });
      var wrapper = wrappers[fullName];
      if (wrapper) {
        var originalThis = Object.create(this);
        originalThis.fromObject = this.fromObject;
        this.fromObject = wrapper.fromObject.bind(originalThis);
        originalThis.toObject = this.toObject;
        this.toObject = wrapper.toObject.bind(originalThis);
      }
      return this;
    };
    Type.prototype.encode = function encode_setup(message, writer) {
      return this.setup().encode(message, writer);
    };
    Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
    };
    Type.prototype.decode = function decode_setup(reader, length) {
      return this.setup().decode(reader, length);
    };
    Type.prototype.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof Reader))
        reader = Reader.create(reader);
      return this.decode(reader, reader.uint32());
    };
    Type.prototype.verify = function verify_setup(message) {
      return this.setup().verify(message);
    };
    Type.prototype.fromObject = function fromObject(object) {
      return this.setup().fromObject(object);
    };
    Type.prototype.toObject = function toObject(message, options) {
      return this.setup().toObject(message, options);
    };
    Type.d = function decorateType(typeName) {
      return function typeDecorator(target) {
        util.decorateType(target, typeName);
      };
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/root.js
var require_root = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/root.js"(exports2, module2) {
    "use strict";
    module2.exports = Root;
    var Namespace = require_namespace();
    ((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";
    var Field = require_field();
    var Enum = require_enum();
    var OneOf = require_oneof();
    var util = require_util2();
    var Type;
    var parse;
    var common;
    function Root(options) {
      Namespace.call(this, "", options);
      this.deferred = [];
      this.files = [];
    }
    Root.fromJSON = function fromJSON(json, root) {
      if (!root)
        root = new Root();
      if (json.options)
        root.setOptions(json.options);
      return root.addJSON(json.nested);
    };
    Root.prototype.resolvePath = util.path.resolve;
    Root.prototype.fetch = util.fetch;
    function SYNC() {
    }
    Root.prototype.load = function load(filename, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = void 0;
      }
      var self2 = this;
      if (!callback)
        return util.asPromise(load, self2, filename, options);
      var sync = callback === SYNC;
      function finish(err, root) {
        if (!callback)
          return;
        var cb = callback;
        callback = null;
        if (sync)
          throw err;
        cb(err, root);
      }
      function getBundledFileName(filename2) {
        var idx = filename2.lastIndexOf("google/protobuf/");
        if (idx > -1) {
          var altname = filename2.substring(idx);
          if (altname in common)
            return altname;
        }
        return null;
      }
      function process2(filename2, source) {
        try {
          if (util.isString(source) && source.charAt(0) === "{")
            source = JSON.parse(source);
          if (!util.isString(source))
            self2.setOptions(source.options).addJSON(source.nested);
          else {
            parse.filename = filename2;
            var parsed = parse(source, self2, options), resolved2, i2 = 0;
            if (parsed.imports) {
              for (; i2 < parsed.imports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.imports[i2]) || self2.resolvePath(filename2, parsed.imports[i2]))
                  fetch(resolved2);
            }
            if (parsed.weakImports) {
              for (i2 = 0; i2 < parsed.weakImports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.weakImports[i2]) || self2.resolvePath(filename2, parsed.weakImports[i2]))
                  fetch(resolved2, true);
            }
          }
        } catch (err) {
          finish(err);
        }
        if (!sync && !queued)
          finish(null, self2);
      }
      function fetch(filename2, weak) {
        if (self2.files.indexOf(filename2) > -1)
          return;
        self2.files.push(filename2);
        if (filename2 in common) {
          if (sync)
            process2(filename2, common[filename2]);
          else {
            ++queued;
            setTimeout(function() {
              --queued;
              process2(filename2, common[filename2]);
            });
          }
          return;
        }
        if (sync) {
          var source;
          try {
            source = util.fs.readFileSync(filename2).toString("utf8");
          } catch (err) {
            if (!weak)
              finish(err);
            return;
          }
          process2(filename2, source);
        } else {
          ++queued;
          self2.fetch(filename2, function(err, source2) {
            --queued;
            if (!callback)
              return;
            if (err) {
              if (!weak)
                finish(err);
              else if (!queued)
                finish(null, self2);
              return;
            }
            process2(filename2, source2);
          });
        }
      }
      var queued = 0;
      if (util.isString(filename))
        filename = [filename];
      for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self2.resolvePath("", filename[i]))
          fetch(resolved);
      if (sync)
        return self2;
      if (!queued)
        finish(null, self2);
      return void 0;
    };
    Root.prototype.loadSync = function loadSync(filename, options) {
      if (!util.isNode)
        throw Error("not supported");
      return this.load(filename, options, SYNC);
    };
    Root.prototype.resolveAll = function resolveAll() {
      if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
          return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
      return Namespace.prototype.resolveAll.call(this);
    };
    var exposeRe = /^[A-Z]/;
    function tryHandleExtension(root, field) {
      var extendedType = field.parent.lookup(field.extend);
      if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, void 0, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
      }
      return false;
    }
    Root.prototype._handleAdd = function _handleAdd(object) {
      if (object instanceof Field) {
        if (object.extend !== void 0 && !object.extensionField) {
          if (!tryHandleExtension(this, object))
            this.deferred.push(object);
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          object.parent[object.name] = object.values;
      } else if (!(object instanceof OneOf)) {
        if (object instanceof Type)
          for (var i = 0; i < this.deferred.length; )
            if (tryHandleExtension(this, this.deferred[i]))
              this.deferred.splice(i, 1);
            else
              ++i;
        for (var j = 0; j < object.nestedArray.length; ++j)
          this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
          object.parent[object.name] = object;
      }
    };
    Root.prototype._handleRemove = function _handleRemove(object) {
      if (object instanceof Field) {
        if (object.extend !== void 0) {
          if (object.extensionField) {
            object.extensionField.parent.remove(object.extensionField);
            object.extensionField = null;
          } else {
            var index = this.deferred.indexOf(object);
            if (index > -1)
              this.deferred.splice(index, 1);
          }
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      } else if (object instanceof Namespace) {
        for (var i = 0; i < object.nestedArray.length; ++i)
          this._handleRemove(object._nestedArray[i]);
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      }
    };
    Root._configure = function(Type_, parse_, common_) {
      Type = Type_;
      parse = parse_;
      common = common_;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/util.js
var require_util2 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/util.js"(exports2, module2) {
    "use strict";
    var util = module2.exports = require_minimal();
    var roots = require_roots();
    var Type;
    var Enum;
    util.codegen = require_codegen();
    util.fetch = require_fetch();
    util.path = require_path2();
    util.fs = util.inquire("fs");
    util.toArray = function toArray(object) {
      if (object) {
        var keys = Object.keys(object), array = new Array(keys.length), index = 0;
        while (index < keys.length)
          array[index] = object[keys[index++]];
        return array;
      }
      return [];
    };
    util.toObject = function toObject(array) {
      var object = {}, index = 0;
      while (index < array.length) {
        var key = array[index++], val = array[index++];
        if (val !== void 0)
          object[key] = val;
      }
      return object;
    };
    var safePropBackslashRe = /\\/g;
    var safePropQuoteRe = /"/g;
    util.isReserved = function isReserved(name) {
      return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
    };
    util.safeProp = function safeProp(prop) {
      if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return '["' + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, '\\"') + '"]';
      return "." + prop;
    };
    util.ucFirst = function ucFirst(str) {
      return str.charAt(0).toUpperCase() + str.substring(1);
    };
    var camelCaseRe = /_([a-z])/g;
    util.camelCase = function camelCase(str) {
      return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {
        return $1.toUpperCase();
      });
    };
    util.compareFieldsById = function compareFieldsById(a, b) {
      return a.id - b.id;
    };
    util.decorateType = function decorateType(ctor, typeName) {
      if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
          util.decorateRoot.remove(ctor.$type);
          ctor.$type.name = typeName;
          util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
      }
      if (!Type)
        Type = require_type();
      var type = new Type(typeName || ctor.name);
      util.decorateRoot.add(type);
      type.ctor = ctor;
      Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
      Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
      return type;
    };
    var decorateEnumIndex = 0;
    util.decorateEnum = function decorateEnum(object) {
      if (object.$type)
        return object.$type;
      if (!Enum)
        Enum = require_enum();
      var enm = new Enum("Enum" + decorateEnumIndex++, object);
      util.decorateRoot.add(enm);
      Object.defineProperty(object, "$type", { value: enm, enumerable: false });
      return enm;
    };
    util.setProperty = function setProperty(dst, path, value) {
      function setProp(dst2, path2, value2) {
        var part = path2.shift();
        if (part === "__proto__") {
          return dst2;
        }
        if (path2.length > 0) {
          dst2[part] = setProp(dst2[part] || {}, path2, value2);
        } else {
          var prevValue = dst2[part];
          if (prevValue)
            value2 = [].concat(prevValue).concat(value2);
          dst2[part] = value2;
        }
        return dst2;
      }
      if (typeof dst !== "object")
        throw TypeError("dst must be an object");
      if (!path)
        throw TypeError("path must be specified");
      path = path.split(".");
      return setProp(dst, path, value);
    };
    Object.defineProperty(util, "decorateRoot", {
      get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require_root())());
      }
    });
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/object.js
var require_object = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/object.js"(exports2, module2) {
    "use strict";
    module2.exports = ReflectionObject;
    ReflectionObject.className = "ReflectionObject";
    var util = require_util2();
    var Root;
    function ReflectionObject(name, options) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (options && !util.isObject(options))
        throw TypeError("options must be an object");
      this.options = options;
      this.parsedOptions = null;
      this.name = name;
      this.parent = null;
      this.resolved = false;
      this.comment = null;
      this.filename = null;
    }
    Object.defineProperties(ReflectionObject.prototype, {
      root: {
        get: function() {
          var ptr = this;
          while (ptr.parent !== null)
            ptr = ptr.parent;
          return ptr;
        }
      },
      fullName: {
        get: function() {
          var path = [this.name], ptr = this.parent;
          while (ptr) {
            path.unshift(ptr.name);
            ptr = ptr.parent;
          }
          return path.join(".");
        }
      }
    });
    ReflectionObject.prototype.toJSON = function toJSON() {
      throw Error();
    };
    ReflectionObject.prototype.onAdd = function onAdd(parent) {
      if (this.parent && this.parent !== parent)
        this.parent.remove(this);
      this.parent = parent;
      this.resolved = false;
      var root = parent.root;
      if (root instanceof Root)
        root._handleAdd(this);
    };
    ReflectionObject.prototype.onRemove = function onRemove(parent) {
      var root = parent.root;
      if (root instanceof Root)
        root._handleRemove(this);
      this.parent = null;
      this.resolved = false;
    };
    ReflectionObject.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if (this.root instanceof Root)
        this.resolved = true;
      return this;
    };
    ReflectionObject.prototype.getOption = function getOption(name) {
      if (this.options)
        return this.options[name];
      return void 0;
    };
    ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (!ifNotSet || !this.options || this.options[name] === void 0)
        (this.options || (this.options = {}))[name] = value;
      return this;
    };
    ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
      if (!this.parsedOptions) {
        this.parsedOptions = [];
      }
      var parsedOptions = this.parsedOptions;
      if (propName) {
        var opt = parsedOptions.find(function(opt2) {
          return Object.prototype.hasOwnProperty.call(opt2, name);
        });
        if (opt) {
          var newValue = opt[name];
          util.setProperty(newValue, propName, value);
        } else {
          opt = {};
          opt[name] = util.setProperty({}, propName, value);
          parsedOptions.push(opt);
        }
      } else {
        var newOpt = {};
        newOpt[name] = value;
        parsedOptions.push(newOpt);
      }
      return this;
    };
    ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
      if (options)
        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
          this.setOption(keys[i], options[keys[i]], ifNotSet);
      return this;
    };
    ReflectionObject.prototype.toString = function toString() {
      var className = this.constructor.className, fullName = this.fullName;
      if (fullName.length)
        return className + " " + fullName;
      return className;
    };
    ReflectionObject._configure = function(Root_) {
      Root = Root_;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/enum.js
var require_enum = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/enum.js"(exports2, module2) {
    "use strict";
    module2.exports = Enum;
    var ReflectionObject = require_object();
    ((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";
    var Namespace = require_namespace();
    var util = require_util2();
    function Enum(name, values, options, comment, comments, valuesOptions) {
      ReflectionObject.call(this, name, options);
      if (values && typeof values !== "object")
        throw TypeError("values must be an object");
      this.valuesById = {};
      this.values = Object.create(this.valuesById);
      this.comment = comment;
      this.comments = comments || {};
      this.valuesOptions = valuesOptions;
      this.reserved = void 0;
      if (values) {
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
          if (typeof values[keys[i]] === "number")
            this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
      }
    }
    Enum.fromJSON = function fromJSON(name, json) {
      var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
      enm.reserved = json.reserved;
      return enm;
    };
    Enum.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "valuesOptions",
        this.valuesOptions,
        "values",
        this.values,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "comment",
        keepComments ? this.comment : void 0,
        "comments",
        keepComments ? this.comments : void 0
      ]);
    };
    Enum.prototype.add = function add(name, id, comment, options) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (!util.isInteger(id))
        throw TypeError("id must be an integer");
      if (this.values[name] !== void 0)
        throw Error("duplicate name '" + name + "' in " + this);
      if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);
      if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);
      if (this.valuesById[id] !== void 0) {
        if (!(this.options && this.options.allow_alias))
          throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
      } else
        this.valuesById[this.values[name] = id] = name;
      if (options) {
        if (this.valuesOptions === void 0)
          this.valuesOptions = {};
        this.valuesOptions[name] = options || null;
      }
      this.comments[name] = comment || null;
      return this;
    };
    Enum.prototype.remove = function remove(name) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      var val = this.values[name];
      if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);
      delete this.valuesById[val];
      delete this.values[name];
      delete this.comments[name];
      if (this.valuesOptions)
        delete this.valuesOptions[name];
      return this;
    };
    Enum.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Enum.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/encoder.js
var require_encoder = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/encoder.js"(exports2, module2) {
    "use strict";
    module2.exports = encoder;
    var Enum = require_enum();
    var types = require_types();
    var util = require_util2();
    function genTypePartial(gen, field, fieldIndex, ref) {
      return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
    }
    function encoder(mtype) {
      var gen = util.codegen(["m", "w"], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
      var i, ref;
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), index = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? "int32" : field.type, wireType = types.basic[type];
        ref = "m" + util.safeProp(field.name);
        if (field.map) {
          gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
          if (wireType === void 0)
            gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref);
          else
            gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
          gen("}")("}");
        } else if (field.repeated) {
          gen("if(%s!=null&&%s.length){", ref, ref);
          if (field.packed && types.packed[type] !== void 0) {
            gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()");
          } else {
            gen("for(var i=0;i<%s.length;++i)", ref);
            if (wireType === void 0)
              genTypePartial(gen, field, index, ref + "[i]");
            else
              gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
          }
          gen("}");
        } else {
          if (field.optional)
            gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name);
          if (wireType === void 0)
            genTypePartial(gen, field, index, ref);
          else
            gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
        }
      }
      return gen("return w");
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/index-light.js
var require_index_light = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/index-light.js"(exports2, module2) {
    "use strict";
    var protobuf = module2.exports = require_index_minimal();
    protobuf.build = "light";
    function load(filename, root, callback) {
      if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
      } else if (!root)
        root = new protobuf.Root();
      return root.load(filename, callback);
    }
    protobuf.load = load;
    function loadSync(filename, root) {
      if (!root)
        root = new protobuf.Root();
      return root.loadSync(filename);
    }
    protobuf.loadSync = loadSync;
    protobuf.encoder = require_encoder();
    protobuf.decoder = require_decoder();
    protobuf.verifier = require_verifier();
    protobuf.converter = require_converter();
    protobuf.ReflectionObject = require_object();
    protobuf.Namespace = require_namespace();
    protobuf.Root = require_root();
    protobuf.Enum = require_enum();
    protobuf.Type = require_type();
    protobuf.Field = require_field();
    protobuf.OneOf = require_oneof();
    protobuf.MapField = require_mapfield();
    protobuf.Service = require_service2();
    protobuf.Method = require_method();
    protobuf.Message = require_message();
    protobuf.wrappers = require_wrappers();
    protobuf.types = require_types();
    protobuf.util = require_util2();
    protobuf.ReflectionObject._configure(protobuf.Root);
    protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
    protobuf.Root._configure(protobuf.Type);
    protobuf.Field._configure(protobuf.Type);
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/tokenize.js
var require_tokenize = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/tokenize.js"(exports2, module2) {
    "use strict";
    module2.exports = tokenize;
    var delimRe = /[\s{}=;:[\],'"()<>]/g;
    var stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g;
    var stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
    var setCommentRe = /^ *[*/]+ */;
    var setCommentAltRe = /^\s*\*?\/*/;
    var setCommentSplitRe = /\n/g;
    var whitespaceRe = /\s/;
    var unescapeRe = /\\(.?)/g;
    var unescapeMap = {
      "0": "\0",
      "r": "\r",
      "n": "\n",
      "t": "	"
    };
    function unescape(str) {
      return str.replace(unescapeRe, function($0, $1) {
        switch ($1) {
          case "\\":
          case "":
            return $1;
          default:
            return unescapeMap[$1] || "";
        }
      });
    }
    tokenize.unescape = unescape;
    function tokenize(source, alternateCommentMode) {
      source = source.toString();
      var offset = 0, length = source.length, line = 1, lastCommentLine = 0, comments = {};
      var stack = [];
      var stringDelim = null;
      function illegal(subject) {
        return Error("illegal " + subject + " (line " + line + ")");
      }
      function readString() {
        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
        re.lastIndex = offset - 1;
        var match = re.exec(source);
        if (!match)
          throw illegal("string");
        offset = re.lastIndex;
        push(stringDelim);
        stringDelim = null;
        return unescape(match[1]);
      }
      function charAt(pos) {
        return source.charAt(pos);
      }
      function setComment(start, end, isLeading) {
        var comment = {
          type: source.charAt(start++),
          lineEmpty: false,
          leading: isLeading
        };
        var lookback;
        if (alternateCommentMode) {
          lookback = 2;
        } else {
          lookback = 3;
        }
        var commentOffset = start - lookback, c;
        do {
          if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
            comment.lineEmpty = true;
            break;
          }
        } while (c === " " || c === "	");
        var lines = source.substring(start, end).split(setCommentSplitRe);
        for (var i = 0; i < lines.length; ++i)
          lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
        comment.text = lines.join("\n").trim();
        comments[line] = comment;
        lastCommentLine = line;
      }
      function isDoubleSlashCommentLine(startOffset) {
        var endOffset = findEndOfLine(startOffset);
        var lineText = source.substring(startOffset, endOffset);
        var isComment = /^\s*\/{1,2}/.test(lineText);
        return isComment;
      }
      function findEndOfLine(cursor) {
        var endOffset = cursor;
        while (endOffset < length && charAt(endOffset) !== "\n") {
          endOffset++;
        }
        return endOffset;
      }
      function next() {
        if (stack.length > 0)
          return stack.shift();
        if (stringDelim)
          return readString();
        var repeat, prev, curr, start, isDoc, isLeadingComment = offset === 0;
        do {
          if (offset === length)
            return null;
          repeat = false;
          while (whitespaceRe.test(curr = charAt(offset))) {
            if (curr === "\n") {
              isLeadingComment = true;
              ++line;
            }
            if (++offset === length)
              return null;
          }
          if (charAt(offset) === "/") {
            if (++offset === length) {
              throw illegal("comment");
            }
            if (charAt(offset) === "/") {
              if (!alternateCommentMode) {
                isDoc = charAt(start = offset + 1) === "/";
                while (charAt(++offset) !== "\n") {
                  if (offset === length) {
                    return null;
                  }
                }
                ++offset;
                if (isDoc) {
                  setComment(start, offset - 1, isLeadingComment);
                  isLeadingComment = true;
                }
                ++line;
                repeat = true;
              } else {
                start = offset;
                isDoc = false;
                if (isDoubleSlashCommentLine(offset)) {
                  isDoc = true;
                  do {
                    offset = findEndOfLine(offset);
                    if (offset === length) {
                      break;
                    }
                    offset++;
                    if (!isLeadingComment) {
                      break;
                    }
                  } while (isDoubleSlashCommentLine(offset));
                } else {
                  offset = Math.min(length, findEndOfLine(offset) + 1);
                }
                if (isDoc) {
                  setComment(start, offset, isLeadingComment);
                  isLeadingComment = true;
                }
                line++;
                repeat = true;
              }
            } else if ((curr = charAt(offset)) === "*") {
              start = offset + 1;
              isDoc = alternateCommentMode || charAt(start) === "*";
              do {
                if (curr === "\n") {
                  ++line;
                }
                if (++offset === length) {
                  throw illegal("comment");
                }
                prev = curr;
                curr = charAt(offset);
              } while (prev !== "*" || curr !== "/");
              ++offset;
              if (isDoc) {
                setComment(start, offset - 2, isLeadingComment);
                isLeadingComment = true;
              }
              repeat = true;
            } else {
              return "/";
            }
          }
        } while (repeat);
        var end = offset;
        delimRe.lastIndex = 0;
        var delim = delimRe.test(charAt(end++));
        if (!delim)
          while (end < length && !delimRe.test(charAt(end)))
            ++end;
        var token = source.substring(offset, offset = end);
        if (token === '"' || token === "'")
          stringDelim = token;
        return token;
      }
      function push(token) {
        stack.push(token);
      }
      function peek() {
        if (!stack.length) {
          var token = next();
          if (token === null)
            return null;
          push(token);
        }
        return stack[0];
      }
      function skip(expected, optional) {
        var actual = peek(), equals = actual === expected;
        if (equals) {
          next();
          return true;
        }
        if (!optional)
          throw illegal("token '" + actual + "', '" + expected + "' expected");
        return false;
      }
      function cmnt(trailingLine) {
        var ret = null;
        var comment;
        if (trailingLine === void 0) {
          comment = comments[line - 1];
          delete comments[line - 1];
          if (comment && (alternateCommentMode || comment.type === "*" || comment.lineEmpty)) {
            ret = comment.leading ? comment.text : null;
          }
        } else {
          if (lastCommentLine < trailingLine) {
            peek();
          }
          comment = comments[trailingLine];
          delete comments[trailingLine];
          if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === "/")) {
            ret = comment.leading ? null : comment.text;
          }
        }
        return ret;
      }
      return Object.defineProperty({
        next,
        peek,
        push,
        skip,
        cmnt
      }, "line", {
        get: function() {
          return line;
        }
      });
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/parse.js
var require_parse = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/parse.js"(exports2, module2) {
    "use strict";
    module2.exports = parse;
    parse.filename = null;
    parse.defaults = { keepCase: false };
    var tokenize = require_tokenize();
    var Root = require_root();
    var Type = require_type();
    var Field = require_field();
    var MapField = require_mapfield();
    var OneOf = require_oneof();
    var Enum = require_enum();
    var Service = require_service2();
    var Method = require_method();
    var types = require_types();
    var util = require_util2();
    var base10Re = /^[1-9][0-9]*$/;
    var base10NegRe = /^-?[1-9][0-9]*$/;
    var base16Re = /^0[x][0-9a-fA-F]+$/;
    var base16NegRe = /^-?0[x][0-9a-fA-F]+$/;
    var base8Re = /^0[0-7]+$/;
    var base8NegRe = /^-?0[0-7]+$/;
    var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
    var nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
    var typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;
    var fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;
    function parse(source, root, options) {
      if (!(root instanceof Root)) {
        options = root;
        root = new Root();
      }
      if (!options)
        options = parse.defaults;
      var preferTrailingComment = options.preferTrailingComment || false;
      var tn = tokenize(source, options.alternateCommentMode || false), next = tn.next, push = tn.push, peek = tn.peek, skip = tn.skip, cmnt = tn.cmnt;
      var head = true, pkg, imports, weakImports, syntax, isProto3 = false;
      var ptr = root;
      var applyCase = options.keepCase ? function(name) {
        return name;
      } : util.camelCase;
      function illegal(token2, name, insideTryCatch) {
        var filename = parse.filename;
        if (!insideTryCatch)
          parse.filename = null;
        return Error("illegal " + (name || "token") + " '" + token2 + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
      }
      function readString() {
        var values = [], token2;
        do {
          if ((token2 = next()) !== '"' && token2 !== "'")
            throw illegal(token2);
          values.push(next());
          skip(token2);
          token2 = peek();
        } while (token2 === '"' || token2 === "'");
        return values.join("");
      }
      function readValue(acceptTypeRef) {
        var token2 = next();
        switch (token2) {
          case "'":
          case '"':
            push(token2);
            return readString();
          case "true":
          case "TRUE":
            return true;
          case "false":
          case "FALSE":
            return false;
        }
        try {
          return parseNumber(token2, true);
        } catch (e) {
          if (acceptTypeRef && typeRefRe.test(token2))
            return token2;
          throw illegal(token2, "value");
        }
      }
      function readRanges(target, acceptStrings) {
        var token2, start;
        do {
          if (acceptStrings && ((token2 = peek()) === '"' || token2 === "'"))
            target.push(readString());
          else
            target.push([start = parseId(next()), skip("to", true) ? parseId(next()) : start]);
        } while (skip(",", true));
        skip(";");
      }
      function parseNumber(token2, insideTryCatch) {
        var sign = 1;
        if (token2.charAt(0) === "-") {
          sign = -1;
          token2 = token2.substring(1);
        }
        switch (token2) {
          case "inf":
          case "INF":
          case "Inf":
            return sign * Infinity;
          case "nan":
          case "NAN":
          case "Nan":
          case "NaN":
            return NaN;
          case "0":
            return 0;
        }
        if (base10Re.test(token2))
          return sign * parseInt(token2, 10);
        if (base16Re.test(token2))
          return sign * parseInt(token2, 16);
        if (base8Re.test(token2))
          return sign * parseInt(token2, 8);
        if (numberRe.test(token2))
          return sign * parseFloat(token2);
        throw illegal(token2, "number", insideTryCatch);
      }
      function parseId(token2, acceptNegative) {
        switch (token2) {
          case "max":
          case "MAX":
          case "Max":
            return 536870911;
          case "0":
            return 0;
        }
        if (!acceptNegative && token2.charAt(0) === "-")
          throw illegal(token2, "id");
        if (base10NegRe.test(token2))
          return parseInt(token2, 10);
        if (base16NegRe.test(token2))
          return parseInt(token2, 16);
        if (base8NegRe.test(token2))
          return parseInt(token2, 8);
        throw illegal(token2, "id");
      }
      function parsePackage() {
        if (pkg !== void 0)
          throw illegal("package");
        pkg = next();
        if (!typeRefRe.test(pkg))
          throw illegal(pkg, "name");
        ptr = ptr.define(pkg);
        skip(";");
      }
      function parseImport() {
        var token2 = peek();
        var whichImports;
        switch (token2) {
          case "weak":
            whichImports = weakImports || (weakImports = []);
            next();
            break;
          case "public":
            next();
          default:
            whichImports = imports || (imports = []);
            break;
        }
        token2 = readString();
        skip(";");
        whichImports.push(token2);
      }
      function parseSyntax() {
        skip("=");
        syntax = readString();
        isProto3 = syntax === "proto3";
        if (!isProto3 && syntax !== "proto2")
          throw illegal(syntax, "syntax");
        skip(";");
      }
      function parseCommon(parent, token2) {
        switch (token2) {
          case "option":
            parseOption(parent, token2);
            skip(";");
            return true;
          case "message":
            parseType(parent, token2);
            return true;
          case "enum":
            parseEnum(parent, token2);
            return true;
          case "service":
            parseService(parent, token2);
            return true;
          case "extend":
            parseExtension(parent, token2);
            return true;
        }
        return false;
      }
      function ifBlock(obj, fnIf, fnElse) {
        var trailingLine = tn.line;
        if (obj) {
          if (typeof obj.comment !== "string") {
            obj.comment = cmnt();
          }
          obj.filename = parse.filename;
        }
        if (skip("{", true)) {
          var token2;
          while ((token2 = next()) !== "}")
            fnIf(token2);
          skip(";", true);
        } else {
          if (fnElse)
            fnElse();
          skip(";");
          if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
            obj.comment = cmnt(trailingLine) || obj.comment;
        }
      }
      function parseType(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "type name");
        var type = new Type(token2);
        ifBlock(type, function parseType_block(token3) {
          if (parseCommon(type, token3))
            return;
          switch (token3) {
            case "map":
              parseMapField(type, token3);
              break;
            case "required":
            case "repeated":
              parseField(type, token3);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            case "oneof":
              parseOneOf(type, token3);
              break;
            case "extensions":
              readRanges(type.extensions || (type.extensions = []));
              break;
            case "reserved":
              readRanges(type.reserved || (type.reserved = []), true);
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(type, "optional");
              break;
          }
        });
        parent.add(type);
      }
      function parseField(parent, rule, extend) {
        var type = next();
        if (type === "group") {
          parseGroup(parent, rule);
          return;
        }
        if (!typeRefRe.test(type))
          throw illegal(type, "type");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        name = applyCase(name);
        skip("=");
        var field = new Field(name, parseId(next()), type, rule, extend);
        ifBlock(field, function parseField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseField_line() {
          parseInlineOptions(field);
        });
        if (rule === "proto3_optional") {
          var oneof = new OneOf("_" + name);
          field.setOption("proto3_optional", true);
          oneof.add(field);
          parent.add(oneof);
        } else {
          parent.add(field);
        }
        if (!isProto3 && field.repeated && (types.packed[type] !== void 0 || types.basic[type] === void 0))
          field.setOption("packed", false, true);
      }
      function parseGroup(parent, rule) {
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        var fieldName = util.lcFirst(name);
        if (name === fieldName)
          name = util.ucFirst(name);
        skip("=");
        var id = parseId(next());
        var type = new Type(name);
        type.group = true;
        var field = new Field(fieldName, id, name, rule);
        field.filename = parse.filename;
        ifBlock(type, function parseGroup_block(token2) {
          switch (token2) {
            case "option":
              parseOption(type, token2);
              skip(";");
              break;
            case "required":
            case "repeated":
              parseField(type, token2);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            case "message":
              parseType(type, token2);
              break;
            case "enum":
              parseEnum(type, token2);
              break;
            default:
              throw illegal(token2);
          }
        });
        parent.add(type).add(field);
      }
      function parseMapField(parent) {
        skip("<");
        var keyType = next();
        if (types.mapKey[keyType] === void 0)
          throw illegal(keyType, "type");
        skip(",");
        var valueType = next();
        if (!typeRefRe.test(valueType))
          throw illegal(valueType, "type");
        skip(">");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        skip("=");
        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
        ifBlock(field, function parseMapField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseMapField_line() {
          parseInlineOptions(field);
        });
        parent.add(field);
      }
      function parseOneOf(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var oneof = new OneOf(applyCase(token2));
        ifBlock(oneof, function parseOneOf_block(token3) {
          if (token3 === "option") {
            parseOption(oneof, token3);
            skip(";");
          } else {
            push(token3);
            parseField(oneof, "optional");
          }
        });
        parent.add(oneof);
      }
      function parseEnum(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var enm = new Enum(token2);
        ifBlock(enm, function parseEnum_block(token3) {
          switch (token3) {
            case "option":
              parseOption(enm, token3);
              skip(";");
              break;
            case "reserved":
              readRanges(enm.reserved || (enm.reserved = []), true);
              break;
            default:
              parseEnumValue(enm, token3);
          }
        });
        parent.add(enm);
      }
      function parseEnumValue(parent, token2) {
        if (!nameRe.test(token2))
          throw illegal(token2, "name");
        skip("=");
        var value = parseId(next(), true), dummy = {
          options: void 0
        };
        dummy.setOption = function(name, value2) {
          if (this.options === void 0)
            this.options = {};
          this.options[name] = value2;
        };
        ifBlock(dummy, function parseEnumValue_block(token3) {
          if (token3 === "option") {
            parseOption(dummy, token3);
            skip(";");
          } else
            throw illegal(token3);
        }, function parseEnumValue_line() {
          parseInlineOptions(dummy);
        });
        parent.add(token2, value, dummy.comment, dummy.options);
      }
      function parseOption(parent, token2) {
        var isCustom = skip("(", true);
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2;
        var option = name;
        var propName;
        if (isCustom) {
          skip(")");
          name = "(" + name + ")";
          option = name;
          token2 = peek();
          if (fqTypeRefRe.test(token2)) {
            propName = token2.slice(1);
            name += token2;
            next();
          }
        }
        skip("=");
        var optionValue = parseOptionValue(parent, name);
        setParsedOption(parent, option, optionValue, propName);
      }
      function parseOptionValue(parent, name) {
        if (skip("{", true)) {
          var objectResult = {};
          while (!skip("}", true)) {
            if (!nameRe.test(token = next())) {
              throw illegal(token, "name");
            }
            var value;
            var propName = token;
            skip(":", true);
            if (peek() === "{")
              value = parseOptionValue(parent, name + "." + token);
            else if (peek() === "[") {
              value = [];
              var lastValue;
              if (skip("[", true)) {
                do {
                  lastValue = readValue(true);
                  value.push(lastValue);
                } while (skip(",", true));
                skip("]");
                if (typeof lastValue !== "undefined") {
                  setOption(parent, name + "." + token, lastValue);
                }
              }
            } else {
              value = readValue(true);
              setOption(parent, name + "." + token, value);
            }
            var prevValue = objectResult[propName];
            if (prevValue)
              value = [].concat(prevValue).concat(value);
            objectResult[propName] = value;
            skip(",", true);
            skip(";", true);
          }
          return objectResult;
        }
        var simpleValue = readValue(true);
        setOption(parent, name, simpleValue);
        return simpleValue;
      }
      function setOption(parent, name, value) {
        if (parent.setOption)
          parent.setOption(name, value);
      }
      function setParsedOption(parent, name, value, propName) {
        if (parent.setParsedOption)
          parent.setParsedOption(name, value, propName);
      }
      function parseInlineOptions(parent) {
        if (skip("[", true)) {
          do {
            parseOption(parent, "option");
          } while (skip(",", true));
          skip("]");
        }
        return parent;
      }
      function parseService(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "service name");
        var service = new Service(token2);
        ifBlock(service, function parseService_block(token3) {
          if (parseCommon(service, token3))
            return;
          if (token3 === "rpc")
            parseMethod(service, token3);
          else
            throw illegal(token3);
        });
        parent.add(service);
      }
      function parseMethod(parent, token2) {
        var commentText = cmnt();
        var type = token2;
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2, requestType, requestStream, responseType, responseStream;
        skip("(");
        if (skip("stream", true))
          requestStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        requestType = token2;
        skip(")");
        skip("returns");
        skip("(");
        if (skip("stream", true))
          responseStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        responseType = token2;
        skip(")");
        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
        method.comment = commentText;
        ifBlock(method, function parseMethod_block(token3) {
          if (token3 === "option") {
            parseOption(method, token3);
            skip(";");
          } else
            throw illegal(token3);
        });
        parent.add(method);
      }
      function parseExtension(parent, token2) {
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "reference");
        var reference = token2;
        ifBlock(null, function parseExtension_block(token3) {
          switch (token3) {
            case "required":
            case "repeated":
              parseField(parent, token3, reference);
              break;
            case "optional":
              if (isProto3) {
                parseField(parent, "proto3_optional", reference);
              } else {
                parseField(parent, "optional", reference);
              }
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(parent, "optional", reference);
              break;
          }
        });
      }
      var token;
      while ((token = next()) !== null) {
        switch (token) {
          case "package":
            if (!head)
              throw illegal(token);
            parsePackage();
            break;
          case "import":
            if (!head)
              throw illegal(token);
            parseImport();
            break;
          case "syntax":
            if (!head)
              throw illegal(token);
            parseSyntax();
            break;
          case "option":
            parseOption(ptr, token);
            skip(";");
            break;
          default:
            if (parseCommon(ptr, token)) {
              head = false;
              continue;
            }
            throw illegal(token);
        }
      }
      parse.filename = null;
      return {
        "package": pkg,
        "imports": imports,
        weakImports,
        syntax,
        root
      };
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/common.js
var require_common = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/common.js"(exports2, module2) {
    "use strict";
    module2.exports = common;
    var commonRe = /\/|\./;
    function common(name, json) {
      if (!commonRe.test(name)) {
        name = "google/protobuf/" + name + ".proto";
        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
      }
      common[name] = json;
    }
    common("any", {
      Any: {
        fields: {
          type_url: {
            type: "string",
            id: 1
          },
          value: {
            type: "bytes",
            id: 2
          }
        }
      }
    });
    var timeType;
    common("duration", {
      Duration: timeType = {
        fields: {
          seconds: {
            type: "int64",
            id: 1
          },
          nanos: {
            type: "int32",
            id: 2
          }
        }
      }
    });
    common("timestamp", {
      Timestamp: timeType
    });
    common("empty", {
      Empty: {
        fields: {}
      }
    });
    common("struct", {
      Struct: {
        fields: {
          fields: {
            keyType: "string",
            type: "Value",
            id: 1
          }
        }
      },
      Value: {
        oneofs: {
          kind: {
            oneof: [
              "nullValue",
              "numberValue",
              "stringValue",
              "boolValue",
              "structValue",
              "listValue"
            ]
          }
        },
        fields: {
          nullValue: {
            type: "NullValue",
            id: 1
          },
          numberValue: {
            type: "double",
            id: 2
          },
          stringValue: {
            type: "string",
            id: 3
          },
          boolValue: {
            type: "bool",
            id: 4
          },
          structValue: {
            type: "Struct",
            id: 5
          },
          listValue: {
            type: "ListValue",
            id: 6
          }
        }
      },
      NullValue: {
        values: {
          NULL_VALUE: 0
        }
      },
      ListValue: {
        fields: {
          values: {
            rule: "repeated",
            type: "Value",
            id: 1
          }
        }
      }
    });
    common("wrappers", {
      DoubleValue: {
        fields: {
          value: {
            type: "double",
            id: 1
          }
        }
      },
      FloatValue: {
        fields: {
          value: {
            type: "float",
            id: 1
          }
        }
      },
      Int64Value: {
        fields: {
          value: {
            type: "int64",
            id: 1
          }
        }
      },
      UInt64Value: {
        fields: {
          value: {
            type: "uint64",
            id: 1
          }
        }
      },
      Int32Value: {
        fields: {
          value: {
            type: "int32",
            id: 1
          }
        }
      },
      UInt32Value: {
        fields: {
          value: {
            type: "uint32",
            id: 1
          }
        }
      },
      BoolValue: {
        fields: {
          value: {
            type: "bool",
            id: 1
          }
        }
      },
      StringValue: {
        fields: {
          value: {
            type: "string",
            id: 1
          }
        }
      },
      BytesValue: {
        fields: {
          value: {
            type: "bytes",
            id: 1
          }
        }
      }
    });
    common("field_mask", {
      FieldMask: {
        fields: {
          paths: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      }
    });
    common.get = function get(file) {
      return common[file] || null;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/index.js
var require_src = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/index.js"(exports2, module2) {
    "use strict";
    var protobuf = module2.exports = require_index_light();
    protobuf.build = "full";
    protobuf.tokenize = require_tokenize();
    protobuf.parse = require_parse();
    protobuf.common = require_common();
    protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
  }
});

// node_modules/google-gax/node_modules/protobufjs/index.js
var require_protobufjs = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_src();
  }
});

// node_modules/google-gax/build/src/featureDetection.js
var require_featureDetection = __commonJS({
  "node_modules/google-gax/build/src/featureDetection.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hasAbortController = exports2.isNodeJS = exports2.hasTextDecoder = exports2.hasTextEncoder = exports2.hasWindowFetch = void 0;
    var features = {
      windowFetch: typeof window !== "undefined" && (window === null || window === void 0 ? void 0 : window.fetch) && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function",
      textEncoder: typeof TextEncoder !== "undefined",
      textDecoder: typeof TextDecoder !== "undefined",
      nodeJS: typeof process !== "undefined" && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node),
      abortController: typeof AbortController !== "undefined"
    };
    function hasWindowFetch() {
      return features.windowFetch;
    }
    exports2.hasWindowFetch = hasWindowFetch;
    function hasTextEncoder() {
      return features.textEncoder;
    }
    exports2.hasTextEncoder = hasTextEncoder;
    function hasTextDecoder() {
      return features.textDecoder;
    }
    exports2.hasTextDecoder = hasTextDecoder;
    function isNodeJS() {
      return features.nodeJS;
    }
    exports2.isNodeJS = isNodeJS;
    function hasAbortController() {
      return features.abortController;
    }
    exports2.hasAbortController = hasAbortController;
  }
});

// node_modules/google-gax/build/src/warnings.js
var require_warnings = __commonJS({
  "node_modules/google-gax/build/src/warnings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.warn = void 0;
    var featureDetection_1 = require_featureDetection();
    var emittedWarnings = /* @__PURE__ */ new Set();
    function warn(code, message, warnType) {
      if (emittedWarnings.has(code)) {
        return;
      }
      emittedWarnings.add(code);
      if (!(0, featureDetection_1.isNodeJS)()) {
        console.warn(message);
      } else if (typeof warnType !== "undefined") {
        process.emitWarning(message, {
          type: warnType
        });
      } else {
        process.emitWarning(message);
      }
    }
    exports2.warn = warn;
  }
});

// node_modules/google-gax/build/src/util.js
var require_util3 = __commonJS({
  "node_modules/google-gax/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toLowerCamelCase = exports2.toCamelCase = exports2.camelToSnakeCase = void 0;
    function words(str, normalize = false) {
      if (normalize) {
        str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, (str2) => {
          return str2[0] + str2.slice(1, str2.length - 1).toLowerCase() + str2[str2.length - 1];
        });
      }
      return str.split(/(?=[A-Z])|[^A-Za-z0-9.]+/).filter((w) => w.length > 0).map((w, index) => index === 0 ? w : w.toLowerCase());
    }
    function lowercase(str) {
      if (str.length === 0) {
        return str;
      }
      return str[0].toLowerCase() + str.slice(1);
    }
    function camelToSnakeCase(str) {
      const wordsList = words(str);
      if (wordsList.length === 0) {
        return str;
      }
      const result = [wordsList[0]];
      result.push(...wordsList.slice(1).map(lowercase));
      return result.join("_");
    }
    exports2.camelToSnakeCase = camelToSnakeCase;
    function capitalize(str) {
      if (str.length === 0) {
        return str;
      }
      return str[0].toUpperCase() + str.slice(1);
    }
    function toCamelCase(str) {
      const wordsList = words(str, true);
      if (wordsList.length === 0) {
        return str;
      }
      const result = [wordsList[0]];
      result.push(...wordsList.slice(1).map((w) => {
        if (w.match(/^\d+$/)) {
          return "_" + w;
        }
        return capitalize(w);
      }));
      return result.join("");
    }
    exports2.toCamelCase = toCamelCase;
    function toLowerCamelCase(str) {
      const camelCase = toCamelCase(str);
      if (camelCase.length === 0) {
        return camelCase;
      }
      return camelCase[0].toLowerCase() + camelCase.slice(1);
    }
    exports2.toLowerCamelCase = toLowerCamelCase;
  }
});

// node_modules/google-gax/build/src/gax.js
var require_gax = __commonJS({
  "node_modules/google-gax/build/src/gax.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createByteLengthFunction = exports2.constructSettings = exports2.createBundleOptions = exports2.createMaxRetriesBackoffSettings = exports2.createDefaultBackoffSettings = exports2.createBackoffSettings = exports2.createRetryOptions = exports2.CallSettings = exports2.RetryOptions = void 0;
    var warnings_1 = require_warnings();
    var util_1 = require_util3();
    var RetryOptions = class {
      constructor(retryCodes, backoffSettings) {
        this.retryCodes = retryCodes;
        this.backoffSettings = backoffSettings;
      }
    };
    exports2.RetryOptions = RetryOptions;
    var CallSettings = class {
      constructor(settings) {
        var _a;
        settings = settings || {};
        this.timeout = settings.timeout || 30 * 1e3;
        this.retry = settings.retry;
        this.autoPaginate = "autoPaginate" in settings ? settings.autoPaginate : true;
        this.maxResults = settings.maxResults;
        this.otherArgs = settings.otherArgs || {};
        this.bundleOptions = settings.bundleOptions;
        this.isBundling = "isBundling" in settings ? settings.isBundling : true;
        this.longrunning = "longrunning" in settings ? settings.longrunning : void 0;
        this.apiName = (_a = settings.apiName) !== null && _a !== void 0 ? _a : void 0;
        this.retryRequestOptions = settings.retryRequestOptions;
      }
      merge(options) {
        if (!options) {
          return new CallSettings(this);
        }
        let timeout = this.timeout;
        let retry = this.retry;
        let autoPaginate = this.autoPaginate;
        let maxResults = this.maxResults;
        let otherArgs = this.otherArgs;
        let isBundling = this.isBundling;
        let longrunning = this.longrunning;
        let apiName = this.apiName;
        let retryRequestOptions = this.retryRequestOptions;
        if (retry !== void 0 && retry !== null && retry.retryCodes !== null && retry.retryCodes.length > 0) {
          retry.backoffSettings.initialRpcTimeoutMillis = timeout;
          retry.backoffSettings.maxRpcTimeoutMillis = timeout;
          retry.backoffSettings.totalTimeoutMillis = timeout;
        }
        if ("timeout" in options) {
          timeout = options.timeout;
          if (retry !== void 0 && retry !== null && retry.retryCodes.length > 0) {
            retry.backoffSettings.initialRpcTimeoutMillis = timeout;
            retry.backoffSettings.maxRpcTimeoutMillis = timeout;
            retry.backoffSettings.totalTimeoutMillis = timeout;
          }
        }
        if ("retry" in options) {
          retry = mergeRetryOptions(retry || {}, options.retry);
        }
        if ("autoPaginate" in options && !options.autoPaginate) {
          autoPaginate = false;
        }
        if ("maxResults" in options) {
          maxResults = options.maxResults;
        }
        if ("otherArgs" in options) {
          otherArgs = {};
          for (const key in this.otherArgs) {
            otherArgs[key] = this.otherArgs[key];
          }
          for (const optionsKey in options.otherArgs) {
            otherArgs[optionsKey] = options.otherArgs[optionsKey];
          }
        }
        if ("isBundling" in options) {
          isBundling = options.isBundling;
        }
        if ("maxRetries" in options) {
          retry.backoffSettings.maxRetries = options.maxRetries;
          delete retry.backoffSettings.totalTimeoutMillis;
        }
        if ("longrunning" in options) {
          longrunning = options.longrunning;
        }
        if ("apiName" in options) {
          apiName = options.apiName;
        }
        if ("retryRequestOptions" in options) {
          retryRequestOptions = options.retryRequestOptions;
        }
        return new CallSettings({
          timeout,
          retry,
          bundleOptions: this.bundleOptions,
          longrunning,
          autoPaginate,
          maxResults,
          otherArgs,
          isBundling,
          apiName,
          retryRequestOptions
        });
      }
    };
    exports2.CallSettings = CallSettings;
    function createRetryOptions(retryCodes, backoffSettings) {
      return {
        retryCodes,
        backoffSettings
      };
    }
    exports2.createRetryOptions = createRetryOptions;
    function createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {
      return {
        initialRetryDelayMillis,
        retryDelayMultiplier,
        maxRetryDelayMillis,
        initialRpcTimeoutMillis,
        rpcTimeoutMultiplier,
        maxRpcTimeoutMillis,
        totalTimeoutMillis
      };
    }
    exports2.createBackoffSettings = createBackoffSettings;
    function createDefaultBackoffSettings() {
      return createBackoffSettings(100, 1.3, 6e4, null, null, null, null);
    }
    exports2.createDefaultBackoffSettings = createDefaultBackoffSettings;
    function createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {
      return {
        initialRetryDelayMillis,
        retryDelayMultiplier,
        maxRetryDelayMillis,
        initialRpcTimeoutMillis,
        rpcTimeoutMultiplier,
        maxRpcTimeoutMillis,
        maxRetries
      };
    }
    exports2.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;
    function createBundleOptions(options) {
      const params = [
        "element_count_threshold",
        "element_count_limit",
        "request_byte_threshold",
        "request_byte_limit",
        "delay_threshold_millis"
      ];
      params.forEach((param) => {
        if (param in options && typeof options[param] !== "number") {
          throw new Error(`${param} should be a number`);
        }
      });
      const elementCountThreshold = options.element_count_threshold || 0;
      const elementCountLimit = options.element_count_limit || 0;
      const requestByteThreshold = options.request_byte_threshold || 0;
      const requestByteLimit = options.request_byte_limit || 0;
      const delayThreshold = options.delay_threshold_millis || 0;
      if (elementCountThreshold === 0 && requestByteThreshold === 0 && delayThreshold === 0) {
        throw new Error("one threshold should be > 0");
      }
      return {
        elementCountThreshold,
        elementCountLimit,
        requestByteThreshold,
        requestByteLimit,
        delayThreshold
      };
    }
    exports2.createBundleOptions = createBundleOptions;
    function constructRetry(methodConfig, retryCodes, retryParams, retryNames) {
      if (!methodConfig) {
        return null;
      }
      let codes = null;
      if (retryCodes && "retry_codes_name" in methodConfig) {
        const retryCodesName = methodConfig["retry_codes_name"];
        codes = (retryCodes[retryCodesName] || []).map((name) => {
          return Number(retryNames[name]);
        });
      }
      let backoffSettings = null;
      if (retryParams && "retry_params_name" in methodConfig) {
        const params = retryParams[methodConfig.retry_params_name];
        backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);
      }
      return createRetryOptions(codes, backoffSettings);
    }
    function mergeRetryOptions(retry, overrides) {
      if (!overrides) {
        return null;
      }
      if (!overrides.retryCodes && !overrides.backoffSettings) {
        return retry;
      }
      const codes = overrides.retryCodes ? overrides.retryCodes : retry.retryCodes;
      const backoffSettings = overrides.backoffSettings ? overrides.backoffSettings : retry.backoffSettings;
      return createRetryOptions(codes, backoffSettings);
    }
    function constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {
      otherArgs = otherArgs || {};
      const defaults = {};
      const serviceConfig = (clientConfig.interfaces || {})[serviceName];
      if (!serviceConfig) {
        return null;
      }
      const overrides = (configOverrides.interfaces || {})[serviceName] || {};
      const methods = serviceConfig.methods;
      const overridingMethods = overrides.methods || {};
      for (const methodName in methods) {
        const methodConfig = methods[methodName];
        const jsName = (0, util_1.toLowerCamelCase)(methodName);
        let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);
        let bundlingConfig = methodConfig.bundling;
        let timeout = methodConfig.timeout_millis;
        if (methodName in overridingMethods) {
          const overridingMethod = overridingMethods[methodName];
          if (overridingMethod) {
            if ("bundling" in overridingMethod) {
              bundlingConfig = overridingMethod.bundling;
            }
            if ("timeout_millis" in overridingMethod) {
              timeout = overridingMethod.timeout_millis;
            }
          }
          retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));
        }
        const apiName = serviceName;
        defaults[jsName] = new CallSettings({
          timeout,
          retry,
          bundleOptions: bundlingConfig ? createBundleOptions(bundlingConfig) : null,
          otherArgs,
          apiName
        });
      }
      return defaults;
    }
    exports2.constructSettings = constructSettings;
    function createByteLengthFunction(message) {
      return function getByteLength(obj) {
        try {
          return message.encode(obj).finish().length;
        } catch (err) {
          const stringified = JSON.stringify(obj);
          (0, warnings_1.warn)("error_encoding_protobufjs_object", `Cannot encode protobuf.js object: ${stringified}: ${err}`);
          return stringified.length;
        }
      };
    }
    exports2.createByteLengthFunction = createByteLengthFunction;
  }
});

// node-modules-polyfills-commonjs:querystring
var require_querystring = __commonJS({
  "node-modules-polyfills-commonjs:querystring"(exports2, module2) {
    var polyfill = (init_querystring(), __toCommonJS(querystring_exports));
    if (polyfill && polyfill.default) {
      module2.exports = polyfill.default;
      for (let k in polyfill) {
        module2.exports[k] = polyfill[k];
      }
    } else if (polyfill) {
      module2.exports = polyfill;
    }
  }
});

// node_modules/google-gax/build/src/routingHeader.js
var require_routingHeader = __commonJS({
  "node_modules/google-gax/build/src/routingHeader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromParams = void 0;
    var querystring = require_querystring();
    function fromParams(params) {
      return querystring.stringify(params);
    }
    exports2.fromParams = fromParams;
  }
});

// node_modules/google-gax/build/src/status.js
var require_status = __commonJS({
  "node_modules/google-gax/build/src/status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rpcCodeFromHttpStatusCode = exports2.HttpCodeToRpcCodeMap = exports2.Status = void 0;
    var Status;
    (function(Status2) {
      Status2[Status2["OK"] = 0] = "OK";
      Status2[Status2["CANCELLED"] = 1] = "CANCELLED";
      Status2[Status2["UNKNOWN"] = 2] = "UNKNOWN";
      Status2[Status2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
      Status2[Status2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
      Status2[Status2["NOT_FOUND"] = 5] = "NOT_FOUND";
      Status2[Status2["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
      Status2[Status2["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
      Status2[Status2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
      Status2[Status2["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
      Status2[Status2["ABORTED"] = 10] = "ABORTED";
      Status2[Status2["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
      Status2[Status2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
      Status2[Status2["INTERNAL"] = 13] = "INTERNAL";
      Status2[Status2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
      Status2[Status2["DATA_LOSS"] = 15] = "DATA_LOSS";
      Status2[Status2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
    })(Status = exports2.Status || (exports2.Status = {}));
    exports2.HttpCodeToRpcCodeMap = /* @__PURE__ */ new Map([
      [400, Status.INVALID_ARGUMENT],
      [401, Status.UNAUTHENTICATED],
      [403, Status.PERMISSION_DENIED],
      [404, Status.NOT_FOUND],
      [409, Status.ABORTED],
      [416, Status.OUT_OF_RANGE],
      [429, Status.RESOURCE_EXHAUSTED],
      [499, Status.CANCELLED],
      [501, Status.UNIMPLEMENTED],
      [503, Status.UNAVAILABLE],
      [504, Status.DEADLINE_EXCEEDED]
    ]);
    function rpcCodeFromHttpStatusCode(httpStatusCode) {
      if (exports2.HttpCodeToRpcCodeMap.has(httpStatusCode)) {
        return exports2.HttpCodeToRpcCodeMap.get(httpStatusCode);
      }
      if (httpStatusCode >= 200 && httpStatusCode < 300) {
        return Status.OK;
      }
      if (httpStatusCode >= 400 && httpStatusCode < 500) {
        return Status.FAILED_PRECONDITION;
      }
      if (httpStatusCode >= 500 && httpStatusCode < 600) {
        return Status.INTERNAL;
      }
      return Status.UNKNOWN;
    }
    exports2.rpcCodeFromHttpStatusCode = rpcCodeFromHttpStatusCode;
  }
});

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports2, module2) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray2(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject = function isPlainObject2(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn.call(obj, key);
    };
    var setProperty = function setProperty2(target, options) {
      if (defineProperty && options.name === "__proto__") {
        defineProperty(target, options.name, {
          enumerable: true,
          configurable: true,
          value: options.newValue,
          writable: true
        });
      } else {
        target[options.name] = options.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name) {
      if (name === "__proto__") {
        if (!hasOwn.call(obj, name)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name).value;
        }
      }
      return obj[name];
    };
    module2.exports = function extend() {
      var options, name, src, copy, copyIsArray, clone;
      var target = arguments[0];
      var i = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i < length; ++i) {
        options = arguments[i];
        if (options != null) {
          for (name in options) {
            src = getProperty(target, name);
            copy = getProperty(options, name);
            if (target !== copy) {
              if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray(src) ? src : [];
                } else {
                  clone = src && isPlainObject(src) ? src : {};
                }
                setProperty(target, { name, newValue: extend(deep, clone, copy) });
              } else if (typeof copy !== "undefined") {
                setProperty(target, { name, newValue: copy });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// node_modules/node-fetch/browser.js
var require_browser3 = __commonJS({
  "node_modules/node-fetch/browser.js"(exports2, module2) {
    "use strict";
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global2 !== "undefined") {
        return global2;
      }
      throw new Error("unable to locate global object");
    };
    var global2 = getGlobal();
    module2.exports = exports2 = global2.fetch;
    if (global2.fetch) {
      exports2.default = global2.fetch.bind(global2);
    }
    exports2.Headers = global2.Headers;
    exports2.Request = global2.Request;
    exports2.Response = global2.Response;
  }
});

// node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "node_modules/is-stream/index.js"(exports2, module2) {
    "use strict";
    var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
    isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
    isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
    isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
    isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function";
    module2.exports = isStream;
  }
});

// node_modules/gaxios/build/src/common.js
var require_common2 = __commonJS({
  "node_modules/gaxios/build/src/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GaxiosError = void 0;
    var GaxiosError = class extends Error {
      constructor(message, options, response) {
        super(message);
        this.response = response;
        this.config = options;
        this.code = response.status.toString();
      }
    };
    exports2.GaxiosError = GaxiosError;
  }
});

// node_modules/gaxios/build/src/retry.js
var require_retry = __commonJS({
  "node_modules/gaxios/build/src/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRetryConfig = void 0;
    async function getRetryConfig(err) {
      var _a;
      let config = getConfig(err);
      if (!err || !err.config || !config && !err.config.retry) {
        return { shouldRetry: false };
      }
      config = config || {};
      config.currentRetryAttempt = config.currentRetryAttempt || 0;
      config.retry = config.retry === void 0 || config.retry === null ? 3 : config.retry;
      config.httpMethodsToRetry = config.httpMethodsToRetry || [
        "GET",
        "HEAD",
        "PUT",
        "OPTIONS",
        "DELETE"
      ];
      config.noResponseRetries = config.noResponseRetries === void 0 || config.noResponseRetries === null ? 2 : config.noResponseRetries;
      const retryRanges = [
        [100, 199],
        [429, 429],
        [500, 599]
      ];
      config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;
      err.config.retryConfig = config;
      const shouldRetryFn = config.shouldRetry || shouldRetryRequest;
      if (!await shouldRetryFn(err)) {
        return { shouldRetry: false, config: err.config };
      }
      const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100;
      const delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1e3;
      err.config.retryConfig.currentRetryAttempt += 1;
      const backoff = new Promise((resolve) => {
        setTimeout(resolve, delay);
      });
      if (config.onRetryAttempt) {
        config.onRetryAttempt(err);
      }
      await backoff;
      return { shouldRetry: true, config: err.config };
    }
    exports2.getRetryConfig = getRetryConfig;
    function shouldRetryRequest(err) {
      const config = getConfig(err);
      if (err.name === "AbortError") {
        return false;
      }
      if (!config || config.retry === 0) {
        return false;
      }
      if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {
        return false;
      }
      if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {
        return false;
      }
      if (err.response && err.response.status) {
        let isInRange = false;
        for (const [min, max] of config.statusCodesToRetry) {
          const status = err.response.status;
          if (status >= min && status <= max) {
            isInRange = true;
            break;
          }
        }
        if (!isInRange) {
          return false;
        }
      }
      config.currentRetryAttempt = config.currentRetryAttempt || 0;
      if (config.currentRetryAttempt >= config.retry) {
        return false;
      }
      return true;
    }
    function getConfig(err) {
      if (err && err.config && err.config.retryConfig) {
        return err.config.retryConfig;
      }
      return;
    }
  }
});

// node_modules/agent-base/dist/src/promisify.js
var require_promisify = __commonJS({
  "node_modules/agent-base/dist/src/promisify.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function promisify(fn) {
      return function(req, opts) {
        return new Promise((resolve, reject) => {
          fn.call(this, req, opts, (err, rtn) => {
            if (err) {
              reject(err);
            } else {
              resolve(rtn);
            }
          });
        });
      };
    }
    exports2.default = promisify;
  }
});

// node_modules/agent-base/dist/src/index.js
var require_src2 = __commonJS({
  "node_modules/agent-base/dist/src/index.js"(exports2, module2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod3) {
      return mod3 && mod3.__esModule ? mod3 : { "default": mod3 };
    };
    var events_1 = require_events();
    var debug_1 = __importDefault(require_browser2());
    var promisify_1 = __importDefault(require_promisify());
    var debug = debug_1.default("agent-base");
    function isAgent(v) {
      return Boolean(v) && typeof v.addRequest === "function";
    }
    function isSecureEndpoint() {
      const { stack } = new Error();
      if (typeof stack !== "string")
        return false;
      return stack.split("\n").some((l) => l.indexOf("(https.js:") !== -1 || l.indexOf("node:https:") !== -1);
    }
    function createAgent(callback, opts) {
      return new createAgent.Agent(callback, opts);
    }
    (function(createAgent2) {
      class Agent extends events_1.EventEmitter {
        constructor(callback, _opts) {
          super();
          let opts = _opts;
          if (typeof callback === "function") {
            this.callback = callback;
          } else if (callback) {
            opts = callback;
          }
          this.timeout = null;
          if (opts && typeof opts.timeout === "number") {
            this.timeout = opts.timeout;
          }
          this.maxFreeSockets = 1;
          this.maxSockets = 1;
          this.maxTotalSockets = Infinity;
          this.sockets = {};
          this.freeSockets = {};
          this.requests = {};
          this.options = {};
        }
        get defaultPort() {
          if (typeof this.explicitDefaultPort === "number") {
            return this.explicitDefaultPort;
          }
          return isSecureEndpoint() ? 443 : 80;
        }
        set defaultPort(v) {
          this.explicitDefaultPort = v;
        }
        get protocol() {
          if (typeof this.explicitProtocol === "string") {
            return this.explicitProtocol;
          }
          return isSecureEndpoint() ? "https:" : "http:";
        }
        set protocol(v) {
          this.explicitProtocol = v;
        }
        callback(req, opts, fn) {
          throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
        }
        addRequest(req, _opts) {
          const opts = Object.assign({}, _opts);
          if (typeof opts.secureEndpoint !== "boolean") {
            opts.secureEndpoint = isSecureEndpoint();
          }
          if (opts.host == null) {
            opts.host = "localhost";
          }
          if (opts.port == null) {
            opts.port = opts.secureEndpoint ? 443 : 80;
          }
          if (opts.protocol == null) {
            opts.protocol = opts.secureEndpoint ? "https:" : "http:";
          }
          if (opts.host && opts.path) {
            delete opts.path;
          }
          delete opts.agent;
          delete opts.hostname;
          delete opts._defaultAgent;
          delete opts.defaultPort;
          delete opts.createConnection;
          req._last = true;
          req.shouldKeepAlive = false;
          let timedOut = false;
          let timeoutId = null;
          const timeoutMs = opts.timeout || this.timeout;
          const onerror = (err) => {
            if (req._hadError)
              return;
            req.emit("error", err);
            req._hadError = true;
          };
          const ontimeout = () => {
            timeoutId = null;
            timedOut = true;
            const err = new Error(`A "socket" was not created for HTTP request before ${timeoutMs}ms`);
            err.code = "ETIMEOUT";
            onerror(err);
          };
          const callbackError = (err) => {
            if (timedOut)
              return;
            if (timeoutId !== null) {
              clearTimeout(timeoutId);
              timeoutId = null;
            }
            onerror(err);
          };
          const onsocket = (socket) => {
            if (timedOut)
              return;
            if (timeoutId != null) {
              clearTimeout(timeoutId);
              timeoutId = null;
            }
            if (isAgent(socket)) {
              debug("Callback returned another Agent instance %o", socket.constructor.name);
              socket.addRequest(req, opts);
              return;
            }
            if (socket) {
              socket.once("free", () => {
                this.freeSocket(socket, opts);
              });
              req.onSocket(socket);
              return;
            }
            const err = new Error(`no Duplex stream was returned to agent-base for \`${req.method} ${req.path}\``);
            onerror(err);
          };
          if (typeof this.callback !== "function") {
            onerror(new Error("`callback` is not defined"));
            return;
          }
          if (!this.promisifiedCallback) {
            if (this.callback.length >= 3) {
              debug("Converting legacy callback function to promise");
              this.promisifiedCallback = promisify_1.default(this.callback);
            } else {
              this.promisifiedCallback = this.callback;
            }
          }
          if (typeof timeoutMs === "number" && timeoutMs > 0) {
            timeoutId = setTimeout(ontimeout, timeoutMs);
          }
          if ("port" in opts && typeof opts.port !== "number") {
            opts.port = Number(opts.port);
          }
          try {
            debug("Resolving socket for %o request: %o", opts.protocol, `${req.method} ${req.path}`);
            Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);
          } catch (err) {
            Promise.reject(err).catch(callbackError);
          }
        }
        freeSocket(socket, opts) {
          debug("Freeing socket %o %o", socket.constructor.name, opts);
          socket.destroy();
        }
        destroy() {
          debug("Destroying agent %o", this.constructor.name);
        }
      }
      createAgent2.Agent = Agent;
      createAgent2.prototype = createAgent2.Agent.prototype;
    })(createAgent || (createAgent = {}));
    module2.exports = createAgent;
  }
});

// node_modules/https-proxy-agent/dist/parse-proxy-response.js
var require_parse_proxy_response = __commonJS({
  "node_modules/https-proxy-agent/dist/parse-proxy-response.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod3) {
      return mod3 && mod3.__esModule ? mod3 : { "default": mod3 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var debug_1 = __importDefault(require_browser2());
    var debug = debug_1.default("https-proxy-agent:parse-proxy-response");
    function parseProxyResponse(socket) {
      return new Promise((resolve, reject) => {
        let buffersLength = 0;
        const buffers = [];
        function read() {
          const b = socket.read();
          if (b)
            ondata(b);
          else
            socket.once("readable", read);
        }
        function cleanup() {
          socket.removeListener("end", onend);
          socket.removeListener("error", onerror);
          socket.removeListener("close", onclose);
          socket.removeListener("readable", read);
        }
        function onclose(err) {
          debug("onclose had error %o", err);
        }
        function onend() {
          debug("onend");
        }
        function onerror(err) {
          cleanup();
          debug("onerror %o", err);
          reject(err);
        }
        function ondata(b) {
          buffers.push(b);
          buffersLength += b.length;
          const buffered = Buffer.concat(buffers, buffersLength);
          const endOfHeaders = buffered.indexOf("\r\n\r\n");
          if (endOfHeaders === -1) {
            debug("have not received end of HTTP headers yet...");
            read();
            return;
          }
          const firstLine = buffered.toString("ascii", 0, buffered.indexOf("\r\n"));
          const statusCode = +firstLine.split(" ")[1];
          debug("got proxy server response: %o", firstLine);
          resolve({
            statusCode,
            buffered
          });
        }
        socket.on("error", onerror);
        socket.on("close", onclose);
        socket.on("end", onend);
        read();
      });
    }
    exports2.default = parseProxyResponse;
  }
});

// node_modules/https-proxy-agent/dist/agent.js
var require_agent = __commonJS({
  "node_modules/https-proxy-agent/dist/agent.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod3) {
      return mod3 && mod3.__esModule ? mod3 : { "default": mod3 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var net_1 = __importDefault(require_net());
    var tls_1 = __importDefault(require_tls());
    var url_1 = __importDefault(require_url());
    var assert_1 = __importDefault(require_assert());
    var debug_1 = __importDefault(require_browser2());
    var agent_base_1 = require_src2();
    var parse_proxy_response_1 = __importDefault(require_parse_proxy_response());
    var debug = debug_1.default("https-proxy-agent:agent");
    var HttpsProxyAgent = class extends agent_base_1.Agent {
      constructor(_opts) {
        let opts;
        if (typeof _opts === "string") {
          opts = url_1.default.parse(_opts);
        } else {
          opts = _opts;
        }
        if (!opts) {
          throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
        }
        debug("creating new HttpsProxyAgent instance: %o", opts);
        super(opts);
        const proxy = Object.assign({}, opts);
        this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);
        proxy.host = proxy.hostname || proxy.host;
        if (typeof proxy.port === "string") {
          proxy.port = parseInt(proxy.port, 10);
        }
        if (!proxy.port && proxy.host) {
          proxy.port = this.secureProxy ? 443 : 80;
        }
        if (this.secureProxy && !("ALPNProtocols" in proxy)) {
          proxy.ALPNProtocols = ["http 1.1"];
        }
        if (proxy.host && proxy.path) {
          delete proxy.path;
          delete proxy.pathname;
        }
        this.proxy = proxy;
      }
      callback(req, opts) {
        return __awaiter(this, void 0, void 0, function* () {
          const { proxy, secureProxy } = this;
          let socket;
          if (secureProxy) {
            debug("Creating `tls.Socket`: %o", proxy);
            socket = tls_1.default.connect(proxy);
          } else {
            debug("Creating `net.Socket`: %o", proxy);
            socket = net_1.default.connect(proxy);
          }
          const headers = Object.assign({}, proxy.headers);
          const hostname = `${opts.host}:${opts.port}`;
          let payload = `CONNECT ${hostname} HTTP/1.1\r
`;
          if (proxy.auth) {
            headers["Proxy-Authorization"] = `Basic ${Buffer.from(proxy.auth).toString("base64")}`;
          }
          let { host, port, secureEndpoint } = opts;
          if (!isDefaultPort(port, secureEndpoint)) {
            host += `:${port}`;
          }
          headers.Host = host;
          headers.Connection = "close";
          for (const name of Object.keys(headers)) {
            payload += `${name}: ${headers[name]}\r
`;
          }
          const proxyResponsePromise = parse_proxy_response_1.default(socket);
          socket.write(`${payload}\r
`);
          const { statusCode, buffered } = yield proxyResponsePromise;
          if (statusCode === 200) {
            req.once("socket", resume);
            if (opts.secureEndpoint) {
              debug("Upgrading socket connection to TLS");
              const servername = opts.servername || opts.host;
              return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, "host", "hostname", "path", "port")), {
                socket,
                servername
              }));
            }
            return socket;
          }
          socket.destroy();
          const fakeSocket = new net_1.default.Socket({ writable: false });
          fakeSocket.readable = true;
          req.once("socket", (s) => {
            debug("replaying proxy buffer for failed request");
            assert_1.default(s.listenerCount("data") > 0);
            s.push(buffered);
            s.push(null);
          });
          return fakeSocket;
        });
      }
    };
    exports2.default = HttpsProxyAgent;
    function resume(socket) {
      socket.resume();
    }
    function isDefaultPort(port, secure) {
      return Boolean(!secure && port === 80 || secure && port === 443);
    }
    function isHTTPS(protocol) {
      return typeof protocol === "string" ? /^https:?$/i.test(protocol) : false;
    }
    function omit(obj, ...keys) {
      const ret = {};
      let key;
      for (key in obj) {
        if (!keys.includes(key)) {
          ret[key] = obj[key];
        }
      }
      return ret;
    }
  }
});

// node_modules/https-proxy-agent/dist/index.js
var require_dist = __commonJS({
  "node_modules/https-proxy-agent/dist/index.js"(exports2, module2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod3) {
      return mod3 && mod3.__esModule ? mod3 : { "default": mod3 };
    };
    var agent_1 = __importDefault(require_agent());
    function createHttpsProxyAgent(opts) {
      return new agent_1.default(opts);
    }
    (function(createHttpsProxyAgent2) {
      createHttpsProxyAgent2.HttpsProxyAgent = agent_1.default;
      createHttpsProxyAgent2.prototype = agent_1.default.prototype;
    })(createHttpsProxyAgent || (createHttpsProxyAgent = {}));
    module2.exports = createHttpsProxyAgent;
  }
});

// node_modules/gaxios/build/src/gaxios.js
var require_gaxios = __commonJS({
  "node_modules/gaxios/build/src/gaxios.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod3) {
      return mod3 && mod3.__esModule ? mod3 : { "default": mod3 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Gaxios = void 0;
    var extend_1 = __importDefault(require_extend());
    var https_1 = require_https();
    var node_fetch_1 = __importDefault(require_browser3());
    var querystring_1 = __importDefault(require_querystring());
    var is_stream_1 = __importDefault(require_is_stream());
    var url_1 = require_url();
    var common_1 = require_common2();
    var retry_1 = require_retry();
    var fetch = hasFetch() ? window.fetch : node_fetch_1.default;
    function hasWindow() {
      return typeof window !== "undefined" && !!window;
    }
    function hasFetch() {
      return hasWindow() && !!window.fetch;
    }
    function hasBuffer() {
      return typeof Buffer !== "undefined";
    }
    function hasHeader(options, header) {
      return !!getHeader(options, header);
    }
    function getHeader(options, header) {
      header = header.toLowerCase();
      for (const key of Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {})) {
        if (header === key.toLowerCase()) {
          return options.headers[key];
        }
      }
      return void 0;
    }
    var HttpsProxyAgent;
    function loadProxy() {
      var _a, _b, _c, _d;
      const proxy = ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.HTTPS_PROXY) || ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.https_proxy) || ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c.HTTP_PROXY) || ((_d = process === null || process === void 0 ? void 0 : process.env) === null || _d === void 0 ? void 0 : _d.http_proxy);
      if (proxy) {
        HttpsProxyAgent = require_dist();
      }
      return proxy;
    }
    loadProxy();
    function skipProxy(url) {
      var _a;
      const noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;
      if (!noProxyEnv) {
        return false;
      }
      const noProxyUrls = noProxyEnv.split(",");
      const parsedURL = new url_1.URL(url);
      return !!noProxyUrls.find((url2) => {
        if (url2.startsWith("*.") || url2.startsWith(".")) {
          url2 = url2.replace(/^\*\./, ".");
          return parsedURL.hostname.endsWith(url2);
        } else {
          return url2 === parsedURL.origin || url2 === parsedURL.hostname;
        }
      });
    }
    function getProxy(url) {
      if (skipProxy(url)) {
        return void 0;
      } else {
        return loadProxy();
      }
    }
    var Gaxios = class {
      constructor(defaults) {
        this.agentCache = /* @__PURE__ */ new Map();
        this.defaults = defaults || {};
      }
      async request(opts = {}) {
        opts = this.validateOpts(opts);
        return this._request(opts);
      }
      async _defaultAdapter(opts) {
        const fetchImpl = opts.fetchImplementation || fetch;
        const res = await fetchImpl(opts.url, opts);
        const data = await this.getResponseData(opts, res);
        return this.translateResponse(opts, res, data);
      }
      async _request(opts = {}) {
        try {
          let translatedResponse;
          if (opts.adapter) {
            translatedResponse = await opts.adapter(opts, this._defaultAdapter.bind(this));
          } else {
            translatedResponse = await this._defaultAdapter(opts);
          }
          if (!opts.validateStatus(translatedResponse.status)) {
            throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);
          }
          return translatedResponse;
        } catch (e) {
          const err = e;
          err.config = opts;
          const { shouldRetry, config } = await (0, retry_1.getRetryConfig)(err);
          if (shouldRetry && config) {
            err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;
            return this._request(err.config);
          }
          throw err;
        }
      }
      async getResponseData(opts, res) {
        switch (opts.responseType) {
          case "stream":
            return res.body;
          case "json": {
            let data = await res.text();
            try {
              data = JSON.parse(data);
            } catch (_a) {
            }
            return data;
          }
          case "arraybuffer":
            return res.arrayBuffer();
          case "blob":
            return res.blob();
          default:
            return res.text();
        }
      }
      validateOpts(options) {
        const opts = (0, extend_1.default)(true, {}, this.defaults, options);
        if (!opts.url) {
          throw new Error("URL is required.");
        }
        const baseUrl = opts.baseUrl || opts.baseURL;
        if (baseUrl) {
          opts.url = baseUrl + opts.url;
        }
        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;
        if (opts.params && Object.keys(opts.params).length > 0) {
          let additionalQueryParams = opts.paramsSerializer(opts.params);
          if (additionalQueryParams.startsWith("?")) {
            additionalQueryParams = additionalQueryParams.slice(1);
          }
          const prefix = opts.url.includes("?") ? "&" : "?";
          opts.url = opts.url + prefix + additionalQueryParams;
        }
        if (typeof options.maxContentLength === "number") {
          opts.size = options.maxContentLength;
        }
        if (typeof options.maxRedirects === "number") {
          opts.follow = options.maxRedirects;
        }
        opts.headers = opts.headers || {};
        if (opts.data) {
          const isFormData = typeof FormData === "undefined" ? false : (opts === null || opts === void 0 ? void 0 : opts.data) instanceof FormData;
          if (is_stream_1.default.readable(opts.data)) {
            opts.body = opts.data;
          } else if (hasBuffer() && Buffer.isBuffer(opts.data)) {
            opts.body = opts.data;
            if (!hasHeader(opts, "Content-Type")) {
              opts.headers["Content-Type"] = "application/json";
            }
          } else if (typeof opts.data === "object") {
            if (!isFormData) {
              if (getHeader(opts, "content-type") === "application/x-www-form-urlencoded") {
                opts.body = opts.paramsSerializer(opts.data);
              } else {
                if (!hasHeader(opts, "Content-Type")) {
                  opts.headers["Content-Type"] = "application/json";
                }
                opts.body = JSON.stringify(opts.data);
              }
            }
          } else {
            opts.body = opts.data;
          }
        }
        opts.validateStatus = opts.validateStatus || this.validateStatus;
        opts.responseType = opts.responseType || "json";
        if (!opts.headers["Accept"] && opts.responseType === "json") {
          opts.headers["Accept"] = "application/json";
        }
        opts.method = opts.method || "GET";
        const proxy = getProxy(opts.url);
        if (proxy) {
          if (this.agentCache.has(proxy)) {
            opts.agent = this.agentCache.get(proxy);
          } else {
            if (opts.cert && opts.key) {
              const parsedURL = new url_1.URL(proxy);
              opts.agent = new HttpsProxyAgent({
                port: parsedURL.port,
                host: parsedURL.host,
                protocol: parsedURL.protocol,
                cert: opts.cert,
                key: opts.key
              });
            } else {
              opts.agent = new HttpsProxyAgent(proxy);
            }
            this.agentCache.set(proxy, opts.agent);
          }
        } else if (opts.cert && opts.key) {
          if (this.agentCache.has(opts.key)) {
            opts.agent = this.agentCache.get(opts.key);
          } else {
            opts.agent = new https_1.Agent({
              cert: opts.cert,
              key: opts.key
            });
            this.agentCache.set(opts.key, opts.agent);
          }
        }
        return opts;
      }
      validateStatus(status) {
        return status >= 200 && status < 300;
      }
      paramsSerializer(params) {
        return querystring_1.default.stringify(params);
      }
      translateResponse(opts, res, data) {
        const headers = {};
        res.headers.forEach((value, key) => {
          headers[key] = value;
        });
        return {
          config: opts,
          data,
          headers,
          status: res.status,
          statusText: res.statusText,
          request: {
            responseURL: res.url
          }
        };
      }
    };
    exports2.Gaxios = Gaxios;
  }
});

// node_modules/gaxios/build/src/index.js
var require_src3 = __commonJS({
  "node_modules/gaxios/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.request = exports2.instance = exports2.Gaxios = exports2.GaxiosError = void 0;
    var gaxios_1 = require_gaxios();
    Object.defineProperty(exports2, "Gaxios", { enumerable: true, get: function() {
      return gaxios_1.Gaxios;
    } });
    var common_1 = require_common2();
    Object.defineProperty(exports2, "GaxiosError", { enumerable: true, get: function() {
      return common_1.GaxiosError;
    } });
    exports2.instance = new gaxios_1.Gaxios();
    async function request(opts) {
      return exports2.instance.request(opts);
    }
    exports2.request = request;
  }
});

// node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/bignumber.js/bignumber.js"(exports2, module2) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: "\xA0",
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v, b) {
          var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
          if (!(x instanceof BigNumber2))
            return new BigNumber2(v, b);
          if (b == null) {
            if (v && v._isBigNumber === true) {
              x.s = v.s;
              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }
              return;
            }
            if ((isNum = typeof v == "number") && v * 0 == 0) {
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;
              if (v === ~~v) {
                for (e = 0, i = v; i >= 10; i /= 10, e++)
                  ;
                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v];
                }
                return;
              }
              str = String(v);
            } else {
              if (!isNumeric.test(str = String(v)))
                return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            if ((i = str.search(/e/i)) > 0) {
              if (e < 0)
                e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {
              e = str.length;
            }
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            if (b == 10 && alphabetHasNormalDecimalDigits) {
              x = new BigNumber2(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
            str = String(v);
            if (isNum = typeof v == "number") {
              if (v * 0 != 0)
                return parseNumeric(x, str, isNum, b);
              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b);
            e = i = 0;
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == ".") {
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }
                return parseNumeric(x, String(v), isNum, b);
              }
            }
            isNum = false;
            str = convertBase(str, b, 10, x.s);
            if ((e = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            else
              e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++)
            ;
          for (len = str.length; str.charCodeAt(--len) === 48; )
            ;
          if (str = str.slice(i, ++len)) {
            len -= i;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
              throw Error(tooManyDigits + x.s * v);
            }
            if ((e = e - i - 1) > MAX_EXP) {
              x.c = x.e = null;
            } else if (e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];
              i = (e + 1) % LOG_BASE;
              if (e < 0)
                i += LOG_BASE;
              if (i < len) {
                if (i)
                  x.c.push(+str.slice(0, i));
                for (len -= LOG_BASE; i < len; ) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }
                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }
              for (; i--; str += "0")
                ;
              x.c.push(+str);
            }
          } else {
            x.c = [x.e = 0];
          }
        }
        BigNumber2.clone = clone;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p, v;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v = obj[p];
                if (typeof v == "object")
                  FORMAT = v;
                else
                  throw Error(bignumberError + p + " not an object: " + v);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v = obj[p];
                if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                  ALPHABET = v;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v) {
          if (!v || v._isBigNumber !== true)
            return false;
          if (!BigNumber2.DEBUG)
            return true;
          var i, n, c = v.c, e = v.e, s = v.s;
          out:
            if ({}.toString.call(c) == "[object Array]") {
              if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
                if (c[0] === 0) {
                  if (e === 0 && c.length === 1)
                    return true;
                  break out;
                }
                i = (e + 1) % LOG_BASE;
                if (i < 1)
                  i += LOG_BASE;
                if (String(c[0]).length == i) {
                  for (i = 0; i < c.length; i++) {
                    n = c[i];
                    if (n < 0 || n >= BASE || n !== mathfloor(n))
                      break out;
                  }
                  if (n !== 0)
                    return true;
                }
              }
            } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
              return true;
            }
          throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, P.lt);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, P.gt);
        };
        BigNumber2.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
            if (dp == null)
              dp = DECIMAL_PLACES;
            else
              intCheck(dp, 0, MAX);
            k = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
                for (; i < k; ) {
                  v = a[i] * 131072 + (a[i + 1] >>> 11);
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k *= 7);
                for (; i < k; ) {
                  v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i < k; ) {
                v = random53bitInt();
                if (v < 9e15)
                  c[i++] = v % 1e14;
              }
            }
            k = c[--i];
            dp %= LOG_BASE;
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }
            for (; c[i] === 0; c.pop(), i--)
              ;
            if (i < 0) {
              c = [e = 0];
            } else {
              for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE)
                ;
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++)
                ;
              if (i < LOG_BASE)
                e -= LOG_BASE - i;
            }
            rand.e = e;
            rand.c = c;
            return rand;
          };
        }();
        BigNumber2.sum = function() {
          var i = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i < args.length; )
            sum = sum.plus(args[i++]);
          return sum;
        };
        convertBase = function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j, arr = [0], arrL, i = 0, len = str.length;
            for (; i < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
                ;
              arr[0] += alphabet.indexOf(str.charAt(i++));
              for (j = 0; j < arr.length; j++) {
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null)
                    arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i >= 0) {
              k = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber2(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x.c), x.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e = k = xc.length;
            for (; xc[--k] == 0; xc.pop())
              ;
            if (!xc[0])
              return alphabet.charAt(0);
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }
            d = e + dp + 1;
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k = xc.length; !xc[--k]; )
                ;
              for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++]))
                ;
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = function() {
          function multiply(x, k, base) {
            var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
            for (x = x.slice(); i--; ) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }
            if (carry)
              x = [carry].concat(x);
            return x;
          }
          function compare2(a, b, aL, bL) {
            var i, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b, aL, base) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1))
              ;
          }
          return function(x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : xc && xc[0] == 0 || !yc ? s * 0 : s / 0
              );
            }
            q = new BigNumber2(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;
            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i = 0; yc[i] == (xc[i] || 0); i++)
              ;
            if (yc[i] > (xc[i] || 0))
              e--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0)
                ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2)
                yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL)
                    rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base)
                      n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL)
                    prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0])
                qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++)
                ;
              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
            } else {
              q.e = e;
              q.r = +more;
            }
            return q;
          };
        }();
        function format(n, i, rm, id) {
          var c0, e, ne, len, str;
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          if (!n.c)
            return n.toString();
          c0 = n.c[0];
          ne = n.e;
          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
          } else {
            n = round(new BigNumber2(n), i, rm);
            e = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
              for (; len < i; str += "0", len++)
                ;
              str = toExponential(str, e);
            } else {
              i -= ne;
              str = toFixedPoint(str, e, "0");
              if (e + 1 > len) {
                if (--i > 0)
                  for (str += "."; i--; str += "0")
                    ;
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len)
                    str += ".";
                  for (; i--; str += "0")
                    ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, method) {
          var n, i = 1, m = new BigNumber2(args[0]);
          for (; i < args.length; i++) {
            n = new BigNumber2(args[i]);
            if (!n.s) {
              m = n;
              break;
            } else if (method.call(m, n)) {
              m = n;
            }
          }
          return m;
        }
        function normalise(n, c, e) {
          var i = 1, j = c.length;
          for (; !c[--j]; c.pop())
            ;
          for (j = c[0]; j >= 10; j /= 10, i++)
            ;
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }
          return n;
        }
        parseNumeric = function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x, str, isNum, b) {
            var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });
                if (b) {
                  base = b;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s)
                  return new BigNumber2(s, base);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
              }
              x.s = null;
            }
            x.c = x.e = null;
          };
        }();
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
                ;
              i = sd - d;
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
                rd = n / pows10[d - j - 1] % 10 | 0;
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r) {
                    for (; xc.length <= ni; xc.push(0))
                      ;
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
                  for (d = 1; k >= 10; k /= 10, d++)
                    ;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + d;
                  rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                }
              }
              r = r || sd < 0 || xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r) {
                  sd -= x.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
                  xc[0] = x.e = 0;
                }
                return x;
              }
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
              if (r) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++)
                      ;
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++)
                      ;
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE)
                        xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE)
                      break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
              for (i = xc.length; xc[--i] === 0; xc.pop())
                ;
            }
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
          return x;
        }
        function valueOf(n) {
          var str, e = n.e;
          if (e === null)
            return n.toString();
          str = coeffToString(n.c);
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P.absoluteValue = P.abs = function() {
          var x = new BigNumber2(this);
          if (x.s < 0)
            x.s = 1;
          return x;
        };
        P.comparedTo = function(y, b) {
          return compare(this, new BigNumber2(y, b));
        };
        P.decimalPlaces = P.dp = function(dp, rm) {
          var c, n, v, x = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), dp + x.e + 1, rm);
          }
          if (!(c = x.c))
            return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v = c[v])
            for (; v % 10 == 0; v /= 10, n--)
              ;
          if (n < 0)
            n = 0;
          return n;
        };
        P.dividedBy = P.div = function(y, b) {
          return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P.dividedToIntegerBy = P.idiv = function(y, b) {
          return div(this, new BigNumber2(y, b), 0, 1);
        };
        P.exponentiatedBy = P.pow = function(n, m) {
          var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m != null)
            m = new BigNumber2(m);
          nIsBig = n.e > 14;
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }
          nIsNeg = n.s < 0;
          if (m) {
            if (m.c ? !m.c[0] : !m.s)
              return new BigNumber2(NaN);
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
            if (isModExp)
              x = x.mod(m);
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
            k = x.s < 0 && isOdd(n) ? -0 : 0;
            if (x.e > -1)
              k = 1 / k;
            return new BigNumber2(nIsNeg ? 1 / k : k);
          } else if (POW_PRECISION) {
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg)
              n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }
          y = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c)
                break;
              if (k) {
                if (y.c.length > k)
                  y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);
              }
            }
            if (i) {
              i = mathfloor(i / 2);
              if (i === 0)
                break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0)
                  break;
                nIsOdd = i % 2;
              }
            }
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k)
                x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);
            }
          }
          if (isModExp)
            return y;
          if (nIsNeg)
            y = ONE.div(y);
          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P.isEqualTo = P.eq = function(y, b) {
          return compare(this, new BigNumber2(y, b)) === 0;
        };
        P.isFinite = function() {
          return !!this.c;
        };
        P.isGreaterThan = P.gt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) > 0;
        };
        P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
        };
        P.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P.isLessThan = P.lt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) < 0;
        };
        P.isLessThanOrEqualTo = P.lte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = function() {
          return this.s < 0;
        };
        P.isPositive = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P.minus = function(y, b) {
          var i, j, t, xLTy, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : ROUNDING_MODE == 3 ? -0 : 0);
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
            t.reverse();
            for (b = a; b--; t.push(0))
              ;
            t.reverse();
          } else {
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
            for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
          }
          b = (j = yc.length) - (i = xc.length);
          if (b > 0)
            for (; b--; xc[i++] = 0)
              ;
          b = BASE - 1;
          for (; j > a; ) {
            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b)
                ;
              --xc[i];
              xc[j] += BASE;
            }
            xc[j] -= yc[j];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye)
            ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P.modulo = P.mod = function(y, b) {
          var q, s, x = this;
          y = new BigNumber2(y, b);
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber2(x);
          }
          if (MODULO_MODE == 9) {
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }
          y = x.minus(q.times(y));
          if (!y.c[0] && MODULO_MODE == 1)
            y.s = x.s;
          return y;
        };
        P.multipliedBy = P.times = function(y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i = xcL;
            xcL = ycL;
            ycL = i;
          }
          for (i = xcL + ycL, zc = []; i--; zc.push(0))
            ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i = ycL; --i >= 0; ) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
            for (k = xcL, j = i + k; j > i; ) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }
            zc[j] = c;
          }
          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e);
        };
        P.negated = function() {
          var x = new BigNumber2(this);
          x.s = -x.s || null;
          return x;
        };
        P.plus = function(y, b) {
          var t, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0])
              return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0))
              ;
            t.reverse();
          }
          a = xc.length;
          b = yc.length;
          if (a - b < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b = a;
          }
          for (a = 0; b; ) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P.precision = P.sd = function(sd, rm) {
          var c, n, v, x = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), sd, rm);
          }
          if (!(c = x.c))
            return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
          if (v = c[v]) {
            for (; v % 10 == 0; v /= 10, n--)
              ;
            for (v = c[0]; v >= 10; v /= 10, n++)
              ;
          }
          if (sd && x.e + 1 > n)
            n = x.e + 1;
          return n;
        };
        P.shiftedBy = function(k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k);
        };
        P.squareRoot = P.sqrt = function() {
          var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
          s = Math.sqrt(+valueOf(x));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0)
              n += "0";
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new BigNumber2(n);
          } else {
            r = new BigNumber2(s + "");
          }
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3)
              s = 0;
            for (; ; ) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                if (r.e < e)
                  --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }
                  break;
                }
              }
            }
          }
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        P.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P.toFormat = function(dp, rm, format2) {
          var str, x = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x.toFixed(dp, rm);
          if (x.c) {
            var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i = g1;
              g1 = g2;
              g2 = i;
              len -= i;
            }
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1)
                intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0)
                intPart += groupSeparator + intDigits.slice(i);
              if (isNeg)
                intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P.toFraction = function(md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc)
            return new BigNumber2(x);
          d = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s = coeffToString(xc);
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s);
          n0.c[0] = 0;
          for (; ; ) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1)
              break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;
          r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r;
        };
        P.toNumber = function() {
          return +valueOf(this);
        };
        P.toPrecision = function(sd, rm) {
          if (sd != null)
            intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P.toString = function(b) {
          var str, n = this, s = n.s, e = n.e;
          if (e === null) {
            if (s) {
              str = "Infinity";
              if (s < 0)
                str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
            } else if (b === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
            }
            if (s < 0 && n.c[0])
              str = "-" + str;
          }
          return str;
        };
        P.valueOf = P.toJSON = function() {
          return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null)
          BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
      function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + "";
        for (; i < j; ) {
          s = a[i++] + "";
          z = LOG_BASE - s.length;
          for (; z--; s = "0" + s)
            ;
          r += s;
        }
        for (j = r.length; r.charCodeAt(--j) === 48; )
          ;
        return r.slice(0, j + 1 || 1);
      }
      function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        if (!i || !j)
          return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        if (a || b)
          return a ? b ? 0 : -j : i;
        if (i != j)
          return i;
        a = i < 0;
        b = k == l;
        if (!xc || !yc)
          return b ? 0 : !xc ^ a ? 1 : -1;
        if (!b)
          return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        for (i = 0; i < j; i++)
          if (xc[i] != yc[i])
            return xc[i] > yc[i] ^ a ? 1 : -1;
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
      }
      function toFixedPoint(str, e, z) {
        var len, zs;
        if (e < 0) {
          for (zs = z + "."; ++e; zs += z)
            ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z)
              ;
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        return str;
      }
      BigNumber = clone();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module2 != "undefined" && module2.exports) {
        module2.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports2);
  }
});

// node_modules/json-bigint/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/json-bigint/lib/stringify.js"(exports2, module2) {
    var BigNumber = require_bignumber();
    var JSON2 = module2.exports;
    (function() {
      "use strict";
      function f(n) {
        return n < 10 ? "0" + n : n;
      }
      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
      }, rep;
      function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
          var c = meta[a];
          return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
      }
      function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key], isBigNumber = value != null && (value instanceof BigNumber || BigNumber.isBigNumber(value));
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        if (typeof rep === "function") {
          value = rep.call(holder, key, value);
        }
        switch (typeof value) {
          case "string":
            if (isBigNumber) {
              return value;
            } else {
              return quote(value);
            }
          case "number":
            return isFinite(value) ? String(value) : "null";
          case "boolean":
          case "null":
          case "bigint":
            return String(value);
          case "object":
            if (!value) {
              return "null";
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
              length = value.length;
              for (i = 0; i < length; i += 1) {
                partial[i] = str(i, value) || "null";
              }
              v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
              gap = mind;
              return v;
            }
            if (rep && typeof rep === "object") {
              length = rep.length;
              for (i = 0; i < length; i += 1) {
                if (typeof rep[i] === "string") {
                  k = rep[i];
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ": " : ":") + v);
                  }
                }
              }
            } else {
              Object.keys(value).forEach(function(k2) {
                var v2 = str(k2, value);
                if (v2) {
                  partial.push(quote(k2) + (gap ? ": " : ":") + v2);
                }
              });
            }
            v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
      }
      if (typeof JSON2.stringify !== "function") {
        JSON2.stringify = function(value, replacer, space) {
          var i;
          gap = "";
          indent = "";
          if (typeof space === "number") {
            for (i = 0; i < space; i += 1) {
              indent += " ";
            }
          } else if (typeof space === "string") {
            indent = space;
          }
          rep = replacer;
          if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
            throw new Error("JSON.stringify");
          }
          return str("", { "": value });
        };
      }
    })();
  }
});

// node_modules/json-bigint/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/json-bigint/lib/parse.js"(exports2, module2) {
    var BigNumber = null;
    var suspectProtoRx = /(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/;
    var suspectConstructorRx = /(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;
    var json_parse = function(options) {
      "use strict";
      var _options = {
        strict: false,
        storeAsString: false,
        alwaysParseAsBig: false,
        useNativeBigInt: false,
        protoAction: "error",
        constructorAction: "error"
      };
      if (options !== void 0 && options !== null) {
        if (options.strict === true) {
          _options.strict = true;
        }
        if (options.storeAsString === true) {
          _options.storeAsString = true;
        }
        _options.alwaysParseAsBig = options.alwaysParseAsBig === true ? options.alwaysParseAsBig : false;
        _options.useNativeBigInt = options.useNativeBigInt === true ? options.useNativeBigInt : false;
        if (typeof options.constructorAction !== "undefined") {
          if (options.constructorAction === "error" || options.constructorAction === "ignore" || options.constructorAction === "preserve") {
            _options.constructorAction = options.constructorAction;
          } else {
            throw new Error(
              `Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${options.constructorAction}`
            );
          }
        }
        if (typeof options.protoAction !== "undefined") {
          if (options.protoAction === "error" || options.protoAction === "ignore" || options.protoAction === "preserve") {
            _options.protoAction = options.protoAction;
          } else {
            throw new Error(
              `Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${options.protoAction}`
            );
          }
        }
      }
      var at, ch, escapee = {
        '"': '"',
        "\\": "\\",
        "/": "/",
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "	"
      }, text, error = function(m) {
        throw {
          name: "SyntaxError",
          message: m,
          at,
          text
        };
      }, next = function(c) {
        if (c && c !== ch) {
          error("Expected '" + c + "' instead of '" + ch + "'");
        }
        ch = text.charAt(at);
        at += 1;
        return ch;
      }, number = function() {
        var number2, string2 = "";
        if (ch === "-") {
          string2 = "-";
          next("-");
        }
        while (ch >= "0" && ch <= "9") {
          string2 += ch;
          next();
        }
        if (ch === ".") {
          string2 += ".";
          while (next() && ch >= "0" && ch <= "9") {
            string2 += ch;
          }
        }
        if (ch === "e" || ch === "E") {
          string2 += ch;
          next();
          if (ch === "-" || ch === "+") {
            string2 += ch;
            next();
          }
          while (ch >= "0" && ch <= "9") {
            string2 += ch;
            next();
          }
        }
        number2 = +string2;
        if (!isFinite(number2)) {
          error("Bad number");
        } else {
          if (BigNumber == null)
            BigNumber = require_bignumber();
          if (string2.length > 15)
            return _options.storeAsString ? string2 : _options.useNativeBigInt ? BigInt(string2) : new BigNumber(string2);
          else
            return !_options.alwaysParseAsBig ? number2 : _options.useNativeBigInt ? BigInt(number2) : new BigNumber(number2);
        }
      }, string = function() {
        var hex, i, string2 = "", uffff;
        if (ch === '"') {
          var startAt = at;
          while (next()) {
            if (ch === '"') {
              if (at - 1 > startAt)
                string2 += text.substring(startAt, at - 1);
              next();
              return string2;
            }
            if (ch === "\\") {
              if (at - 1 > startAt)
                string2 += text.substring(startAt, at - 1);
              next();
              if (ch === "u") {
                uffff = 0;
                for (i = 0; i < 4; i += 1) {
                  hex = parseInt(next(), 16);
                  if (!isFinite(hex)) {
                    break;
                  }
                  uffff = uffff * 16 + hex;
                }
                string2 += String.fromCharCode(uffff);
              } else if (typeof escapee[ch] === "string") {
                string2 += escapee[ch];
              } else {
                break;
              }
              startAt = at;
            }
          }
        }
        error("Bad string");
      }, white = function() {
        while (ch && ch <= " ") {
          next();
        }
      }, word = function() {
        switch (ch) {
          case "t":
            next("t");
            next("r");
            next("u");
            next("e");
            return true;
          case "f":
            next("f");
            next("a");
            next("l");
            next("s");
            next("e");
            return false;
          case "n":
            next("n");
            next("u");
            next("l");
            next("l");
            return null;
        }
        error("Unexpected '" + ch + "'");
      }, value, array = function() {
        var array2 = [];
        if (ch === "[") {
          next("[");
          white();
          if (ch === "]") {
            next("]");
            return array2;
          }
          while (ch) {
            array2.push(value());
            white();
            if (ch === "]") {
              next("]");
              return array2;
            }
            next(",");
            white();
          }
        }
        error("Bad array");
      }, object = function() {
        var key, object2 = /* @__PURE__ */ Object.create(null);
        if (ch === "{") {
          next("{");
          white();
          if (ch === "}") {
            next("}");
            return object2;
          }
          while (ch) {
            key = string();
            white();
            next(":");
            if (_options.strict === true && Object.hasOwnProperty.call(object2, key)) {
              error('Duplicate key "' + key + '"');
            }
            if (suspectProtoRx.test(key) === true) {
              if (_options.protoAction === "error") {
                error("Object contains forbidden prototype property");
              } else if (_options.protoAction === "ignore") {
                value();
              } else {
                object2[key] = value();
              }
            } else if (suspectConstructorRx.test(key) === true) {
              if (_options.constructorAction === "error") {
                error("Object contains forbidden constructor property");
              } else if (_options.constructorAction === "ignore") {
                value();
              } else {
                object2[key] = value();
              }
            } else {
              object2[key] = value();
            }
            white();
            if (ch === "}") {
              next("}");
              return object2;
            }
            next(",");
            white();
          }
        }
        error("Bad object");
      };
      value = function() {
        white();
        switch (ch) {
          case "{":
            return object();
          case "[":
            return array();
          case '"':
            return string();
          case "-":
            return number();
          default:
            return ch >= "0" && ch <= "9" ? number() : word();
        }
      };
      return function(source, reviver) {
        var result;
        text = source + "";
        at = 0;
        ch = " ";
        result = value();
        white();
        if (ch) {
          error("Syntax error");
        }
        return typeof reviver === "function" ? function walk(holder, key) {
          var k, v, value2 = holder[key];
          if (value2 && typeof value2 === "object") {
            Object.keys(value2).forEach(function(k2) {
              v = walk(value2, k2);
              if (v !== void 0) {
                value2[k2] = v;
              } else {
                delete value2[k2];
              }
            });
          }
          return reviver.call(holder, key, value2);
        }({ "": result }, "") : result;
      };
    };
    module2.exports = json_parse;
  }
});

// node_modules/json-bigint/index.js
var require_json_bigint = __commonJS({
  "node_modules/json-bigint/index.js"(exports2, module2) {
    var json_stringify = require_stringify().stringify;
    var json_parse = require_parse2();
    module2.exports = function(options) {
      return {
        parse: json_parse(options),
        stringify: json_stringify
      };
    };
    module2.exports.parse = json_parse();
    module2.exports.stringify = json_stringify;
  }
});

// node_modules/gcp-metadata/build/src/index.js
var require_src4 = __commonJS({
  "node_modules/gcp-metadata/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requestTimeout = exports2.resetIsAvailableCache = exports2.isAvailable = exports2.project = exports2.instance = exports2.HEADERS = exports2.HEADER_VALUE = exports2.HEADER_NAME = exports2.SECONDARY_HOST_ADDRESS = exports2.HOST_ADDRESS = exports2.BASE_PATH = void 0;
    var gaxios_1 = require_src3();
    var jsonBigint = require_json_bigint();
    exports2.BASE_PATH = "/computeMetadata/v1";
    exports2.HOST_ADDRESS = "http://169.254.169.254";
    exports2.SECONDARY_HOST_ADDRESS = "http://metadata.google.internal.";
    exports2.HEADER_NAME = "Metadata-Flavor";
    exports2.HEADER_VALUE = "Google";
    exports2.HEADERS = Object.freeze({ [exports2.HEADER_NAME]: exports2.HEADER_VALUE });
    function getBaseUrl(baseUrl) {
      if (!baseUrl) {
        baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports2.HOST_ADDRESS;
      }
      if (!/^https?:\/\//.test(baseUrl)) {
        baseUrl = `http://${baseUrl}`;
      }
      return new URL(exports2.BASE_PATH, baseUrl).href;
    }
    function validate(options) {
      Object.keys(options).forEach((key) => {
        switch (key) {
          case "params":
          case "property":
          case "headers":
            break;
          case "qs":
            throw new Error("'qs' is not a valid configuration option. Please use 'params' instead.");
          default:
            throw new Error(`'${key}' is not a valid configuration option.`);
        }
      });
    }
    async function metadataAccessor(type, options, noResponseRetries = 3, fastFail = false) {
      options = options || {};
      if (typeof options === "string") {
        options = { property: options };
      }
      let property = "";
      if (typeof options === "object" && options.property) {
        property = "/" + options.property;
      }
      validate(options);
      try {
        const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;
        const res = await requestMethod({
          url: `${getBaseUrl()}/${type}${property}`,
          headers: Object.assign({}, exports2.HEADERS, options.headers),
          retryConfig: { noResponseRetries },
          params: options.params,
          responseType: "text",
          timeout: requestTimeout()
        });
        if (res.headers[exports2.HEADER_NAME.toLowerCase()] !== exports2.HEADER_VALUE) {
          throw new Error(`Invalid response from metadata service: incorrect ${exports2.HEADER_NAME} header.`);
        } else if (!res.data) {
          throw new Error("Invalid response from the metadata service");
        }
        if (typeof res.data === "string") {
          try {
            return jsonBigint.parse(res.data);
          } catch (_a) {
          }
        }
        return res.data;
      } catch (e) {
        const err = e;
        if (err.response && err.response.status !== 200) {
          err.message = `Unsuccessful response status code. ${err.message}`;
        }
        throw e;
      }
    }
    async function fastFailMetadataRequest(options) {
      const secondaryOptions = {
        ...options,
        url: options.url.replace(getBaseUrl(), getBaseUrl(exports2.SECONDARY_HOST_ADDRESS))
      };
      let responded = false;
      const r1 = (0, gaxios_1.request)(options).then((res) => {
        responded = true;
        return res;
      }).catch((err) => {
        if (responded) {
          return r2;
        } else {
          responded = true;
          throw err;
        }
      });
      const r2 = (0, gaxios_1.request)(secondaryOptions).then((res) => {
        responded = true;
        return res;
      }).catch((err) => {
        if (responded) {
          return r1;
        } else {
          responded = true;
          throw err;
        }
      });
      return Promise.race([r1, r2]);
    }
    function instance(options) {
      return metadataAccessor("instance", options);
    }
    exports2.instance = instance;
    function project(options) {
      return metadataAccessor("project", options);
    }
    exports2.project = project;
    function detectGCPAvailableRetries() {
      return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;
    }
    var cachedIsAvailableResponse;
    async function isAvailable() {
      try {
        if (cachedIsAvailableResponse === void 0) {
          cachedIsAvailableResponse = metadataAccessor(
            "instance",
            void 0,
            detectGCPAvailableRetries(),
            !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST)
          );
        }
        await cachedIsAvailableResponse;
        return true;
      } catch (e) {
        const err = e;
        if (process.env.DEBUG_AUTH) {
          console.info(err);
        }
        if (err.type === "request-timeout") {
          return false;
        }
        if (err.response && err.response.status === 404) {
          return false;
        } else {
          if (!(err.response && err.response.status === 404) && (!err.code || ![
            "EHOSTDOWN",
            "EHOSTUNREACH",
            "ENETUNREACH",
            "ENOENT",
            "ENOTFOUND",
            "ECONNREFUSED"
          ].includes(err.code))) {
            let code = "UNKNOWN";
            if (err.code)
              code = err.code;
            process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, "MetadataLookupWarning");
          }
          return false;
        }
      }
    }
    exports2.isAvailable = isAvailable;
    function resetIsAvailableCache() {
      cachedIsAvailableResponse = void 0;
    }
    exports2.resetIsAvailableCache = resetIsAvailableCache;
    function requestTimeout() {
      return process.env.K_SERVICE || process.env.FUNCTION_NAME ? 0 : 3e3;
    }
    exports2.requestTimeout = requestTimeout;
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports2) {
    "use strict";
    exports2.byteLength = byteLength;
    exports2.toByteArray = toByteArray;
    exports2.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/fast-text-encoding/text.min.js
var require_text_min = __commonJS({
  "node_modules/fast-text-encoding/text.min.js"(exports2) {
    (function(scope) {
      "use strict";
      function B(r, e) {
        var f;
        return r instanceof Buffer ? f = r : f = Buffer.from(r.buffer, r.byteOffset, r.byteLength), f.toString(e);
      }
      var w = function(r) {
        return Buffer.from(r);
      };
      function h(r) {
        for (var e = 0, f = Math.min(256 * 256, r.length + 1), n = new Uint16Array(f), i = [], o = 0; ; ) {
          var t = e < r.length;
          if (!t || o >= f - 1) {
            var s = n.subarray(0, o), m = s;
            if (i.push(String.fromCharCode.apply(null, m)), !t)
              return i.join("");
            r = r.subarray(e), e = 0, o = 0;
          }
          var a = r[e++];
          if ((a & 128) === 0)
            n[o++] = a;
          else if ((a & 224) === 192) {
            var d = r[e++] & 63;
            n[o++] = (a & 31) << 6 | d;
          } else if ((a & 240) === 224) {
            var d = r[e++] & 63, l = r[e++] & 63;
            n[o++] = (a & 31) << 12 | d << 6 | l;
          } else if ((a & 248) === 240) {
            var d = r[e++] & 63, l = r[e++] & 63, R = r[e++] & 63, c = (a & 7) << 18 | d << 12 | l << 6 | R;
            c > 65535 && (c -= 65536, n[o++] = c >>> 10 & 1023 | 55296, c = 56320 | c & 1023), n[o++] = c;
          }
        }
      }
      function F(r) {
        for (var e = 0, f = r.length, n = 0, i = Math.max(32, f + (f >>> 1) + 7), o = new Uint8Array(i >>> 3 << 3); e < f; ) {
          var t = r.charCodeAt(e++);
          if (t >= 55296 && t <= 56319) {
            if (e < f) {
              var s = r.charCodeAt(e);
              (s & 64512) === 56320 && (++e, t = ((t & 1023) << 10) + (s & 1023) + 65536);
            }
            if (t >= 55296 && t <= 56319)
              continue;
          }
          if (n + 4 > o.length) {
            i += 8, i *= 1 + e / r.length * 2, i = i >>> 3 << 3;
            var m = new Uint8Array(i);
            m.set(o), o = m;
          }
          if ((t & 4294967168) === 0) {
            o[n++] = t;
            continue;
          } else if ((t & 4294965248) === 0)
            o[n++] = t >>> 6 & 31 | 192;
          else if ((t & 4294901760) === 0)
            o[n++] = t >>> 12 & 15 | 224, o[n++] = t >>> 6 & 63 | 128;
          else if ((t & 4292870144) === 0)
            o[n++] = t >>> 18 & 7 | 240, o[n++] = t >>> 12 & 63 | 128, o[n++] = t >>> 6 & 63 | 128;
          else
            continue;
          o[n++] = t & 63 | 128;
        }
        return o.slice ? o.slice(0, n) : o.subarray(0, n);
      }
      var u = "Failed to ", p = function(r, e, f) {
        if (r)
          throw new Error("".concat(u).concat(e, ": the '").concat(f, "' option is unsupported."));
      };
      var x = typeof Buffer == "function" && Buffer.from;
      var A = x ? w : F;
      function v() {
        this.encoding = "utf-8";
      }
      v.prototype.encode = function(r, e) {
        return p(e && e.stream, "encode", "stream"), A(r);
      };
      function U(r) {
        var e;
        try {
          var f = new Blob([r], { type: "text/plain;charset=UTF-8" });
          e = URL.createObjectURL(f);
          var n = new XMLHttpRequest();
          return n.open("GET", e, false), n.send(), n.responseText;
        } finally {
          e && URL.revokeObjectURL(e);
        }
      }
      var O = !x && typeof Blob == "function" && typeof URL == "function" && typeof URL.createObjectURL == "function", S = ["utf-8", "utf8", "unicode-1-1-utf-8"], T = h;
      x ? T = B : O && (T = function(r) {
        try {
          return U(r);
        } catch (e) {
          return h(r);
        }
      });
      var y = "construct 'TextDecoder'", E = "".concat(u, " ").concat(y, ": the ");
      function g(r, e) {
        p(e && e.fatal, y, "fatal"), r = r || "utf-8";
        var f;
        if (x ? f = Buffer.isEncoding(r) : f = S.indexOf(r.toLowerCase()) !== -1, !f)
          throw new RangeError("".concat(E, " encoding label provided ('").concat(r, "') is invalid."));
        this.encoding = r, this.fatal = false, this.ignoreBOM = false;
      }
      g.prototype.decode = function(r, e) {
        p(e && e.stream, "decode", "stream");
        var f;
        return r instanceof Uint8Array ? f = r : r.buffer instanceof ArrayBuffer ? f = new Uint8Array(r.buffer) : f = new Uint8Array(r), T(f, this.encoding);
      };
      scope.TextEncoder = scope.TextEncoder || v;
      scope.TextDecoder = scope.TextDecoder || g;
    })(typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : exports2);
  }
});

// node_modules/google-auth-library/build/src/crypto/browser/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/google-auth-library/build/src/crypto/browser/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BrowserCrypto = void 0;
    var base64js = require_base64_js();
    if (typeof process === "undefined" && typeof TextEncoder === "undefined") {
      require_text_min();
    }
    var crypto_1 = require_crypto4();
    var BrowserCrypto = class {
      constructor() {
        if (typeof window === "undefined" || window.crypto === void 0 || window.crypto.subtle === void 0) {
          throw new Error("SubtleCrypto not found. Make sure it's an https:// website.");
        }
      }
      async sha256DigestBase64(str) {
        const inputBuffer = new TextEncoder().encode(str);
        const outputBuffer = await window.crypto.subtle.digest("SHA-256", inputBuffer);
        return base64js.fromByteArray(new Uint8Array(outputBuffer));
      }
      randomBytesBase64(count) {
        const array = new Uint8Array(count);
        window.crypto.getRandomValues(array);
        return base64js.fromByteArray(array);
      }
      static padBase64(base64) {
        while (base64.length % 4 !== 0) {
          base64 += "=";
        }
        return base64;
      }
      async verify(pubkey, data, signature) {
        const algo = {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
        const dataArray = new TextEncoder().encode(data);
        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));
        const cryptoKey = await window.crypto.subtle.importKey("jwk", pubkey, algo, true, ["verify"]);
        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);
        return result;
      }
      async sign(privateKey, data) {
        const algo = {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
        const dataArray = new TextEncoder().encode(data);
        const cryptoKey = await window.crypto.subtle.importKey("jwk", privateKey, algo, true, ["sign"]);
        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);
        return base64js.fromByteArray(new Uint8Array(result));
      }
      decodeBase64StringUtf8(base64) {
        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));
        const result = new TextDecoder().decode(uint8array);
        return result;
      }
      encodeBase64StringUtf8(text) {
        const uint8array = new TextEncoder().encode(text);
        const result = base64js.fromByteArray(uint8array);
        return result;
      }
      async sha256DigestHex(str) {
        const inputBuffer = new TextEncoder().encode(str);
        const outputBuffer = await window.crypto.subtle.digest("SHA-256", inputBuffer);
        return (0, crypto_1.fromArrayBufferToHex)(outputBuffer);
      }
      async signWithHmacSha256(key, msg) {
        const rawKey = typeof key === "string" ? key : String.fromCharCode(...new Uint16Array(key));
        const enc = new TextEncoder();
        const cryptoKey = await window.crypto.subtle.importKey("raw", enc.encode(rawKey), {
          name: "HMAC",
          hash: {
            name: "SHA-256"
          }
        }, false, ["sign"]);
        return window.crypto.subtle.sign("HMAC", cryptoKey, enc.encode(msg));
      }
    };
    exports2.BrowserCrypto = BrowserCrypto;
  }
});

// node_modules/google-auth-library/build/src/crypto/node/crypto.js
var require_crypto3 = __commonJS({
  "node_modules/google-auth-library/build/src/crypto/node/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeCrypto = void 0;
    var crypto2 = require_crypto();
    var NodeCrypto = class {
      async sha256DigestBase64(str) {
        return crypto2.createHash("sha256").update(str).digest("base64");
      }
      randomBytesBase64(count) {
        return crypto2.randomBytes(count).toString("base64");
      }
      async verify(pubkey, data, signature) {
        const verifier = crypto2.createVerify("sha256");
        verifier.update(data);
        verifier.end();
        return verifier.verify(pubkey, signature, "base64");
      }
      async sign(privateKey, data) {
        const signer = crypto2.createSign("RSA-SHA256");
        signer.update(data);
        signer.end();
        return signer.sign(privateKey, "base64");
      }
      decodeBase64StringUtf8(base64) {
        return Buffer.from(base64, "base64").toString("utf-8");
      }
      encodeBase64StringUtf8(text) {
        return Buffer.from(text, "utf-8").toString("base64");
      }
      async sha256DigestHex(str) {
        return crypto2.createHash("sha256").update(str).digest("hex");
      }
      async signWithHmacSha256(key, msg) {
        const cryptoKey = typeof key === "string" ? key : toBuffer(key);
        return toArrayBuffer(crypto2.createHmac("sha256", cryptoKey).update(msg).digest());
      }
    };
    exports2.NodeCrypto = NodeCrypto;
    function toArrayBuffer(buffer) {
      return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);
    }
    function toBuffer(arrayBuffer) {
      return Buffer.from(arrayBuffer);
    }
  }
});

// node_modules/google-auth-library/build/src/crypto/crypto.js
var require_crypto4 = __commonJS({
  "node_modules/google-auth-library/build/src/crypto/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromArrayBufferToHex = exports2.hasBrowserCrypto = exports2.createCrypto = void 0;
    var crypto_1 = require_crypto2();
    var crypto_2 = require_crypto3();
    function createCrypto() {
      if (hasBrowserCrypto()) {
        return new crypto_1.BrowserCrypto();
      }
      return new crypto_2.NodeCrypto();
    }
    exports2.createCrypto = createCrypto;
    function hasBrowserCrypto() {
      return typeof window !== "undefined" && typeof window.crypto !== "undefined" && typeof window.crypto.subtle !== "undefined";
    }
    exports2.hasBrowserCrypto = hasBrowserCrypto;
    function fromArrayBufferToHex(arrayBuffer) {
      const byteArray = Array.from(new Uint8Array(arrayBuffer));
      return byteArray.map((byte) => {
        return byte.toString(16).padStart(2, "0");
      }).join("");
    }
    exports2.fromArrayBufferToHex = fromArrayBufferToHex;
  }
});

// node_modules/google-auth-library/build/src/options.js
var require_options = __commonJS({
  "node_modules/google-auth-library/build/src/options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validate = void 0;
    function validate(options) {
      const vpairs = [
        { invalid: "uri", expected: "url" },
        { invalid: "json", expected: "data" },
        { invalid: "qs", expected: "params" }
      ];
      for (const pair of vpairs) {
        if (options[pair.invalid]) {
          const e = `'${pair.invalid}' is not a valid configuration option. Please use '${pair.expected}' instead. This library is using Axios for requests. Please see https://github.com/axios/axios to learn more about the valid request options.`;
          throw new Error(e);
        }
      }
    }
    exports2.validate = validate;
  }
});

// node_modules/google-auth-library/package.json
var require_package2 = __commonJS({
  "node_modules/google-auth-library/package.json"(exports2, module2) {
    module2.exports = {
      name: "google-auth-library",
      version: "8.6.0",
      author: "Google Inc.",
      description: "Google APIs Authentication Client Library for Node.js",
      engines: {
        node: ">=12"
      },
      main: "./build/src/index.js",
      types: "./build/src/index.d.ts",
      repository: "googleapis/google-auth-library-nodejs.git",
      keywords: [
        "google",
        "api",
        "google apis",
        "client",
        "client library"
      ],
      dependencies: {
        arrify: "^2.0.0",
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "fast-text-encoding": "^1.0.0",
        gaxios: "^5.0.0",
        "gcp-metadata": "^5.0.0",
        gtoken: "^6.1.0",
        jws: "^4.0.0",
        "lru-cache": "^6.0.0"
      },
      devDependencies: {
        "@compodoc/compodoc": "^1.1.7",
        "@types/base64-js": "^1.2.5",
        "@types/chai": "^4.1.7",
        "@types/jws": "^3.1.0",
        "@types/lru-cache": "^5.0.0",
        "@types/mocha": "^9.0.0",
        "@types/mv": "^2.1.0",
        "@types/ncp": "^2.0.1",
        "@types/node": "^16.0.0",
        "@types/sinon": "^10.0.0",
        "@types/tmp": "^0.2.0",
        "assert-rejects": "^1.0.0",
        c8: "^7.0.0",
        chai: "^4.2.0",
        codecov: "^3.0.2",
        execa: "^5.0.0",
        gts: "^3.1.0",
        "is-docker": "^2.0.0",
        karma: "^6.0.0",
        "karma-chrome-launcher": "^3.0.0",
        "karma-coverage": "^2.0.0",
        "karma-firefox-launcher": "^2.0.0",
        "karma-mocha": "^2.0.0",
        "karma-sourcemap-loader": "^0.3.7",
        "karma-webpack": "^5.0.0",
        keypair: "^1.0.4",
        linkinator: "^4.0.0",
        mocha: "^9.2.2",
        mv: "^2.1.1",
        ncp: "^2.0.0",
        nock: "^13.0.0",
        "null-loader": "^4.0.0",
        puppeteer: "^18.0.0",
        sinon: "^14.0.0",
        tmp: "^0.2.0",
        "ts-loader": "^8.0.0",
        typescript: "^4.6.3",
        webpack: "^5.21.2",
        "webpack-cli": "^4.0.0"
      },
      files: [
        "build/src",
        "!build/src/**/*.map"
      ],
      scripts: {
        test: "c8 mocha build/test",
        clean: "gts clean",
        prepare: "npm run compile",
        lint: "gts check",
        compile: "tsc -p .",
        fix: "gts fix",
        pretest: "npm run compile",
        docs: "compodoc src/",
        "samples-setup": "cd samples/ && npm link ../ && npm run setup && cd ../",
        "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
        "system-test": "mocha build/system-test --timeout 60000",
        "presystem-test": "npm run compile",
        webpack: "webpack",
        "browser-test": "karma start",
        "docs-test": "linkinator docs",
        "predocs-test": "npm run docs",
        prelint: "cd samples; npm link ../; npm install",
        precompile: "gts clean"
      },
      license: "Apache-2.0"
    };
  }
});

// node_modules/google-auth-library/build/src/transporters.js
var require_transporters = __commonJS({
  "node_modules/google-auth-library/build/src/transporters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultTransporter = void 0;
    var gaxios_1 = require_src3();
    var options_1 = require_options();
    var pkg = require_package2();
    var PRODUCT_NAME = "google-api-nodejs-client";
    var DefaultTransporter = class {
      configure(opts = {}) {
        opts.headers = opts.headers || {};
        if (typeof window === "undefined") {
          const uaValue = opts.headers["User-Agent"];
          if (!uaValue) {
            opts.headers["User-Agent"] = DefaultTransporter.USER_AGENT;
          } else if (!uaValue.includes(`${PRODUCT_NAME}/`)) {
            opts.headers["User-Agent"] = `${uaValue} ${DefaultTransporter.USER_AGENT}`;
          }
          const authVersion = `auth/${pkg.version}`;
          if (opts.headers["x-goog-api-client"] && !opts.headers["x-goog-api-client"].includes(authVersion)) {
            opts.headers["x-goog-api-client"] = `${opts.headers["x-goog-api-client"]} ${authVersion}`;
          } else if (!opts.headers["x-goog-api-client"]) {
            const nodeVersion = process.version.replace(/^v/, "");
            opts.headers["x-goog-api-client"] = `gl-node/${nodeVersion} ${authVersion}`;
          }
        }
        return opts;
      }
      request(opts, callback) {
        opts = this.configure(opts);
        try {
          (0, options_1.validate)(opts);
        } catch (e) {
          if (callback) {
            return callback(e);
          } else {
            throw e;
          }
        }
        if (callback) {
          (0, gaxios_1.request)(opts).then((r) => {
            callback(null, r);
          }, (e) => {
            callback(this.processError(e));
          });
        } else {
          return (0, gaxios_1.request)(opts).catch((e) => {
            throw this.processError(e);
          });
        }
      }
      processError(e) {
        const res = e.response;
        const err = e;
        const body = res ? res.data : null;
        if (res && body && body.error && res.status !== 200) {
          if (typeof body.error === "string") {
            err.message = body.error;
            err.code = res.status.toString();
          } else if (Array.isArray(body.error.errors)) {
            err.message = body.error.errors.map((err2) => err2.message).join("\n");
            err.code = body.error.code;
            err.errors = body.error.errors;
          } else {
            err.message = body.error.message;
            err.code = body.error.code || res.status;
          }
        } else if (res && res.status >= 400) {
          err.message = body;
          err.code = res.status.toString();
        }
        return err;
      }
    };
    exports2.DefaultTransporter = DefaultTransporter;
    DefaultTransporter.USER_AGENT = `${PRODUCT_NAME}/${pkg.version}`;
  }
});

// node_modules/arrify/index.js
var require_arrify = __commonJS({
  "node_modules/arrify/index.js"(exports2, module2) {
    "use strict";
    var arrify = (value) => {
      if (value === null || value === void 0) {
        return [];
      }
      if (Array.isArray(value)) {
        return value;
      }
      if (typeof value === "string") {
        return [value];
      }
      if (typeof value[Symbol.iterator] === "function") {
        return [...value];
      }
      return [value];
    };
    module2.exports = arrify;
  }
});

// node_modules/google-auth-library/build/src/auth/authclient.js
var require_authclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/authclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuthClient = void 0;
    var events_1 = require_events();
    var transporters_1 = require_transporters();
    var AuthClient = class extends events_1.EventEmitter {
      constructor() {
        super(...arguments);
        this.transporter = new transporters_1.DefaultTransporter();
        this.credentials = {};
        this.eagerRefreshThresholdMillis = 5 * 60 * 1e3;
        this.forceRefreshOnFailure = false;
      }
      setCredentials(credentials) {
        this.credentials = credentials;
      }
      addSharedMetadataHeaders(headers) {
        if (!headers["x-goog-user-project"] && this.quotaProjectId) {
          headers["x-goog-user-project"] = this.quotaProjectId;
        }
        return headers;
      }
    };
    exports2.AuthClient = AuthClient;
  }
});

// node_modules/google-auth-library/build/src/auth/loginticket.js
var require_loginticket = __commonJS({
  "node_modules/google-auth-library/build/src/auth/loginticket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LoginTicket = void 0;
    var LoginTicket = class {
      constructor(env, pay) {
        this.envelope = env;
        this.payload = pay;
      }
      getEnvelope() {
        return this.envelope;
      }
      getPayload() {
        return this.payload;
      }
      getUserId() {
        const payload = this.getPayload();
        if (payload && payload.sub) {
          return payload.sub;
        }
        return null;
      }
      getAttributes() {
        return { envelope: this.getEnvelope(), payload: this.getPayload() };
      }
    };
    exports2.LoginTicket = LoginTicket;
  }
});

// node_modules/google-auth-library/build/src/auth/oauth2client.js
var require_oauth2client = __commonJS({
  "node_modules/google-auth-library/build/src/auth/oauth2client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OAuth2Client = exports2.CertificateFormat = exports2.CodeChallengeMethod = void 0;
    var gaxios_1 = require_src3();
    var querystring = require_querystring();
    var stream = require_stream();
    var formatEcdsa = require_ecdsa_sig_formatter();
    var crypto_1 = require_crypto4();
    var authclient_1 = require_authclient();
    var loginticket_1 = require_loginticket();
    var CodeChallengeMethod;
    (function(CodeChallengeMethod2) {
      CodeChallengeMethod2["Plain"] = "plain";
      CodeChallengeMethod2["S256"] = "S256";
    })(CodeChallengeMethod = exports2.CodeChallengeMethod || (exports2.CodeChallengeMethod = {}));
    var CertificateFormat;
    (function(CertificateFormat2) {
      CertificateFormat2["PEM"] = "PEM";
      CertificateFormat2["JWK"] = "JWK";
    })(CertificateFormat = exports2.CertificateFormat || (exports2.CertificateFormat = {}));
    var OAuth2Client = class extends authclient_1.AuthClient {
      constructor(optionsOrClientId, clientSecret, redirectUri) {
        super();
        this.certificateCache = {};
        this.certificateExpiry = null;
        this.certificateCacheFormat = CertificateFormat.PEM;
        this.refreshTokenPromises = /* @__PURE__ */ new Map();
        const opts = optionsOrClientId && typeof optionsOrClientId === "object" ? optionsOrClientId : { clientId: optionsOrClientId, clientSecret, redirectUri };
        this._clientId = opts.clientId;
        this._clientSecret = opts.clientSecret;
        this.redirectUri = opts.redirectUri;
        this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis || 5 * 60 * 1e3;
        this.forceRefreshOnFailure = !!opts.forceRefreshOnFailure;
      }
      generateAuthUrl(opts = {}) {
        if (opts.code_challenge_method && !opts.code_challenge) {
          throw new Error("If a code_challenge_method is provided, code_challenge must be included.");
        }
        opts.response_type = opts.response_type || "code";
        opts.client_id = opts.client_id || this._clientId;
        opts.redirect_uri = opts.redirect_uri || this.redirectUri;
        if (Array.isArray(opts.scope)) {
          opts.scope = opts.scope.join(" ");
        }
        const rootUrl = OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;
        return rootUrl + "?" + querystring.stringify(opts);
      }
      generateCodeVerifier() {
        throw new Error("generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.");
      }
      async generateCodeVerifierAsync() {
        const crypto2 = (0, crypto_1.createCrypto)();
        const randomString = crypto2.randomBytesBase64(96);
        const codeVerifier = randomString.replace(/\+/g, "~").replace(/=/g, "_").replace(/\//g, "-");
        const unencodedCodeChallenge = await crypto2.sha256DigestBase64(codeVerifier);
        const codeChallenge = unencodedCodeChallenge.split("=")[0].replace(/\+/g, "-").replace(/\//g, "_");
        return { codeVerifier, codeChallenge };
      }
      getToken(codeOrOptions, callback) {
        const options = typeof codeOrOptions === "string" ? { code: codeOrOptions } : codeOrOptions;
        if (callback) {
          this.getTokenAsync(options).then((r) => callback(null, r.tokens, r.res), (e) => callback(e, null, e.response));
        } else {
          return this.getTokenAsync(options);
        }
      }
      async getTokenAsync(options) {
        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;
        const values = {
          code: options.code,
          client_id: options.client_id || this._clientId,
          client_secret: this._clientSecret,
          redirect_uri: options.redirect_uri || this.redirectUri,
          grant_type: "authorization_code",
          code_verifier: options.codeVerifier
        };
        const res = await this.transporter.request({
          method: "POST",
          url,
          data: querystring.stringify(values),
          headers: { "Content-Type": "application/x-www-form-urlencoded" }
        });
        const tokens = res.data;
        if (res.data && res.data.expires_in) {
          tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res };
      }
      async refreshToken(refreshToken) {
        if (!refreshToken) {
          return this.refreshTokenNoCache(refreshToken);
        }
        if (this.refreshTokenPromises.has(refreshToken)) {
          return this.refreshTokenPromises.get(refreshToken);
        }
        const p = this.refreshTokenNoCache(refreshToken).then((r) => {
          this.refreshTokenPromises.delete(refreshToken);
          return r;
        }, (e) => {
          this.refreshTokenPromises.delete(refreshToken);
          throw e;
        });
        this.refreshTokenPromises.set(refreshToken, p);
        return p;
      }
      async refreshTokenNoCache(refreshToken) {
        var _a;
        if (!refreshToken) {
          throw new Error("No refresh token is set.");
        }
        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;
        const data = {
          refresh_token: refreshToken,
          client_id: this._clientId,
          client_secret: this._clientSecret,
          grant_type: "refresh_token"
        };
        let res;
        try {
          res = await this.transporter.request({
            method: "POST",
            url,
            data: querystring.stringify(data),
            headers: { "Content-Type": "application/x-www-form-urlencoded" }
          });
        } catch (e) {
          if (e instanceof gaxios_1.GaxiosError && e.message === "invalid_grant" && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) && /ReAuth/i.test(e.response.data.error_description)) {
            e.message = JSON.stringify(e.response.data);
          }
          throw e;
        }
        const tokens = res.data;
        if (res.data && res.data.expires_in) {
          tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res };
      }
      refreshAccessToken(callback) {
        if (callback) {
          this.refreshAccessTokenAsync().then((r) => callback(null, r.credentials, r.res), callback);
        } else {
          return this.refreshAccessTokenAsync();
        }
      }
      async refreshAccessTokenAsync() {
        const r = await this.refreshToken(this.credentials.refresh_token);
        const tokens = r.tokens;
        tokens.refresh_token = this.credentials.refresh_token;
        this.credentials = tokens;
        return { credentials: this.credentials, res: r.res };
      }
      getAccessToken(callback) {
        if (callback) {
          this.getAccessTokenAsync().then((r) => callback(null, r.token, r.res), callback);
        } else {
          return this.getAccessTokenAsync();
        }
      }
      async getAccessTokenAsync() {
        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();
        if (shouldRefresh) {
          if (!this.credentials.refresh_token) {
            if (this.refreshHandler) {
              const refreshedAccessToken = await this.processAndValidateRefreshHandler();
              if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {
                this.setCredentials(refreshedAccessToken);
                return { token: this.credentials.access_token };
              }
            } else {
              throw new Error("No refresh token or refresh handler callback is set.");
            }
          }
          const r = await this.refreshAccessTokenAsync();
          if (!r.credentials || r.credentials && !r.credentials.access_token) {
            throw new Error("Could not refresh access token.");
          }
          return { token: r.credentials.access_token, res: r.res };
        } else {
          return { token: this.credentials.access_token };
        }
      }
      async getRequestHeaders(url) {
        const headers = (await this.getRequestMetadataAsync(url)).headers;
        return headers;
      }
      async getRequestMetadataAsync(url) {
        const thisCreds = this.credentials;
        if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey && !this.refreshHandler) {
          throw new Error("No access, refresh token, API key or refresh handler callback is set.");
        }
        if (thisCreds.access_token && !this.isTokenExpiring()) {
          thisCreds.token_type = thisCreds.token_type || "Bearer";
          const headers2 = {
            Authorization: thisCreds.token_type + " " + thisCreds.access_token
          };
          return { headers: this.addSharedMetadataHeaders(headers2) };
        }
        if (this.refreshHandler) {
          const refreshedAccessToken = await this.processAndValidateRefreshHandler();
          if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {
            this.setCredentials(refreshedAccessToken);
            const headers2 = {
              Authorization: "Bearer " + this.credentials.access_token
            };
            return { headers: this.addSharedMetadataHeaders(headers2) };
          }
        }
        if (this.apiKey) {
          return { headers: { "X-Goog-Api-Key": this.apiKey } };
        }
        let r = null;
        let tokens = null;
        try {
          r = await this.refreshToken(thisCreds.refresh_token);
          tokens = r.tokens;
        } catch (err) {
          const e = err;
          if (e.response && (e.response.status === 403 || e.response.status === 404)) {
            e.message = `Could not refresh access token: ${e.message}`;
          }
          throw e;
        }
        const credentials = this.credentials;
        credentials.token_type = credentials.token_type || "Bearer";
        tokens.refresh_token = credentials.refresh_token;
        this.credentials = tokens;
        const headers = {
          Authorization: credentials.token_type + " " + tokens.access_token
        };
        return { headers: this.addSharedMetadataHeaders(headers), res: r.res };
      }
      static getRevokeTokenUrl(token) {
        const parameters = querystring.stringify({ token });
        return `${OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;
      }
      revokeToken(token, callback) {
        const opts = {
          url: OAuth2Client.getRevokeTokenUrl(token),
          method: "POST"
        };
        if (callback) {
          this.transporter.request(opts).then((r) => callback(null, r), callback);
        } else {
          return this.transporter.request(opts);
        }
      }
      revokeCredentials(callback) {
        if (callback) {
          this.revokeCredentialsAsync().then((res) => callback(null, res), callback);
        } else {
          return this.revokeCredentialsAsync();
        }
      }
      async revokeCredentialsAsync() {
        const token = this.credentials.access_token;
        this.credentials = {};
        if (token) {
          return this.revokeToken(token);
        } else {
          throw new Error("No access token to revoke.");
        }
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      async requestAsync(opts, retry = false) {
        let r2;
        try {
          const r = await this.getRequestMetadataAsync(opts.url);
          opts.headers = opts.headers || {};
          if (r.headers && r.headers["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = r.headers["x-goog-user-project"];
          }
          if (r.headers && r.headers.Authorization) {
            opts.headers.Authorization = r.headers.Authorization;
          }
          if (this.apiKey) {
            opts.headers["X-Goog-Api-Key"] = this.apiKey;
          }
          r2 = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const mayRequireRefresh = this.credentials && this.credentials.access_token && this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure);
            const mayRequireRefreshWithNoRefreshToken = this.credentials && this.credentials.access_token && !this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure) && this.refreshHandler;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {
              await this.refreshAccessTokenAsync();
              return this.requestAsync(opts, true);
            } else if (!retry && isAuthErr && !isReadableStream && mayRequireRefreshWithNoRefreshToken) {
              const refreshedAccessToken = await this.processAndValidateRefreshHandler();
              if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {
                this.setCredentials(refreshedAccessToken);
              }
              return this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return r2;
      }
      verifyIdToken(options, callback) {
        if (callback && typeof callback !== "function") {
          throw new Error("This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.");
        }
        if (callback) {
          this.verifyIdTokenAsync(options).then((r) => callback(null, r), callback);
        } else {
          return this.verifyIdTokenAsync(options);
        }
      }
      async verifyIdTokenAsync(options) {
        if (!options.idToken) {
          throw new Error("The verifyIdToken method requires an ID Token");
        }
        const response = await this.getFederatedSignonCertsAsync();
        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, OAuth2Client.ISSUERS_, options.maxExpiry);
        return login;
      }
      async getTokenInfo(accessToken) {
        const { data } = await this.transporter.request({
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            Authorization: `Bearer ${accessToken}`
          },
          url: OAuth2Client.GOOGLE_TOKEN_INFO_URL
        });
        const info = Object.assign({
          expiry_date: new Date().getTime() + data.expires_in * 1e3,
          scopes: data.scope.split(" ")
        }, data);
        delete info.expires_in;
        delete info.scope;
        return info;
      }
      getFederatedSignonCerts(callback) {
        if (callback) {
          this.getFederatedSignonCertsAsync().then((r) => callback(null, r.certs, r.res), callback);
        } else {
          return this.getFederatedSignonCertsAsync();
        }
      }
      async getFederatedSignonCertsAsync() {
        const nowTime = new Date().getTime();
        const format = (0, crypto_1.hasBrowserCrypto)() ? CertificateFormat.JWK : CertificateFormat.PEM;
        if (this.certificateExpiry && nowTime < this.certificateExpiry.getTime() && this.certificateCacheFormat === format) {
          return { certs: this.certificateCache, format };
        }
        let res;
        let url;
        switch (format) {
          case CertificateFormat.PEM:
            url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;
            break;
          case CertificateFormat.JWK:
            url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;
            break;
          default:
            throw new Error(`Unsupported certificate format ${format}`);
        }
        try {
          res = await this.transporter.request({ url });
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Failed to retrieve verification certificates: ${e.message}`;
          }
          throw e;
        }
        const cacheControl = res ? res.headers["cache-control"] : void 0;
        let cacheAge = -1;
        if (cacheControl) {
          const pattern = new RegExp("max-age=([0-9]*)");
          const regexResult = pattern.exec(cacheControl);
          if (regexResult && regexResult.length === 2) {
            cacheAge = Number(regexResult[1]) * 1e3;
          }
        }
        let certificates = {};
        switch (format) {
          case CertificateFormat.PEM:
            certificates = res.data;
            break;
          case CertificateFormat.JWK:
            for (const key of res.data.keys) {
              certificates[key.kid] = key;
            }
            break;
          default:
            throw new Error(`Unsupported certificate format ${format}`);
        }
        const now = new Date();
        this.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);
        this.certificateCache = certificates;
        this.certificateCacheFormat = format;
        return { certs: certificates, format, res };
      }
      getIapPublicKeys(callback) {
        if (callback) {
          this.getIapPublicKeysAsync().then((r) => callback(null, r.pubkeys, r.res), callback);
        } else {
          return this.getIapPublicKeysAsync();
        }
      }
      async getIapPublicKeysAsync() {
        let res;
        const url = OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_;
        try {
          res = await this.transporter.request({ url });
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Failed to retrieve verification certificates: ${e.message}`;
          }
          throw e;
        }
        return { pubkeys: res.data, res };
      }
      verifySignedJwtWithCerts() {
        throw new Error("verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.");
      }
      async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {
        const crypto2 = (0, crypto_1.createCrypto)();
        if (!maxExpiry) {
          maxExpiry = OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;
        }
        const segments = jwt.split(".");
        if (segments.length !== 3) {
          throw new Error("Wrong number of segments in token: " + jwt);
        }
        const signed = segments[0] + "." + segments[1];
        let signature = segments[2];
        let envelope;
        let payload;
        try {
          envelope = JSON.parse(crypto2.decodeBase64StringUtf8(segments[0]));
        } catch (err) {
          if (err instanceof Error) {
            err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;
          }
          throw err;
        }
        if (!envelope) {
          throw new Error("Can't parse token envelope: " + segments[0]);
        }
        try {
          payload = JSON.parse(crypto2.decodeBase64StringUtf8(segments[1]));
        } catch (err) {
          if (err instanceof Error) {
            err.message = `Can't parse token payload '${segments[0]}`;
          }
          throw err;
        }
        if (!payload) {
          throw new Error("Can't parse token payload: " + segments[1]);
        }
        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {
          throw new Error("No pem found for envelope: " + JSON.stringify(envelope));
        }
        const cert = certs[envelope.kid];
        if (envelope.alg === "ES256") {
          signature = formatEcdsa.joseToDer(signature, "ES256").toString("base64");
        }
        const verified = await crypto2.verify(cert, signed, signature);
        if (!verified) {
          throw new Error("Invalid token signature: " + jwt);
        }
        if (!payload.iat) {
          throw new Error("No issue time in token: " + JSON.stringify(payload));
        }
        if (!payload.exp) {
          throw new Error("No expiration time in token: " + JSON.stringify(payload));
        }
        const iat = Number(payload.iat);
        if (isNaN(iat))
          throw new Error("iat field using invalid format");
        const exp = Number(payload.exp);
        if (isNaN(exp))
          throw new Error("exp field using invalid format");
        const now = new Date().getTime() / 1e3;
        if (exp >= now + maxExpiry) {
          throw new Error("Expiration time too far in future: " + JSON.stringify(payload));
        }
        const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;
        const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;
        if (now < earliest) {
          throw new Error("Token used too early, " + now + " < " + earliest + ": " + JSON.stringify(payload));
        }
        if (now > latest) {
          throw new Error("Token used too late, " + now + " > " + latest + ": " + JSON.stringify(payload));
        }
        if (issuers && issuers.indexOf(payload.iss) < 0) {
          throw new Error("Invalid issuer, expected one of [" + issuers + "], but got " + payload.iss);
        }
        if (typeof requiredAudience !== "undefined" && requiredAudience !== null) {
          const aud = payload.aud;
          let audVerified = false;
          if (requiredAudience.constructor === Array) {
            audVerified = requiredAudience.indexOf(aud) > -1;
          } else {
            audVerified = aud === requiredAudience;
          }
          if (!audVerified) {
            throw new Error("Wrong recipient, payload audience != requiredAudience");
          }
        }
        return new loginticket_1.LoginTicket(envelope, payload);
      }
      async processAndValidateRefreshHandler() {
        if (this.refreshHandler) {
          const accessTokenResponse = await this.refreshHandler();
          if (!accessTokenResponse.access_token) {
            throw new Error("No access token is returned by the refreshHandler callback.");
          }
          return accessTokenResponse;
        }
        return;
      }
      isTokenExpiring() {
        const expiryDate = this.credentials.expiry_date;
        return expiryDate ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.OAuth2Client = OAuth2Client;
    OAuth2Client.GOOGLE_TOKEN_INFO_URL = "https://oauth2.googleapis.com/tokeninfo";
    OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = "https://accounts.google.com/o/oauth2/v2/auth";
    OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = "https://oauth2.googleapis.com/token";
    OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = "https://oauth2.googleapis.com/revoke";
    OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = "https://www.googleapis.com/oauth2/v1/certs";
    OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = "https://www.googleapis.com/oauth2/v3/certs";
    OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_ = "https://www.gstatic.com/iap/verify/public_key";
    OAuth2Client.CLOCK_SKEW_SECS_ = 300;
    OAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;
    OAuth2Client.ISSUERS_ = [
      "accounts.google.com",
      "https://accounts.google.com"
    ];
  }
});

// node_modules/google-auth-library/build/src/auth/computeclient.js
var require_computeclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/computeclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Compute = void 0;
    var arrify = require_arrify();
    var gaxios_1 = require_src3();
    var gcpMetadata = require_src4();
    var oauth2client_1 = require_oauth2client();
    var Compute = class extends oauth2client_1.OAuth2Client {
      constructor(options = {}) {
        super(options);
        this.credentials = { expiry_date: 1, refresh_token: "compute-placeholder" };
        this.serviceAccountEmail = options.serviceAccountEmail || "default";
        this.scopes = arrify(options.scopes);
      }
      async refreshTokenNoCache(refreshToken) {
        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;
        let data;
        try {
          const instanceOptions = {
            property: tokenPath
          };
          if (this.scopes.length > 0) {
            instanceOptions.params = {
              scopes: this.scopes.join(",")
            };
          }
          data = await gcpMetadata.instance(instanceOptions);
        } catch (e) {
          if (e instanceof gaxios_1.GaxiosError) {
            e.message = `Could not refresh access token: ${e.message}`;
            this.wrapError(e);
          }
          throw e;
        }
        const tokens = data;
        if (data && data.expires_in) {
          tokens.expiry_date = new Date().getTime() + data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res: null };
      }
      async fetchIdToken(targetAudience) {
        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity?format=full&audience=${targetAudience}`;
        let idToken;
        try {
          const instanceOptions = {
            property: idTokenPath
          };
          idToken = await gcpMetadata.instance(instanceOptions);
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Could not fetch ID token: ${e.message}`;
          }
          throw e;
        }
        return idToken;
      }
      wrapError(e) {
        const res = e.response;
        if (res && res.status) {
          e.code = res.status.toString();
          if (res.status === 403) {
            e.message = "A Forbidden error was returned while attempting to retrieve an access token for the Compute Engine built-in service account. This may be because the Compute Engine instance does not have the correct permission scopes specified: " + e.message;
          } else if (res.status === 404) {
            e.message = "A Not Found error was returned while attempting to retrieve an accesstoken for the Compute Engine built-in service account. This may be because the Compute Engine instance does not have any permission scopes specified: " + e.message;
          }
        }
      }
    };
    exports2.Compute = Compute;
  }
});

// node_modules/google-auth-library/build/src/auth/idtokenclient.js
var require_idtokenclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/idtokenclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IdTokenClient = void 0;
    var oauth2client_1 = require_oauth2client();
    var IdTokenClient = class extends oauth2client_1.OAuth2Client {
      constructor(options) {
        super();
        this.targetAudience = options.targetAudience;
        this.idTokenProvider = options.idTokenProvider;
      }
      async getRequestMetadataAsync(url) {
        if (!this.credentials.id_token || (this.credentials.expiry_date || 0) < Date.now()) {
          const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);
          this.credentials = {
            id_token: idToken,
            expiry_date: this.getIdTokenExpiryDate(idToken)
          };
        }
        const headers = {
          Authorization: "Bearer " + this.credentials.id_token
        };
        return { headers };
      }
      getIdTokenExpiryDate(idToken) {
        const payloadB64 = idToken.split(".")[1];
        if (payloadB64) {
          const payload = JSON.parse(Buffer.from(payloadB64, "base64").toString("ascii"));
          return payload.exp * 1e3;
        }
      }
    };
    exports2.IdTokenClient = IdTokenClient;
  }
});

// node_modules/google-auth-library/build/src/auth/envDetect.js
var require_envDetect = __commonJS({
  "node_modules/google-auth-library/build/src/auth/envDetect.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnv = exports2.clear = exports2.GCPEnv = void 0;
    var gcpMetadata = require_src4();
    var GCPEnv;
    (function(GCPEnv2) {
      GCPEnv2["APP_ENGINE"] = "APP_ENGINE";
      GCPEnv2["KUBERNETES_ENGINE"] = "KUBERNETES_ENGINE";
      GCPEnv2["CLOUD_FUNCTIONS"] = "CLOUD_FUNCTIONS";
      GCPEnv2["COMPUTE_ENGINE"] = "COMPUTE_ENGINE";
      GCPEnv2["CLOUD_RUN"] = "CLOUD_RUN";
      GCPEnv2["NONE"] = "NONE";
    })(GCPEnv = exports2.GCPEnv || (exports2.GCPEnv = {}));
    var envPromise;
    function clear() {
      envPromise = void 0;
    }
    exports2.clear = clear;
    async function getEnv() {
      if (envPromise) {
        return envPromise;
      }
      envPromise = getEnvMemoized();
      return envPromise;
    }
    exports2.getEnv = getEnv;
    async function getEnvMemoized() {
      let env = GCPEnv.NONE;
      if (isAppEngine()) {
        env = GCPEnv.APP_ENGINE;
      } else if (isCloudFunction()) {
        env = GCPEnv.CLOUD_FUNCTIONS;
      } else if (await isComputeEngine()) {
        if (await isKubernetesEngine()) {
          env = GCPEnv.KUBERNETES_ENGINE;
        } else if (isCloudRun()) {
          env = GCPEnv.CLOUD_RUN;
        } else {
          env = GCPEnv.COMPUTE_ENGINE;
        }
      } else {
        env = GCPEnv.NONE;
      }
      return env;
    }
    function isAppEngine() {
      return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);
    }
    function isCloudFunction() {
      return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);
    }
    function isCloudRun() {
      return !!process.env.K_CONFIGURATION;
    }
    async function isKubernetesEngine() {
      try {
        await gcpMetadata.instance("attributes/cluster-name");
        return true;
      } catch (e) {
        return false;
      }
    }
    async function isComputeEngine() {
      return gcpMetadata.isAvailable();
    }
  }
});

// node_modules/jws/lib/data-stream.js
var require_data_stream = __commonJS({
  "node_modules/jws/lib/data-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var Stream = require_stream();
    var util = require_util();
    function DataStream(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;
      if (!data) {
        this.buffer = Buffer2.alloc(0);
        return this;
      }
      if (typeof data.pipe === "function") {
        this.buffer = Buffer2.alloc(0);
        data.pipe(this);
        return this;
      }
      if (data.length || typeof data === "object") {
        this.buffer = data;
        this.writable = false;
        process.nextTick(function() {
          this.emit("end", data);
          this.readable = false;
          this.emit("close");
        }.bind(this));
        return this;
      }
      throw new TypeError("Unexpected data type (" + typeof data + ")");
    }
    util.inherits(DataStream, Stream);
    DataStream.prototype.write = function write(data) {
      this.buffer = Buffer2.concat([this.buffer, Buffer2.from(data)]);
      this.emit("data", data);
    };
    DataStream.prototype.end = function end(data) {
      if (data)
        this.write(data);
      this.emit("end", data);
      this.emit("close");
      this.writable = false;
      this.readable = false;
    };
    module2.exports = DataStream;
  }
});

// node_modules/jwa/index.js
var require_jwa = __commonJS({
  "node_modules/jwa/index.js"(exports2, module2) {
    var bufferEqual = require_buffer_equal_constant_time();
    var Buffer2 = require_safe_buffer().Buffer;
    var crypto2 = require_crypto();
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util = require_util();
    var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = "secret must be a string or buffer";
    var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
    var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
    var supportsKeyObjects = typeof crypto2.createPublicKey === "function";
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
      MSG_INVALID_SECRET += "or a KeyObject";
    }
    function checkIsPublicKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.type !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.asymmetricKeyType !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (typeof key === "object") {
        return;
      }
      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return key;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (key.type !== "secret") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_SECRET);
      }
    }
    function fromBase64(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function toBase64(base64url) {
      base64url = base64url.toString();
      var padding = 4 - base64url.length % 4;
      if (padding !== 4) {
        for (var i = 0; i < padding; ++i) {
          base64url += "=";
        }
      }
      return base64url.replace(/\-/g, "+").replace(/_/g, "/");
    }
    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util.format.bind(util, template).apply(null, args);
      return new TypeError(errMsg);
    }
    function bufferOrString(obj) {
      return Buffer2.isBuffer(obj) || typeof obj === "string";
    }
    function normalizeInput(thing) {
      if (!bufferOrString(thing))
        thing = JSON.stringify(thing);
      return thing;
    }
    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto2.createHmac("sha" + bits, secret);
        var sig = (hmac.update(thing), hmac.digest("base64"));
        return fromBase64(sig);
      };
    }
    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return bufferEqual(Buffer2.from(signature), Buffer2.from(computedSig));
      };
    }
    function createKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
        return fromBase64(sig);
      };
    }
    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, "base64");
      };
    }
    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign({
          key: privateKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, "base64"));
        return fromBase64(sig);
      };
    }
    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify({
          key: publicKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, "base64");
      };
    }
    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, "ES" + bits);
        return signature;
      };
    }
    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }
    function createNoneSigner() {
      return function sign() {
        return "";
      };
    }
    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === "";
      };
    }
    module2.exports = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/);
      if (!match)
        throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];
      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits)
      };
    };
  }
});

// node_modules/jws/lib/tostring.js
var require_tostring = __commonJS({
  "node_modules/jws/lib/tostring.js"(exports2, module2) {
    var Buffer2 = require_buffer().Buffer;
    module2.exports = function toString(obj) {
      if (typeof obj === "string")
        return obj;
      if (typeof obj === "number" || Buffer2.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };
  }
});

// node_modules/jws/lib/sign-stream.js
var require_sign_stream = __commonJS({
  "node_modules/jws/lib/sign-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require_stream();
    var toString = require_tostring();
    var util = require_util();
    function base64url(string, encoding) {
      return Buffer2.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || "utf8";
      var encodedHeader = base64url(toString(header), "binary");
      var encodedPayload = base64url(toString(payload), encoding);
      return util.format("%s.%s", encodedHeader, encodedPayload);
    }
    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util.format("%s.%s", securedInput, signature);
    }
    function SignStream(opts) {
      var secret = opts.secret || opts.privateKey || opts.key;
      var secretStream = new DataStream(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream(opts.payload);
      this.secret.once("close", function() {
        if (!this.payload.writable && this.readable)
          this.sign();
      }.bind(this));
      this.payload.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.sign();
      }.bind(this));
    }
    util.inherits(SignStream, Stream);
    SignStream.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding
        });
        this.emit("done", signature);
        this.emit("data", signature);
        this.emit("end");
        this.readable = false;
        return signature;
      } catch (e) {
        this.readable = false;
        this.emit("error", e);
        this.emit("close");
      }
    };
    SignStream.sign = jwsSign;
    module2.exports = SignStream;
  }
});

// node_modules/jws/lib/verify-stream.js
var require_verify_stream = __commonJS({
  "node_modules/jws/lib/verify-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require_stream();
    var toString = require_tostring();
    var util = require_util();
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
    function isObject(thing) {
      return Object.prototype.toString.call(thing) === "[object Object]";
    }
    function safeJsonParse(thing) {
      if (isObject(thing))
        return thing;
      try {
        return JSON.parse(thing);
      } catch (e) {
        return void 0;
      }
    }
    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split(".", 1)[0];
      return safeJsonParse(Buffer2.from(encodedHeader, "base64").toString("binary"));
    }
    function securedInputFromJWS(jwsSig) {
      return jwsSig.split(".", 2).join(".");
    }
    function signatureFromJWS(jwsSig) {
      return jwsSig.split(".")[2];
    }
    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || "utf8";
      var payload = jwsSig.split(".")[1];
      return Buffer2.from(payload, "base64").toString(encoding);
    }
    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }
    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
      }
      jwsSig = toString(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }
    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString(jwsSig);
      if (!isValidJws(jwsSig))
        return null;
      var header = headerFromJWS(jwsSig);
      if (!header)
        return null;
      var payload = payloadFromJWS(jwsSig);
      if (header.typ === "JWT" || opts.json)
        payload = JSON.parse(payload, opts.encoding);
      return {
        header,
        payload,
        signature: signatureFromJWS(jwsSig)
      };
    }
    function VerifyStream(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret || opts.publicKey || opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once("close", function() {
        if (!this.signature.writable && this.readable)
          this.verify();
      }.bind(this));
      this.signature.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.verify();
      }.bind(this));
    }
    util.inherits(VerifyStream, Stream);
    VerifyStream.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit("done", valid, obj);
        this.emit("data", valid);
        this.emit("end");
        this.readable = false;
        return valid;
      } catch (e) {
        this.readable = false;
        this.emit("error", e);
        this.emit("close");
      }
    };
    VerifyStream.decode = jwsDecode;
    VerifyStream.isValid = isValidJws;
    VerifyStream.verify = jwsVerify;
    module2.exports = VerifyStream;
  }
});

// node_modules/jws/index.js
var require_jws = __commonJS({
  "node_modules/jws/index.js"(exports2) {
    var SignStream = require_sign_stream();
    var VerifyStream = require_verify_stream();
    var ALGORITHMS = [
      "HS256",
      "HS384",
      "HS512",
      "RS256",
      "RS384",
      "RS512",
      "PS256",
      "PS384",
      "PS512",
      "ES256",
      "ES384",
      "ES512"
    ];
    exports2.ALGORITHMS = ALGORITHMS;
    exports2.sign = SignStream.sign;
    exports2.verify = VerifyStream.verify;
    exports2.decode = VerifyStream.decode;
    exports2.isValid = VerifyStream.isValid;
    exports2.createSign = function createSign(opts) {
      return new SignStream(opts);
    };
    exports2.createVerify = function createVerify(opts) {
      return new VerifyStream(opts);
    };
  }
});

// node_modules/google-p12-pem/build/src/index.js
var require_src5 = __commonJS({
  "node_modules/google-p12-pem/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPem = void 0;
    var fs = require_fs();
    var forge = require_lib();
    var util_1 = require_util();
    var readFile = (0, util_1.promisify)(fs.readFile);
    function getPem(filename, callback) {
      if (callback) {
        getPemAsync(filename).then((pem) => callback(null, pem)).catch((err) => callback(err, null));
      } else {
        return getPemAsync(filename);
      }
    }
    exports2.getPem = getPem;
    function getPemAsync(filename) {
      return readFile(filename, { encoding: "base64" }).then((keyp12) => {
        return convertToPem(keyp12);
      });
    }
    function convertToPem(p12base64) {
      const p12Der = forge.util.decode64(p12base64);
      const p12Asn1 = forge.asn1.fromDer(p12Der);
      const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, "notasecret");
      const bags = p12.getBags({ friendlyName: "privatekey" });
      if (bags.friendlyName) {
        const privateKey = bags.friendlyName[0].key;
        const pem = forge.pki.privateKeyToPem(privateKey);
        return pem.replace(/\r\n/g, "\n");
      } else {
        throw new Error("Unable to get friendly name.");
      }
    }
  }
});

// node_modules/gtoken/build/src/index.js
var require_src6 = __commonJS({
  "node_modules/gtoken/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleToken = void 0;
    var fs = require_fs();
    var gaxios_1 = require_src3();
    var jws = require_jws();
    var path = require_path();
    var util_1 = require_util();
    var readFile = fs.readFile ? (0, util_1.promisify)(fs.readFile) : async () => {
      throw new ErrorWithCode("use key rather than keyFile.", "MISSING_CREDENTIALS");
    };
    var GOOGLE_TOKEN_URL = "https://www.googleapis.com/oauth2/v4/token";
    var GOOGLE_REVOKE_TOKEN_URL = "https://accounts.google.com/o/oauth2/revoke?token=";
    var ErrorWithCode = class extends Error {
      constructor(message, code) {
        super(message);
        this.code = code;
      }
    };
    var getPem;
    var GoogleToken = class {
      constructor(options) {
        this.transporter = {
          request: (opts) => (0, gaxios_1.request)(opts)
        };
        this.configure(options);
      }
      get accessToken() {
        return this.rawToken ? this.rawToken.access_token : void 0;
      }
      get idToken() {
        return this.rawToken ? this.rawToken.id_token : void 0;
      }
      get tokenType() {
        return this.rawToken ? this.rawToken.token_type : void 0;
      }
      get refreshToken() {
        return this.rawToken ? this.rawToken.refresh_token : void 0;
      }
      hasExpired() {
        const now = new Date().getTime();
        if (this.rawToken && this.expiresAt) {
          return now >= this.expiresAt;
        } else {
          return true;
        }
      }
      isTokenExpiring() {
        var _a;
        const now = new Date().getTime();
        const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;
        if (this.rawToken && this.expiresAt) {
          return this.expiresAt <= now + eagerRefreshThresholdMillis;
        } else {
          return true;
        }
      }
      getToken(callback, opts = {}) {
        if (typeof callback === "object") {
          opts = callback;
          callback = void 0;
        }
        opts = Object.assign({
          forceRefresh: false
        }, opts);
        if (callback) {
          const cb = callback;
          this.getTokenAsync(opts).then((t) => cb(null, t), callback);
          return;
        }
        return this.getTokenAsync(opts);
      }
      async getCredentials(keyFile) {
        const ext = path.extname(keyFile);
        switch (ext) {
          case ".json": {
            const key = await readFile(keyFile, "utf8");
            const body = JSON.parse(key);
            const privateKey = body.private_key;
            const clientEmail = body.client_email;
            if (!privateKey || !clientEmail) {
              throw new ErrorWithCode("private_key and client_email are required.", "MISSING_CREDENTIALS");
            }
            return { privateKey, clientEmail };
          }
          case ".der":
          case ".crt":
          case ".pem": {
            const privateKey = await readFile(keyFile, "utf8");
            return { privateKey };
          }
          case ".p12":
          case ".pfx": {
            if (!getPem) {
              getPem = (await Promise.resolve().then(() => require_src5())).getPem;
            }
            const privateKey = await getPem(keyFile);
            return { privateKey };
          }
          default:
            throw new ErrorWithCode("Unknown certificate type. Type is determined based on file extension. Current supported extensions are *.json, *.pem, and *.p12.", "UNKNOWN_CERTIFICATE_TYPE");
        }
      }
      async getTokenAsync(opts) {
        if (this.inFlightRequest && !opts.forceRefresh) {
          return this.inFlightRequest;
        }
        try {
          return await (this.inFlightRequest = this.getTokenAsyncInner(opts));
        } finally {
          this.inFlightRequest = void 0;
        }
      }
      async getTokenAsyncInner(opts) {
        if (this.isTokenExpiring() === false && opts.forceRefresh === false) {
          return Promise.resolve(this.rawToken);
        }
        if (!this.key && !this.keyFile) {
          throw new Error("No key or keyFile set.");
        }
        if (!this.key && this.keyFile) {
          const creds = await this.getCredentials(this.keyFile);
          this.key = creds.privateKey;
          this.iss = creds.clientEmail || this.iss;
          if (!creds.clientEmail) {
            this.ensureEmail();
          }
        }
        return this.requestToken();
      }
      ensureEmail() {
        if (!this.iss) {
          throw new ErrorWithCode("email is required.", "MISSING_CREDENTIALS");
        }
      }
      revokeToken(callback) {
        if (callback) {
          this.revokeTokenAsync().then(() => callback(), callback);
          return;
        }
        return this.revokeTokenAsync();
      }
      async revokeTokenAsync() {
        if (!this.accessToken) {
          throw new Error("No token to revoke.");
        }
        const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;
        await this.transporter.request({ url });
        this.configure({
          email: this.iss,
          sub: this.sub,
          key: this.key,
          keyFile: this.keyFile,
          scope: this.scope,
          additionalClaims: this.additionalClaims
        });
      }
      configure(options = {}) {
        this.keyFile = options.keyFile;
        this.key = options.key;
        this.rawToken = void 0;
        this.iss = options.email || options.iss;
        this.sub = options.sub;
        this.additionalClaims = options.additionalClaims;
        if (typeof options.scope === "object") {
          this.scope = options.scope.join(" ");
        } else {
          this.scope = options.scope;
        }
        this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;
        if (options.transporter) {
          this.transporter = options.transporter;
        }
      }
      async requestToken() {
        var _a, _b;
        const iat = Math.floor(new Date().getTime() / 1e3);
        const additionalClaims = this.additionalClaims || {};
        const payload = Object.assign({
          iss: this.iss,
          scope: this.scope,
          aud: GOOGLE_TOKEN_URL,
          exp: iat + 3600,
          iat,
          sub: this.sub
        }, additionalClaims);
        const signedJWT = jws.sign({
          header: { alg: "RS256" },
          payload,
          secret: this.key
        });
        try {
          const r = await this.transporter.request({
            method: "POST",
            url: GOOGLE_TOKEN_URL,
            data: {
              grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
              assertion: signedJWT
            },
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            responseType: "json"
          });
          this.rawToken = r.data;
          this.expiresAt = r.data.expires_in === null || r.data.expires_in === void 0 ? void 0 : (iat + r.data.expires_in) * 1e3;
          return this.rawToken;
        } catch (e) {
          this.rawToken = void 0;
          this.tokenExpires = void 0;
          const body = e.response && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) ? (_b = e.response) === null || _b === void 0 ? void 0 : _b.data : {};
          if (body.error) {
            const desc = body.error_description ? `: ${body.error_description}` : "";
            e.message = `${body.error}${desc}`;
          }
          throw e;
        }
      }
    };
    exports2.GoogleToken = GoogleToken;
  }
});

// node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "node_modules/yallist/iterator.js"(exports2, module2) {
    "use strict";
    module2.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "node_modules/yallist/yallist.js"(exports2, module2) {
    "use strict";
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "node_modules/lru-cache/index.js"(exports2, module2) {
    "use strict";
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self2);
    };
    module2.exports = LRUCache;
  }
});

// node_modules/google-auth-library/build/src/auth/jwtaccess.js
var require_jwtaccess = __commonJS({
  "node_modules/google-auth-library/build/src/auth/jwtaccess.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JWTAccess = void 0;
    var jws = require_jws();
    var LRU = require_lru_cache();
    var DEFAULT_HEADER = {
      alg: "RS256",
      typ: "JWT"
    };
    var JWTAccess = class {
      constructor(email, key, keyId, eagerRefreshThresholdMillis) {
        this.cache = new LRU({
          max: 500,
          maxAge: 60 * 60 * 1e3
        });
        this.email = email;
        this.key = key;
        this.keyId = keyId;
        this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1e3;
      }
      getCachedKey(url, scopes) {
        let cacheKey = url;
        if (scopes && Array.isArray(scopes) && scopes.length) {
          cacheKey = url ? `${url}_${scopes.join("_")}` : `${scopes.join("_")}`;
        } else if (typeof scopes === "string") {
          cacheKey = url ? `${url}_${scopes}` : scopes;
        }
        if (!cacheKey) {
          throw Error("Scopes or url must be provided");
        }
        return cacheKey;
      }
      getRequestHeaders(url, additionalClaims, scopes) {
        const key = this.getCachedKey(url, scopes);
        const cachedToken = this.cache.get(key);
        const now = Date.now();
        if (cachedToken && cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {
          return cachedToken.headers;
        }
        const iat = Math.floor(Date.now() / 1e3);
        const exp = JWTAccess.getExpirationTime(iat);
        let defaultClaims;
        if (Array.isArray(scopes)) {
          scopes = scopes.join(" ");
        }
        if (scopes) {
          defaultClaims = {
            iss: this.email,
            sub: this.email,
            scope: scopes,
            exp,
            iat
          };
        } else {
          defaultClaims = {
            iss: this.email,
            sub: this.email,
            aud: url,
            exp,
            iat
          };
        }
        if (additionalClaims) {
          for (const claim in defaultClaims) {
            if (additionalClaims[claim]) {
              throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);
            }
          }
        }
        const header = this.keyId ? { ...DEFAULT_HEADER, kid: this.keyId } : DEFAULT_HEADER;
        const payload = Object.assign(defaultClaims, additionalClaims);
        const signedJWT = jws.sign({ header, payload, secret: this.key });
        const headers = { Authorization: `Bearer ${signedJWT}` };
        this.cache.set(key, {
          expiration: exp * 1e3,
          headers
        });
        return headers;
      }
      static getExpirationTime(iat) {
        const exp = iat + 3600;
        return exp;
      }
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the service account auth settings.");
        }
        if (!json.client_email) {
          throw new Error("The incoming JSON object does not contain a client_email field");
        }
        if (!json.private_key) {
          throw new Error("The incoming JSON object does not contain a private_key field");
        }
        this.email = json.client_email;
        this.key = json.private_key;
        this.keyId = json.private_key_id;
        this.projectId = json.project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            reject(new Error("Must pass in a stream containing the service account auth settings."));
          }
          let s = "";
          inputStream.setEncoding("utf8").on("data", (chunk) => s += chunk).on("error", reject).on("end", () => {
            try {
              const data = JSON.parse(s);
              this.fromJSON(data);
              resolve();
            } catch (err) {
              reject(err);
            }
          });
        });
      }
    };
    exports2.JWTAccess = JWTAccess;
  }
});

// node_modules/google-auth-library/build/src/auth/jwtclient.js
var require_jwtclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/jwtclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JWT = void 0;
    var gtoken_1 = require_src6();
    var jwtaccess_1 = require_jwtaccess();
    var oauth2client_1 = require_oauth2client();
    var JWT = class extends oauth2client_1.OAuth2Client {
      constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {
        const opts = optionsOrEmail && typeof optionsOrEmail === "object" ? optionsOrEmail : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };
        super({
          eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,
          forceRefreshOnFailure: opts.forceRefreshOnFailure
        });
        this.email = opts.email;
        this.keyFile = opts.keyFile;
        this.key = opts.key;
        this.keyId = opts.keyId;
        this.scopes = opts.scopes;
        this.subject = opts.subject;
        this.additionalClaims = opts.additionalClaims;
        this.credentials = { refresh_token: "jwt-placeholder", expiry_date: 1 };
      }
      createScoped(scopes) {
        return new JWT({
          email: this.email,
          keyFile: this.keyFile,
          key: this.key,
          keyId: this.keyId,
          scopes,
          subject: this.subject,
          additionalClaims: this.additionalClaims
        });
      }
      async getRequestMetadataAsync(url) {
        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;
        const useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes();
        if (!this.apiKey && useSelfSignedJWT) {
          if (this.additionalClaims && this.additionalClaims.target_audience) {
            const { tokens } = await this.refreshToken();
            return {
              headers: this.addSharedMetadataHeaders({
                Authorization: `Bearer ${tokens.id_token}`
              })
            };
          } else {
            if (!this.access) {
              this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);
            }
            let scopes;
            if (this.hasUserScopes()) {
              scopes = this.scopes;
            } else if (!url) {
              scopes = this.defaultScopes;
            }
            const headers = await this.access.getRequestHeaders(
              url !== null && url !== void 0 ? url : void 0,
              this.additionalClaims,
              this.useJWTAccessWithScope ? scopes : void 0
            );
            return { headers: this.addSharedMetadataHeaders(headers) };
          }
        } else if (this.hasAnyScopes() || this.apiKey) {
          return super.getRequestMetadataAsync(url);
        } else {
          return { headers: {} };
        }
      }
      async fetchIdToken(targetAudience) {
        const gtoken = new gtoken_1.GoogleToken({
          iss: this.email,
          sub: this.subject,
          scope: this.scopes || this.defaultScopes,
          keyFile: this.keyFile,
          key: this.key,
          additionalClaims: { target_audience: targetAudience },
          transporter: this.transporter
        });
        await gtoken.getToken({
          forceRefresh: true
        });
        if (!gtoken.idToken) {
          throw new Error("Unknown error: Failed to fetch ID token");
        }
        return gtoken.idToken;
      }
      hasUserScopes() {
        if (!this.scopes) {
          return false;
        }
        return this.scopes.length > 0;
      }
      hasAnyScopes() {
        if (this.scopes && this.scopes.length > 0)
          return true;
        if (this.defaultScopes && this.defaultScopes.length > 0)
          return true;
        return false;
      }
      authorize(callback) {
        if (callback) {
          this.authorizeAsync().then((r) => callback(null, r), callback);
        } else {
          return this.authorizeAsync();
        }
      }
      async authorizeAsync() {
        const result = await this.refreshToken();
        if (!result) {
          throw new Error("No result returned");
        }
        this.credentials = result.tokens;
        this.credentials.refresh_token = "jwt-placeholder";
        this.key = this.gtoken.key;
        this.email = this.gtoken.iss;
        return result.tokens;
      }
      async refreshTokenNoCache(refreshToken) {
        const gtoken = this.createGToken();
        const token = await gtoken.getToken({
          forceRefresh: this.isTokenExpiring()
        });
        const tokens = {
          access_token: token.access_token,
          token_type: "Bearer",
          expiry_date: gtoken.expiresAt,
          id_token: gtoken.idToken
        };
        this.emit("tokens", tokens);
        return { res: null, tokens };
      }
      createGToken() {
        if (!this.gtoken) {
          this.gtoken = new gtoken_1.GoogleToken({
            iss: this.email,
            sub: this.subject,
            scope: this.scopes || this.defaultScopes,
            keyFile: this.keyFile,
            key: this.key,
            additionalClaims: this.additionalClaims,
            transporter: this.transporter
          });
        }
        return this.gtoken;
      }
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the service account auth settings.");
        }
        if (!json.client_email) {
          throw new Error("The incoming JSON object does not contain a client_email field");
        }
        if (!json.private_key) {
          throw new Error("The incoming JSON object does not contain a private_key field");
        }
        this.email = json.client_email;
        this.key = json.private_key;
        this.keyId = json.private_key_id;
        this.projectId = json.project_id;
        this.quotaProjectId = json.quota_project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            throw new Error("Must pass in a stream containing the service account auth settings.");
          }
          let s = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s += chunk).on("end", () => {
            try {
              const data = JSON.parse(s);
              this.fromJSON(data);
              resolve();
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      fromAPIKey(apiKey) {
        if (typeof apiKey !== "string") {
          throw new Error("Must provide an API Key string.");
        }
        this.apiKey = apiKey;
      }
      async getCredentials() {
        if (this.key) {
          return { private_key: this.key, client_email: this.email };
        } else if (this.keyFile) {
          const gtoken = this.createGToken();
          const creds = await gtoken.getCredentials(this.keyFile);
          return { private_key: creds.privateKey, client_email: creds.clientEmail };
        }
        throw new Error("A key or a keyFile must be provided to getCredentials.");
      }
    };
    exports2.JWT = JWT;
  }
});

// node_modules/google-auth-library/build/src/auth/refreshclient.js
var require_refreshclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/refreshclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UserRefreshClient = void 0;
    var oauth2client_1 = require_oauth2client();
    var UserRefreshClient = class extends oauth2client_1.OAuth2Client {
      constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {
        const opts = optionsOrClientId && typeof optionsOrClientId === "object" ? optionsOrClientId : {
          clientId: optionsOrClientId,
          clientSecret,
          refreshToken,
          eagerRefreshThresholdMillis,
          forceRefreshOnFailure
        };
        super({
          clientId: opts.clientId,
          clientSecret: opts.clientSecret,
          eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,
          forceRefreshOnFailure: opts.forceRefreshOnFailure
        });
        this._refreshToken = opts.refreshToken;
        this.credentials.refresh_token = opts.refreshToken;
      }
      async refreshTokenNoCache(refreshToken) {
        return super.refreshTokenNoCache(this._refreshToken);
      }
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the user refresh token");
        }
        if (json.type !== "authorized_user") {
          throw new Error('The incoming JSON object does not have the "authorized_user" type');
        }
        if (!json.client_id) {
          throw new Error("The incoming JSON object does not contain a client_id field");
        }
        if (!json.client_secret) {
          throw new Error("The incoming JSON object does not contain a client_secret field");
        }
        if (!json.refresh_token) {
          throw new Error("The incoming JSON object does not contain a refresh_token field");
        }
        this._clientId = json.client_id;
        this._clientSecret = json.client_secret;
        this._refreshToken = json.refresh_token;
        this.credentials.refresh_token = json.refresh_token;
        this.quotaProjectId = json.quota_project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      async fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            return reject(new Error("Must pass in a stream containing the user refresh token."));
          }
          let s = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s += chunk).on("end", () => {
            try {
              const data = JSON.parse(s);
              this.fromJSON(data);
              return resolve();
            } catch (err) {
              return reject(err);
            }
          });
        });
      }
    };
    exports2.UserRefreshClient = UserRefreshClient;
  }
});

// node_modules/google-auth-library/build/src/auth/impersonated.js
var require_impersonated = __commonJS({
  "node_modules/google-auth-library/build/src/auth/impersonated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Impersonated = exports2.IMPERSONATED_ACCOUNT_TYPE = void 0;
    var oauth2client_1 = require_oauth2client();
    var gaxios_1 = require_src3();
    exports2.IMPERSONATED_ACCOUNT_TYPE = "impersonated_service_account";
    var Impersonated = class extends oauth2client_1.OAuth2Client {
      constructor(options = {}) {
        var _a, _b, _c, _d, _e, _f;
        super(options);
        this.credentials = {
          expiry_date: 1,
          refresh_token: "impersonated-placeholder"
        };
        this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();
        this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : "";
        this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];
        this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];
        this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;
        this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : "https://iamcredentials.googleapis.com";
      }
      async refreshToken(refreshToken) {
        var _a, _b, _c, _d, _e, _f;
        try {
          await this.sourceClient.getAccessToken();
          const name = "projects/-/serviceAccounts/" + this.targetPrincipal;
          const u = `${this.endpoint}/v1/${name}:generateAccessToken`;
          const body = {
            delegates: this.delegates,
            scope: this.targetScopes,
            lifetime: this.lifetime + "s"
          };
          const res = await this.sourceClient.request({
            url: u,
            data: body,
            method: "POST"
          });
          const tokenResponse = res.data;
          this.credentials.access_token = tokenResponse.accessToken;
          this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);
          return {
            tokens: this.credentials,
            res
          };
        } catch (error) {
          if (!(error instanceof Error))
            throw error;
          let status = 0;
          let message = "";
          if (error instanceof gaxios_1.GaxiosError) {
            status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;
            message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;
          }
          if (status && message) {
            error.message = `${status}: unable to impersonate: ${message}`;
            throw error;
          } else {
            error.message = `unable to impersonate: ${error}`;
            throw error;
          }
        }
      }
      async fetchIdToken(targetAudience, options) {
        var _a;
        await this.sourceClient.getAccessToken();
        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;
        const u = `${this.endpoint}/v1/${name}:generateIdToken`;
        const body = {
          delegates: this.delegates,
          audience: targetAudience,
          includeEmail: (_a = options === null || options === void 0 ? void 0 : options.includeEmail) !== null && _a !== void 0 ? _a : true
        };
        const res = await this.sourceClient.request({
          url: u,
          data: body,
          method: "POST"
        });
        return res.data.token;
      }
    };
    exports2.Impersonated = Impersonated;
  }
});

// node_modules/google-auth-library/build/src/auth/oauth2common.js
var require_oauth2common = __commonJS({
  "node_modules/google-auth-library/build/src/auth/oauth2common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getErrorFromOAuthErrorResponse = exports2.OAuthClientAuthHandler = void 0;
    var querystring = require_querystring();
    var crypto_1 = require_crypto4();
    var METHODS_SUPPORTING_REQUEST_BODY = ["PUT", "POST", "PATCH"];
    var OAuthClientAuthHandler = class {
      constructor(clientAuthentication) {
        this.clientAuthentication = clientAuthentication;
        this.crypto = (0, crypto_1.createCrypto)();
      }
      applyClientAuthenticationOptions(opts, bearerToken) {
        this.injectAuthenticatedHeaders(opts, bearerToken);
        if (!bearerToken) {
          this.injectAuthenticatedRequestBody(opts);
        }
      }
      injectAuthenticatedHeaders(opts, bearerToken) {
        var _a;
        if (bearerToken) {
          opts.headers = opts.headers || {};
          Object.assign(opts.headers, {
            Authorization: `Bearer ${bearerToken}}`
          });
        } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === "basic") {
          opts.headers = opts.headers || {};
          const clientId = this.clientAuthentication.clientId;
          const clientSecret = this.clientAuthentication.clientSecret || "";
          const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);
          Object.assign(opts.headers, {
            Authorization: `Basic ${base64EncodedCreds}`
          });
        }
      }
      injectAuthenticatedRequestBody(opts) {
        var _a;
        if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === "request-body") {
          const method = (opts.method || "GET").toUpperCase();
          if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {
            let contentType;
            const headers = opts.headers || {};
            for (const key in headers) {
              if (key.toLowerCase() === "content-type" && headers[key]) {
                contentType = headers[key].toLowerCase();
                break;
              }
            }
            if (contentType === "application/x-www-form-urlencoded") {
              opts.data = opts.data || "";
              const data = querystring.parse(opts.data);
              Object.assign(data, {
                client_id: this.clientAuthentication.clientId,
                client_secret: this.clientAuthentication.clientSecret || ""
              });
              opts.data = querystring.stringify(data);
            } else if (contentType === "application/json") {
              opts.data = opts.data || {};
              Object.assign(opts.data, {
                client_id: this.clientAuthentication.clientId,
                client_secret: this.clientAuthentication.clientSecret || ""
              });
            } else {
              throw new Error(`${contentType} content-types are not supported with ${this.clientAuthentication.confidentialClientType} client authentication`);
            }
          } else {
            throw new Error(`${method} HTTP method does not support ${this.clientAuthentication.confidentialClientType} client authentication`);
          }
        }
      }
    };
    exports2.OAuthClientAuthHandler = OAuthClientAuthHandler;
    function getErrorFromOAuthErrorResponse(resp, err) {
      const errorCode = resp.error;
      const errorDescription = resp.error_description;
      const errorUri = resp.error_uri;
      let message = `Error code ${errorCode}`;
      if (typeof errorDescription !== "undefined") {
        message += `: ${errorDescription}`;
      }
      if (typeof errorUri !== "undefined") {
        message += ` - ${errorUri}`;
      }
      const newError = new Error(message);
      if (err) {
        const keys = Object.keys(err);
        if (err.stack) {
          keys.push("stack");
        }
        keys.forEach((key) => {
          if (key !== "message") {
            Object.defineProperty(newError, key, {
              value: err[key],
              writable: false,
              enumerable: true
            });
          }
        });
      }
      return newError;
    }
    exports2.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;
  }
});

// node_modules/google-auth-library/build/src/auth/stscredentials.js
var require_stscredentials = __commonJS({
  "node_modules/google-auth-library/build/src/auth/stscredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StsCredentials = void 0;
    var gaxios_1 = require_src3();
    var querystring = require_querystring();
    var transporters_1 = require_transporters();
    var oauth2common_1 = require_oauth2common();
    var StsCredentials = class extends oauth2common_1.OAuthClientAuthHandler {
      constructor(tokenExchangeEndpoint, clientAuthentication) {
        super(clientAuthentication);
        this.tokenExchangeEndpoint = tokenExchangeEndpoint;
        this.transporter = new transporters_1.DefaultTransporter();
      }
      async exchangeToken(stsCredentialsOptions, additionalHeaders, options) {
        var _a, _b, _c;
        const values = {
          grant_type: stsCredentialsOptions.grantType,
          resource: stsCredentialsOptions.resource,
          audience: stsCredentialsOptions.audience,
          scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(" "),
          requested_token_type: stsCredentialsOptions.requestedTokenType,
          subject_token: stsCredentialsOptions.subjectToken,
          subject_token_type: stsCredentialsOptions.subjectTokenType,
          actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,
          actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,
          options: options && JSON.stringify(options)
        };
        Object.keys(values).forEach((key) => {
          if (typeof values[key] === "undefined") {
            delete values[key];
          }
        });
        const headers = {
          "Content-Type": "application/x-www-form-urlencoded"
        };
        Object.assign(headers, additionalHeaders || {});
        const opts = {
          url: this.tokenExchangeEndpoint,
          method: "POST",
          headers,
          data: querystring.stringify(values),
          responseType: "json"
        };
        this.applyClientAuthenticationOptions(opts);
        try {
          const response = await this.transporter.request(opts);
          const stsSuccessfulResponse = response.data;
          stsSuccessfulResponse.res = response;
          return stsSuccessfulResponse;
        } catch (error) {
          if (error instanceof gaxios_1.GaxiosError && error.response) {
            throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(
              error.response.data,
              error
            );
          }
          throw error;
        }
      }
    };
    exports2.StsCredentials = StsCredentials;
  }
});

// node_modules/google-auth-library/build/src/auth/baseexternalclient.js
var require_baseexternalclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/baseexternalclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseExternalAccountClient = exports2.CLOUD_RESOURCE_MANAGER = exports2.EXTERNAL_ACCOUNT_TYPE = exports2.EXPIRATION_TIME_OFFSET = void 0;
    var stream = require_stream();
    var authclient_1 = require_authclient();
    var sts = require_stscredentials();
    var STS_GRANT_TYPE = "urn:ietf:params:oauth:grant-type:token-exchange";
    var STS_REQUEST_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var DEFAULT_OAUTH_SCOPE = "https://www.googleapis.com/auth/cloud-platform";
    var GOOGLE_APIS_DOMAIN_PATTERN = "\\.googleapis\\.com$";
    var VARIABLE_PORTION_PATTERN = "[^\\.\\s\\/\\\\]+";
    var DEFAULT_TOKEN_LIFESPAN = 3600;
    exports2.EXPIRATION_TIME_OFFSET = 5 * 60 * 1e3;
    exports2.EXTERNAL_ACCOUNT_TYPE = "external_account";
    exports2.CLOUD_RESOURCE_MANAGER = "https://cloudresourcemanager.googleapis.com/v1/projects/";
    var WORKFORCE_AUDIENCE_PATTERN = "//iam.googleapis.com/locations/[^/]+/workforcePools/[^/]+/providers/.+";
    var BaseExternalAccountClient = class extends authclient_1.AuthClient {
      constructor(options, additionalOptions) {
        var _a, _b;
        super();
        if (options.type !== exports2.EXTERNAL_ACCOUNT_TYPE) {
          throw new Error(`Expected "${exports2.EXTERNAL_ACCOUNT_TYPE}" type but received "${options.type}"`);
        }
        this.clientAuth = options.client_id ? {
          confidentialClientType: "basic",
          clientId: options.client_id,
          clientSecret: options.client_secret
        } : void 0;
        if (!this.validateGoogleAPIsUrl("sts", options.token_url)) {
          throw new Error(`"${options.token_url}" is not a valid token url.`);
        }
        this.stsCredential = new sts.StsCredentials(options.token_url, this.clientAuth);
        this.scopes = [DEFAULT_OAUTH_SCOPE];
        this.cachedAccessToken = null;
        this.audience = options.audience;
        this.subjectTokenType = options.subject_token_type;
        this.quotaProjectId = options.quota_project_id;
        this.workforcePoolUserProject = options.workforce_pool_user_project;
        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);
        if (this.workforcePoolUserProject && !this.audience.match(workforceAudiencePattern)) {
          throw new Error("workforcePoolUserProject should not be set for non-workforce pool credentials.");
        }
        if (typeof options.service_account_impersonation_url !== "undefined" && !this.validateGoogleAPIsUrl("iamcredentials", options.service_account_impersonation_url)) {
          throw new Error(`"${options.service_account_impersonation_url}" is not a valid service account impersonation url.`);
        }
        this.serviceAccountImpersonationUrl = options.service_account_impersonation_url;
        this.serviceAccountImpersonationLifetime = (_b = (_a = options.service_account_impersonation) === null || _a === void 0 ? void 0 : _a.token_lifetime_seconds) !== null && _b !== void 0 ? _b : DEFAULT_TOKEN_LIFESPAN;
        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== "number") {
          this.eagerRefreshThresholdMillis = exports2.EXPIRATION_TIME_OFFSET;
        } else {
          this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);
        this.projectId = null;
        this.projectNumber = this.getProjectNumber(this.audience);
      }
      getServiceAccountEmail() {
        var _a;
        if (this.serviceAccountImpersonationUrl) {
          const re = /serviceAccounts\/(?<email>[^:]+):generateAccessToken$/;
          const result = re.exec(this.serviceAccountImpersonationUrl);
          return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;
        }
        return null;
      }
      setCredentials(credentials) {
        super.setCredentials(credentials);
        this.cachedAccessToken = credentials;
      }
      async getAccessToken() {
        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedAccessToken.access_token,
          res: this.cachedAccessToken.res
        };
      }
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = {
          Authorization: `Bearer ${accessTokenResponse.token}`
        };
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      async getProjectId() {
        const projectNumber = this.projectNumber || this.workforcePoolUserProject;
        if (this.projectId) {
          return this.projectId;
        } else if (projectNumber) {
          const headers = await this.getRequestHeaders();
          const response = await this.transporter.request({
            headers,
            url: `${exports2.CLOUD_RESOURCE_MANAGER}${projectNumber}`,
            responseType: "json"
          });
          this.projectId = response.data.projectId;
          return this.projectId;
        }
        return null;
      }
      async requestAsync(opts, retry = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = opts.headers || {};
          if (requestHeaders && requestHeaders["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = requestHeaders["x-goog-user-project"];
          }
          if (requestHeaders && requestHeaders.Authorization) {
            opts.headers.Authorization = requestHeaders.Authorization;
          }
          response = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return response;
      }
      async refreshAccessTokenAsync() {
        const subjectToken = await this.retrieveSubjectToken();
        const stsCredentialsOptions = {
          grantType: STS_GRANT_TYPE,
          audience: this.audience,
          requestedTokenType: STS_REQUEST_TOKEN_TYPE,
          subjectToken,
          subjectTokenType: this.subjectTokenType,
          scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()
        };
        const additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? { userProject: this.workforcePoolUserProject } : void 0;
        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, void 0, additionalOptions);
        if (this.serviceAccountImpersonationUrl) {
          this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);
        } else if (stsResponse.expires_in) {
          this.cachedAccessToken = {
            access_token: stsResponse.access_token,
            expiry_date: new Date().getTime() + stsResponse.expires_in * 1e3,
            res: stsResponse.res
          };
        } else {
          this.cachedAccessToken = {
            access_token: stsResponse.access_token,
            res: stsResponse.res
          };
        }
        this.credentials = {};
        Object.assign(this.credentials, this.cachedAccessToken);
        delete this.credentials.res;
        this.emit("tokens", {
          refresh_token: null,
          expiry_date: this.cachedAccessToken.expiry_date,
          access_token: this.cachedAccessToken.access_token,
          token_type: "Bearer",
          id_token: null
        });
        return this.cachedAccessToken;
      }
      getProjectNumber(audience) {
        const match = audience.match(/\/projects\/([^/]+)/);
        if (!match) {
          return null;
        }
        return match[1];
      }
      async getImpersonatedAccessToken(token) {
        const opts = {
          url: this.serviceAccountImpersonationUrl,
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
          },
          data: {
            scope: this.getScopesArray(),
            lifetime: this.serviceAccountImpersonationLifetime + "s"
          },
          responseType: "json"
        };
        const response = await this.transporter.request(opts);
        const successResponse = response.data;
        return {
          access_token: successResponse.accessToken,
          expiry_date: new Date(successResponse.expireTime).getTime(),
          res: response
        };
      }
      isExpired(accessToken) {
        const now = new Date().getTime();
        return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
      getScopesArray() {
        if (typeof this.scopes === "string") {
          return [this.scopes];
        } else if (typeof this.scopes === "undefined") {
          return [DEFAULT_OAUTH_SCOPE];
        } else {
          return this.scopes;
        }
      }
      validateGoogleAPIsUrl(apiName, url) {
        let parsedUrl;
        try {
          parsedUrl = new URL(url);
        } catch (e) {
          return false;
        }
        const urlDomain = parsedUrl.hostname;
        if (parsedUrl.protocol !== "https:") {
          return false;
        }
        const googleAPIsDomainPatterns = [
          new RegExp("^" + VARIABLE_PORTION_PATTERN + "\\." + apiName + GOOGLE_APIS_DOMAIN_PATTERN),
          new RegExp("^" + apiName + GOOGLE_APIS_DOMAIN_PATTERN),
          new RegExp("^" + apiName + "\\." + VARIABLE_PORTION_PATTERN + GOOGLE_APIS_DOMAIN_PATTERN),
          new RegExp("^" + VARIABLE_PORTION_PATTERN + "\\-" + apiName + GOOGLE_APIS_DOMAIN_PATTERN),
          new RegExp("^" + apiName + "\\-" + VARIABLE_PORTION_PATTERN + "\\.p" + GOOGLE_APIS_DOMAIN_PATTERN)
        ];
        for (const googleAPIsDomainPattern of googleAPIsDomainPatterns) {
          if (urlDomain.match(googleAPIsDomainPattern)) {
            return true;
          }
        }
        return false;
      }
    };
    exports2.BaseExternalAccountClient = BaseExternalAccountClient;
  }
});

// node_modules/google-auth-library/build/src/auth/identitypoolclient.js
var require_identitypoolclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/identitypoolclient.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IdentityPoolClient = void 0;
    var fs = require_fs();
    var util_1 = require_util();
    var baseexternalclient_1 = require_baseexternalclient();
    var readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : () => {
    });
    var realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : () => {
    });
    var lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : () => {
    });
    var IdentityPoolClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      constructor(options, additionalOptions) {
        var _a2, _b2;
        super(options, additionalOptions);
        this.file = options.credential_source.file;
        this.url = options.credential_source.url;
        this.headers = options.credential_source.headers;
        if (!this.file && !this.url) {
          throw new Error('No valid Identity Pool "credential_source" provided');
        }
        this.formatType = ((_a2 = options.credential_source.format) === null || _a2 === void 0 ? void 0 : _a2.type) || "text";
        this.formatSubjectTokenFieldName = (_b2 = options.credential_source.format) === null || _b2 === void 0 ? void 0 : _b2.subject_token_field_name;
        if (this.formatType !== "json" && this.formatType !== "text") {
          throw new Error(`Invalid credential_source format "${this.formatType}"`);
        }
        if (this.formatType === "json" && !this.formatSubjectTokenFieldName) {
          throw new Error("Missing subject_token_field_name for JSON credential_source format");
        }
      }
      async retrieveSubjectToken() {
        if (this.file) {
          return await this.getTokenFromFile(this.file, this.formatType, this.formatSubjectTokenFieldName);
        }
        return await this.getTokenFromUrl(this.url, this.formatType, this.formatSubjectTokenFieldName, this.headers);
      }
      async getTokenFromFile(filePath, formatType, formatSubjectTokenFieldName) {
        try {
          filePath = await realpath(filePath);
          if (!(await lstat(filePath)).isFile()) {
            throw new Error();
          }
        } catch (err) {
          if (err instanceof Error) {
            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;
          }
          throw err;
        }
        let subjectToken;
        const rawText = await readFile(filePath, { encoding: "utf8" });
        if (formatType === "text") {
          subjectToken = rawText;
        } else if (formatType === "json" && formatSubjectTokenFieldName) {
          const json = JSON.parse(rawText);
          subjectToken = json[formatSubjectTokenFieldName];
        }
        if (!subjectToken) {
          throw new Error("Unable to parse the subject_token from the credential_source file");
        }
        return subjectToken;
      }
      async getTokenFromUrl(url, formatType, formatSubjectTokenFieldName, headers) {
        const opts = {
          url,
          method: "GET",
          headers,
          responseType: formatType
        };
        let subjectToken;
        if (formatType === "text") {
          const response = await this.transporter.request(opts);
          subjectToken = response.data;
        } else if (formatType === "json" && formatSubjectTokenFieldName) {
          const response = await this.transporter.request(opts);
          subjectToken = response.data[formatSubjectTokenFieldName];
        }
        if (!subjectToken) {
          throw new Error("Unable to parse the subject_token from the credential_source URL");
        }
        return subjectToken;
      }
    };
    exports2.IdentityPoolClient = IdentityPoolClient;
  }
});

// node_modules/google-auth-library/build/src/auth/awsrequestsigner.js
var require_awsrequestsigner = __commonJS({
  "node_modules/google-auth-library/build/src/auth/awsrequestsigner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsRequestSigner = void 0;
    var crypto_1 = require_crypto4();
    var AWS_ALGORITHM = "AWS4-HMAC-SHA256";
    var AWS_REQUEST_TYPE = "aws4_request";
    var AwsRequestSigner = class {
      constructor(getCredentials, region) {
        this.getCredentials = getCredentials;
        this.region = region;
        this.crypto = (0, crypto_1.createCrypto)();
      }
      async getRequestOptions(amzOptions) {
        if (!amzOptions.url) {
          throw new Error('"url" is required in "amzOptions"');
        }
        const requestPayloadData = typeof amzOptions.data === "object" ? JSON.stringify(amzOptions.data) : amzOptions.data;
        const url = amzOptions.url;
        const method = amzOptions.method || "GET";
        const requestPayload = amzOptions.body || requestPayloadData;
        const additionalAmzHeaders = amzOptions.headers;
        const awsSecurityCredentials = await this.getCredentials();
        const uri = new URL(url);
        const headerMap = await generateAuthenticationHeaderMap({
          crypto: this.crypto,
          host: uri.host,
          canonicalUri: uri.pathname,
          canonicalQuerystring: uri.search.substr(1),
          method,
          region: this.region,
          securityCredentials: awsSecurityCredentials,
          requestPayload,
          additionalAmzHeaders
        });
        const headers = Object.assign(
          headerMap.amzDate ? { "x-amz-date": headerMap.amzDate } : {},
          {
            Authorization: headerMap.authorizationHeader,
            host: uri.host
          },
          additionalAmzHeaders || {}
        );
        if (awsSecurityCredentials.token) {
          Object.assign(headers, {
            "x-amz-security-token": awsSecurityCredentials.token
          });
        }
        const awsSignedReq = {
          url,
          method,
          headers
        };
        if (typeof requestPayload !== "undefined") {
          awsSignedReq.body = requestPayload;
        }
        return awsSignedReq;
      }
    };
    exports2.AwsRequestSigner = AwsRequestSigner;
    async function sign(crypto2, key, msg) {
      return await crypto2.signWithHmacSha256(key, msg);
    }
    async function getSigningKey(crypto2, key, dateStamp, region, serviceName) {
      const kDate = await sign(crypto2, `AWS4${key}`, dateStamp);
      const kRegion = await sign(crypto2, kDate, region);
      const kService = await sign(crypto2, kRegion, serviceName);
      const kSigning = await sign(crypto2, kService, "aws4_request");
      return kSigning;
    }
    async function generateAuthenticationHeaderMap(options) {
      const additionalAmzHeaders = options.additionalAmzHeaders || {};
      const requestPayload = options.requestPayload || "";
      const serviceName = options.host.split(".")[0];
      const now = new Date();
      const amzDate = now.toISOString().replace(/[-:]/g, "").replace(/\.[0-9]+/, "");
      const dateStamp = now.toISOString().replace(/[-]/g, "").replace(/T.*/, "");
      const reformattedAdditionalAmzHeaders = {};
      Object.keys(additionalAmzHeaders).forEach((key) => {
        reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];
      });
      if (options.securityCredentials.token) {
        reformattedAdditionalAmzHeaders["x-amz-security-token"] = options.securityCredentials.token;
      }
      const amzHeaders = Object.assign(
        {
          host: options.host
        },
        reformattedAdditionalAmzHeaders.date ? {} : { "x-amz-date": amzDate },
        reformattedAdditionalAmzHeaders
      );
      let canonicalHeaders = "";
      const signedHeadersList = Object.keys(amzHeaders).sort();
      signedHeadersList.forEach((key) => {
        canonicalHeaders += `${key}:${amzHeaders[key]}
`;
      });
      const signedHeaders = signedHeadersList.join(";");
      const payloadHash = await options.crypto.sha256DigestHex(requestPayload);
      const canonicalRequest = `${options.method}
${options.canonicalUri}
${options.canonicalQuerystring}
${canonicalHeaders}
${signedHeaders}
${payloadHash}`;
      const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;
      const stringToSign = `${AWS_ALGORITHM}
${amzDate}
${credentialScope}
` + await options.crypto.sha256DigestHex(canonicalRequest);
      const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);
      const signature = await sign(options.crypto, signingKey, stringToSign);
      const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/${credentialScope}, SignedHeaders=${signedHeaders}, Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;
      return {
        amzDate: reformattedAdditionalAmzHeaders.date ? void 0 : amzDate,
        authorizationHeader,
        canonicalQuerystring: options.canonicalQuerystring
      };
    }
  }
});

// node_modules/google-auth-library/build/src/auth/awsclient.js
var require_awsclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/awsclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsClient = void 0;
    var awsrequestsigner_1 = require_awsrequestsigner();
    var baseexternalclient_1 = require_baseexternalclient();
    var AwsClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      constructor(options, additionalOptions) {
        var _a;
        super(options, additionalOptions);
        this.environmentId = options.credential_source.environment_id;
        this.regionUrl = options.credential_source.region_url;
        this.securityCredentialsUrl = options.credential_source.url;
        this.regionalCredVerificationUrl = options.credential_source.regional_cred_verification_url;
        this.imdsV2SessionTokenUrl = options.credential_source.imdsv2_session_token_url;
        const match = (_a = this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\d+)$/);
        if (!match || !this.regionalCredVerificationUrl) {
          throw new Error('No valid AWS "credential_source" provided');
        } else if (parseInt(match[2], 10) !== 1) {
          throw new Error(`aws version "${match[2]}" is not supported in the current build.`);
        }
        this.awsRequestSigner = null;
        this.region = "";
      }
      async retrieveSubjectToken() {
        if (!this.awsRequestSigner) {
          const metadataHeaders = {};
          if (this.imdsV2SessionTokenUrl) {
            metadataHeaders["x-aws-ec2-metadata-token"] = await this.getImdsV2SessionToken();
          }
          this.region = await this.getAwsRegion(metadataHeaders);
          this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {
            if (process.env["AWS_ACCESS_KEY_ID"] && process.env["AWS_SECRET_ACCESS_KEY"]) {
              return {
                accessKeyId: process.env["AWS_ACCESS_KEY_ID"],
                secretAccessKey: process.env["AWS_SECRET_ACCESS_KEY"],
                token: process.env["AWS_SESSION_TOKEN"]
              };
            }
            const roleName = await this.getAwsRoleName(metadataHeaders);
            const awsCreds = await this.getAwsSecurityCredentials(roleName, metadataHeaders);
            return {
              accessKeyId: awsCreds.AccessKeyId,
              secretAccessKey: awsCreds.SecretAccessKey,
              token: awsCreds.Token
            };
          }, this.region);
        }
        const options = await this.awsRequestSigner.getRequestOptions({
          url: this.regionalCredVerificationUrl.replace("{region}", this.region),
          method: "POST"
        });
        const reformattedHeader = [];
        const extendedHeaders = Object.assign({
          "x-goog-cloud-target-resource": this.audience
        }, options.headers);
        for (const key in extendedHeaders) {
          reformattedHeader.push({
            key,
            value: extendedHeaders[key]
          });
        }
        return encodeURIComponent(JSON.stringify({
          url: options.url,
          method: options.method,
          headers: reformattedHeader
        }));
      }
      async getImdsV2SessionToken() {
        const opts = {
          url: this.imdsV2SessionTokenUrl,
          method: "PUT",
          responseType: "text",
          headers: { "x-aws-ec2-metadata-token-ttl-seconds": "300" }
        };
        const response = await this.transporter.request(opts);
        return response.data;
      }
      async getAwsRegion(headers) {
        if (process.env["AWS_REGION"] || process.env["AWS_DEFAULT_REGION"]) {
          return process.env["AWS_REGION"] || process.env["AWS_DEFAULT_REGION"];
        }
        if (!this.regionUrl) {
          throw new Error('Unable to determine AWS region due to missing "options.credential_source.region_url"');
        }
        const opts = {
          url: this.regionUrl,
          method: "GET",
          responseType: "text",
          headers
        };
        const response = await this.transporter.request(opts);
        return response.data.substr(0, response.data.length - 1);
      }
      async getAwsRoleName(headers) {
        if (!this.securityCredentialsUrl) {
          throw new Error('Unable to determine AWS role name due to missing "options.credential_source.url"');
        }
        const opts = {
          url: this.securityCredentialsUrl,
          method: "GET",
          responseType: "text",
          headers
        };
        const response = await this.transporter.request(opts);
        return response.data;
      }
      async getAwsSecurityCredentials(roleName, headers) {
        const response = await this.transporter.request({
          url: `${this.securityCredentialsUrl}/${roleName}`,
          responseType: "json",
          headers
        });
        return response.data;
      }
    };
    exports2.AwsClient = AwsClient;
  }
});

// node_modules/google-auth-library/build/src/auth/executable-response.js
var require_executable_response = __commonJS({
  "node_modules/google-auth-library/build/src/auth/executable-response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidSubjectTokenError = exports2.InvalidMessageFieldError = exports2.InvalidCodeFieldError = exports2.InvalidTokenTypeFieldError = exports2.InvalidExpirationTimeFieldError = exports2.InvalidSuccessFieldError = exports2.InvalidVersionFieldError = exports2.ExecutableResponseError = exports2.ExecutableResponse = void 0;
    var SAML_SUBJECT_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:saml2";
    var OIDC_SUBJECT_TOKEN_TYPE1 = "urn:ietf:params:oauth:token-type:id_token";
    var OIDC_SUBJECT_TOKEN_TYPE2 = "urn:ietf:params:oauth:token-type:jwt";
    var ExecutableResponse = class {
      constructor(responseJson) {
        if (!responseJson.version) {
          throw new InvalidVersionFieldError("Executable response must contain a 'version' field.");
        }
        if (responseJson.success === void 0) {
          throw new InvalidSuccessFieldError("Executable response must contain a 'success' field.");
        }
        this.version = responseJson.version;
        this.success = responseJson.success;
        if (this.success) {
          this.expirationTime = responseJson.expiration_time;
          this.tokenType = responseJson.token_type;
          if (this.tokenType !== SAML_SUBJECT_TOKEN_TYPE && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE1 && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE2) {
            throw new InvalidTokenTypeFieldError(`Executable response must contain a 'token_type' field when successful and it must be one of ${OIDC_SUBJECT_TOKEN_TYPE1}, ${OIDC_SUBJECT_TOKEN_TYPE2}, or ${SAML_SUBJECT_TOKEN_TYPE}.`);
          }
          if (this.tokenType === SAML_SUBJECT_TOKEN_TYPE) {
            if (!responseJson.saml_response) {
              throw new InvalidSubjectTokenError(`Executable response must contain a 'saml_response' field when token_type=${SAML_SUBJECT_TOKEN_TYPE}.`);
            }
            this.subjectToken = responseJson.saml_response;
          } else {
            if (!responseJson.id_token) {
              throw new InvalidSubjectTokenError(`Executable response must contain a 'id_token' field when token_type=${OIDC_SUBJECT_TOKEN_TYPE1} or ${OIDC_SUBJECT_TOKEN_TYPE2}.`);
            }
            this.subjectToken = responseJson.id_token;
          }
        } else {
          if (!responseJson.code) {
            throw new InvalidCodeFieldError("Executable response must contain a 'code' field when unsuccessful.");
          }
          if (!responseJson.message) {
            throw new InvalidMessageFieldError("Executable response must contain a 'message' field when unsuccessful.");
          }
          this.errorCode = responseJson.code;
          this.errorMessage = responseJson.message;
        }
      }
      isValid() {
        return !this.isExpired() && this.success;
      }
      isExpired() {
        return this.expirationTime !== void 0 && this.expirationTime < Math.round(Date.now() / 1e3);
      }
    };
    exports2.ExecutableResponse = ExecutableResponse;
    var ExecutableResponseError = class extends Error {
      constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports2.ExecutableResponseError = ExecutableResponseError;
    var InvalidVersionFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidVersionFieldError = InvalidVersionFieldError;
    var InvalidSuccessFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidSuccessFieldError = InvalidSuccessFieldError;
    var InvalidExpirationTimeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidExpirationTimeFieldError = InvalidExpirationTimeFieldError;
    var InvalidTokenTypeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidTokenTypeFieldError = InvalidTokenTypeFieldError;
    var InvalidCodeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidCodeFieldError = InvalidCodeFieldError;
    var InvalidMessageFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidMessageFieldError = InvalidMessageFieldError;
    var InvalidSubjectTokenError = class extends ExecutableResponseError {
    };
    exports2.InvalidSubjectTokenError = InvalidSubjectTokenError;
  }
});

// node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js
var require_pluggable_auth_handler = __commonJS({
  "node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PluggableAuthHandler = void 0;
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    var executable_response_1 = require_executable_response();
    var childProcess = require_child_process();
    var fs = require_fs();
    var PluggableAuthHandler = class {
      constructor(options) {
        if (!options.command) {
          throw new Error("No command provided.");
        }
        this.commandComponents = PluggableAuthHandler.parseCommand(options.command);
        this.timeoutMillis = options.timeoutMillis;
        if (!this.timeoutMillis) {
          throw new Error("No timeoutMillis provided.");
        }
        this.outputFile = options.outputFile;
      }
      retrieveResponseFromExecutable(envMap) {
        return new Promise((resolve, reject) => {
          const child = childProcess.spawn(this.commandComponents[0], this.commandComponents.slice(1), {
            env: { ...process.env, ...Object.fromEntries(envMap) }
          });
          let output = "";
          child.stdout.on("data", (data) => {
            output += data;
          });
          child.stderr.on("data", (err) => {
            output += err;
          });
          const timeout = setTimeout(() => {
            child.removeAllListeners();
            child.kill();
            return reject(new Error("The executable failed to finish within the timeout specified."));
          }, this.timeoutMillis);
          child.on("close", (code) => {
            clearTimeout(timeout);
            if (code === 0) {
              try {
                const responseJson = JSON.parse(output);
                const response = new executable_response_1.ExecutableResponse(responseJson);
                return resolve(response);
              } catch (error) {
                if (error instanceof executable_response_1.ExecutableResponseError) {
                  return reject(error);
                }
                return reject(new executable_response_1.ExecutableResponseError(`The executable returned an invalid response: ${output}`));
              }
            } else {
              return reject(new pluggable_auth_client_1.ExecutableError(output, code.toString()));
            }
          });
        });
      }
      async retrieveCachedResponse() {
        if (!this.outputFile || this.outputFile.length === 0) {
          return void 0;
        }
        let filePath;
        try {
          filePath = await fs.promises.realpath(this.outputFile);
        } catch (_a) {
          return void 0;
        }
        if (!(await fs.promises.lstat(filePath)).isFile()) {
          return void 0;
        }
        const responseString = await fs.promises.readFile(filePath, {
          encoding: "utf8"
        });
        if (responseString === "") {
          return void 0;
        }
        try {
          const responseJson = JSON.parse(responseString);
          const response = new executable_response_1.ExecutableResponse(responseJson);
          if (response.isValid()) {
            return new executable_response_1.ExecutableResponse(responseJson);
          }
          return void 0;
        } catch (error) {
          if (error instanceof executable_response_1.ExecutableResponseError) {
            throw error;
          }
          throw new executable_response_1.ExecutableResponseError(`The output file contained an invalid response: ${responseString}`);
        }
      }
      static parseCommand(command) {
        const components = command.match(/(?:[^\s"]+|"[^"]*")+/g);
        if (!components) {
          throw new Error(`Provided command: "${command}" could not be parsed.`);
        }
        for (let i = 0; i < components.length; i++) {
          if (components[i][0] === '"' && components[i].slice(-1) === '"') {
            components[i] = components[i].slice(1, -1);
          }
        }
        return components;
      }
    };
    exports2.PluggableAuthHandler = PluggableAuthHandler;
  }
});

// node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js
var require_pluggable_auth_client = __commonJS({
  "node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PluggableAuthClient = exports2.ExecutableError = void 0;
    var baseexternalclient_1 = require_baseexternalclient();
    var executable_response_1 = require_executable_response();
    var pluggable_auth_handler_1 = require_pluggable_auth_handler();
    var ExecutableError = class extends Error {
      constructor(message, code) {
        super(`The executable failed with exit code: ${code} and error message: ${message}.`);
        this.code = code;
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports2.ExecutableError = ExecutableError;
    var DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1e3;
    var MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1e3;
    var MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1e3;
    var GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = "GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES";
    var MAXIMUM_EXECUTABLE_VERSION = 1;
    var PluggableAuthClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      constructor(options, additionalOptions) {
        super(options, additionalOptions);
        if (!options.credential_source.executable) {
          throw new Error('No valid Pluggable Auth "credential_source" provided.');
        }
        this.command = options.credential_source.executable.command;
        if (!this.command) {
          throw new Error('No valid Pluggable Auth "credential_source" provided.');
        }
        if (options.credential_source.executable.timeout_millis === void 0) {
          this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;
        } else {
          this.timeoutMillis = options.credential_source.executable.timeout_millis;
          if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS || this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {
            throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);
          }
        }
        this.outputFile = options.credential_source.executable.output_file;
        this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({
          command: this.command,
          timeoutMillis: this.timeoutMillis,
          outputFile: this.outputFile
        });
      }
      async retrieveSubjectToken() {
        if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== "1") {
          throw new Error("Pluggable Auth executables need to be explicitly allowed to run by setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment Variable to 1.");
        }
        let executableResponse = void 0;
        if (this.outputFile) {
          executableResponse = await this.handler.retrieveCachedResponse();
        }
        if (!executableResponse) {
          const envMap = /* @__PURE__ */ new Map();
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE", this.audience);
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE", this.subjectTokenType);
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE", "0");
          if (this.outputFile) {
            envMap.set("GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE", this.outputFile);
          }
          const serviceAccountEmail = this.getServiceAccountEmail();
          if (serviceAccountEmail) {
            envMap.set("GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL", serviceAccountEmail);
          }
          executableResponse = await this.handler.retrieveResponseFromExecutable(envMap);
        }
        if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {
          throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);
        }
        if (!executableResponse.success) {
          throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);
        }
        if (this.outputFile) {
          if (!executableResponse.expirationTime) {
            throw new executable_response_1.InvalidExpirationTimeFieldError("The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.");
          }
        }
        if (executableResponse.isExpired()) {
          throw new Error("Executable response is expired.");
        }
        return executableResponse.subjectToken;
      }
    };
    exports2.PluggableAuthClient = PluggableAuthClient;
  }
});

// node_modules/google-auth-library/build/src/auth/externalclient.js
var require_externalclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/externalclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExternalAccountClient = void 0;
    var baseexternalclient_1 = require_baseexternalclient();
    var identitypoolclient_1 = require_identitypoolclient();
    var awsclient_1 = require_awsclient();
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    var ExternalAccountClient = class {
      constructor() {
        throw new Error("ExternalAccountClients should be initialized via: ExternalAccountClient.fromJSON(), directly via explicit constructors, eg. new AwsClient(options), new IdentityPoolClient(options), newPluggableAuthClientOptions, or via new GoogleAuth(options).getClient()");
      }
      static fromJSON(options, additionalOptions) {
        var _a, _b;
        if (options && options.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          if ((_a = options.credential_source) === null || _a === void 0 ? void 0 : _a.environment_id) {
            return new awsclient_1.AwsClient(options, additionalOptions);
          } else if ((_b = options.credential_source) === null || _b === void 0 ? void 0 : _b.executable) {
            return new pluggable_auth_client_1.PluggableAuthClient(options, additionalOptions);
          } else {
            return new identitypoolclient_1.IdentityPoolClient(options, additionalOptions);
          }
        } else {
          return null;
        }
      }
    };
    exports2.ExternalAccountClient = ExternalAccountClient;
  }
});

// node_modules/google-auth-library/build/src/auth/googleauth.js
var require_googleauth = __commonJS({
  "node_modules/google-auth-library/build/src/auth/googleauth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleAuth = exports2.CLOUD_SDK_CLIENT_ID = void 0;
    var child_process_1 = require_child_process();
    var fs = require_fs();
    var gcpMetadata = require_src4();
    var os = require_os();
    var path = require_path();
    var crypto_1 = require_crypto4();
    var transporters_1 = require_transporters();
    var computeclient_1 = require_computeclient();
    var idtokenclient_1 = require_idtokenclient();
    var envDetect_1 = require_envDetect();
    var jwtclient_1 = require_jwtclient();
    var refreshclient_1 = require_refreshclient();
    var impersonated_1 = require_impersonated();
    var externalclient_1 = require_externalclient();
    var baseexternalclient_1 = require_baseexternalclient();
    exports2.CLOUD_SDK_CLIENT_ID = "764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com";
    var GoogleAuthExceptionMessages = {
      NO_PROJECT_ID_FOUND: "Unable to detect a Project Id in the current environment. \nTo learn more about authentication and Google APIs, visit: \nhttps://cloud.google.com/docs/authentication/getting-started"
    };
    var GoogleAuth = class {
      constructor(opts) {
        this.checkIsGCE = void 0;
        this.jsonContent = null;
        this.cachedCredential = null;
        opts = opts || {};
        this._cachedProjectId = opts.projectId || null;
        this.cachedCredential = opts.authClient || null;
        this.keyFilename = opts.keyFilename || opts.keyFile;
        this.scopes = opts.scopes;
        this.jsonContent = opts.credentials || null;
        this.clientOptions = opts.clientOptions;
      }
      get isGCE() {
        return this.checkIsGCE;
      }
      setGapicJWTValues(client) {
        client.defaultServicePath = this.defaultServicePath;
        client.useJWTAccessWithScope = this.useJWTAccessWithScope;
        client.defaultScopes = this.defaultScopes;
      }
      getProjectId(callback) {
        if (callback) {
          this.getProjectIdAsync().then((r) => callback(null, r), callback);
        } else {
          return this.getProjectIdAsync();
        }
      }
      async getProjectIdOptional() {
        try {
          return await this.getProjectId();
        } catch (e) {
          if (e instanceof Error && e.message === GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {
            return null;
          } else {
            throw e;
          }
        }
      }
      async findAndCacheProjectId() {
        let projectId = null;
        projectId || (projectId = await this.getProductionProjectId());
        projectId || (projectId = await this.getFileProjectId());
        projectId || (projectId = await this.getDefaultServiceProjectId());
        projectId || (projectId = await this.getGCEProjectId());
        projectId || (projectId = await this.getExternalAccountClientProjectId());
        if (projectId) {
          this._cachedProjectId = projectId;
          return projectId;
        } else {
          throw new Error(GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);
        }
      }
      async getProjectIdAsync() {
        if (this._cachedProjectId) {
          return this._cachedProjectId;
        }
        if (!this._findProjectIdPromise) {
          this._findProjectIdPromise = this.findAndCacheProjectId();
        }
        return this._findProjectIdPromise;
      }
      getAnyScopes() {
        return this.scopes || this.defaultScopes;
      }
      getApplicationDefault(optionsOrCallback = {}, callback) {
        let options;
        if (typeof optionsOrCallback === "function") {
          callback = optionsOrCallback;
        } else {
          options = optionsOrCallback;
        }
        if (callback) {
          this.getApplicationDefaultAsync(options).then((r) => callback(null, r.credential, r.projectId), callback);
        } else {
          return this.getApplicationDefaultAsync(options);
        }
      }
      async getApplicationDefaultAsync(options = {}) {
        if (this.cachedCredential) {
          return {
            credential: this.cachedCredential,
            projectId: await this.getProjectIdOptional()
          };
        }
        let credential;
        let projectId;
        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);
        if (credential) {
          if (credential instanceof jwtclient_1.JWT) {
            credential.scopes = this.scopes;
          } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {
            credential.scopes = this.getAnyScopes();
          }
          this.cachedCredential = credential;
          projectId = await this.getProjectIdOptional();
          return { credential, projectId };
        }
        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);
        if (credential) {
          if (credential instanceof jwtclient_1.JWT) {
            credential.scopes = this.scopes;
          } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {
            credential.scopes = this.getAnyScopes();
          }
          this.cachedCredential = credential;
          projectId = await this.getProjectIdOptional();
          return { credential, projectId };
        }
        let isGCE;
        try {
          isGCE = await this._checkIsGCE();
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Unexpected error determining execution environment: ${e.message}`;
          }
          throw e;
        }
        if (!isGCE) {
          throw new Error("Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.");
        }
        options.scopes = this.getAnyScopes();
        this.cachedCredential = new computeclient_1.Compute(options);
        projectId = await this.getProjectIdOptional();
        return { projectId, credential: this.cachedCredential };
      }
      async _checkIsGCE() {
        if (this.checkIsGCE === void 0) {
          this.checkIsGCE = await gcpMetadata.isAvailable();
        }
        return this.checkIsGCE;
      }
      async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {
        const credentialsPath = process.env["GOOGLE_APPLICATION_CREDENTIALS"] || process.env["google_application_credentials"];
        if (!credentialsPath || credentialsPath.length === 0) {
          return null;
        }
        try {
          return this._getApplicationCredentialsFromFilePath(credentialsPath, options);
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;
          }
          throw e;
        }
      }
      async _tryGetApplicationCredentialsFromWellKnownFile(options) {
        let location = null;
        if (this._isWindows()) {
          location = process.env["APPDATA"];
        } else {
          const home = process.env["HOME"];
          if (home) {
            location = path.join(home, ".config");
          }
        }
        if (location) {
          location = path.join(location, "gcloud", "application_default_credentials.json");
          if (!fs.existsSync(location)) {
            location = null;
          }
        }
        if (!location) {
          return null;
        }
        const client = await this._getApplicationCredentialsFromFilePath(location, options);
        return client;
      }
      async _getApplicationCredentialsFromFilePath(filePath, options = {}) {
        if (!filePath || filePath.length === 0) {
          throw new Error("The file path is invalid.");
        }
        try {
          filePath = fs.realpathSync(filePath);
          if (!fs.lstatSync(filePath).isFile()) {
            throw new Error();
          }
        } catch (err) {
          if (err instanceof Error) {
            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;
          }
          throw err;
        }
        const readStream = fs.createReadStream(filePath);
        return this.fromStream(readStream, options);
      }
      fromImpersonatedJSON(json) {
        var _a, _b, _c, _d;
        if (!json) {
          throw new Error("Must pass in a JSON object containing an  impersonated refresh token");
        }
        if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {
          throw new Error(`The incoming JSON object does not have the "${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}" type`);
        }
        if (!json.source_credentials) {
          throw new Error("The incoming JSON object does not contain a source_credentials field");
        }
        if (!json.service_account_impersonation_url) {
          throw new Error("The incoming JSON object does not contain a service_account_impersonation_url field");
        }
        const sourceClient = new refreshclient_1.UserRefreshClient(json.source_credentials.client_id, json.source_credentials.client_secret, json.source_credentials.refresh_token);
        const targetPrincipal = (_b = (_a = /(?<target>[^/]+):generateAccessToken$/.exec(json.service_account_impersonation_url)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.target;
        if (!targetPrincipal) {
          throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);
        }
        const targetScopes = (_c = this.getAnyScopes()) !== null && _c !== void 0 ? _c : [];
        const client = new impersonated_1.Impersonated({
          delegates: (_d = json.delegates) !== null && _d !== void 0 ? _d : [],
          sourceClient,
          targetPrincipal,
          targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes]
        });
        return client;
      }
      fromJSON(json, options) {
        let client;
        if (!json) {
          throw new Error("Must pass in a JSON object containing the Google auth settings.");
        }
        options = options || {};
        if (json.type === "authorized_user") {
          client = new refreshclient_1.UserRefreshClient(options);
          client.fromJSON(json);
        } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {
          client = this.fromImpersonatedJSON(json);
        } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          client = externalclient_1.ExternalAccountClient.fromJSON(json, options);
          client.scopes = this.getAnyScopes();
        } else {
          options.scopes = this.scopes;
          client = new jwtclient_1.JWT(options);
          this.setGapicJWTValues(client);
          client.fromJSON(json);
        }
        return client;
      }
      _cacheClientFromJSON(json, options) {
        let client;
        options = options || {};
        if (json.type === "authorized_user") {
          client = new refreshclient_1.UserRefreshClient(options);
          client.fromJSON(json);
        } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {
          client = this.fromImpersonatedJSON(json);
        } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          client = externalclient_1.ExternalAccountClient.fromJSON(json, options);
          client.scopes = this.getAnyScopes();
        } else {
          options.scopes = this.scopes;
          client = new jwtclient_1.JWT(options);
          this.setGapicJWTValues(client);
          client.fromJSON(json);
        }
        this.jsonContent = json;
        this.cachedCredential = client;
        return client;
      }
      fromStream(inputStream, optionsOrCallback = {}, callback) {
        let options = {};
        if (typeof optionsOrCallback === "function") {
          callback = optionsOrCallback;
        } else {
          options = optionsOrCallback;
        }
        if (callback) {
          this.fromStreamAsync(inputStream, options).then((r) => callback(null, r), callback);
        } else {
          return this.fromStreamAsync(inputStream, options);
        }
      }
      fromStreamAsync(inputStream, options) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            throw new Error("Must pass in a stream containing the Google auth settings.");
          }
          let s = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s += chunk).on("end", () => {
            try {
              try {
                const data = JSON.parse(s);
                const r = this._cacheClientFromJSON(data, options);
                return resolve(r);
              } catch (err) {
                if (!this.keyFilename)
                  throw err;
                const client = new jwtclient_1.JWT({
                  ...this.clientOptions,
                  keyFile: this.keyFilename
                });
                this.cachedCredential = client;
                this.setGapicJWTValues(client);
                return resolve(client);
              }
            } catch (err) {
              return reject(err);
            }
          });
        });
      }
      fromAPIKey(apiKey, options) {
        options = options || {};
        const client = new jwtclient_1.JWT(options);
        client.fromAPIKey(apiKey);
        return client;
      }
      _isWindows() {
        const sys = os.platform();
        if (sys && sys.length >= 3) {
          if (sys.substring(0, 3).toLowerCase() === "win") {
            return true;
          }
        }
        return false;
      }
      async getDefaultServiceProjectId() {
        return new Promise((resolve) => {
          (0, child_process_1.exec)("gcloud config config-helper --format json", (err, stdout) => {
            if (!err && stdout) {
              try {
                const projectId = JSON.parse(stdout).configuration.properties.core.project;
                resolve(projectId);
                return;
              } catch (e) {
              }
            }
            resolve(null);
          });
        });
      }
      getProductionProjectId() {
        return process.env["GCLOUD_PROJECT"] || process.env["GOOGLE_CLOUD_PROJECT"] || process.env["gcloud_project"] || process.env["google_cloud_project"];
      }
      async getFileProjectId() {
        if (this.cachedCredential) {
          return this.cachedCredential.projectId;
        }
        if (this.keyFilename) {
          const creds = await this.getClient();
          if (creds && creds.projectId) {
            return creds.projectId;
          }
        }
        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();
        if (r) {
          return r.projectId;
        } else {
          return null;
        }
      }
      async getExternalAccountClientProjectId() {
        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          return null;
        }
        const creds = await this.getClient();
        return await creds.getProjectId();
      }
      async getGCEProjectId() {
        try {
          const r = await gcpMetadata.project("project-id");
          return r;
        } catch (e) {
          return null;
        }
      }
      getCredentials(callback) {
        if (callback) {
          this.getCredentialsAsync().then((r) => callback(null, r), callback);
        } else {
          return this.getCredentialsAsync();
        }
      }
      async getCredentialsAsync() {
        const client = await this.getClient();
        if (client instanceof baseexternalclient_1.BaseExternalAccountClient) {
          const serviceAccountEmail = client.getServiceAccountEmail();
          if (serviceAccountEmail) {
            return { client_email: serviceAccountEmail };
          }
        }
        if (this.jsonContent) {
          const credential = {
            client_email: this.jsonContent.client_email,
            private_key: this.jsonContent.private_key
          };
          return credential;
        }
        const isGCE = await this._checkIsGCE();
        if (!isGCE) {
          throw new Error("Unknown error.");
        }
        const data = await gcpMetadata.instance({
          property: "service-accounts/",
          params: { recursive: "true" }
        });
        if (!data || !data.default || !data.default.email) {
          throw new Error("Failure from metadata server.");
        }
        return { client_email: data.default.email };
      }
      async getClient() {
        if (!this.cachedCredential) {
          if (this.jsonContent) {
            this._cacheClientFromJSON(this.jsonContent, this.clientOptions);
          } else if (this.keyFilename) {
            const filePath = path.resolve(this.keyFilename);
            const stream = fs.createReadStream(filePath);
            await this.fromStreamAsync(stream, this.clientOptions);
          } else {
            await this.getApplicationDefaultAsync(this.clientOptions);
          }
        }
        return this.cachedCredential;
      }
      async getIdTokenClient(targetAudience) {
        const client = await this.getClient();
        if (!("fetchIdToken" in client)) {
          throw new Error("Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.");
        }
        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });
      }
      async getAccessToken() {
        const client = await this.getClient();
        return (await client.getAccessToken()).token;
      }
      async getRequestHeaders(url) {
        const client = await this.getClient();
        return client.getRequestHeaders(url);
      }
      async authorizeRequest(opts) {
        opts = opts || {};
        const url = opts.url || opts.uri;
        const client = await this.getClient();
        const headers = await client.getRequestHeaders(url);
        opts.headers = Object.assign(opts.headers || {}, headers);
        return opts;
      }
      async request(opts) {
        const client = await this.getClient();
        return client.request(opts);
      }
      getEnv() {
        return (0, envDetect_1.getEnv)();
      }
      async sign(data) {
        const client = await this.getClient();
        const crypto2 = (0, crypto_1.createCrypto)();
        if (client instanceof jwtclient_1.JWT && client.key) {
          const sign = await crypto2.sign(client.key, data);
          return sign;
        }
        const creds = await this.getCredentials();
        if (!creds.client_email) {
          throw new Error("Cannot sign data without `client_email`.");
        }
        return this.signBlob(crypto2, creds.client_email, data);
      }
      async signBlob(crypto2, emailOrUniqueId, data) {
        const url = `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${emailOrUniqueId}:signBlob`;
        const res = await this.request({
          method: "POST",
          url,
          data: {
            payload: crypto2.encodeBase64StringUtf8(data)
          }
        });
        return res.data.signedBlob;
      }
    };
    exports2.GoogleAuth = GoogleAuth;
    GoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;
  }
});

// node_modules/google-auth-library/build/src/auth/iam.js
var require_iam = __commonJS({
  "node_modules/google-auth-library/build/src/auth/iam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IAMAuth = void 0;
    var IAMAuth = class {
      constructor(selector, token) {
        this.selector = selector;
        this.token = token;
        this.selector = selector;
        this.token = token;
      }
      getRequestHeaders() {
        return {
          "x-goog-iam-authority-selector": this.selector,
          "x-goog-iam-authorization-token": this.token
        };
      }
    };
    exports2.IAMAuth = IAMAuth;
  }
});

// node_modules/google-auth-library/build/src/auth/downscopedclient.js
var require_downscopedclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/downscopedclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DownscopedClient = exports2.EXPIRATION_TIME_OFFSET = exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT = void 0;
    var stream = require_stream();
    var authclient_1 = require_authclient();
    var sts = require_stscredentials();
    var STS_GRANT_TYPE = "urn:ietf:params:oauth:grant-type:token-exchange";
    var STS_REQUEST_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var STS_SUBJECT_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var STS_ACCESS_TOKEN_URL = "https://sts.googleapis.com/v1/token";
    exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT = 10;
    exports2.EXPIRATION_TIME_OFFSET = 5 * 60 * 1e3;
    var DownscopedClient = class extends authclient_1.AuthClient {
      constructor(authClient, credentialAccessBoundary, additionalOptions, quotaProjectId) {
        super();
        this.authClient = authClient;
        this.credentialAccessBoundary = credentialAccessBoundary;
        if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length === 0) {
          throw new Error("At least one access boundary rule needs to be defined.");
        } else if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length > exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT) {
          throw new Error(`The provided access boundary has more than ${exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT} access boundary rules.`);
        }
        for (const rule of credentialAccessBoundary.accessBoundary.accessBoundaryRules) {
          if (rule.availablePermissions.length === 0) {
            throw new Error("At least one permission should be defined in access boundary rules.");
          }
        }
        this.stsCredential = new sts.StsCredentials(STS_ACCESS_TOKEN_URL);
        this.cachedDownscopedAccessToken = null;
        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== "number") {
          this.eagerRefreshThresholdMillis = exports2.EXPIRATION_TIME_OFFSET;
        } else {
          this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);
        this.quotaProjectId = quotaProjectId;
      }
      setCredentials(credentials) {
        if (!credentials.expiry_date) {
          throw new Error("The access token expiry_date field is missing in the provided credentials.");
        }
        super.setCredentials(credentials);
        this.cachedDownscopedAccessToken = credentials;
      }
      async getAccessToken() {
        if (!this.cachedDownscopedAccessToken || this.isExpired(this.cachedDownscopedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedDownscopedAccessToken.access_token,
          expirationTime: this.cachedDownscopedAccessToken.expiry_date,
          res: this.cachedDownscopedAccessToken.res
        };
      }
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = {
          Authorization: `Bearer ${accessTokenResponse.token}`
        };
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      async requestAsync(opts, retry = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = opts.headers || {};
          if (requestHeaders && requestHeaders["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = requestHeaders["x-goog-user-project"];
          }
          if (requestHeaders && requestHeaders.Authorization) {
            opts.headers.Authorization = requestHeaders.Authorization;
          }
          response = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return response;
      }
      async refreshAccessTokenAsync() {
        var _a;
        const subjectToken = (await this.authClient.getAccessToken()).token;
        const stsCredentialsOptions = {
          grantType: STS_GRANT_TYPE,
          requestedTokenType: STS_REQUEST_TOKEN_TYPE,
          subjectToken,
          subjectTokenType: STS_SUBJECT_TOKEN_TYPE
        };
        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, void 0, this.credentialAccessBoundary);
        const sourceCredExpireDate = ((_a = this.authClient.credentials) === null || _a === void 0 ? void 0 : _a.expiry_date) || null;
        const expiryDate = stsResponse.expires_in ? new Date().getTime() + stsResponse.expires_in * 1e3 : sourceCredExpireDate;
        this.cachedDownscopedAccessToken = {
          access_token: stsResponse.access_token,
          expiry_date: expiryDate,
          res: stsResponse.res
        };
        this.credentials = {};
        Object.assign(this.credentials, this.cachedDownscopedAccessToken);
        delete this.credentials.res;
        this.emit("tokens", {
          refresh_token: null,
          expiry_date: this.cachedDownscopedAccessToken.expiry_date,
          access_token: this.cachedDownscopedAccessToken.access_token,
          token_type: "Bearer",
          id_token: null
        });
        return this.cachedDownscopedAccessToken;
      }
      isExpired(downscopedAccessToken) {
        const now = new Date().getTime();
        return downscopedAccessToken.expiry_date ? now >= downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.DownscopedClient = DownscopedClient;
  }
});

// node_modules/google-auth-library/build/src/index.js
var require_src7 = __commonJS({
  "node_modules/google-auth-library/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleAuth = exports2.auth = exports2.DefaultTransporter = exports2.PluggableAuthClient = exports2.DownscopedClient = exports2.BaseExternalAccountClient = exports2.ExternalAccountClient = exports2.IdentityPoolClient = exports2.AwsClient = exports2.UserRefreshClient = exports2.LoginTicket = exports2.OAuth2Client = exports2.CodeChallengeMethod = exports2.Impersonated = exports2.JWT = exports2.JWTAccess = exports2.IdTokenClient = exports2.IAMAuth = exports2.GCPEnv = exports2.Compute = exports2.AuthClient = void 0;
    var googleauth_1 = require_googleauth();
    Object.defineProperty(exports2, "GoogleAuth", { enumerable: true, get: function() {
      return googleauth_1.GoogleAuth;
    } });
    var authclient_1 = require_authclient();
    Object.defineProperty(exports2, "AuthClient", { enumerable: true, get: function() {
      return authclient_1.AuthClient;
    } });
    var computeclient_1 = require_computeclient();
    Object.defineProperty(exports2, "Compute", { enumerable: true, get: function() {
      return computeclient_1.Compute;
    } });
    var envDetect_1 = require_envDetect();
    Object.defineProperty(exports2, "GCPEnv", { enumerable: true, get: function() {
      return envDetect_1.GCPEnv;
    } });
    var iam_1 = require_iam();
    Object.defineProperty(exports2, "IAMAuth", { enumerable: true, get: function() {
      return iam_1.IAMAuth;
    } });
    var idtokenclient_1 = require_idtokenclient();
    Object.defineProperty(exports2, "IdTokenClient", { enumerable: true, get: function() {
      return idtokenclient_1.IdTokenClient;
    } });
    var jwtaccess_1 = require_jwtaccess();
    Object.defineProperty(exports2, "JWTAccess", { enumerable: true, get: function() {
      return jwtaccess_1.JWTAccess;
    } });
    var jwtclient_1 = require_jwtclient();
    Object.defineProperty(exports2, "JWT", { enumerable: true, get: function() {
      return jwtclient_1.JWT;
    } });
    var impersonated_1 = require_impersonated();
    Object.defineProperty(exports2, "Impersonated", { enumerable: true, get: function() {
      return impersonated_1.Impersonated;
    } });
    var oauth2client_1 = require_oauth2client();
    Object.defineProperty(exports2, "CodeChallengeMethod", { enumerable: true, get: function() {
      return oauth2client_1.CodeChallengeMethod;
    } });
    Object.defineProperty(exports2, "OAuth2Client", { enumerable: true, get: function() {
      return oauth2client_1.OAuth2Client;
    } });
    var loginticket_1 = require_loginticket();
    Object.defineProperty(exports2, "LoginTicket", { enumerable: true, get: function() {
      return loginticket_1.LoginTicket;
    } });
    var refreshclient_1 = require_refreshclient();
    Object.defineProperty(exports2, "UserRefreshClient", { enumerable: true, get: function() {
      return refreshclient_1.UserRefreshClient;
    } });
    var awsclient_1 = require_awsclient();
    Object.defineProperty(exports2, "AwsClient", { enumerable: true, get: function() {
      return awsclient_1.AwsClient;
    } });
    var identitypoolclient_1 = require_identitypoolclient();
    Object.defineProperty(exports2, "IdentityPoolClient", { enumerable: true, get: function() {
      return identitypoolclient_1.IdentityPoolClient;
    } });
    var externalclient_1 = require_externalclient();
    Object.defineProperty(exports2, "ExternalAccountClient", { enumerable: true, get: function() {
      return externalclient_1.ExternalAccountClient;
    } });
    var baseexternalclient_1 = require_baseexternalclient();
    Object.defineProperty(exports2, "BaseExternalAccountClient", { enumerable: true, get: function() {
      return baseexternalclient_1.BaseExternalAccountClient;
    } });
    var downscopedclient_1 = require_downscopedclient();
    Object.defineProperty(exports2, "DownscopedClient", { enumerable: true, get: function() {
      return downscopedclient_1.DownscopedClient;
    } });
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    Object.defineProperty(exports2, "PluggableAuthClient", { enumerable: true, get: function() {
      return pluggable_auth_client_1.PluggableAuthClient;
    } });
    var transporters_1 = require_transporters();
    Object.defineProperty(exports2, "DefaultTransporter", { enumerable: true, get: function() {
      return transporters_1.DefaultTransporter;
    } });
    var auth = new googleauth_1.GoogleAuth();
    exports2.auth = auth;
  }
});

// node_modules/proto3-json-serializer/build/src/bytes.js
var require_bytes = __commonJS({
  "node_modules/proto3-json-serializer/build/src/bytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bytesFromProto3JSON = exports2.bytesToProto3JSON = void 0;
    function bytesToProto3JSON(obj) {
      if (Buffer.isBuffer(obj)) {
        return obj.toString("base64");
      } else {
        return Buffer.from(obj.buffer, 0, obj.byteLength).toString("base64");
      }
    }
    exports2.bytesToProto3JSON = bytesToProto3JSON;
    function bytesFromProto3JSON(json) {
      return Buffer.from(json, "base64");
    }
    exports2.bytesFromProto3JSON = bytesFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/enum.js
var require_enum2 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/enum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEnumValueToNumber = exports2.resolveEnumValueToString = void 0;
    function resolveEnumValueToString(enumType, enumValue) {
      if (typeof enumValue === "number") {
        const value = enumType.valuesById[enumValue];
        if (typeof value === "undefined") {
          return enumValue;
        }
        return value;
      }
      if (typeof enumValue === "string") {
        return enumValue;
      }
      throw new Error("resolveEnumValueToString: enum value must be a string or a number");
    }
    exports2.resolveEnumValueToString = resolveEnumValueToString;
    function resolveEnumValueToNumber(enumType, enumValue) {
      if (typeof enumValue === "number") {
        return enumValue;
      }
      if (typeof enumValue === "string") {
        const num = enumType.values[enumValue];
        if (typeof num === "undefined") {
          return enumValue;
        }
        return num;
      }
      throw new Error("resolveEnumValueToNumber: enum value must be a string or a number");
    }
    exports2.resolveEnumValueToNumber = resolveEnumValueToNumber;
  }
});

// node_modules/proto3-json-serializer/build/src/util.js
var require_util4 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assert = exports2.wrapperTypes = exports2.getFullyQualifiedTypeName = void 0;
    function getFullyQualifiedTypeName(type) {
      let fullyQualifiedTypeName = "";
      while (type.parent) {
        fullyQualifiedTypeName = `.${type.name}${fullyQualifiedTypeName}`;
        type = type.parent;
      }
      return fullyQualifiedTypeName;
    }
    exports2.getFullyQualifiedTypeName = getFullyQualifiedTypeName;
    exports2.wrapperTypes = /* @__PURE__ */ new Set([
      ".google.protobuf.DoubleValue",
      ".google.protobuf.FloatValue",
      ".google.protobuf.Int64Value",
      ".google.protobuf.UInt64Value",
      ".google.protobuf.Int32Value",
      ".google.protobuf.UInt32Value",
      ".google.protobuf.BoolValue",
      ".google.protobuf.StringValue",
      ".google.protobuf.BytesValue"
    ]);
    function assert(assertion, message) {
      if (!assertion) {
        throw new Error(message);
      }
    }
    exports2.assert = assert;
  }
});

// node_modules/proto3-json-serializer/build/src/value.js
var require_value = __commonJS({
  "node_modules/proto3-json-serializer/build/src/value.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufValueFromProto3JSON = exports2.googleProtobufListValueFromProto3JSON = exports2.googleProtobufStructFromProto3JSON = exports2.googleProtobufValueToProto3JSON = exports2.googleProtobufListValueToProto3JSON = exports2.googleProtobufStructToProto3JSON = void 0;
    var util_1 = require_util4();
    function googleProtobufStructToProto3JSON(obj) {
      const result = {};
      const fields = obj.fields;
      for (const [key, value] of Object.entries(fields)) {
        result[key] = googleProtobufValueToProto3JSON(value);
      }
      return result;
    }
    exports2.googleProtobufStructToProto3JSON = googleProtobufStructToProto3JSON;
    function googleProtobufListValueToProto3JSON(obj) {
      (0, util_1.assert)(Array.isArray(obj.values), "ListValue internal representation must contain array of values");
      return obj.values.map(googleProtobufValueToProto3JSON);
    }
    exports2.googleProtobufListValueToProto3JSON = googleProtobufListValueToProto3JSON;
    function googleProtobufValueToProto3JSON(obj) {
      if (Object.prototype.hasOwnProperty.call(obj, "nullValue")) {
        return null;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "numberValue") && typeof obj.numberValue === "number") {
        if (!Number.isFinite(obj.numberValue)) {
          return obj.numberValue.toString();
        }
        return obj.numberValue;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "stringValue") && typeof obj.stringValue === "string") {
        return obj.stringValue;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "boolValue") && typeof obj.boolValue === "boolean") {
        return obj.boolValue;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "structValue") && typeof obj.structValue === "object") {
        return googleProtobufStructToProto3JSON(obj.structValue);
      }
      if (Object.prototype.hasOwnProperty.call(obj, "listValue") && typeof obj === "object" && typeof obj.listValue === "object") {
        return googleProtobufListValueToProto3JSON(obj.listValue);
      }
      return null;
    }
    exports2.googleProtobufValueToProto3JSON = googleProtobufValueToProto3JSON;
    function googleProtobufStructFromProto3JSON(json) {
      const fields = {};
      for (const [key, value] of Object.entries(json)) {
        fields[key] = googleProtobufValueFromProto3JSON(value);
      }
      return { fields };
    }
    exports2.googleProtobufStructFromProto3JSON = googleProtobufStructFromProto3JSON;
    function googleProtobufListValueFromProto3JSON(json) {
      return {
        values: json.map((element) => googleProtobufValueFromProto3JSON(element))
      };
    }
    exports2.googleProtobufListValueFromProto3JSON = googleProtobufListValueFromProto3JSON;
    function googleProtobufValueFromProto3JSON(json) {
      if (json === null) {
        return { nullValue: "NULL_VALUE" };
      }
      if (typeof json === "number") {
        return { numberValue: json };
      }
      if (typeof json === "string") {
        return { stringValue: json };
      }
      if (typeof json === "boolean") {
        return { boolValue: json };
      }
      if (Array.isArray(json)) {
        return {
          listValue: googleProtobufListValueFromProto3JSON(json)
        };
      }
      if (typeof json === "object") {
        return {
          structValue: googleProtobufStructFromProto3JSON(json)
        };
      }
      throw new Error(`googleProtobufValueFromProto3JSON: incorrect parameter type: ${typeof json}`);
    }
    exports2.googleProtobufValueFromProto3JSON = googleProtobufValueFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/duration.js
var require_duration = __commonJS({
  "node_modules/proto3-json-serializer/build/src/duration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufDurationFromProto3JSON = exports2.googleProtobufDurationToProto3JSON = void 0;
    function googleProtobufDurationToProto3JSON(obj) {
      let durationSeconds = obj.seconds.toString();
      if (typeof obj.nanos === "number" && obj.nanos > 0) {
        const nanosStr = obj.nanos.toString().padStart(9, "0").replace(/^((?:\d\d\d)+?)(?:0*)$/, "$1");
        durationSeconds += "." + nanosStr;
      }
      durationSeconds += "s";
      return durationSeconds;
    }
    exports2.googleProtobufDurationToProto3JSON = googleProtobufDurationToProto3JSON;
    function googleProtobufDurationFromProto3JSON(json) {
      const match = json.match(/^(\d*)(?:\.(\d*))?s$/);
      if (!match) {
        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);
      }
      let seconds = 0;
      let nanos = 0;
      if (typeof match[1] === "string" && match[1].length > 0) {
        seconds = parseInt(match[1]);
      }
      if (typeof match[2] === "string" && match[2].length > 0) {
        nanos = parseInt(match[2].padEnd(9, "0"));
      }
      const result = {};
      if (seconds !== 0) {
        result.seconds = seconds;
      }
      if (nanos !== 0) {
        result.nanos = nanos;
      }
      return result;
    }
    exports2.googleProtobufDurationFromProto3JSON = googleProtobufDurationFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/proto3-json-serializer/build/src/timestamp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufTimestampFromProto3JSON = exports2.googleProtobufTimestampToProto3JSON = void 0;
    function googleProtobufTimestampToProto3JSON(obj) {
      var _a;
      const durationSeconds = obj.seconds;
      const date = new Date(durationSeconds * 1e3).toISOString();
      let nanos = (_a = obj.nanos) === null || _a === void 0 ? void 0 : _a.toString().padStart(9, "0");
      while (nanos && nanos.length > 3 && nanos.endsWith("000")) {
        nanos = nanos.slice(0, -3);
      }
      return date.replace(/(?:\.\d{0,9})/, "." + nanos);
    }
    exports2.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;
    function googleProtobufTimestampFromProto3JSON(json) {
      const match = json.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?/);
      if (!match) {
        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);
      }
      const date = new Date(json);
      const millisecondsSinceEpoch = date.getTime();
      const seconds = Math.floor(millisecondsSinceEpoch / 1e3);
      let nanos = 0;
      const secondsFromDate = json.split(".")[1];
      if (secondsFromDate) {
        nanos = parseInt(secondsFromDate.slice(0, -1).padEnd(9, "0"));
      }
      const result = {};
      if (seconds !== 0) {
        result.seconds = seconds;
      }
      if (nanos !== 0) {
        result.nanos = nanos;
      }
      return result;
    }
    exports2.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/wrappers.js
var require_wrappers2 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/wrappers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wrapperFromProto3JSON = exports2.wrapperToProto3JSON = void 0;
    var bytes_1 = require_bytes();
    var util_1 = require_util4();
    function wrapperToProto3JSON(obj) {
      if (!Object.prototype.hasOwnProperty.call(obj, "value")) {
        return null;
      }
      if (Buffer.isBuffer(obj.value) || obj.value instanceof Uint8Array) {
        return (0, bytes_1.bytesToProto3JSON)(obj.value);
      }
      if (typeof obj.value === "object") {
        (0, util_1.assert)(obj.value.constructor.name === "Long", `wrapperToProto3JSON: expected to see a number, a string, a boolean, or a Long, but got ${obj.value}`);
        return obj.value.toString();
      }
      if (typeof obj.value === "number" && !Number.isFinite(obj.value)) {
        return obj.value.toString();
      }
      return obj.value;
    }
    exports2.wrapperToProto3JSON = wrapperToProto3JSON;
    function wrapperFromProto3JSON(typeName, json) {
      if (json === null) {
        return {
          value: null
        };
      }
      if (typeName === ".google.protobuf.BytesValue") {
        if (typeof json !== "string") {
          throw new Error(`numberWrapperFromProto3JSON: expected to get a string for google.protobuf.BytesValue but got ${typeof json}`);
        }
        return {
          value: (0, bytes_1.bytesFromProto3JSON)(json)
        };
      }
      return {
        value: json
      };
    }
    exports2.wrapperFromProto3JSON = wrapperFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/fieldmask.js
var require_fieldmask = __commonJS({
  "node_modules/proto3-json-serializer/build/src/fieldmask.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufFieldMaskFromProto3JSON = exports2.googleProtobufFieldMaskToProto3JSON = void 0;
    function googleProtobufFieldMaskToProto3JSON(obj) {
      return obj.paths.join(",");
    }
    exports2.googleProtobufFieldMaskToProto3JSON = googleProtobufFieldMaskToProto3JSON;
    function googleProtobufFieldMaskFromProto3JSON(json) {
      return {
        paths: json.split(",")
      };
    }
    exports2.googleProtobufFieldMaskFromProto3JSON = googleProtobufFieldMaskFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/fromproto3json.js
var require_fromproto3json = __commonJS({
  "node_modules/proto3-json-serializer/build/src/fromproto3json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProto3JSON = exports2.fromProto3JSONToInternalRepresentation = void 0;
    var any_1 = require_any();
    var bytes_1 = require_bytes();
    var enum_1 = require_enum2();
    var value_1 = require_value();
    var util_1 = require_util4();
    var duration_1 = require_duration();
    var timestamp_1 = require_timestamp();
    var wrappers_1 = require_wrappers2();
    var fieldmask_1 = require_fieldmask();
    function fromProto3JSONToInternalRepresentation(type, json) {
      const fullyQualifiedTypeName = typeof type === "string" ? type : (0, util_1.getFullyQualifiedTypeName)(type);
      if (typeof type !== "string" && "values" in type) {
        if (fullyQualifiedTypeName === ".google.protobuf.NullValue") {
          return "NULL_VALUE";
        }
        return (0, enum_1.resolveEnumValueToString)(type, json);
      }
      if (typeof type !== "string") {
        type.resolveAll();
      }
      if (typeof type === "string") {
        return json;
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Value") {
        return (0, value_1.googleProtobufValueFromProto3JSON)(json);
      }
      if (util_1.wrapperTypes.has(fullyQualifiedTypeName)) {
        if (json !== null && typeof json === "object" || Array.isArray(json)) {
          throw new Error(`fromProto3JSONToInternalRepresentation: JSON representation for ${fullyQualifiedTypeName} expects a string, a number, or a boolean, but got ${typeof json}`);
        }
        return (0, wrappers_1.wrapperFromProto3JSON)(fullyQualifiedTypeName, json);
      }
      if (json === null) {
        return null;
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Any") {
        return (0, any_1.googleProtobufAnyFromProto3JSON)(type.root, json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Struct") {
        if (typeof json !== "object") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Struct must be an object but got ${typeof json}`);
        }
        if (Array.isArray(json)) {
          throw new Error("fromProto3JSONToInternalRepresentation: google.protobuf.Struct must be an object but got an array");
        }
        return (0, value_1.googleProtobufStructFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.ListValue") {
        if (!Array.isArray(json)) {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.ListValue must be an array but got ${typeof json}`);
        }
        return (0, value_1.googleProtobufListValueFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Duration") {
        if (typeof json !== "string") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Duration must be a string but got ${typeof json}`);
        }
        return (0, duration_1.googleProtobufDurationFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Timestamp") {
        if (typeof json !== "string") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Timestamp must be a string but got ${typeof json}`);
        }
        return (0, timestamp_1.googleProtobufTimestampFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.FieldMask") {
        if (typeof json !== "string") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.FieldMask must be a string but got ${typeof json}`);
        }
        return (0, fieldmask_1.googleProtobufFieldMaskFromProto3JSON)(json);
      }
      const result = {};
      for (const [key, value] of Object.entries(json)) {
        const field = type.fields[key];
        if (!field) {
          continue;
        }
        const resolvedType = field.resolvedType;
        const fieldType = field.type;
        if (field.repeated) {
          if (!Array.isArray(value)) {
            throw new Error(`fromProto3JSONToInternalRepresentation: expected an array for field ${key}`);
          }
          result[key] = value.map((element) => fromProto3JSONToInternalRepresentation(resolvedType || fieldType, element));
        } else if (field.map) {
          const map = {};
          for (const [mapKey, mapValue] of Object.entries(value)) {
            map[mapKey] = fromProto3JSONToInternalRepresentation(resolvedType || fieldType, mapValue);
          }
          result[key] = map;
        } else if (fieldType.match(/^(?:(?:(?:u?int|fixed)(?:32|64))|float|double)$/)) {
          if (typeof value !== "number" && typeof value !== "string") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = value;
        } else if (fieldType === "string") {
          if (typeof value !== "string") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = value;
        } else if (fieldType === "bool") {
          if (typeof value !== "boolean") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = value;
        } else if (fieldType === "bytes") {
          if (typeof value !== "string") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = (0, bytes_1.bytesFromProto3JSON)(value);
        } else {
          (0, util_1.assert)(resolvedType !== null, `Expected to be able to resolve type for field ${field.name}`);
          const deserializedValue = fromProto3JSONToInternalRepresentation(resolvedType, value);
          result[key] = deserializedValue;
        }
      }
      return result;
    }
    exports2.fromProto3JSONToInternalRepresentation = fromProto3JSONToInternalRepresentation;
    function fromProto3JSON(type, json) {
      const internalRepr = fromProto3JSONToInternalRepresentation(type, json);
      if (internalRepr === null) {
        return null;
      }
      (0, util_1.assert)(typeof internalRepr === "object" && !Array.isArray(internalRepr), `fromProto3JSON: expected an object, not ${json}`);
      return type.fromObject(internalRepr);
    }
    exports2.fromProto3JSON = fromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/any.js
var require_any = __commonJS({
  "node_modules/proto3-json-serializer/build/src/any.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufAnyFromProto3JSON = exports2.googleProtobufAnyToProto3JSON = void 0;
    var fromproto3json_1 = require_fromproto3json();
    var toproto3json_1 = require_toproto3json();
    var specialJSON = /* @__PURE__ */ new Set([
      "google.protobuf.Any",
      "google.protobuf.Duration",
      "google.protobuf.FieldMask",
      "google.protobuf.ListValue",
      "google.protobuf.Struct",
      "google.protobuf.Timestamp",
      "google.protobuf.Value"
    ]);
    function googleProtobufAnyToProto3JSON(obj, options) {
      const typeName = obj.type_url.replace(/^.*\//, "");
      let type;
      try {
        type = obj.$type.root.lookupType(typeName);
      } catch (err) {
        throw new Error(`googleProtobufAnyToProto3JSON: cannot find type ${typeName}: ${err}`);
      }
      const valueMessage = type.decode(obj.value);
      const valueProto3JSON = (0, toproto3json_1.toProto3JSON)(valueMessage, options);
      if (specialJSON.has(typeName)) {
        return {
          "@type": obj.type_url,
          value: valueProto3JSON
        };
      }
      valueProto3JSON["@type"] = obj.type_url;
      return valueProto3JSON;
    }
    exports2.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;
    function googleProtobufAnyFromProto3JSON(root, json) {
      if (json === null || typeof json !== "object" || Array.isArray(json)) {
        throw new Error("googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any");
      }
      const typeUrl = json["@type"];
      if (!typeUrl || typeof typeUrl !== "string") {
        throw new Error("googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field");
      }
      const typeName = typeUrl.replace(/^.*\//, "");
      let type;
      try {
        type = root.lookupType(typeName);
      } catch (err) {
        throw new Error(`googleProtobufAnyFromProto3JSON: cannot find type ${typeName}: ${err}`);
      }
      let value = json;
      if (specialJSON.has(typeName)) {
        if (!("value" in json)) {
          throw new Error(`googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type ${typeName} must contain the value field`);
        }
        value = json.value;
      }
      const valueMessage = (0, fromproto3json_1.fromProto3JSON)(type, value);
      if (valueMessage === null) {
        return {
          type_url: typeUrl,
          value: null
        };
      }
      const uint8array = type.encode(valueMessage).finish();
      const buffer = Buffer.from(uint8array, 0, uint8array.byteLength);
      const base64 = buffer.toString("base64");
      return {
        type_url: typeUrl,
        value: base64
      };
    }
    exports2.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/toproto3json.js
var require_toproto3json = __commonJS({
  "node_modules/proto3-json-serializer/build/src/toproto3json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toProto3JSON = void 0;
    var any_1 = require_any();
    var bytes_1 = require_bytes();
    var util_1 = require_util4();
    var enum_1 = require_enum2();
    var value_1 = require_value();
    var duration_1 = require_duration();
    var timestamp_1 = require_timestamp();
    var wrappers_1 = require_wrappers2();
    var fieldmask_1 = require_fieldmask();
    var id = (x) => {
      return x;
    };
    function toProto3JSON(obj, options) {
      const objType = obj.$type;
      if (!objType) {
        throw new Error("Cannot serialize object to proto3 JSON since its .$type is unknown. Use Type.fromObject(obj) before calling toProto3JSON.");
      }
      objType.resolveAll();
      const typeName = (0, util_1.getFullyQualifiedTypeName)(objType);
      if (typeName === ".google.protobuf.Any") {
        return (0, any_1.googleProtobufAnyToProto3JSON)(obj, options);
      }
      if (typeName === ".google.protobuf.Value") {
        return (0, value_1.googleProtobufValueToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.Struct") {
        return (0, value_1.googleProtobufStructToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.ListValue") {
        return (0, value_1.googleProtobufListValueToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.Duration") {
        return (0, duration_1.googleProtobufDurationToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.Timestamp") {
        return (0, timestamp_1.googleProtobufTimestampToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.FieldMask") {
        return (0, fieldmask_1.googleProtobufFieldMaskToProto3JSON)(obj);
      }
      if (util_1.wrapperTypes.has(typeName)) {
        return (0, wrappers_1.wrapperToProto3JSON)(obj);
      }
      const result = {};
      for (const [key, value] of Object.entries(obj)) {
        const field = objType.fields[key];
        const fieldResolvedType = field.resolvedType;
        const fieldFullyQualifiedTypeName = fieldResolvedType ? (0, util_1.getFullyQualifiedTypeName)(fieldResolvedType) : null;
        if (value === null) {
          result[key] = null;
          continue;
        }
        if (Array.isArray(value)) {
          if (value.length === 0) {
            continue;
          }
          result[key] = value.map(fieldResolvedType ? (element) => {
            return toProto3JSON(element, options);
          } : id);
          continue;
        }
        if (field.map) {
          const map = {};
          for (const [mapKey, mapValue] of Object.entries(value)) {
            map[mapKey] = fieldResolvedType ? toProto3JSON(mapValue, options) : mapValue;
          }
          result[key] = map;
          continue;
        }
        if (fieldFullyQualifiedTypeName === ".google.protobuf.NullValue") {
          result[key] = null;
          continue;
        }
        if (fieldResolvedType && "values" in fieldResolvedType && value !== null) {
          if (options === null || options === void 0 ? void 0 : options.numericEnums) {
            result[key] = (0, enum_1.resolveEnumValueToNumber)(fieldResolvedType, value);
          } else {
            result[key] = (0, enum_1.resolveEnumValueToString)(fieldResolvedType, value);
          }
          continue;
        }
        if (fieldResolvedType) {
          result[key] = toProto3JSON(value, options);
          continue;
        }
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || value === null) {
          if (typeof value === "number" && !Number.isFinite(value)) {
            result[key] = value.toString();
            continue;
          }
          result[key] = value;
          continue;
        }
        if (Buffer.isBuffer(value) || value instanceof Uint8Array) {
          result[key] = (0, bytes_1.bytesToProto3JSON)(value);
          continue;
        }
        (0, util_1.assert)(value.constructor.name === "Long", `toProto3JSON: don't know how to convert field ${key} with value ${value}`);
        result[key] = value.toString();
        continue;
      }
      return result;
    }
    exports2.toProto3JSON = toProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/index.js
var require_src8 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProto3JSON = exports2.toProto3JSON = void 0;
    var toproto3json_1 = require_toproto3json();
    Object.defineProperty(exports2, "toProto3JSON", { enumerable: true, get: function() {
      return toproto3json_1.toProto3JSON;
    } });
    var fromproto3json_1 = require_fromproto3json();
    Object.defineProperty(exports2, "fromProto3JSON", { enumerable: true, get: function() {
      return fromproto3json_1.fromProto3JSON;
    } });
  }
});

// node_modules/google-gax/build/protos/status.json
var require_status2 = __commonJS({
  "node_modules/google-gax/build/protos/status.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { protobuf: { nested: { Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } }, Duration: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } } } }, rpc: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/rpc/errdetails;errdetails", java_multiple_files: true, java_outer_classname: "ErrorDetailsProto", java_package: "com.google.rpc", objc_class_prefix: "RPC" }, nested: { Status: { fields: { code: { type: "int32", id: 1 }, message: { type: "string", id: 2 }, details: { rule: "repeated", type: "google.protobuf.Any", id: 3 } } }, RetryInfo: { fields: { retryDelay: { type: "google.protobuf.Duration", id: 1 } } }, DebugInfo: { fields: { stackEntries: { rule: "repeated", type: "string", id: 1 }, detail: { type: "string", id: 2 } } }, QuotaFailure: { fields: { violations: { rule: "repeated", type: "Violation", id: 1 } }, nested: { Violation: { fields: { subject: { type: "string", id: 1 }, description: { type: "string", id: 2 } } } } }, ErrorInfo: { fields: { reason: { type: "string", id: 1 }, domain: { type: "string", id: 2 }, metadata: { keyType: "string", type: "string", id: 3 } } }, PreconditionFailure: { fields: { violations: { rule: "repeated", type: "Violation", id: 1 } }, nested: { Violation: { fields: { type: { type: "string", id: 1 }, subject: { type: "string", id: 2 }, description: { type: "string", id: 3 } } } } }, BadRequest: { fields: { fieldViolations: { rule: "repeated", type: "FieldViolation", id: 1 } }, nested: { FieldViolation: { fields: { field: { type: "string", id: 1 }, description: { type: "string", id: 2 } } } } }, RequestInfo: { fields: { requestId: { type: "string", id: 1 }, servingData: { type: "string", id: 2 } } }, ResourceInfo: { fields: { resourceType: { type: "string", id: 1 }, resourceName: { type: "string", id: 2 }, owner: { type: "string", id: 3 }, description: { type: "string", id: 4 } } }, Help: { fields: { links: { rule: "repeated", type: "Link", id: 1 } }, nested: { Link: { fields: { description: { type: "string", id: 1 }, url: { type: "string", id: 2 } } } } }, LocalizedMessage: { fields: { locale: { type: "string", id: 1 }, message: { type: "string", id: 2 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/googleError.js
var require_googleError = __commonJS({
  "node_modules/google-gax/build/src/googleError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleErrorDecoder = exports2.GoogleError = void 0;
    var status_1 = require_status();
    var protobuf = require_protobufjs();
    var serializer = require_src8();
    var fallback_1 = require_fallback();
    var GoogleError = class extends Error {
      static parseGRPCStatusDetails(err) {
        const decoder = new GoogleErrorDecoder();
        try {
          if (err.metadata && err.metadata.get("grpc-status-details-bin")) {
            const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get("grpc-status-details-bin"));
            if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {
              err.statusDetails = statusDetailsObj.details;
            }
            if (statusDetailsObj && statusDetailsObj.errorInfo) {
              err.reason = statusDetailsObj.errorInfo.reason;
              err.domain = statusDetailsObj.errorInfo.domain;
              err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;
            }
          }
        } catch (decodeErr) {
        }
        return err;
      }
      static parseHttpError(json) {
        if (Array.isArray(json)) {
          json = json.find((obj) => {
            return "error" in obj;
          });
        }
        if (!json["error"]) {
          json["error"] = {};
          Object.keys(json).filter((key) => key !== "error").forEach((key) => {
            json["error"][key] = json[key];
            delete json[key];
          });
        }
        const decoder = new GoogleErrorDecoder();
        const proto3Error = decoder.decodeHTTPError(json["error"]);
        const error = Object.assign(new GoogleError(json["error"]["message"]), proto3Error);
        if (json["error"]["code"]) {
          error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json["error"]["code"]);
        } else {
          delete error.code;
        }
        if (error.details) {
          try {
            const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);
            if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {
              error.statusDetails = statusDetailsObj.details;
            }
            if (statusDetailsObj && statusDetailsObj.errorInfo) {
              error.reason = statusDetailsObj.errorInfo.reason;
              error.domain = statusDetailsObj.errorInfo.domain;
              error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;
            }
          } catch (decodeErr) {
          }
        }
        return error;
      }
    };
    exports2.GoogleError = GoogleError;
    var GoogleErrorDecoder = class {
      constructor() {
        const errorProtoJson = require_status2();
        this.root = protobuf.Root.fromJSON(errorProtoJson);
        this.anyType = this.root.lookupType("google.protobuf.Any");
        this.statusType = this.root.lookupType("google.rpc.Status");
      }
      decodeProtobufAny(anyValue) {
        const match = anyValue.type_url.match(/^type.googleapis.com\/(.*)/);
        if (!match) {
          throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);
        }
        const typeName = match[1];
        const type = this.root.lookupType(typeName);
        if (!type) {
          throw new Error(`Cannot lookup type ${typeName}`);
        }
        return type.decode(anyValue.value);
      }
      decodeRpcStatus(buffer) {
        const uint8array = new Uint8Array(buffer);
        const status = this.statusType.decode(uint8array);
        const details = [];
        let errorInfo;
        for (const detail of status.details) {
          try {
            const decodedDetail = this.decodeProtobufAny(detail);
            details.push(decodedDetail);
            if (detail.type_url === "type.googleapis.com/google.rpc.ErrorInfo") {
              errorInfo = decodedDetail;
            }
          } catch (err) {
          }
        }
        const result = {
          code: status.code,
          message: status.message,
          statusDetails: details,
          reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,
          domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,
          errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata
        };
        return result;
      }
      callErrorFromStatus(status) {
        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;
        return Object.assign(new GoogleError(status.message), status);
      }
      decodeErrorFromBuffer(buffer) {
        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));
      }
      decodeGRPCStatusDetails(bufferArr) {
        const details = [];
        let errorInfo;
        bufferArr.forEach((buffer) => {
          const uint8array = new Uint8Array(buffer);
          const rpcStatus = this.statusType.decode(uint8array);
          for (const detail of rpcStatus.details) {
            try {
              const decodedDetail = this.decodeProtobufAny(detail);
              details.push(decodedDetail);
              if (detail.type_url === "type.googleapis.com/google.rpc.ErrorInfo") {
                errorInfo = decodedDetail;
              }
            } catch (err) {
            }
          }
        });
        const result = {
          details,
          errorInfo
        };
        return result;
      }
      decodeHTTPError(json) {
        const errorMessage = serializer.fromProto3JSON(this.statusType, json);
        if (!errorMessage) {
          throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);
        }
        return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);
      }
      decodeHttpStatusDetails(rawDetails) {
        const details = [];
        let errorInfo;
        for (const detail of rawDetails) {
          try {
            const decodedDetail = this.decodeProtobufAny(detail);
            details.push(decodedDetail);
            if (detail.type_url === "type.googleapis.com/google.rpc.ErrorInfo") {
              errorInfo = decodedDetail;
            }
          } catch (err) {
          }
        }
        return { details, errorInfo };
      }
    };
    exports2.GoogleErrorDecoder = GoogleErrorDecoder;
  }
});

// node_modules/google-gax/build/src/call.js
var require_call = __commonJS({
  "node_modules/google-gax/build/src/call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OngoingCallPromise = exports2.OngoingCall = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var OngoingCall = class {
      constructor(callback) {
        this.callback = callback;
        this.completed = false;
      }
      cancel() {
        if (this.completed) {
          return;
        }
        this.completed = true;
        if (this.cancelFunc) {
          this.cancelFunc();
        } else {
          const error = new googleError_1.GoogleError("cancelled");
          error.code = status_1.Status.CANCELLED;
          this.callback(error);
        }
      }
      call(func, argument) {
        if (this.completed) {
          return;
        }
        const canceller = func(argument, (err, response, next, rawResponse) => {
          this.completed = true;
          setImmediate(this.callback, err, response, next, rawResponse);
        });
        if (canceller instanceof Promise) {
          canceller.catch((err) => {
            setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);
          });
        }
        this.cancelFunc = () => canceller.cancel();
      }
    };
    exports2.OngoingCall = OngoingCall;
    var OngoingCallPromise = class extends OngoingCall {
      constructor() {
        let resolveCallback;
        let rejectCallback;
        const callback = (err, response, next, rawResponse) => {
          if (err) {
            if (err.metadata) {
              rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));
            } else {
              rejectCallback(err);
            }
          } else if (response !== void 0) {
            resolveCallback([response, next || null, rawResponse || null]);
          } else {
            throw new googleError_1.GoogleError("Neither error nor response are defined");
          }
        };
        const promise = new Promise((resolve, reject) => {
          resolveCallback = resolve;
          rejectCallback = reject;
        });
        super(callback);
        this.promise = promise;
        this.promise.cancel = () => {
          this.cancel();
        };
      }
    };
    exports2.OngoingCallPromise = OngoingCallPromise;
  }
});

// node_modules/google-gax/build/src/normalCalls/normalApiCaller.js
var require_normalApiCaller = __commonJS({
  "node_modules/google-gax/build/src/normalCalls/normalApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NormalApiCaller = void 0;
    var call_1 = require_call();
    var NormalApiCaller = class {
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      wrap(func) {
        return func;
      }
      call(apiCall, argument, settings, canceller) {
        canceller.call(apiCall, argument);
      }
      fail(canceller, err) {
        canceller.callback(err);
      }
      result(canceller) {
        return canceller.promise;
      }
    };
    exports2.NormalApiCaller = NormalApiCaller;
  }
});

// node_modules/google-gax/build/src/apiCaller.js
var require_apiCaller = __commonJS({
  "node_modules/google-gax/build/src/apiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createAPICaller = void 0;
    var normalApiCaller_1 = require_normalApiCaller();
    function createAPICaller(settings, descriptor) {
      if (!descriptor) {
        return new normalApiCaller_1.NormalApiCaller();
      }
      return descriptor.getApiCaller(settings);
    }
    exports2.createAPICaller = createAPICaller;
  }
});

// node_modules/google-gax/build/src/normalCalls/timeout.js
var require_timeout = __commonJS({
  "node_modules/google-gax/build/src/normalCalls/timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addTimeoutArg = void 0;
    function addTimeoutArg(func, timeout, otherArgs, abTests) {
      return (argument, callback) => {
        const now = new Date();
        const options = otherArgs.options || {};
        options.deadline = new Date(now.getTime() + timeout);
        const metadata = otherArgs.metadataBuilder ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {}) : null;
        return func(argument, metadata, options, callback);
      };
    }
    exports2.addTimeoutArg = addTimeoutArg;
  }
});

// node_modules/google-gax/build/src/normalCalls/retries.js
var require_retries = __commonJS({
  "node_modules/google-gax/build/src/normalCalls/retries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retryable = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var timeout_1 = require_timeout();
    function retryable(func, retry, otherArgs, apiName) {
      const delayMult = retry.backoffSettings.retryDelayMultiplier;
      const maxDelay = retry.backoffSettings.maxRetryDelayMillis;
      const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;
      const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;
      let delay = retry.backoffSettings.initialRetryDelayMillis;
      let timeout = retry.backoffSettings.initialRpcTimeoutMillis;
      return (argument, callback) => {
        let canceller;
        let timeoutId;
        let now = new Date();
        let deadline;
        if (retry.backoffSettings.totalTimeoutMillis) {
          deadline = now.getTime() + retry.backoffSettings.totalTimeoutMillis;
        }
        let retries = 0;
        const maxRetries = retry.backoffSettings.maxRetries;
        function repeat() {
          timeoutId = null;
          if (deadline && now.getTime() >= deadline) {
            const error = new googleError_1.GoogleError(`Total timeout of API ${apiName} exceeded ${retry.backoffSettings.totalTimeoutMillis} milliseconds before any response was received.`);
            error.code = status_1.Status.DEADLINE_EXCEEDED;
            callback(error);
            return;
          }
          if (retries && retries >= maxRetries) {
            const error = new googleError_1.GoogleError("Exceeded maximum number of retries before any response was received");
            error.code = status_1.Status.DEADLINE_EXCEEDED;
            callback(error);
            return;
          }
          retries++;
          const toCall = (0, timeout_1.addTimeoutArg)(func, timeout, otherArgs);
          canceller = toCall(argument, (err, response, next, rawResponse) => {
            if (!err) {
              callback(null, response, next, rawResponse);
              return;
            }
            canceller = null;
            if (retry.retryCodes.indexOf(err.code) < 0) {
              err.note = "Exception occurred in retry method that was not classified as transient";
              callback(err);
            } else {
              const toSleep = Math.random() * delay;
              timeoutId = setTimeout(() => {
                now = new Date();
                delay = Math.min(delay * delayMult, maxDelay);
                const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;
                const rpcTimeout = maxTimeout ? maxTimeout : 0;
                const newDeadline = deadline ? deadline - now.getTime() : 0;
                timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);
                repeat();
              }, toSleep);
            }
          });
          if (canceller instanceof Promise) {
            canceller.catch((err) => {
              callback(new googleError_1.GoogleError(err));
            });
          }
        }
        if (maxRetries && deadline) {
          const error = new googleError_1.GoogleError("Cannot set both totalTimeoutMillis and maxRetries in backoffSettings.");
          error.code = status_1.Status.INVALID_ARGUMENT;
          callback(error);
        } else {
          repeat();
        }
        return {
          cancel() {
            if (timeoutId) {
              clearTimeout(timeoutId);
            }
            if (canceller) {
              canceller.cancel();
            } else {
              const error = new googleError_1.GoogleError("cancelled");
              error.code = status_1.Status.CANCELLED;
              callback(error);
            }
          }
        };
      };
    }
    exports2.retryable = retryable;
  }
});

// node_modules/google-gax/build/src/createApiCall.js
var require_createApiCall = __commonJS({
  "node_modules/google-gax/build/src/createApiCall.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createApiCall = void 0;
    var apiCaller_1 = require_apiCaller();
    var retries_1 = require_retries();
    var timeout_1 = require_timeout();
    function createApiCall(func, settings, descriptor, _fallback) {
      const funcPromise = typeof func === "function" ? Promise.resolve(func) : func;
      const apiCaller = (0, apiCaller_1.createAPICaller)(settings, descriptor);
      return (request, callOptions, callback) => {
        const thisSettings = settings.merge(callOptions);
        let currentApiCaller = apiCaller;
        if (settings.isBundling && !thisSettings.isBundling) {
          currentApiCaller = (0, apiCaller_1.createAPICaller)(settings, void 0);
        }
        const ongoingCall = currentApiCaller.init(callback);
        funcPromise.then((func2) => {
          var _a;
          func2 = currentApiCaller.wrap(func2);
          const streaming = (_a = currentApiCaller.descriptor) === null || _a === void 0 ? void 0 : _a.streaming;
          const retry = thisSettings.retry;
          if (!streaming && retry && retry.retryCodes && retry.retryCodes.length > 0) {
            retry.backoffSettings.initialRpcTimeoutMillis = retry.backoffSettings.initialRpcTimeoutMillis || thisSettings.timeout;
            return (0, retries_1.retryable)(func2, thisSettings.retry, thisSettings.otherArgs, thisSettings.apiName);
          }
          return (0, timeout_1.addTimeoutArg)(func2, thisSettings.timeout, thisSettings.otherArgs);
        }).then((apiCall) => {
          currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);
        }).catch((err) => {
          currentApiCaller.fail(ongoingCall, err);
        });
        return currentApiCaller.result(ongoingCall);
      };
    }
    exports2.createApiCall = createApiCall;
  }
});

// node_modules/google-gax/node_modules/protobufjs/minimal.js
var require_minimal2 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/minimal.js"(exports2, module2) {
    "use strict";
    module2.exports = require_index_minimal();
  }
});

// node_modules/google-gax/build/protos/operations.js
var require_operations = __commonJS({
  "node_modules/google-gax/build/protos/operations.js"(exports2, module2) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd)
        define(["protobufjs/minimal"], factory);
      else if (typeof __require === "function" && typeof module2 === "object" && module2 && module2.exports)
        module2.exports = factory(require_minimal2());
    })(exports2, function($protobuf) {
      "use strict";
      var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
      var $root = $protobuf.roots.operations_protos || ($protobuf.roots.operations_protos = {});
      $root.google = function() {
        var google = {};
        google.longrunning = function() {
          var longrunning = {};
          longrunning.Operations = function() {
            function Operations(rpcImpl, requestDelimited, responseDelimited) {
              $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }
            (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
            Operations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
              return new this(rpcImpl, requestDelimited, responseDelimited);
            };
            Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
              return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
            }, "name", { value: "ListOperations" });
            Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
              return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
            }, "name", { value: "GetOperation" });
            Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
              return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "DeleteOperation" });
            Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
              return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "CancelOperation" });
            Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
              return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
            }, "name", { value: "WaitOperation" });
            return Operations;
          }();
          longrunning.Operation = function() {
            function Operation(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Operation.prototype.name = "";
            Operation.prototype.metadata = null;
            Operation.prototype.done = false;
            Operation.prototype.error = null;
            Operation.prototype.response = null;
            var $oneOfFields;
            Object.defineProperty(Operation.prototype, "result", {
              get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            Operation.create = function create(properties) {
              return new Operation(properties);
            };
            Operation.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                $root.google.protobuf.Any.encode(message.metadata, writer.uint32(18).fork()).ldelim();
              if (message.done != null && Object.hasOwnProperty.call(message, "done"))
                writer.uint32(24).bool(message.done);
              if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                $root.google.rpc.Status.encode(message.error, writer.uint32(34).fork()).ldelim();
              if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                $root.google.protobuf.Any.encode(message.response, writer.uint32(42).fork()).ldelim();
              return writer;
            };
            Operation.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Operation.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.Operation();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                  case 3:
                    message.done = reader.bool();
                    break;
                  case 4:
                    message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                    break;
                  case 5:
                    message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Operation.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Operation.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              var properties = {};
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.metadata != null && message.hasOwnProperty("metadata")) {
                var error = $root.google.protobuf.Any.verify(message.metadata);
                if (error)
                  return "metadata." + error;
              }
              if (message.done != null && message.hasOwnProperty("done")) {
                if (typeof message.done !== "boolean")
                  return "done: boolean expected";
              }
              if (message.error != null && message.hasOwnProperty("error")) {
                properties.result = 1;
                {
                  var error = $root.google.rpc.Status.verify(message.error);
                  if (error)
                    return "error." + error;
                }
              }
              if (message.response != null && message.hasOwnProperty("response")) {
                if (properties.result === 1)
                  return "result: multiple values";
                properties.result = 1;
                {
                  var error = $root.google.protobuf.Any.verify(message.response);
                  if (error)
                    return "response." + error;
                }
              }
              return null;
            };
            Operation.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.Operation)
                return object;
              var message = new $root.google.longrunning.Operation();
              if (object.name != null)
                message.name = String(object.name);
              if (object.metadata != null) {
                if (typeof object.metadata !== "object")
                  throw TypeError(".google.longrunning.Operation.metadata: object expected");
                message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
              }
              if (object.done != null)
                message.done = Boolean(object.done);
              if (object.error != null) {
                if (typeof object.error !== "object")
                  throw TypeError(".google.longrunning.Operation.error: object expected");
                message.error = $root.google.rpc.Status.fromObject(object.error);
              }
              if (object.response != null) {
                if (typeof object.response !== "object")
                  throw TypeError(".google.longrunning.Operation.response: object expected");
                message.response = $root.google.protobuf.Any.fromObject(object.response);
              }
              return message;
            };
            Operation.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.metadata = null;
                object.done = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.metadata != null && message.hasOwnProperty("metadata"))
                object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
              if (message.done != null && message.hasOwnProperty("done"))
                object.done = message.done;
              if (message.error != null && message.hasOwnProperty("error")) {
                object.error = $root.google.rpc.Status.toObject(message.error, options);
                if (options.oneofs)
                  object.result = "error";
              }
              if (message.response != null && message.hasOwnProperty("response")) {
                object.response = $root.google.protobuf.Any.toObject(message.response, options);
                if (options.oneofs)
                  object.result = "response";
              }
              return object;
            };
            Operation.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Operation;
          }();
          longrunning.GetOperationRequest = function() {
            function GetOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GetOperationRequest.prototype.name = "";
            GetOperationRequest.create = function create(properties) {
              return new GetOperationRequest(properties);
            };
            GetOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              return writer;
            };
            GetOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GetOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.GetOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GetOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GetOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              return null;
            };
            GetOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.GetOperationRequest)
                return object;
              var message = new $root.google.longrunning.GetOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            GetOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            GetOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return GetOperationRequest;
          }();
          longrunning.ListOperationsRequest = function() {
            function ListOperationsRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ListOperationsRequest.prototype.name = "";
            ListOperationsRequest.prototype.filter = "";
            ListOperationsRequest.prototype.pageSize = 0;
            ListOperationsRequest.prototype.pageToken = "";
            ListOperationsRequest.create = function create(properties) {
              return new ListOperationsRequest(properties);
            };
            ListOperationsRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                writer.uint32(10).string(message.filter);
              if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                writer.uint32(16).int32(message.pageSize);
              if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                writer.uint32(26).string(message.pageToken);
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(34).string(message.name);
              return writer;
            };
            ListOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ListOperationsRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 4:
                    message.name = reader.string();
                    break;
                  case 1:
                    message.filter = reader.string();
                    break;
                  case 2:
                    message.pageSize = reader.int32();
                    break;
                  case 3:
                    message.pageToken = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ListOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ListOperationsRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.filter != null && message.hasOwnProperty("filter")) {
                if (!$util.isString(message.filter))
                  return "filter: string expected";
              }
              if (message.pageSize != null && message.hasOwnProperty("pageSize")) {
                if (!$util.isInteger(message.pageSize))
                  return "pageSize: integer expected";
              }
              if (message.pageToken != null && message.hasOwnProperty("pageToken")) {
                if (!$util.isString(message.pageToken))
                  return "pageToken: string expected";
              }
              return null;
            };
            ListOperationsRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.ListOperationsRequest)
                return object;
              var message = new $root.google.longrunning.ListOperationsRequest();
              if (object.name != null)
                message.name = String(object.name);
              if (object.filter != null)
                message.filter = String(object.filter);
              if (object.pageSize != null)
                message.pageSize = object.pageSize | 0;
              if (object.pageToken != null)
                message.pageToken = String(object.pageToken);
              return message;
            };
            ListOperationsRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.filter = "";
                object.pageSize = 0;
                object.pageToken = "";
                object.name = "";
              }
              if (message.filter != null && message.hasOwnProperty("filter"))
                object.filter = message.filter;
              if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                object.pageSize = message.pageSize;
              if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                object.pageToken = message.pageToken;
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            ListOperationsRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ListOperationsRequest;
          }();
          longrunning.ListOperationsResponse = function() {
            function ListOperationsResponse(properties) {
              this.operations = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ListOperationsResponse.prototype.operations = $util.emptyArray;
            ListOperationsResponse.prototype.nextPageToken = "";
            ListOperationsResponse.create = function create(properties) {
              return new ListOperationsResponse(properties);
            };
            ListOperationsResponse.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.operations != null && message.operations.length)
                for (var i = 0; i < message.operations.length; ++i)
                  $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(10).fork()).ldelim();
              if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                writer.uint32(18).string(message.nextPageToken);
              return writer;
            };
            ListOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ListOperationsResponse.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsResponse();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.operations && message.operations.length))
                      message.operations = [];
                    message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                    break;
                  case 2:
                    message.nextPageToken = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ListOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ListOperationsResponse.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.operations != null && message.hasOwnProperty("operations")) {
                if (!Array.isArray(message.operations))
                  return "operations: array expected";
                for (var i = 0; i < message.operations.length; ++i) {
                  var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                  if (error)
                    return "operations." + error;
                }
              }
              if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken")) {
                if (!$util.isString(message.nextPageToken))
                  return "nextPageToken: string expected";
              }
              return null;
            };
            ListOperationsResponse.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.ListOperationsResponse)
                return object;
              var message = new $root.google.longrunning.ListOperationsResponse();
              if (object.operations) {
                if (!Array.isArray(object.operations))
                  throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                message.operations = [];
                for (var i = 0; i < object.operations.length; ++i) {
                  if (typeof object.operations[i] !== "object")
                    throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                  message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                }
              }
              if (object.nextPageToken != null)
                message.nextPageToken = String(object.nextPageToken);
              return message;
            };
            ListOperationsResponse.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.operations = [];
              if (options.defaults)
                object.nextPageToken = "";
              if (message.operations && message.operations.length) {
                object.operations = [];
                for (var j = 0; j < message.operations.length; ++j)
                  object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
              }
              if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                object.nextPageToken = message.nextPageToken;
              return object;
            };
            ListOperationsResponse.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ListOperationsResponse;
          }();
          longrunning.CancelOperationRequest = function() {
            function CancelOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CancelOperationRequest.prototype.name = "";
            CancelOperationRequest.create = function create(properties) {
              return new CancelOperationRequest(properties);
            };
            CancelOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              return writer;
            };
            CancelOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CancelOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.CancelOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CancelOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CancelOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              return null;
            };
            CancelOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.CancelOperationRequest)
                return object;
              var message = new $root.google.longrunning.CancelOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            CancelOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            CancelOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return CancelOperationRequest;
          }();
          longrunning.DeleteOperationRequest = function() {
            function DeleteOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DeleteOperationRequest.prototype.name = "";
            DeleteOperationRequest.create = function create(properties) {
              return new DeleteOperationRequest(properties);
            };
            DeleteOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              return writer;
            };
            DeleteOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DeleteOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.DeleteOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DeleteOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DeleteOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              return null;
            };
            DeleteOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                return object;
              var message = new $root.google.longrunning.DeleteOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            DeleteOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            DeleteOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return DeleteOperationRequest;
          }();
          longrunning.WaitOperationRequest = function() {
            function WaitOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            WaitOperationRequest.prototype.name = "";
            WaitOperationRequest.prototype.timeout = null;
            WaitOperationRequest.create = function create(properties) {
              return new WaitOperationRequest(properties);
            };
            WaitOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(18).fork()).ldelim();
              return writer;
            };
            WaitOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            WaitOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.WaitOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            WaitOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            WaitOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.timeout != null && message.hasOwnProperty("timeout")) {
                var error = $root.google.protobuf.Duration.verify(message.timeout);
                if (error)
                  return "timeout." + error;
              }
              return null;
            };
            WaitOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.WaitOperationRequest)
                return object;
              var message = new $root.google.longrunning.WaitOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              if (object.timeout != null) {
                if (typeof object.timeout !== "object")
                  throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
              }
              return message;
            };
            WaitOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.timeout = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.timeout != null && message.hasOwnProperty("timeout"))
                object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
              return object;
            };
            WaitOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return WaitOperationRequest;
          }();
          longrunning.OperationInfo = function() {
            function OperationInfo(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OperationInfo.prototype.responseType = "";
            OperationInfo.prototype.metadataType = "";
            OperationInfo.create = function create(properties) {
              return new OperationInfo(properties);
            };
            OperationInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.responseType != null && Object.hasOwnProperty.call(message, "responseType"))
                writer.uint32(10).string(message.responseType);
              if (message.metadataType != null && Object.hasOwnProperty.call(message, "metadataType"))
                writer.uint32(18).string(message.metadataType);
              return writer;
            };
            OperationInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OperationInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.OperationInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.responseType = reader.string();
                    break;
                  case 2:
                    message.metadataType = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OperationInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OperationInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.responseType != null && message.hasOwnProperty("responseType")) {
                if (!$util.isString(message.responseType))
                  return "responseType: string expected";
              }
              if (message.metadataType != null && message.hasOwnProperty("metadataType")) {
                if (!$util.isString(message.metadataType))
                  return "metadataType: string expected";
              }
              return null;
            };
            OperationInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.OperationInfo)
                return object;
              var message = new $root.google.longrunning.OperationInfo();
              if (object.responseType != null)
                message.responseType = String(object.responseType);
              if (object.metadataType != null)
                message.metadataType = String(object.metadataType);
              return message;
            };
            OperationInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.responseType = "";
                object.metadataType = "";
              }
              if (message.responseType != null && message.hasOwnProperty("responseType"))
                object.responseType = message.responseType;
              if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                object.metadataType = message.metadataType;
              return object;
            };
            OperationInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return OperationInfo;
          }();
          return longrunning;
        }();
        google.api = function() {
          var api = {};
          api.Http = function() {
            function Http(properties) {
              this.rules = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Http.prototype.rules = $util.emptyArray;
            Http.prototype.fullyDecodeReservedExpansion = false;
            Http.create = function create(properties) {
              return new Http(properties);
            };
            Http.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.rules != null && message.rules.length)
                for (var i = 0; i < message.rules.length; ++i)
                  $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(10).fork()).ldelim();
              if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                writer.uint32(16).bool(message.fullyDecodeReservedExpansion);
              return writer;
            };
            Http.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Http.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.Http();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.rules && message.rules.length))
                      message.rules = [];
                    message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  case 2:
                    message.fullyDecodeReservedExpansion = reader.bool();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Http.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Http.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.rules != null && message.hasOwnProperty("rules")) {
                if (!Array.isArray(message.rules))
                  return "rules: array expected";
                for (var i = 0; i < message.rules.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.rules[i]);
                  if (error)
                    return "rules." + error;
                }
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion")) {
                if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                  return "fullyDecodeReservedExpansion: boolean expected";
              }
              return null;
            };
            Http.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.Http)
                return object;
              var message = new $root.google.api.Http();
              if (object.rules) {
                if (!Array.isArray(object.rules))
                  throw TypeError(".google.api.Http.rules: array expected");
                message.rules = [];
                for (var i = 0; i < object.rules.length; ++i) {
                  if (typeof object.rules[i] !== "object")
                    throw TypeError(".google.api.Http.rules: object expected");
                  message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                }
              }
              if (object.fullyDecodeReservedExpansion != null)
                message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
              return message;
            };
            Http.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.rules = [];
              if (options.defaults)
                object.fullyDecodeReservedExpansion = false;
              if (message.rules && message.rules.length) {
                object.rules = [];
                for (var j = 0; j < message.rules.length; ++j)
                  object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
              return object;
            };
            Http.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Http;
          }();
          api.HttpRule = function() {
            function HttpRule(properties) {
              this.additionalBindings = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            HttpRule.prototype.selector = "";
            HttpRule.prototype.get = "";
            HttpRule.prototype.put = "";
            HttpRule.prototype.post = "";
            HttpRule.prototype["delete"] = "";
            HttpRule.prototype.patch = "";
            HttpRule.prototype.custom = null;
            HttpRule.prototype.body = "";
            HttpRule.prototype.responseBody = "";
            HttpRule.prototype.additionalBindings = $util.emptyArray;
            var $oneOfFields;
            Object.defineProperty(HttpRule.prototype, "pattern", {
              get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            HttpRule.create = function create(properties) {
              return new HttpRule(properties);
            };
            HttpRule.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                writer.uint32(10).string(message.selector);
              if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                writer.uint32(18).string(message.get);
              if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                writer.uint32(26).string(message.put);
              if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                writer.uint32(34).string(message.post);
              if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                writer.uint32(42).string(message["delete"]);
              if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                writer.uint32(50).string(message.patch);
              if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                writer.uint32(58).string(message.body);
              if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(66).fork()).ldelim();
              if (message.additionalBindings != null && message.additionalBindings.length)
                for (var i = 0; i < message.additionalBindings.length; ++i)
                  $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(90).fork()).ldelim();
              if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                writer.uint32(98).string(message.responseBody);
              return writer;
            };
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            HttpRule.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.selector = reader.string();
                    break;
                  case 2:
                    message.get = reader.string();
                    break;
                  case 3:
                    message.put = reader.string();
                    break;
                  case 4:
                    message.post = reader.string();
                    break;
                  case 5:
                    message["delete"] = reader.string();
                    break;
                  case 6:
                    message.patch = reader.string();
                    break;
                  case 8:
                    message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                    break;
                  case 7:
                    message.body = reader.string();
                    break;
                  case 12:
                    message.responseBody = reader.string();
                    break;
                  case 11:
                    if (!(message.additionalBindings && message.additionalBindings.length))
                      message.additionalBindings = [];
                    message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            HttpRule.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              var properties = {};
              if (message.selector != null && message.hasOwnProperty("selector")) {
                if (!$util.isString(message.selector))
                  return "selector: string expected";
              }
              if (message.get != null && message.hasOwnProperty("get")) {
                properties.pattern = 1;
                if (!$util.isString(message.get))
                  return "get: string expected";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.put))
                  return "put: string expected";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.post))
                  return "post: string expected";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message["delete"]))
                  return "delete: string expected";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.patch))
                  return "patch: string expected";
              }
              if (message.custom != null && message.hasOwnProperty("custom")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                {
                  var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                  if (error)
                    return "custom." + error;
                }
              }
              if (message.body != null && message.hasOwnProperty("body")) {
                if (!$util.isString(message.body))
                  return "body: string expected";
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody")) {
                if (!$util.isString(message.responseBody))
                  return "responseBody: string expected";
              }
              if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                if (!Array.isArray(message.additionalBindings))
                  return "additionalBindings: array expected";
                for (var i = 0; i < message.additionalBindings.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                  if (error)
                    return "additionalBindings." + error;
                }
              }
              return null;
            };
            HttpRule.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.HttpRule)
                return object;
              var message = new $root.google.api.HttpRule();
              if (object.selector != null)
                message.selector = String(object.selector);
              if (object.get != null)
                message.get = String(object.get);
              if (object.put != null)
                message.put = String(object.put);
              if (object.post != null)
                message.post = String(object.post);
              if (object["delete"] != null)
                message["delete"] = String(object["delete"]);
              if (object.patch != null)
                message.patch = String(object.patch);
              if (object.custom != null) {
                if (typeof object.custom !== "object")
                  throw TypeError(".google.api.HttpRule.custom: object expected");
                message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
              }
              if (object.body != null)
                message.body = String(object.body);
              if (object.responseBody != null)
                message.responseBody = String(object.responseBody);
              if (object.additionalBindings) {
                if (!Array.isArray(object.additionalBindings))
                  throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                message.additionalBindings = [];
                for (var i = 0; i < object.additionalBindings.length; ++i) {
                  if (typeof object.additionalBindings[i] !== "object")
                    throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                  message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                }
              }
              return message;
            };
            HttpRule.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.additionalBindings = [];
              if (options.defaults) {
                object.selector = "";
                object.body = "";
                object.responseBody = "";
              }
              if (message.selector != null && message.hasOwnProperty("selector"))
                object.selector = message.selector;
              if (message.get != null && message.hasOwnProperty("get")) {
                object.get = message.get;
                if (options.oneofs)
                  object.pattern = "get";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                object.put = message.put;
                if (options.oneofs)
                  object.pattern = "put";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                object.post = message.post;
                if (options.oneofs)
                  object.pattern = "post";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                object["delete"] = message["delete"];
                if (options.oneofs)
                  object.pattern = "delete";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                object.patch = message.patch;
                if (options.oneofs)
                  object.pattern = "patch";
              }
              if (message.body != null && message.hasOwnProperty("body"))
                object.body = message.body;
              if (message.custom != null && message.hasOwnProperty("custom")) {
                object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                if (options.oneofs)
                  object.pattern = "custom";
              }
              if (message.additionalBindings && message.additionalBindings.length) {
                object.additionalBindings = [];
                for (var j = 0; j < message.additionalBindings.length; ++j)
                  object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                object.responseBody = message.responseBody;
              return object;
            };
            HttpRule.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return HttpRule;
          }();
          api.CustomHttpPattern = function() {
            function CustomHttpPattern(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CustomHttpPattern.prototype.kind = "";
            CustomHttpPattern.prototype.path = "";
            CustomHttpPattern.create = function create(properties) {
              return new CustomHttpPattern(properties);
            };
            CustomHttpPattern.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                writer.uint32(10).string(message.kind);
              if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                writer.uint32(18).string(message.path);
              return writer;
            };
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CustomHttpPattern.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.kind = reader.string();
                    break;
                  case 2:
                    message.path = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CustomHttpPattern.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.kind != null && message.hasOwnProperty("kind")) {
                if (!$util.isString(message.kind))
                  return "kind: string expected";
              }
              if (message.path != null && message.hasOwnProperty("path")) {
                if (!$util.isString(message.path))
                  return "path: string expected";
              }
              return null;
            };
            CustomHttpPattern.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CustomHttpPattern)
                return object;
              var message = new $root.google.api.CustomHttpPattern();
              if (object.kind != null)
                message.kind = String(object.kind);
              if (object.path != null)
                message.path = String(object.path);
              return message;
            };
            CustomHttpPattern.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.kind = "";
                object.path = "";
              }
              if (message.kind != null && message.hasOwnProperty("kind"))
                object.kind = message.kind;
              if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
              return object;
            };
            CustomHttpPattern.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return CustomHttpPattern;
          }();
          return api;
        }();
        google.protobuf = function() {
          var protobuf = {};
          protobuf.FileDescriptorSet = function() {
            function FileDescriptorSet(properties) {
              this.file = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorSet.prototype.file = $util.emptyArray;
            FileDescriptorSet.create = function create(properties) {
              return new FileDescriptorSet(properties);
            };
            FileDescriptorSet.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.file != null && message.file.length)
                for (var i = 0; i < message.file.length; ++i)
                  $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorSet.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.file && message.file.length))
                      message.file = [];
                    message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorSet.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.file != null && message.hasOwnProperty("file")) {
                if (!Array.isArray(message.file))
                  return "file: array expected";
                for (var i = 0; i < message.file.length; ++i) {
                  var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                  if (error)
                    return "file." + error;
                }
              }
              return null;
            };
            FileDescriptorSet.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorSet)
                return object;
              var message = new $root.google.protobuf.FileDescriptorSet();
              if (object.file) {
                if (!Array.isArray(object.file))
                  throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                message.file = [];
                for (var i = 0; i < object.file.length; ++i) {
                  if (typeof object.file[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                  message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                }
              }
              return message;
            };
            FileDescriptorSet.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.file = [];
              if (message.file && message.file.length) {
                object.file = [];
                for (var j = 0; j < message.file.length; ++j)
                  object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
              }
              return object;
            };
            FileDescriptorSet.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return FileDescriptorSet;
          }();
          protobuf.FileDescriptorProto = function() {
            function FileDescriptorProto(properties) {
              this.dependency = [];
              this.publicDependency = [];
              this.weakDependency = [];
              this.messageType = [];
              this.enumType = [];
              this.service = [];
              this.extension = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorProto.prototype.name = "";
            FileDescriptorProto.prototype["package"] = "";
            FileDescriptorProto.prototype.dependency = $util.emptyArray;
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
            FileDescriptorProto.prototype.messageType = $util.emptyArray;
            FileDescriptorProto.prototype.enumType = $util.emptyArray;
            FileDescriptorProto.prototype.service = $util.emptyArray;
            FileDescriptorProto.prototype.extension = $util.emptyArray;
            FileDescriptorProto.prototype.options = null;
            FileDescriptorProto.prototype.sourceCodeInfo = null;
            FileDescriptorProto.prototype.syntax = "";
            FileDescriptorProto.create = function create(properties) {
              return new FileDescriptorProto(properties);
            };
            FileDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                writer.uint32(18).string(message["package"]);
              if (message.dependency != null && message.dependency.length)
                for (var i = 0; i < message.dependency.length; ++i)
                  writer.uint32(26).string(message.dependency[i]);
              if (message.messageType != null && message.messageType.length)
                for (var i = 0; i < message.messageType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(34).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(42).fork()).ldelim();
              if (message.service != null && message.service.length)
                for (var i = 0; i < message.service.length; ++i)
                  $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(50).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(58).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(66).fork()).ldelim();
              if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(74).fork()).ldelim();
              if (message.publicDependency != null && message.publicDependency.length)
                for (var i = 0; i < message.publicDependency.length; ++i)
                  writer.uint32(80).int32(message.publicDependency[i]);
              if (message.weakDependency != null && message.weakDependency.length)
                for (var i = 0; i < message.weakDependency.length; ++i)
                  writer.uint32(88).int32(message.weakDependency[i]);
              if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                writer.uint32(98).string(message.syntax);
              return writer;
            };
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message["package"] = reader.string();
                    break;
                  case 3:
                    if (!(message.dependency && message.dependency.length))
                      message.dependency = [];
                    message.dependency.push(reader.string());
                    break;
                  case 10:
                    if (!(message.publicDependency && message.publicDependency.length))
                      message.publicDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.publicDependency.push(reader.int32());
                    } else
                      message.publicDependency.push(reader.int32());
                    break;
                  case 11:
                    if (!(message.weakDependency && message.weakDependency.length))
                      message.weakDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.weakDependency.push(reader.int32());
                    } else
                      message.weakDependency.push(reader.int32());
                    break;
                  case 4:
                    if (!(message.messageType && message.messageType.length))
                      message.messageType = [];
                    message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 5:
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 6:
                    if (!(message.service && message.service.length))
                      message.service = [];
                    message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 7:
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 8:
                    message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                    break;
                  case 9:
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                    break;
                  case 12:
                    message.syntax = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message["package"] != null && message.hasOwnProperty("package")) {
                if (!$util.isString(message["package"]))
                  return "package: string expected";
              }
              if (message.dependency != null && message.hasOwnProperty("dependency")) {
                if (!Array.isArray(message.dependency))
                  return "dependency: array expected";
                for (var i = 0; i < message.dependency.length; ++i)
                  if (!$util.isString(message.dependency[i]))
                    return "dependency: string[] expected";
              }
              if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                if (!Array.isArray(message.publicDependency))
                  return "publicDependency: array expected";
                for (var i = 0; i < message.publicDependency.length; ++i)
                  if (!$util.isInteger(message.publicDependency[i]))
                    return "publicDependency: integer[] expected";
              }
              if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                if (!Array.isArray(message.weakDependency))
                  return "weakDependency: array expected";
                for (var i = 0; i < message.weakDependency.length; ++i)
                  if (!$util.isInteger(message.weakDependency[i]))
                    return "weakDependency: integer[] expected";
              }
              if (message.messageType != null && message.hasOwnProperty("messageType")) {
                if (!Array.isArray(message.messageType))
                  return "messageType: array expected";
                for (var i = 0; i < message.messageType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                  if (error)
                    return "messageType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.service != null && message.hasOwnProperty("service")) {
                if (!Array.isArray(message.service))
                  return "service: array expected";
                for (var i = 0; i < message.service.length; ++i) {
                  var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                  if (error)
                    return "service." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FileOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                if (error)
                  return "sourceCodeInfo." + error;
              }
              if (message.syntax != null && message.hasOwnProperty("syntax")) {
                if (!$util.isString(message.syntax))
                  return "syntax: string expected";
              }
              return null;
            };
            FileDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FileDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object["package"] != null)
                message["package"] = String(object["package"]);
              if (object.dependency) {
                if (!Array.isArray(object.dependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                message.dependency = [];
                for (var i = 0; i < object.dependency.length; ++i)
                  message.dependency[i] = String(object.dependency[i]);
              }
              if (object.publicDependency) {
                if (!Array.isArray(object.publicDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                message.publicDependency = [];
                for (var i = 0; i < object.publicDependency.length; ++i)
                  message.publicDependency[i] = object.publicDependency[i] | 0;
              }
              if (object.weakDependency) {
                if (!Array.isArray(object.weakDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                message.weakDependency = [];
                for (var i = 0; i < object.weakDependency.length; ++i)
                  message.weakDependency[i] = object.weakDependency[i] | 0;
              }
              if (object.messageType) {
                if (!Array.isArray(object.messageType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                message.messageType = [];
                for (var i = 0; i < object.messageType.length; ++i) {
                  if (typeof object.messageType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                  message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.service) {
                if (!Array.isArray(object.service))
                  throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                message.service = [];
                for (var i = 0; i < object.service.length; ++i) {
                  if (typeof object.service[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                  message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
              }
              if (object.sourceCodeInfo != null) {
                if (typeof object.sourceCodeInfo !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
              }
              if (object.syntax != null)
                message.syntax = String(object.syntax);
              return message;
            };
            FileDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.dependency = [];
                object.messageType = [];
                object.enumType = [];
                object.service = [];
                object.extension = [];
                object.publicDependency = [];
                object.weakDependency = [];
              }
              if (options.defaults) {
                object.name = "";
                object["package"] = "";
                object.options = null;
                object.sourceCodeInfo = null;
                object.syntax = "";
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message["package"] != null && message.hasOwnProperty("package"))
                object["package"] = message["package"];
              if (message.dependency && message.dependency.length) {
                object.dependency = [];
                for (var j = 0; j < message.dependency.length; ++j)
                  object.dependency[j] = message.dependency[j];
              }
              if (message.messageType && message.messageType.length) {
                object.messageType = [];
                for (var j = 0; j < message.messageType.length; ++j)
                  object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.service && message.service.length) {
                object.service = [];
                for (var j = 0; j < message.service.length; ++j)
                  object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
              if (message.publicDependency && message.publicDependency.length) {
                object.publicDependency = [];
                for (var j = 0; j < message.publicDependency.length; ++j)
                  object.publicDependency[j] = message.publicDependency[j];
              }
              if (message.weakDependency && message.weakDependency.length) {
                object.weakDependency = [];
                for (var j = 0; j < message.weakDependency.length; ++j)
                  object.weakDependency[j] = message.weakDependency[j];
              }
              if (message.syntax != null && message.hasOwnProperty("syntax"))
                object.syntax = message.syntax;
              return object;
            };
            FileDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return FileDescriptorProto;
          }();
          protobuf.DescriptorProto = function() {
            function DescriptorProto(properties) {
              this.field = [];
              this.extension = [];
              this.nestedType = [];
              this.enumType = [];
              this.extensionRange = [];
              this.oneofDecl = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DescriptorProto.prototype.name = "";
            DescriptorProto.prototype.field = $util.emptyArray;
            DescriptorProto.prototype.extension = $util.emptyArray;
            DescriptorProto.prototype.nestedType = $util.emptyArray;
            DescriptorProto.prototype.enumType = $util.emptyArray;
            DescriptorProto.prototype.extensionRange = $util.emptyArray;
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;
            DescriptorProto.prototype.options = null;
            DescriptorProto.prototype.reservedRange = $util.emptyArray;
            DescriptorProto.prototype.reservedName = $util.emptyArray;
            DescriptorProto.create = function create(properties) {
              return new DescriptorProto(properties);
            };
            DescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.field != null && message.field.length)
                for (var i = 0; i < message.field.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(18).fork()).ldelim();
              if (message.nestedType != null && message.nestedType.length)
                for (var i = 0; i < message.nestedType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(26).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(34).fork()).ldelim();
              if (message.extensionRange != null && message.extensionRange.length)
                for (var i = 0; i < message.extensionRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(42).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(50).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(58).fork()).ldelim();
              if (message.oneofDecl != null && message.oneofDecl.length)
                for (var i = 0; i < message.oneofDecl.length; ++i)
                  $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(66).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(74).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(82).string(message.reservedName[i]);
              return writer;
            };
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    if (!(message.field && message.field.length))
                      message.field = [];
                    message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 6:
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    if (!(message.nestedType && message.nestedType.length))
                      message.nestedType = [];
                    message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 4:
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 5:
                    if (!(message.extensionRange && message.extensionRange.length))
                      message.extensionRange = [];
                    message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                    break;
                  case 8:
                    if (!(message.oneofDecl && message.oneofDecl.length))
                      message.oneofDecl = [];
                    message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 7:
                    message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                    break;
                  case 9:
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                    break;
                  case 10:
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.field != null && message.hasOwnProperty("field")) {
                if (!Array.isArray(message.field))
                  return "field: array expected";
                for (var i = 0; i < message.field.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                  if (error)
                    return "field." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                if (!Array.isArray(message.nestedType))
                  return "nestedType: array expected";
                for (var i = 0; i < message.nestedType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                  if (error)
                    return "nestedType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                if (!Array.isArray(message.extensionRange))
                  return "extensionRange: array expected";
                for (var i = 0; i < message.extensionRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                  if (error)
                    return "extensionRange." + error;
                }
              }
              if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                if (!Array.isArray(message.oneofDecl))
                  return "oneofDecl: array expected";
                for (var i = 0; i < message.oneofDecl.length; ++i) {
                  var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                  if (error)
                    return "oneofDecl." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MessageOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            DescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.DescriptorProto)
                return object;
              var message = new $root.google.protobuf.DescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.field) {
                if (!Array.isArray(object.field))
                  throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                message.field = [];
                for (var i = 0; i < object.field.length; ++i) {
                  if (typeof object.field[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                  message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.nestedType) {
                if (!Array.isArray(object.nestedType))
                  throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                message.nestedType = [];
                for (var i = 0; i < object.nestedType.length; ++i) {
                  if (typeof object.nestedType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                  message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.extensionRange) {
                if (!Array.isArray(object.extensionRange))
                  throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                message.extensionRange = [];
                for (var i = 0; i < object.extensionRange.length; ++i) {
                  if (typeof object.extensionRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                  message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                }
              }
              if (object.oneofDecl) {
                if (!Array.isArray(object.oneofDecl))
                  throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                message.oneofDecl = [];
                for (var i = 0; i < object.oneofDecl.length; ++i) {
                  if (typeof object.oneofDecl[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                  message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            DescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.field = [];
                object.nestedType = [];
                object.enumType = [];
                object.extensionRange = [];
                object.extension = [];
                object.oneofDecl = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.field && message.field.length) {
                object.field = [];
                for (var j = 0; j < message.field.length; ++j)
                  object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
              }
              if (message.nestedType && message.nestedType.length) {
                object.nestedType = [];
                for (var j = 0; j < message.nestedType.length; ++j)
                  object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.extensionRange && message.extensionRange.length) {
                object.extensionRange = [];
                for (var j = 0; j < message.extensionRange.length; ++j)
                  object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
              if (message.oneofDecl && message.oneofDecl.length) {
                object.oneofDecl = [];
                for (var j = 0; j < message.oneofDecl.length; ++j)
                  object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
              }
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            DescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DescriptorProto.ExtensionRange = function() {
              function ExtensionRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ExtensionRange.prototype.start = 0;
              ExtensionRange.prototype.end = 0;
              ExtensionRange.prototype.options = null;
              ExtensionRange.create = function create(properties) {
                return new ExtensionRange(properties);
              };
              ExtensionRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(8).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(16).int32(message.end);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                  $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
                return writer;
              };
              ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ExtensionRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.start = reader.int32();
                      break;
                    case 2:
                      message.end = reader.int32();
                      break;
                    case 3:
                      message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ExtensionRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                  var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                  if (error)
                    return "options." + error;
                }
                return null;
              };
              ExtensionRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                if (object.options != null) {
                  if (typeof object.options !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                  message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                }
                return message;
              };
              ExtensionRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                  object.options = null;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                if (message.options != null && message.hasOwnProperty("options"))
                  object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                return object;
              };
              ExtensionRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return ExtensionRange;
            }();
            DescriptorProto.ReservedRange = function() {
              function ReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ReservedRange.prototype.start = 0;
              ReservedRange.prototype.end = 0;
              ReservedRange.create = function create(properties) {
                return new ReservedRange(properties);
              };
              ReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(8).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(16).int32(message.end);
                return writer;
              };
              ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.start = reader.int32();
                      break;
                    case 2:
                      message.end = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              ReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              ReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              ReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return ReservedRange;
            }();
            return DescriptorProto;
          }();
          protobuf.ExtensionRangeOptions = function() {
            function ExtensionRangeOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
            ExtensionRangeOptions.create = function create(properties) {
              return new ExtensionRangeOptions(properties);
            };
            ExtensionRangeOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ExtensionRangeOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ExtensionRangeOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            ExtensionRangeOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                return object;
              var message = new $root.google.protobuf.ExtensionRangeOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            ExtensionRangeOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ExtensionRangeOptions;
          }();
          protobuf.FieldDescriptorProto = function() {
            function FieldDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldDescriptorProto.prototype.name = "";
            FieldDescriptorProto.prototype.number = 0;
            FieldDescriptorProto.prototype.label = 1;
            FieldDescriptorProto.prototype.type = 1;
            FieldDescriptorProto.prototype.typeName = "";
            FieldDescriptorProto.prototype.extendee = "";
            FieldDescriptorProto.prototype.defaultValue = "";
            FieldDescriptorProto.prototype.oneofIndex = 0;
            FieldDescriptorProto.prototype.jsonName = "";
            FieldDescriptorProto.prototype.options = null;
            FieldDescriptorProto.prototype.proto3Optional = false;
            FieldDescriptorProto.create = function create(properties) {
              return new FieldDescriptorProto(properties);
            };
            FieldDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                writer.uint32(18).string(message.extendee);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(24).int32(message.number);
              if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                writer.uint32(32).int32(message.label);
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(40).int32(message.type);
              if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                writer.uint32(50).string(message.typeName);
              if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                writer.uint32(58).string(message.defaultValue);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(66).fork()).ldelim();
              if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                writer.uint32(72).int32(message.oneofIndex);
              if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                writer.uint32(82).string(message.jsonName);
              if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                writer.uint32(136).bool(message.proto3Optional);
              return writer;
            };
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 3:
                    message.number = reader.int32();
                    break;
                  case 4:
                    message.label = reader.int32();
                    break;
                  case 5:
                    message.type = reader.int32();
                    break;
                  case 6:
                    message.typeName = reader.string();
                    break;
                  case 2:
                    message.extendee = reader.string();
                    break;
                  case 7:
                    message.defaultValue = reader.string();
                    break;
                  case 9:
                    message.oneofIndex = reader.int32();
                    break;
                  case 10:
                    message.jsonName = reader.string();
                    break;
                  case 8:
                    message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                    break;
                  case 17:
                    message.proto3Optional = reader.bool();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.label != null && message.hasOwnProperty("label"))
                switch (message.label) {
                  default:
                    return "label: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                  default:
                    return "type: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                    break;
                }
              if (message.typeName != null && message.hasOwnProperty("typeName")) {
                if (!$util.isString(message.typeName))
                  return "typeName: string expected";
              }
              if (message.extendee != null && message.hasOwnProperty("extendee")) {
                if (!$util.isString(message.extendee))
                  return "extendee: string expected";
              }
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue")) {
                if (!$util.isString(message.defaultValue))
                  return "defaultValue: string expected";
              }
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex")) {
                if (!$util.isInteger(message.oneofIndex))
                  return "oneofIndex: integer expected";
              }
              if (message.jsonName != null && message.hasOwnProperty("jsonName")) {
                if (!$util.isString(message.jsonName))
                  return "jsonName: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FieldOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional")) {
                if (typeof message.proto3Optional !== "boolean")
                  return "proto3Optional: boolean expected";
              }
              return null;
            };
            FieldDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FieldDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                  message.label = 1;
                  break;
                case "LABEL_REQUIRED":
                case 2:
                  message.label = 2;
                  break;
                case "LABEL_REPEATED":
                case 3:
                  message.label = 3;
                  break;
              }
              switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                  message.type = 1;
                  break;
                case "TYPE_FLOAT":
                case 2:
                  message.type = 2;
                  break;
                case "TYPE_INT64":
                case 3:
                  message.type = 3;
                  break;
                case "TYPE_UINT64":
                case 4:
                  message.type = 4;
                  break;
                case "TYPE_INT32":
                case 5:
                  message.type = 5;
                  break;
                case "TYPE_FIXED64":
                case 6:
                  message.type = 6;
                  break;
                case "TYPE_FIXED32":
                case 7:
                  message.type = 7;
                  break;
                case "TYPE_BOOL":
                case 8:
                  message.type = 8;
                  break;
                case "TYPE_STRING":
                case 9:
                  message.type = 9;
                  break;
                case "TYPE_GROUP":
                case 10:
                  message.type = 10;
                  break;
                case "TYPE_MESSAGE":
                case 11:
                  message.type = 11;
                  break;
                case "TYPE_BYTES":
                case 12:
                  message.type = 12;
                  break;
                case "TYPE_UINT32":
                case 13:
                  message.type = 13;
                  break;
                case "TYPE_ENUM":
                case 14:
                  message.type = 14;
                  break;
                case "TYPE_SFIXED32":
                case 15:
                  message.type = 15;
                  break;
                case "TYPE_SFIXED64":
                case 16:
                  message.type = 16;
                  break;
                case "TYPE_SINT32":
                case 17:
                  message.type = 17;
                  break;
                case "TYPE_SINT64":
                case 18:
                  message.type = 18;
                  break;
              }
              if (object.typeName != null)
                message.typeName = String(object.typeName);
              if (object.extendee != null)
                message.extendee = String(object.extendee);
              if (object.defaultValue != null)
                message.defaultValue = String(object.defaultValue);
              if (object.oneofIndex != null)
                message.oneofIndex = object.oneofIndex | 0;
              if (object.jsonName != null)
                message.jsonName = String(object.jsonName);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
              }
              if (object.proto3Optional != null)
                message.proto3Optional = Boolean(object.proto3Optional);
              return message;
            };
            FieldDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.extendee = "";
                object.number = 0;
                object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                object.typeName = "";
                object.defaultValue = "";
                object.options = null;
                object.oneofIndex = 0;
                object.jsonName = "";
                object.proto3Optional = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.extendee != null && message.hasOwnProperty("extendee"))
                object.extendee = message.extendee;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.label != null && message.hasOwnProperty("label"))
                object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
              if (message.typeName != null && message.hasOwnProperty("typeName"))
                object.typeName = message.typeName;
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                object.defaultValue = message.defaultValue;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                object.oneofIndex = message.oneofIndex;
              if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                object.jsonName = message.jsonName;
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                object.proto3Optional = message.proto3Optional;
              return object;
            };
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldDescriptorProto.Type = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "TYPE_DOUBLE"] = 1;
              values[valuesById[2] = "TYPE_FLOAT"] = 2;
              values[valuesById[3] = "TYPE_INT64"] = 3;
              values[valuesById[4] = "TYPE_UINT64"] = 4;
              values[valuesById[5] = "TYPE_INT32"] = 5;
              values[valuesById[6] = "TYPE_FIXED64"] = 6;
              values[valuesById[7] = "TYPE_FIXED32"] = 7;
              values[valuesById[8] = "TYPE_BOOL"] = 8;
              values[valuesById[9] = "TYPE_STRING"] = 9;
              values[valuesById[10] = "TYPE_GROUP"] = 10;
              values[valuesById[11] = "TYPE_MESSAGE"] = 11;
              values[valuesById[12] = "TYPE_BYTES"] = 12;
              values[valuesById[13] = "TYPE_UINT32"] = 13;
              values[valuesById[14] = "TYPE_ENUM"] = 14;
              values[valuesById[15] = "TYPE_SFIXED32"] = 15;
              values[valuesById[16] = "TYPE_SFIXED64"] = 16;
              values[valuesById[17] = "TYPE_SINT32"] = 17;
              values[valuesById[18] = "TYPE_SINT64"] = 18;
              return values;
            }();
            FieldDescriptorProto.Label = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
              values[valuesById[2] = "LABEL_REQUIRED"] = 2;
              values[valuesById[3] = "LABEL_REPEATED"] = 3;
              return values;
            }();
            return FieldDescriptorProto;
          }();
          protobuf.OneofDescriptorProto = function() {
            function OneofDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofDescriptorProto.prototype.name = "";
            OneofDescriptorProto.prototype.options = null;
            OneofDescriptorProto.create = function create(properties) {
              return new OneofDescriptorProto(properties);
            };
            OneofDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(18).fork()).ldelim();
              return writer;
            };
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.OneofOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            OneofDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                return object;
              var message = new $root.google.protobuf.OneofDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
              }
              return message;
            };
            OneofDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
              return object;
            };
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return OneofDescriptorProto;
          }();
          protobuf.EnumDescriptorProto = function() {
            function EnumDescriptorProto(properties) {
              this.value = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumDescriptorProto.prototype.name = "";
            EnumDescriptorProto.prototype.value = $util.emptyArray;
            EnumDescriptorProto.prototype.options = null;
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
            EnumDescriptorProto.create = function create(properties) {
              return new EnumDescriptorProto(properties);
            };
            EnumDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.value != null && message.value.length)
                for (var i = 0; i < message.value.length; ++i)
                  $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(18).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(34).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(42).string(message.reservedName[i]);
              return writer;
            };
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    if (!(message.value && message.value.length))
                      message.value = [];
                    message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                    break;
                  case 4:
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                    break;
                  case 5:
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.value != null && message.hasOwnProperty("value")) {
                if (!Array.isArray(message.value))
                  return "value: array expected";
                for (var i = 0; i < message.value.length; ++i) {
                  var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                  if (error)
                    return "value." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            EnumDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.value) {
                if (!Array.isArray(object.value))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                message.value = [];
                for (var i = 0; i < object.value.length; ++i) {
                  if (typeof object.value[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                  message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            EnumDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.value = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.value && message.value.length) {
                object.value = [];
                for (var j = 0; j < message.value.length; ++j)
                  object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumDescriptorProto.EnumReservedRange = function() {
              function EnumReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              EnumReservedRange.prototype.start = 0;
              EnumReservedRange.prototype.end = 0;
              EnumReservedRange.create = function create(properties) {
                return new EnumReservedRange(properties);
              };
              EnumReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(8).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(16).int32(message.end);
                return writer;
              };
              EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              EnumReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.start = reader.int32();
                      break;
                    case 2:
                      message.end = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              EnumReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              EnumReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                  return object;
                var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              EnumReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              EnumReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return EnumReservedRange;
            }();
            return EnumDescriptorProto;
          }();
          protobuf.EnumValueDescriptorProto = function() {
            function EnumValueDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueDescriptorProto.prototype.name = "";
            EnumValueDescriptorProto.prototype.number = 0;
            EnumValueDescriptorProto.prototype.options = null;
            EnumValueDescriptorProto.create = function create(properties) {
              return new EnumValueDescriptorProto(properties);
            };
            EnumValueDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(16).int32(message.number);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
              return writer;
            };
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.number = reader.int32();
                    break;
                  case 3:
                    message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumValueDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
              }
              return message;
            };
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.number = 0;
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
              return object;
            };
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return EnumValueDescriptorProto;
          }();
          protobuf.ServiceDescriptorProto = function() {
            function ServiceDescriptorProto(properties) {
              this.method = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceDescriptorProto.prototype.name = "";
            ServiceDescriptorProto.prototype.method = $util.emptyArray;
            ServiceDescriptorProto.prototype.options = null;
            ServiceDescriptorProto.create = function create(properties) {
              return new ServiceDescriptorProto(properties);
            };
            ServiceDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.method != null && message.method.length)
                for (var i = 0; i < message.method.length; ++i)
                  $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(18).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
              return writer;
            };
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    if (!(message.method && message.method.length))
                      message.method = [];
                    message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.method != null && message.hasOwnProperty("method")) {
                if (!Array.isArray(message.method))
                  return "method: array expected";
                for (var i = 0; i < message.method.length; ++i) {
                  var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                  if (error)
                    return "method." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            ServiceDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                return object;
              var message = new $root.google.protobuf.ServiceDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.method) {
                if (!Array.isArray(object.method))
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                message.method = [];
                for (var i = 0; i < object.method.length; ++i) {
                  if (typeof object.method[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                  message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
              }
              return message;
            };
            ServiceDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.method = [];
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.method && message.method.length) {
                object.method = [];
                for (var j = 0; j < message.method.length; ++j)
                  object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
              return object;
            };
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ServiceDescriptorProto;
          }();
          protobuf.MethodDescriptorProto = function() {
            function MethodDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodDescriptorProto.prototype.name = "";
            MethodDescriptorProto.prototype.inputType = "";
            MethodDescriptorProto.prototype.outputType = "";
            MethodDescriptorProto.prototype.options = null;
            MethodDescriptorProto.prototype.clientStreaming = false;
            MethodDescriptorProto.prototype.serverStreaming = false;
            MethodDescriptorProto.create = function create(properties) {
              return new MethodDescriptorProto(properties);
            };
            MethodDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                writer.uint32(18).string(message.inputType);
              if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                writer.uint32(26).string(message.outputType);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(34).fork()).ldelim();
              if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                writer.uint32(40).bool(message.clientStreaming);
              if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                writer.uint32(48).bool(message.serverStreaming);
              return writer;
            };
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.inputType = reader.string();
                    break;
                  case 3:
                    message.outputType = reader.string();
                    break;
                  case 4:
                    message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                    break;
                  case 5:
                    message.clientStreaming = reader.bool();
                    break;
                  case 6:
                    message.serverStreaming = reader.bool();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.inputType != null && message.hasOwnProperty("inputType")) {
                if (!$util.isString(message.inputType))
                  return "inputType: string expected";
              }
              if (message.outputType != null && message.hasOwnProperty("outputType")) {
                if (!$util.isString(message.outputType))
                  return "outputType: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MethodOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming")) {
                if (typeof message.clientStreaming !== "boolean")
                  return "clientStreaming: boolean expected";
              }
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming")) {
                if (typeof message.serverStreaming !== "boolean")
                  return "serverStreaming: boolean expected";
              }
              return null;
            };
            MethodDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                return object;
              var message = new $root.google.protobuf.MethodDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.inputType != null)
                message.inputType = String(object.inputType);
              if (object.outputType != null)
                message.outputType = String(object.outputType);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
              }
              if (object.clientStreaming != null)
                message.clientStreaming = Boolean(object.clientStreaming);
              if (object.serverStreaming != null)
                message.serverStreaming = Boolean(object.serverStreaming);
              return message;
            };
            MethodDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.inputType = "";
                object.outputType = "";
                object.options = null;
                object.clientStreaming = false;
                object.serverStreaming = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.inputType != null && message.hasOwnProperty("inputType"))
                object.inputType = message.inputType;
              if (message.outputType != null && message.hasOwnProperty("outputType"))
                object.outputType = message.outputType;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                object.clientStreaming = message.clientStreaming;
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                object.serverStreaming = message.serverStreaming;
              return object;
            };
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return MethodDescriptorProto;
          }();
          protobuf.FileOptions = function() {
            function FileOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileOptions.prototype.javaPackage = "";
            FileOptions.prototype.javaOuterClassname = "";
            FileOptions.prototype.javaMultipleFiles = false;
            FileOptions.prototype.javaGenerateEqualsAndHash = false;
            FileOptions.prototype.javaStringCheckUtf8 = false;
            FileOptions.prototype.optimizeFor = 1;
            FileOptions.prototype.goPackage = "";
            FileOptions.prototype.ccGenericServices = false;
            FileOptions.prototype.javaGenericServices = false;
            FileOptions.prototype.pyGenericServices = false;
            FileOptions.prototype.phpGenericServices = false;
            FileOptions.prototype.deprecated = false;
            FileOptions.prototype.ccEnableArenas = true;
            FileOptions.prototype.objcClassPrefix = "";
            FileOptions.prototype.csharpNamespace = "";
            FileOptions.prototype.swiftPrefix = "";
            FileOptions.prototype.phpClassPrefix = "";
            FileOptions.prototype.phpNamespace = "";
            FileOptions.prototype.phpMetadataNamespace = "";
            FileOptions.prototype.rubyPackage = "";
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;
            FileOptions.create = function create(properties) {
              return new FileOptions(properties);
            };
            FileOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                writer.uint32(10).string(message.javaPackage);
              if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                writer.uint32(66).string(message.javaOuterClassname);
              if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                writer.uint32(72).int32(message.optimizeFor);
              if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                writer.uint32(80).bool(message.javaMultipleFiles);
              if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                writer.uint32(90).string(message.goPackage);
              if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                writer.uint32(128).bool(message.ccGenericServices);
              if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                writer.uint32(136).bool(message.javaGenericServices);
              if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                writer.uint32(144).bool(message.pyGenericServices);
              if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                writer.uint32(160).bool(message.javaGenerateEqualsAndHash);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(184).bool(message.deprecated);
              if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                writer.uint32(216).bool(message.javaStringCheckUtf8);
              if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                writer.uint32(248).bool(message.ccEnableArenas);
              if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                writer.uint32(290).string(message.objcClassPrefix);
              if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                writer.uint32(298).string(message.csharpNamespace);
              if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                writer.uint32(314).string(message.swiftPrefix);
              if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                writer.uint32(322).string(message.phpClassPrefix);
              if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                writer.uint32(330).string(message.phpNamespace);
              if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                writer.uint32(336).bool(message.phpGenericServices);
              if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                writer.uint32(354).string(message.phpMetadataNamespace);
              if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                writer.uint32(362).string(message.rubyPackage);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.javaPackage = reader.string();
                    break;
                  case 8:
                    message.javaOuterClassname = reader.string();
                    break;
                  case 10:
                    message.javaMultipleFiles = reader.bool();
                    break;
                  case 20:
                    message.javaGenerateEqualsAndHash = reader.bool();
                    break;
                  case 27:
                    message.javaStringCheckUtf8 = reader.bool();
                    break;
                  case 9:
                    message.optimizeFor = reader.int32();
                    break;
                  case 11:
                    message.goPackage = reader.string();
                    break;
                  case 16:
                    message.ccGenericServices = reader.bool();
                    break;
                  case 17:
                    message.javaGenericServices = reader.bool();
                    break;
                  case 18:
                    message.pyGenericServices = reader.bool();
                    break;
                  case 42:
                    message.phpGenericServices = reader.bool();
                    break;
                  case 23:
                    message.deprecated = reader.bool();
                    break;
                  case 31:
                    message.ccEnableArenas = reader.bool();
                    break;
                  case 36:
                    message.objcClassPrefix = reader.string();
                    break;
                  case 37:
                    message.csharpNamespace = reader.string();
                    break;
                  case 39:
                    message.swiftPrefix = reader.string();
                    break;
                  case 40:
                    message.phpClassPrefix = reader.string();
                    break;
                  case 41:
                    message.phpNamespace = reader.string();
                    break;
                  case 44:
                    message.phpMetadataNamespace = reader.string();
                    break;
                  case 45:
                    message.rubyPackage = reader.string();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage")) {
                if (!$util.isString(message.javaPackage))
                  return "javaPackage: string expected";
              }
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname")) {
                if (!$util.isString(message.javaOuterClassname))
                  return "javaOuterClassname: string expected";
              }
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles")) {
                if (typeof message.javaMultipleFiles !== "boolean")
                  return "javaMultipleFiles: boolean expected";
              }
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash")) {
                if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                  return "javaGenerateEqualsAndHash: boolean expected";
              }
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8")) {
                if (typeof message.javaStringCheckUtf8 !== "boolean")
                  return "javaStringCheckUtf8: boolean expected";
              }
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                switch (message.optimizeFor) {
                  default:
                    return "optimizeFor: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.goPackage != null && message.hasOwnProperty("goPackage")) {
                if (!$util.isString(message.goPackage))
                  return "goPackage: string expected";
              }
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices")) {
                if (typeof message.ccGenericServices !== "boolean")
                  return "ccGenericServices: boolean expected";
              }
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices")) {
                if (typeof message.javaGenericServices !== "boolean")
                  return "javaGenericServices: boolean expected";
              }
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices")) {
                if (typeof message.pyGenericServices !== "boolean")
                  return "pyGenericServices: boolean expected";
              }
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices")) {
                if (typeof message.phpGenericServices !== "boolean")
                  return "phpGenericServices: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas")) {
                if (typeof message.ccEnableArenas !== "boolean")
                  return "ccEnableArenas: boolean expected";
              }
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix")) {
                if (!$util.isString(message.objcClassPrefix))
                  return "objcClassPrefix: string expected";
              }
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace")) {
                if (!$util.isString(message.csharpNamespace))
                  return "csharpNamespace: string expected";
              }
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix")) {
                if (!$util.isString(message.swiftPrefix))
                  return "swiftPrefix: string expected";
              }
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix")) {
                if (!$util.isString(message.phpClassPrefix))
                  return "phpClassPrefix: string expected";
              }
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace")) {
                if (!$util.isString(message.phpNamespace))
                  return "phpNamespace: string expected";
              }
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace")) {
                if (!$util.isString(message.phpMetadataNamespace))
                  return "phpMetadataNamespace: string expected";
              }
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage")) {
                if (!$util.isString(message.rubyPackage))
                  return "rubyPackage: string expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            FileOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileOptions)
                return object;
              var message = new $root.google.protobuf.FileOptions();
              if (object.javaPackage != null)
                message.javaPackage = String(object.javaPackage);
              if (object.javaOuterClassname != null)
                message.javaOuterClassname = String(object.javaOuterClassname);
              if (object.javaMultipleFiles != null)
                message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
              if (object.javaGenerateEqualsAndHash != null)
                message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
              if (object.javaStringCheckUtf8 != null)
                message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
              switch (object.optimizeFor) {
                case "SPEED":
                case 1:
                  message.optimizeFor = 1;
                  break;
                case "CODE_SIZE":
                case 2:
                  message.optimizeFor = 2;
                  break;
                case "LITE_RUNTIME":
                case 3:
                  message.optimizeFor = 3;
                  break;
              }
              if (object.goPackage != null)
                message.goPackage = String(object.goPackage);
              if (object.ccGenericServices != null)
                message.ccGenericServices = Boolean(object.ccGenericServices);
              if (object.javaGenericServices != null)
                message.javaGenericServices = Boolean(object.javaGenericServices);
              if (object.pyGenericServices != null)
                message.pyGenericServices = Boolean(object.pyGenericServices);
              if (object.phpGenericServices != null)
                message.phpGenericServices = Boolean(object.phpGenericServices);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.ccEnableArenas != null)
                message.ccEnableArenas = Boolean(object.ccEnableArenas);
              if (object.objcClassPrefix != null)
                message.objcClassPrefix = String(object.objcClassPrefix);
              if (object.csharpNamespace != null)
                message.csharpNamespace = String(object.csharpNamespace);
              if (object.swiftPrefix != null)
                message.swiftPrefix = String(object.swiftPrefix);
              if (object.phpClassPrefix != null)
                message.phpClassPrefix = String(object.phpClassPrefix);
              if (object.phpNamespace != null)
                message.phpNamespace = String(object.phpNamespace);
              if (object.phpMetadataNamespace != null)
                message.phpMetadataNamespace = String(object.phpMetadataNamespace);
              if (object.rubyPackage != null)
                message.rubyPackage = String(object.rubyPackage);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            FileOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.javaPackage = "";
                object.javaOuterClassname = "";
                object.optimizeFor = options.enums === String ? "SPEED" : 1;
                object.javaMultipleFiles = false;
                object.goPackage = "";
                object.ccGenericServices = false;
                object.javaGenericServices = false;
                object.pyGenericServices = false;
                object.javaGenerateEqualsAndHash = false;
                object.deprecated = false;
                object.javaStringCheckUtf8 = false;
                object.ccEnableArenas = true;
                object.objcClassPrefix = "";
                object.csharpNamespace = "";
                object.swiftPrefix = "";
                object.phpClassPrefix = "";
                object.phpNamespace = "";
                object.phpGenericServices = false;
                object.phpMetadataNamespace = "";
                object.rubyPackage = "";
              }
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                object.javaPackage = message.javaPackage;
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                object.javaOuterClassname = message.javaOuterClassname;
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                object.javaMultipleFiles = message.javaMultipleFiles;
              if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                object.goPackage = message.goPackage;
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                object.ccGenericServices = message.ccGenericServices;
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                object.javaGenericServices = message.javaGenericServices;
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                object.pyGenericServices = message.pyGenericServices;
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                object.ccEnableArenas = message.ccEnableArenas;
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                object.objcClassPrefix = message.objcClassPrefix;
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                object.csharpNamespace = message.csharpNamespace;
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                object.swiftPrefix = message.swiftPrefix;
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                object.phpClassPrefix = message.phpClassPrefix;
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                object.phpNamespace = message.phpNamespace;
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                object.phpGenericServices = message.phpGenericServices;
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                object.phpMetadataNamespace = message.phpMetadataNamespace;
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                object.rubyPackage = message.rubyPackage;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            FileOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileOptions.OptimizeMode = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "SPEED"] = 1;
              values[valuesById[2] = "CODE_SIZE"] = 2;
              values[valuesById[3] = "LITE_RUNTIME"] = 3;
              return values;
            }();
            return FileOptions;
          }();
          protobuf.MessageOptions = function() {
            function MessageOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MessageOptions.prototype.messageSetWireFormat = false;
            MessageOptions.prototype.noStandardDescriptorAccessor = false;
            MessageOptions.prototype.deprecated = false;
            MessageOptions.prototype.mapEntry = false;
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
            MessageOptions.create = function create(properties) {
              return new MessageOptions(properties);
            };
            MessageOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                writer.uint32(8).bool(message.messageSetWireFormat);
              if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                writer.uint32(16).bool(message.noStandardDescriptorAccessor);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(24).bool(message.deprecated);
              if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                writer.uint32(56).bool(message.mapEntry);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MessageOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.messageSetWireFormat = reader.bool();
                    break;
                  case 2:
                    message.noStandardDescriptorAccessor = reader.bool();
                    break;
                  case 3:
                    message.deprecated = reader.bool();
                    break;
                  case 7:
                    message.mapEntry = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MessageOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat")) {
                if (typeof message.messageSetWireFormat !== "boolean")
                  return "messageSetWireFormat: boolean expected";
              }
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor")) {
                if (typeof message.noStandardDescriptorAccessor !== "boolean")
                  return "noStandardDescriptorAccessor: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry")) {
                if (typeof message.mapEntry !== "boolean")
                  return "mapEntry: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            MessageOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MessageOptions)
                return object;
              var message = new $root.google.protobuf.MessageOptions();
              if (object.messageSetWireFormat != null)
                message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
              if (object.noStandardDescriptorAccessor != null)
                message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.mapEntry != null)
                message.mapEntry = Boolean(object.mapEntry);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            MessageOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.messageSetWireFormat = false;
                object.noStandardDescriptorAccessor = false;
                object.deprecated = false;
                object.mapEntry = false;
              }
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                object.messageSetWireFormat = message.messageSetWireFormat;
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                object.mapEntry = message.mapEntry;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            MessageOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return MessageOptions;
          }();
          protobuf.FieldOptions = function() {
            function FieldOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldOptions.prototype.ctype = 0;
            FieldOptions.prototype.packed = false;
            FieldOptions.prototype.jstype = 0;
            FieldOptions.prototype.lazy = false;
            FieldOptions.prototype.deprecated = false;
            FieldOptions.prototype.weak = false;
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
            FieldOptions.create = function create(properties) {
              return new FieldOptions(properties);
            };
            FieldOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                writer.uint32(8).int32(message.ctype);
              if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                writer.uint32(16).bool(message.packed);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(24).bool(message.deprecated);
              if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                writer.uint32(40).bool(message.lazy);
              if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                writer.uint32(48).int32(message.jstype);
              if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                writer.uint32(80).bool(message.weak);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.ctype = reader.int32();
                    break;
                  case 2:
                    message.packed = reader.bool();
                    break;
                  case 6:
                    message.jstype = reader.int32();
                    break;
                  case 5:
                    message.lazy = reader.bool();
                    break;
                  case 3:
                    message.deprecated = reader.bool();
                    break;
                  case 10:
                    message.weak = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                switch (message.ctype) {
                  default:
                    return "ctype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.packed != null && message.hasOwnProperty("packed")) {
                if (typeof message.packed !== "boolean")
                  return "packed: boolean expected";
              }
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                switch (message.jstype) {
                  default:
                    return "jstype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.lazy != null && message.hasOwnProperty("lazy")) {
                if (typeof message.lazy !== "boolean")
                  return "lazy: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.weak != null && message.hasOwnProperty("weak")) {
                if (typeof message.weak !== "boolean")
                  return "weak: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            FieldOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldOptions)
                return object;
              var message = new $root.google.protobuf.FieldOptions();
              switch (object.ctype) {
                case "STRING":
                case 0:
                  message.ctype = 0;
                  break;
                case "CORD":
                case 1:
                  message.ctype = 1;
                  break;
                case "STRING_PIECE":
                case 2:
                  message.ctype = 2;
                  break;
              }
              if (object.packed != null)
                message.packed = Boolean(object.packed);
              switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                  message.jstype = 0;
                  break;
                case "JS_STRING":
                case 1:
                  message.jstype = 1;
                  break;
                case "JS_NUMBER":
                case 2:
                  message.jstype = 2;
                  break;
              }
              if (object.lazy != null)
                message.lazy = Boolean(object.lazy);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.weak != null)
                message.weak = Boolean(object.weak);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            FieldOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.ctype = options.enums === String ? "STRING" : 0;
                object.packed = false;
                object.deprecated = false;
                object.lazy = false;
                object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                object.weak = false;
              }
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
              if (message.packed != null && message.hasOwnProperty("packed"))
                object.packed = message.packed;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.lazy != null && message.hasOwnProperty("lazy"))
                object.lazy = message.lazy;
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
              if (message.weak != null && message.hasOwnProperty("weak"))
                object.weak = message.weak;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            FieldOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldOptions.CType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "STRING"] = 0;
              values[valuesById[1] = "CORD"] = 1;
              values[valuesById[2] = "STRING_PIECE"] = 2;
              return values;
            }();
            FieldOptions.JSType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "JS_NORMAL"] = 0;
              values[valuesById[1] = "JS_STRING"] = 1;
              values[valuesById[2] = "JS_NUMBER"] = 2;
              return values;
            }();
            return FieldOptions;
          }();
          protobuf.OneofOptions = function() {
            function OneofOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
            OneofOptions.create = function create(properties) {
              return new OneofOptions(properties);
            };
            OneofOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            OneofOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofOptions)
                return object;
              var message = new $root.google.protobuf.OneofOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            OneofOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            OneofOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return OneofOptions;
          }();
          protobuf.EnumOptions = function() {
            function EnumOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumOptions.prototype.allowAlias = false;
            EnumOptions.prototype.deprecated = false;
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumOptions.create = function create(properties) {
              return new EnumOptions(properties);
            };
            EnumOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                writer.uint32(16).bool(message.allowAlias);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(24).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2:
                    message.allowAlias = reader.bool();
                    break;
                  case 3:
                    message.deprecated = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias")) {
                if (typeof message.allowAlias !== "boolean")
                  return "allowAlias: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumOptions)
                return object;
              var message = new $root.google.protobuf.EnumOptions();
              if (object.allowAlias != null)
                message.allowAlias = Boolean(object.allowAlias);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.allowAlias = false;
                object.deprecated = false;
              }
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                object.allowAlias = message.allowAlias;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return EnumOptions;
          }();
          protobuf.EnumValueOptions = function() {
            function EnumValueOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueOptions.prototype.deprecated = false;
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumValueOptions.create = function create(properties) {
              return new EnumValueOptions(properties);
            };
            EnumValueOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(8).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.deprecated = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumValueOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueOptions)
                return object;
              var message = new $root.google.protobuf.EnumValueOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumValueOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults)
                object.deprecated = false;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumValueOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return EnumValueOptions;
          }();
          protobuf.ServiceOptions = function() {
            function ServiceOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceOptions.prototype.deprecated = false;
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
            ServiceOptions.prototype[".google.api.defaultHost"] = "";
            ServiceOptions.prototype[".google.api.oauthScopes"] = "";
            ServiceOptions.create = function create(properties) {
              return new ServiceOptions(properties);
            };
            ServiceOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(264).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                writer.uint32(8394).string(message[".google.api.defaultHost"]);
              if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                writer.uint32(8402).string(message[".google.api.oauthScopes"]);
              return writer;
            };
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33:
                    message.deprecated = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  case 1049:
                    message[".google.api.defaultHost"] = reader.string();
                    break;
                  case 1050:
                    message[".google.api.oauthScopes"] = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost")) {
                if (!$util.isString(message[".google.api.defaultHost"]))
                  return ".google.api.defaultHost: string expected";
              }
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes")) {
                if (!$util.isString(message[".google.api.oauthScopes"]))
                  return ".google.api.oauthScopes: string expected";
              }
              return null;
            };
            ServiceOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceOptions)
                return object;
              var message = new $root.google.protobuf.ServiceOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.defaultHost"] != null)
                message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
              if (object[".google.api.oauthScopes"] != null)
                message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
              return message;
            };
            ServiceOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.deprecated = false;
                object[".google.api.defaultHost"] = "";
                object[".google.api.oauthScopes"] = "";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
              return object;
            };
            ServiceOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ServiceOptions;
          }();
          protobuf.MethodOptions = function() {
            function MethodOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.methodSignature"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodOptions.prototype.deprecated = false;
            MethodOptions.prototype.idempotencyLevel = 0;
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
            MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
            MethodOptions.prototype[".google.api.http"] = null;
            MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
            MethodOptions.create = function create(properties) {
              return new MethodOptions(properties);
            };
            MethodOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(264).bool(message.deprecated);
              if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                writer.uint32(272).int32(message.idempotencyLevel);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              if (message[".google.longrunning.operationInfo"] != null && Object.hasOwnProperty.call(message, ".google.longrunning.operationInfo"))
                $root.google.longrunning.OperationInfo.encode(message[".google.longrunning.operationInfo"], writer.uint32(8394).fork()).ldelim();
              if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  writer.uint32(8410).string(message[".google.api.methodSignature"][i]);
              if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(578365826).fork()).ldelim();
              return writer;
            };
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33:
                    message.deprecated = reader.bool();
                    break;
                  case 34:
                    message.idempotencyLevel = reader.int32();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  case 1049:
                    message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.decode(reader, reader.uint32());
                    break;
                  case 72295728:
                    message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                    break;
                  case 1051:
                    if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                      message[".google.api.methodSignature"] = [];
                    message[".google.api.methodSignature"].push(reader.string());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                switch (message.idempotencyLevel) {
                  default:
                    return "idempotencyLevel: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo")) {
                var error = $root.google.longrunning.OperationInfo.verify(message[".google.longrunning.operationInfo"]);
                if (error)
                  return ".google.longrunning.operationInfo." + error;
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                if (error)
                  return ".google.api.http." + error;
              }
              if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                if (!Array.isArray(message[".google.api.methodSignature"]))
                  return ".google.api.methodSignature: array expected";
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  if (!$util.isString(message[".google.api.methodSignature"][i]))
                    return ".google.api.methodSignature: string[] expected";
              }
              return null;
            };
            MethodOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodOptions)
                return object;
              var message = new $root.google.protobuf.MethodOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              switch (object.idempotencyLevel) {
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                  message.idempotencyLevel = 0;
                  break;
                case "NO_SIDE_EFFECTS":
                case 1:
                  message.idempotencyLevel = 1;
                  break;
                case "IDEMPOTENT":
                case 2:
                  message.idempotencyLevel = 2;
                  break;
              }
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.longrunning.operationInfo"] != null) {
                if (typeof object[".google.longrunning.operationInfo"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
              }
              if (object[".google.api.http"] != null) {
                if (typeof object[".google.api.http"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
              }
              if (object[".google.api.methodSignature"]) {
                if (!Array.isArray(object[".google.api.methodSignature"]))
                  throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                message[".google.api.methodSignature"] = [];
                for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                  message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
              }
              return message;
            };
            MethodOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.methodSignature"] = [];
              }
              if (options.defaults) {
                object.deprecated = false;
                object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                object[".google.longrunning.operationInfo"] = null;
                object[".google.api.http"] = null;
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
              if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                object[".google.api.methodSignature"] = [];
                for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                  object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
              return object;
            };
            MethodOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodOptions.IdempotencyLevel = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
              values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
              values[valuesById[2] = "IDEMPOTENT"] = 2;
              return values;
            }();
            return MethodOptions;
          }();
          protobuf.UninterpretedOption = function() {
            function UninterpretedOption(properties) {
              this.name = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            UninterpretedOption.prototype.name = $util.emptyArray;
            UninterpretedOption.prototype.identifierValue = "";
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            UninterpretedOption.prototype.doubleValue = 0;
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
            UninterpretedOption.prototype.aggregateValue = "";
            UninterpretedOption.create = function create(properties) {
              return new UninterpretedOption(properties);
            };
            UninterpretedOption.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && message.name.length)
                for (var i = 0; i < message.name.length; ++i)
                  $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(18).fork()).ldelim();
              if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                writer.uint32(26).string(message.identifierValue);
              if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                writer.uint32(32).uint64(message.positiveIntValue);
              if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                writer.uint32(40).int64(message.negativeIntValue);
              if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                writer.uint32(49).double(message.doubleValue);
              if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                writer.uint32(58).bytes(message.stringValue);
              if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                writer.uint32(66).string(message.aggregateValue);
              return writer;
            };
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            UninterpretedOption.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2:
                    if (!(message.name && message.name.length))
                      message.name = [];
                    message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.identifierValue = reader.string();
                    break;
                  case 4:
                    message.positiveIntValue = reader.uint64();
                    break;
                  case 5:
                    message.negativeIntValue = reader.int64();
                    break;
                  case 6:
                    message.doubleValue = reader.double();
                    break;
                  case 7:
                    message.stringValue = reader.bytes();
                    break;
                  case 8:
                    message.aggregateValue = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            UninterpretedOption.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!Array.isArray(message.name))
                  return "name: array expected";
                for (var i = 0; i < message.name.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                  if (error)
                    return "name." + error;
                }
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue")) {
                if (!$util.isString(message.identifierValue))
                  return "identifierValue: string expected";
              }
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue")) {
                if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                  return "positiveIntValue: integer|Long expected";
              }
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue")) {
                if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                  return "negativeIntValue: integer|Long expected";
              }
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                if (typeof message.doubleValue !== "number")
                  return "doubleValue: number expected";
              }
              if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                  return "stringValue: buffer expected";
              }
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue")) {
                if (!$util.isString(message.aggregateValue))
                  return "aggregateValue: string expected";
              }
              return null;
            };
            UninterpretedOption.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.UninterpretedOption)
                return object;
              var message = new $root.google.protobuf.UninterpretedOption();
              if (object.name) {
                if (!Array.isArray(object.name))
                  throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                message.name = [];
                for (var i = 0; i < object.name.length; ++i) {
                  if (typeof object.name[i] !== "object")
                    throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                  message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                }
              }
              if (object.identifierValue != null)
                message.identifierValue = String(object.identifierValue);
              if (object.positiveIntValue != null) {
                if ($util.Long)
                  (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                else if (typeof object.positiveIntValue === "string")
                  message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                else if (typeof object.positiveIntValue === "number")
                  message.positiveIntValue = object.positiveIntValue;
                else if (typeof object.positiveIntValue === "object")
                  message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
              }
              if (object.negativeIntValue != null) {
                if ($util.Long)
                  (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                else if (typeof object.negativeIntValue === "string")
                  message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                else if (typeof object.negativeIntValue === "number")
                  message.negativeIntValue = object.negativeIntValue;
                else if (typeof object.negativeIntValue === "object")
                  message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
              }
              if (object.doubleValue != null)
                message.doubleValue = Number(object.doubleValue);
              if (object.stringValue != null) {
                if (typeof object.stringValue === "string")
                  $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                else if (object.stringValue.length)
                  message.stringValue = object.stringValue;
              }
              if (object.aggregateValue != null)
                message.aggregateValue = String(object.aggregateValue);
              return message;
            };
            UninterpretedOption.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.name = [];
              if (options.defaults) {
                object.identifierValue = "";
                if ($util.Long) {
                  var long = new $util.Long(0, 0, true);
                  object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.positiveIntValue = options.longs === String ? "0" : 0;
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.negativeIntValue = options.longs === String ? "0" : 0;
                object.doubleValue = 0;
                if (options.bytes === String)
                  object.stringValue = "";
                else {
                  object.stringValue = [];
                  if (options.bytes !== Array)
                    object.stringValue = $util.newBuffer(object.stringValue);
                }
                object.aggregateValue = "";
              }
              if (message.name && message.name.length) {
                object.name = [];
                for (var j = 0; j < message.name.length; ++j)
                  object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                object.identifierValue = message.identifierValue;
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                if (typeof message.positiveIntValue === "number")
                  object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                else
                  object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                if (typeof message.negativeIntValue === "number")
                  object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                else
                  object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
              if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                object.aggregateValue = message.aggregateValue;
              return object;
            };
            UninterpretedOption.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            UninterpretedOption.NamePart = function() {
              function NamePart(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              NamePart.prototype.namePart = "";
              NamePart.prototype.isExtension = false;
              NamePart.create = function create(properties) {
                return new NamePart(properties);
              };
              NamePart.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                writer.uint32(10).string(message.namePart);
                writer.uint32(16).bool(message.isExtension);
                return writer;
              };
              NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              NamePart.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.namePart = reader.string();
                      break;
                    case 2:
                      message.isExtension = reader.bool();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                if (!message.hasOwnProperty("namePart"))
                  throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                if (!message.hasOwnProperty("isExtension"))
                  throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                return message;
              };
              NamePart.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              NamePart.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (!$util.isString(message.namePart))
                  return "namePart: string expected";
                if (typeof message.isExtension !== "boolean")
                  return "isExtension: boolean expected";
                return null;
              };
              NamePart.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                  return object;
                var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                if (object.namePart != null)
                  message.namePart = String(object.namePart);
                if (object.isExtension != null)
                  message.isExtension = Boolean(object.isExtension);
                return message;
              };
              NamePart.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.namePart = "";
                  object.isExtension = false;
                }
                if (message.namePart != null && message.hasOwnProperty("namePart"))
                  object.namePart = message.namePart;
                if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                  object.isExtension = message.isExtension;
                return object;
              };
              NamePart.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return NamePart;
            }();
            return UninterpretedOption;
          }();
          protobuf.SourceCodeInfo = function() {
            function SourceCodeInfo(properties) {
              this.location = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            SourceCodeInfo.prototype.location = $util.emptyArray;
            SourceCodeInfo.create = function create(properties) {
              return new SourceCodeInfo(properties);
            };
            SourceCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.location != null && message.location.length)
                for (var i = 0; i < message.location.length; ++i)
                  $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            SourceCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.location && message.location.length))
                      message.location = [];
                    message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            SourceCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.location != null && message.hasOwnProperty("location")) {
                if (!Array.isArray(message.location))
                  return "location: array expected";
                for (var i = 0; i < message.location.length; ++i) {
                  var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                  if (error)
                    return "location." + error;
                }
              }
              return null;
            };
            SourceCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.SourceCodeInfo)
                return object;
              var message = new $root.google.protobuf.SourceCodeInfo();
              if (object.location) {
                if (!Array.isArray(object.location))
                  throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                message.location = [];
                for (var i = 0; i < object.location.length; ++i) {
                  if (typeof object.location[i] !== "object")
                    throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                  message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                }
              }
              return message;
            };
            SourceCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.location = [];
              if (message.location && message.location.length) {
                object.location = [];
                for (var j = 0; j < message.location.length; ++j)
                  object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
              }
              return object;
            };
            SourceCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            SourceCodeInfo.Location = function() {
              function Location(properties) {
                this.path = [];
                this.span = [];
                this.leadingDetachedComments = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Location.prototype.path = $util.emptyArray;
              Location.prototype.span = $util.emptyArray;
              Location.prototype.leadingComments = "";
              Location.prototype.trailingComments = "";
              Location.prototype.leadingDetachedComments = $util.emptyArray;
              Location.create = function create(properties) {
                return new Location(properties);
              };
              Location.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(10).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.span != null && message.span.length) {
                  writer.uint32(18).fork();
                  for (var i = 0; i < message.span.length; ++i)
                    writer.int32(message.span[i]);
                  writer.ldelim();
                }
                if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                  writer.uint32(26).string(message.leadingComments);
                if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                  writer.uint32(34).string(message.trailingComments);
                if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    writer.uint32(50).string(message.leadingDetachedComments[i]);
                return writer;
              };
              Location.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Location.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    case 2:
                      if (!(message.span && message.span.length))
                        message.span = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.span.push(reader.int32());
                      } else
                        message.span.push(reader.int32());
                      break;
                    case 3:
                      message.leadingComments = reader.string();
                      break;
                    case 4:
                      message.trailingComments = reader.string();
                      break;
                    case 6:
                      if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                        message.leadingDetachedComments = [];
                      message.leadingDetachedComments.push(reader.string());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Location.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Location.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.span != null && message.hasOwnProperty("span")) {
                  if (!Array.isArray(message.span))
                    return "span: array expected";
                  for (var i = 0; i < message.span.length; ++i)
                    if (!$util.isInteger(message.span[i]))
                      return "span: integer[] expected";
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments")) {
                  if (!$util.isString(message.leadingComments))
                    return "leadingComments: string expected";
                }
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments")) {
                  if (!$util.isString(message.trailingComments))
                    return "trailingComments: string expected";
                }
                if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                  if (!Array.isArray(message.leadingDetachedComments))
                    return "leadingDetachedComments: array expected";
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    if (!$util.isString(message.leadingDetachedComments[i]))
                      return "leadingDetachedComments: string[] expected";
                }
                return null;
              };
              Location.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                  return object;
                var message = new $root.google.protobuf.SourceCodeInfo.Location();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.span) {
                  if (!Array.isArray(object.span))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                  message.span = [];
                  for (var i = 0; i < object.span.length; ++i)
                    message.span[i] = object.span[i] | 0;
                }
                if (object.leadingComments != null)
                  message.leadingComments = String(object.leadingComments);
                if (object.trailingComments != null)
                  message.trailingComments = String(object.trailingComments);
                if (object.leadingDetachedComments) {
                  if (!Array.isArray(object.leadingDetachedComments))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                  message.leadingDetachedComments = [];
                  for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                    message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                }
                return message;
              };
              Location.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.path = [];
                  object.span = [];
                  object.leadingDetachedComments = [];
                }
                if (options.defaults) {
                  object.leadingComments = "";
                  object.trailingComments = "";
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.span && message.span.length) {
                  object.span = [];
                  for (var j = 0; j < message.span.length; ++j)
                    object.span[j] = message.span[j];
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                  object.leadingComments = message.leadingComments;
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                  object.trailingComments = message.trailingComments;
                if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                  object.leadingDetachedComments = [];
                  for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                    object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                }
                return object;
              };
              Location.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Location;
            }();
            return SourceCodeInfo;
          }();
          protobuf.GeneratedCodeInfo = function() {
            function GeneratedCodeInfo(properties) {
              this.annotation = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
            GeneratedCodeInfo.create = function create(properties) {
              return new GeneratedCodeInfo(properties);
            };
            GeneratedCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.annotation != null && message.annotation.length)
                for (var i = 0; i < message.annotation.length; ++i)
                  $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GeneratedCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.annotation && message.annotation.length))
                      message.annotation = [];
                    message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GeneratedCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.annotation != null && message.hasOwnProperty("annotation")) {
                if (!Array.isArray(message.annotation))
                  return "annotation: array expected";
                for (var i = 0; i < message.annotation.length; ++i) {
                  var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                  if (error)
                    return "annotation." + error;
                }
              }
              return null;
            };
            GeneratedCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                return object;
              var message = new $root.google.protobuf.GeneratedCodeInfo();
              if (object.annotation) {
                if (!Array.isArray(object.annotation))
                  throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                message.annotation = [];
                for (var i = 0; i < object.annotation.length; ++i) {
                  if (typeof object.annotation[i] !== "object")
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                  message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                }
              }
              return message;
            };
            GeneratedCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.annotation = [];
              if (message.annotation && message.annotation.length) {
                object.annotation = [];
                for (var j = 0; j < message.annotation.length; ++j)
                  object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
              }
              return object;
            };
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GeneratedCodeInfo.Annotation = function() {
              function Annotation(properties) {
                this.path = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Annotation.prototype.path = $util.emptyArray;
              Annotation.prototype.sourceFile = "";
              Annotation.prototype.begin = 0;
              Annotation.prototype.end = 0;
              Annotation.create = function create(properties) {
                return new Annotation(properties);
              };
              Annotation.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(10).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                  writer.uint32(18).string(message.sourceFile);
                if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                  writer.uint32(24).int32(message.begin);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(32).int32(message.end);
                return writer;
              };
              Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Annotation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    case 2:
                      message.sourceFile = reader.string();
                      break;
                    case 3:
                      message.begin = reader.int32();
                      break;
                    case 4:
                      message.end = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Annotation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Annotation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile")) {
                  if (!$util.isString(message.sourceFile))
                    return "sourceFile: string expected";
                }
                if (message.begin != null && message.hasOwnProperty("begin")) {
                  if (!$util.isInteger(message.begin))
                    return "begin: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              Annotation.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                  return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.sourceFile != null)
                  message.sourceFile = String(object.sourceFile);
                if (object.begin != null)
                  message.begin = object.begin | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              Annotation.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.path = [];
                if (options.defaults) {
                  object.sourceFile = "";
                  object.begin = 0;
                  object.end = 0;
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                  object.sourceFile = message.sourceFile;
                if (message.begin != null && message.hasOwnProperty("begin"))
                  object.begin = message.begin;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              Annotation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Annotation;
            }();
            return GeneratedCodeInfo;
          }();
          protobuf.Any = function() {
            function Any(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Any.prototype.type_url = "";
            Any.prototype.value = $util.newBuffer([]);
            Any.create = function create(properties) {
              return new Any(properties);
            };
            Any.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                writer.uint32(10).string(message.type_url);
              if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(18).bytes(message.value);
              return writer;
            };
            Any.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Any.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.type_url = reader.string();
                    break;
                  case 2:
                    message.value = reader.bytes();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Any.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Any.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type_url != null && message.hasOwnProperty("type_url")) {
                if (!$util.isString(message.type_url))
                  return "type_url: string expected";
              }
              if (message.value != null && message.hasOwnProperty("value")) {
                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                  return "value: buffer expected";
              }
              return null;
            };
            Any.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Any)
                return object;
              var message = new $root.google.protobuf.Any();
              if (object.type_url != null)
                message.type_url = String(object.type_url);
              if (object.value != null) {
                if (typeof object.value === "string")
                  $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length)
                  message.value = object.value;
              }
              return message;
            };
            Any.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.type_url = "";
                if (options.bytes === String)
                  object.value = "";
                else {
                  object.value = [];
                  if (options.bytes !== Array)
                    object.value = $util.newBuffer(object.value);
                }
              }
              if (message.type_url != null && message.hasOwnProperty("type_url"))
                object.type_url = message.type_url;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
              return object;
            };
            Any.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Any;
          }();
          protobuf.Duration = function() {
            function Duration(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            Duration.prototype.nanos = 0;
            Duration.create = function create(properties) {
              return new Duration(properties);
            };
            Duration.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                writer.uint32(8).int64(message.seconds);
              if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                writer.uint32(16).int32(message.nanos);
              return writer;
            };
            Duration.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Duration.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.seconds = reader.int64();
                    break;
                  case 2:
                    message.nanos = reader.int32();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Duration.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Duration.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.seconds != null && message.hasOwnProperty("seconds")) {
                if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                  return "seconds: integer|Long expected";
              }
              if (message.nanos != null && message.hasOwnProperty("nanos")) {
                if (!$util.isInteger(message.nanos))
                  return "nanos: integer expected";
              }
              return null;
            };
            Duration.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Duration)
                return object;
              var message = new $root.google.protobuf.Duration();
              if (object.seconds != null) {
                if ($util.Long)
                  (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                else if (typeof object.seconds === "string")
                  message.seconds = parseInt(object.seconds, 10);
                else if (typeof object.seconds === "number")
                  message.seconds = object.seconds;
                else if (typeof object.seconds === "object")
                  message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
              }
              if (object.nanos != null)
                message.nanos = object.nanos | 0;
              return message;
            };
            Duration.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.seconds = options.longs === String ? "0" : 0;
                object.nanos = 0;
              }
              if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (typeof message.seconds === "number")
                  object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                else
                  object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
              if (message.nanos != null && message.hasOwnProperty("nanos"))
                object.nanos = message.nanos;
              return object;
            };
            Duration.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Duration;
          }();
          protobuf.Empty = function() {
            function Empty(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Empty.create = function create(properties) {
              return new Empty(properties);
            };
            Empty.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              return writer;
            };
            Empty.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Empty.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Empty.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Empty.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              return null;
            };
            Empty.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Empty)
                return object;
              return new $root.google.protobuf.Empty();
            };
            Empty.toObject = function toObject() {
              return {};
            };
            Empty.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Empty;
          }();
          return protobuf;
        }();
        google.rpc = function() {
          var rpc = {};
          rpc.Status = function() {
            function Status(properties) {
              this.details = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Status.prototype.code = 0;
            Status.prototype.message = "";
            Status.prototype.details = $util.emptyArray;
            Status.create = function create(properties) {
              return new Status(properties);
            };
            Status.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(8).int32(message.code);
              if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(18).string(message.message);
              if (message.details != null && message.details.length)
                for (var i = 0; i < message.details.length; ++i)
                  $root.google.protobuf.Any.encode(message.details[i], writer.uint32(26).fork()).ldelim();
              return writer;
            };
            Status.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Status.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.code = reader.int32();
                    break;
                  case 2:
                    message.message = reader.string();
                    break;
                  case 3:
                    if (!(message.details && message.details.length))
                      message.details = [];
                    message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Status.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Status.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.code != null && message.hasOwnProperty("code")) {
                if (!$util.isInteger(message.code))
                  return "code: integer expected";
              }
              if (message.message != null && message.hasOwnProperty("message")) {
                if (!$util.isString(message.message))
                  return "message: string expected";
              }
              if (message.details != null && message.hasOwnProperty("details")) {
                if (!Array.isArray(message.details))
                  return "details: array expected";
                for (var i = 0; i < message.details.length; ++i) {
                  var error = $root.google.protobuf.Any.verify(message.details[i]);
                  if (error)
                    return "details." + error;
                }
              }
              return null;
            };
            Status.fromObject = function fromObject(object) {
              if (object instanceof $root.google.rpc.Status)
                return object;
              var message = new $root.google.rpc.Status();
              if (object.code != null)
                message.code = object.code | 0;
              if (object.message != null)
                message.message = String(object.message);
              if (object.details) {
                if (!Array.isArray(object.details))
                  throw TypeError(".google.rpc.Status.details: array expected");
                message.details = [];
                for (var i = 0; i < object.details.length; ++i) {
                  if (typeof object.details[i] !== "object")
                    throw TypeError(".google.rpc.Status.details: object expected");
                  message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                }
              }
              return message;
            };
            Status.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.details = [];
              if (options.defaults) {
                object.code = 0;
                object.message = "";
              }
              if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
              if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
              if (message.details && message.details.length) {
                object.details = [];
                for (var j = 0; j < message.details.length; ++j)
                  object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
              }
              return object;
            };
            Status.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Status;
          }();
          return rpc;
        }();
        return google;
      }();
      return $root;
    });
  }
});

// node_modules/google-gax/build/src/longRunningCalls/longrunning.js
var require_longrunning = __commonJS({
  "node_modules/google-gax/build/src/longRunningCalls/longrunning.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.operation = exports2.Operation = void 0;
    var events_1 = require_events();
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var operationProtos = require_operations();
    var Operation = class extends events_1.EventEmitter {
      constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {
        super();
        this.completeListeners = 0;
        this.hasActiveListeners = false;
        this.latestResponse = grpcOp;
        this.name = this.latestResponse.name;
        this.done = this.latestResponse.done;
        this.error = this.latestResponse.error;
        this.longrunningDescriptor = longrunningDescriptor;
        this.result = null;
        this.metadata = null;
        this.backoffSettings = backoffSettings;
        this._unpackResponse(grpcOp);
        this._listenForEvents();
        this._callOptions = callOptions;
      }
      _listenForEvents() {
        this.on("newListener", (event) => {
          if (event === "complete") {
            this.completeListeners++;
            if (!this.hasActiveListeners) {
              this.hasActiveListeners = true;
              this.startPolling_();
            }
          }
        });
        this.on("removeListener", (event) => {
          if (event === "complete" && --this.completeListeners === 0) {
            this.hasActiveListeners = false;
          }
        });
      }
      cancel() {
        if (this.currentCallPromise_) {
          this.currentCallPromise_.cancel();
        }
        const operationsClient = this.longrunningDescriptor.operationsClient;
        const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();
        cancelRequest.name = this.latestResponse.name;
        return operationsClient.cancelOperation(cancelRequest);
      }
      getOperation(callback) {
        const self2 = this;
        const operationsClient = this.longrunningDescriptor.operationsClient;
        function promisifyResponse() {
          if (!callback) {
            return new Promise((resolve, reject) => {
              if (self2.latestResponse.error) {
                const error = new googleError_1.GoogleError(self2.latestResponse.error.message);
                error.code = self2.latestResponse.error.code;
                reject(error);
              } else {
                resolve([self2.result, self2.metadata, self2.latestResponse]);
              }
            });
          }
          return;
        }
        if (this.latestResponse.done) {
          this._unpackResponse(this.latestResponse, callback);
          return promisifyResponse();
        }
        const request = new operationProtos.google.longrunning.GetOperationRequest();
        request.name = this.latestResponse.name;
        this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);
        const noCallbackPromise = this.currentCallPromise_.then((responses) => {
          self2.latestResponse = responses[0];
          self2._unpackResponse(responses[0], callback);
          return promisifyResponse();
        }, (err) => {
          if (callback) {
            callback(err);
            return;
          }
          return Promise.reject(err);
        });
        if (!callback) {
          return noCallbackPromise;
        }
      }
      _unpackResponse(op, callback) {
        const responseDecoder = this.longrunningDescriptor.responseDecoder;
        const metadataDecoder = this.longrunningDescriptor.metadataDecoder;
        let response;
        let metadata;
        if (op.done) {
          if (op.result === "error") {
            const error = new googleError_1.GoogleError(op.error.message);
            error.code = op.error.code;
            this.error = error;
            if (callback) {
              callback(error);
            }
            return;
          }
          if (responseDecoder && op.response) {
            this.response = op.response;
            response = responseDecoder(op.response.value);
            this.result = response;
            this.done = true;
          }
        }
        if (metadataDecoder && op.metadata) {
          metadata = metadataDecoder(op.metadata.value);
          this.metadata = metadata;
        }
        if (callback) {
          callback(null, response, metadata, op);
        }
      }
      startPolling_() {
        const self2 = this;
        let now = new Date();
        const delayMult = this.backoffSettings.retryDelayMultiplier;
        const maxDelay = this.backoffSettings.maxRetryDelayMillis;
        let delay = this.backoffSettings.initialRetryDelayMillis;
        let deadline = Infinity;
        if (this.backoffSettings.totalTimeoutMillis) {
          deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;
        }
        let previousMetadataBytes;
        if (this.latestResponse.metadata) {
          previousMetadataBytes = this.latestResponse.metadata.value;
        }
        function emit(event, ...args) {
          self2.emit(event, ...args);
        }
        function arrayEquals(a, b) {
          if (a.byteLength !== b.byteLength) {
            return false;
          }
          for (let i = 0; i < a.byteLength; ++i) {
            if (a[i] !== b[i])
              return false;
          }
          return true;
        }
        function retry() {
          if (!self2.hasActiveListeners) {
            return;
          }
          if (now.getTime() >= deadline) {
            const error = new googleError_1.GoogleError("Total timeout exceeded before any response was received");
            error.code = status_1.Status.DEADLINE_EXCEEDED;
            setImmediate(emit, "error", error);
            return;
          }
          self2.getOperation((err, result, metadata, rawResponse) => {
            if (err) {
              setImmediate(emit, "error", err);
              return;
            }
            if (!result) {
              if (rawResponse.metadata && (!previousMetadataBytes || rawResponse && !arrayEquals(rawResponse.metadata.value, previousMetadataBytes))) {
                setImmediate(emit, "progress", metadata, rawResponse);
                previousMetadataBytes = rawResponse.metadata.value;
              }
              if (rawResponse.done) {
                setImmediate(emit, "complete", {}, metadata, rawResponse);
                return;
              }
              setTimeout(() => {
                now = new Date();
                delay = Math.min(delay * delayMult, maxDelay);
                retry();
              }, delay);
              return;
            }
            setImmediate(emit, "complete", result, metadata, rawResponse);
          });
        }
        retry();
      }
      promise() {
        return new Promise((resolve, reject) => {
          this.on("error", reject).on("complete", (result, metadata, rawResponse) => {
            resolve([result, metadata, rawResponse]);
          });
        });
      }
    };
    exports2.Operation = Operation;
    function operation(op, longrunningDescriptor, backoffSettings, callOptions) {
      return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);
    }
    exports2.operation = operation;
  }
});

// node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js
var require_longRunningApiCaller = __commonJS({
  "node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LongrunningApiCaller = void 0;
    var call_1 = require_call();
    var gax_1 = require_gax();
    var longrunning_1 = require_longrunning();
    var LongrunningApiCaller = class {
      constructor(longrunningDescriptor) {
        this.longrunningDescriptor = longrunningDescriptor;
      }
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      wrap(func) {
        return func;
      }
      call(apiCall, argument, settings, canceller) {
        canceller.call((argument2, callback) => {
          return this._wrapOperation(apiCall, settings, argument2, callback);
        }, argument);
      }
      _wrapOperation(apiCall, settings, argument, callback) {
        let backoffSettings = settings.longrunning;
        if (!backoffSettings) {
          backoffSettings = (0, gax_1.createDefaultBackoffSettings)();
        }
        const longrunningDescriptor = this.longrunningDescriptor;
        return apiCall(argument, (err, rawResponse) => {
          if (err) {
            callback(err, null, null, rawResponse);
            return;
          }
          const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);
          callback(null, operation, rawResponse);
        });
      }
      fail(canceller, err) {
        canceller.callback(err);
      }
      result(canceller) {
        return canceller.promise;
      }
    };
    exports2.LongrunningApiCaller = LongrunningApiCaller;
  }
});

// node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js
var require_longRunningDescriptor = __commonJS({
  "node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LongRunningDescriptor = void 0;
    var longRunningApiCaller_1 = require_longRunningApiCaller();
    var LongRunningDescriptor = class {
      constructor(operationsClient, responseDecoder, metadataDecoder) {
        this.operationsClient = operationsClient;
        this.responseDecoder = responseDecoder;
        this.metadataDecoder = metadataDecoder;
      }
      getApiCaller() {
        return new longRunningApiCaller_1.LongrunningApiCaller(this);
      }
    };
    exports2.LongRunningDescriptor = LongRunningDescriptor;
  }
});

// node_modules/is-stream-ended/index.js
var require_is_stream_ended = __commonJS({
  "node_modules/is-stream-ended/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function(stream) {
      var ended;
      if (typeof stream.ended !== "undefined") {
        ended = stream.ended;
      } else {
        ended = stream._readableState.ended;
      }
      return Boolean(ended).valueOf();
    };
  }
});

// node_modules/google-gax/build/src/paginationCalls/resourceCollector.js
var require_resourceCollector = __commonJS({
  "node_modules/google-gax/build/src/paginationCalls/resourceCollector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResourceCollector = void 0;
    var ResourceCollector = class {
      constructor(apiCall, maxResults = -1) {
        this.apiCall = apiCall;
        this.resources = [];
        this.maxResults = maxResults;
      }
      callback(err, resources, nextPageRequest) {
        if (err) {
          this.rejectCallback(err);
          return;
        }
        for (const resource of resources) {
          this.resources.push(resource);
          if (this.resources.length === this.maxResults) {
            nextPageRequest = null;
            break;
          }
        }
        if (!nextPageRequest) {
          this.resolveCallback(this.resources);
          return;
        }
        const callback = (...args) => this.callback(...args);
        setImmediate(this.apiCall, nextPageRequest, callback);
      }
      processAllPages(firstRequest) {
        return new Promise((resolve, reject) => {
          this.resolveCallback = resolve;
          this.rejectCallback = reject;
          const callback = (...args) => this.callback(...args);
          setImmediate(this.apiCall, firstRequest, callback);
        });
      }
    };
    exports2.ResourceCollector = ResourceCollector;
  }
});

// node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js
var require_pagedApiCaller = __commonJS({
  "node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PagedApiCaller = void 0;
    var call_1 = require_call();
    var googleError_1 = require_googleError();
    var resourceCollector_1 = require_resourceCollector();
    var PagedApiCaller = class {
      constructor(pageDescriptor) {
        this.pageDescriptor = pageDescriptor;
      }
      generateParseResponseCallback(request, callback) {
        const resourceFieldName = this.pageDescriptor.resourceField;
        const responsePageTokenFieldName = this.pageDescriptor.responsePageTokenField;
        const requestPageTokenFieldName = this.pageDescriptor.requestPageTokenField;
        return (err, response) => {
          if (err) {
            callback(err);
            return;
          }
          if (!request) {
            callback(new googleError_1.GoogleError("Undefined request in pagination method callback."));
            return;
          }
          if (!response) {
            callback(new googleError_1.GoogleError("Undefined response in pagination method callback."));
            return;
          }
          const resources = response[resourceFieldName] || [];
          const pageToken = response[responsePageTokenFieldName];
          let nextPageRequest = null;
          if (pageToken) {
            nextPageRequest = Object.assign({}, request);
            nextPageRequest[requestPageTokenFieldName] = pageToken;
          }
          callback(err, resources, nextPageRequest, response);
        };
      }
      wrap(func) {
        const self2 = this;
        return function wrappedCall(argument, metadata, options, callback) {
          return func(argument, metadata, options, self2.generateParseResponseCallback(argument, callback));
        };
      }
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      call(apiCall, request, settings, ongoingCall) {
        request = Object.assign({}, request);
        if (!settings.autoPaginate) {
          ongoingCall.call(apiCall, request);
          return;
        }
        const maxResults = settings.maxResults || -1;
        const resourceCollector = new resourceCollector_1.ResourceCollector(apiCall, maxResults);
        resourceCollector.processAllPages(request).then((resources) => ongoingCall.callback(null, resources), (err) => ongoingCall.callback(err));
      }
      fail(ongoingCall, err) {
        ongoingCall.callback(err);
      }
      result(ongoingCall) {
        return ongoingCall.promise;
      }
    };
    exports2.PagedApiCaller = PagedApiCaller;
  }
});

// node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js
var require_pageDescriptor = __commonJS({
  "node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PageDescriptor = void 0;
    var ended = require_is_stream_ended();
    var stream_1 = require_stream();
    var normalApiCaller_1 = require_normalApiCaller();
    var pagedApiCaller_1 = require_pagedApiCaller();
    var maxAttemptsEmptyResponse = 10;
    var PageDescriptor = class {
      constructor(requestPageTokenField, responsePageTokenField, resourceField) {
        this.requestPageTokenField = requestPageTokenField;
        this.responsePageTokenField = responsePageTokenField;
        this.resourceField = resourceField;
      }
      createStream(apiCall, request, options) {
        const stream = new stream_1.PassThrough({ objectMode: true });
        options = Object.assign({}, options, { autoPaginate: false });
        const maxResults = "maxResults" in options ? options.maxResults : -1;
        let pushCount = 0;
        let started = false;
        function callback(err, resources, next, apiResp) {
          if (err) {
            stream.emit("error", err);
            return;
          }
          stream.emit("response", apiResp);
          for (let i = 0; i < resources.length; ++i) {
            if (ended(stream)) {
              return;
            }
            if (resources[i] === null) {
              continue;
            }
            stream.push(resources[i]);
            pushCount++;
            if (pushCount === maxResults) {
              stream.end();
            }
          }
          if (ended(stream)) {
            return;
          }
          if (!next) {
            stream.end();
            return;
          }
          if ("pageToken" in options) {
            delete options.pageToken;
          }
          if (stream.isPaused()) {
            request = next;
            started = false;
          } else {
            setImmediate(apiCall, next, options, callback);
          }
        }
        stream.on("resume", () => {
          if (!started) {
            started = true;
            apiCall(request, options, callback);
          }
        });
        return stream;
      }
      asyncIterate(apiCall, request, options) {
        options = Object.assign({}, options, { autoPaginate: false });
        const iterable = this.createIterator(apiCall, request, options);
        return iterable;
      }
      createIterator(apiCall, request, options) {
        const asyncIterable = {
          [Symbol.asyncIterator]() {
            let nextPageRequest = request;
            const cache = [];
            return {
              async next() {
                if (cache.length > 0) {
                  return Promise.resolve({
                    done: false,
                    value: cache.shift()
                  });
                }
                let attempts = 0;
                while (cache.length === 0 && nextPageRequest) {
                  let result;
                  [result, nextPageRequest] = await apiCall(nextPageRequest, options);
                  if (result && !Array.isArray(result)) {
                    for (const [key, value] of Object.entries(result)) {
                      cache.push([key, value]);
                    }
                  } else {
                    cache.push(...result);
                  }
                  if (cache.length === 0) {
                    ++attempts;
                    if (attempts > maxAttemptsEmptyResponse) {
                      break;
                    }
                  }
                }
                if (cache.length === 0) {
                  return Promise.resolve({ done: true, value: void 0 });
                }
                return Promise.resolve({ done: false, value: cache.shift() });
              }
            };
          }
        };
        return asyncIterable;
      }
      getApiCaller(settings) {
        if (!settings.autoPaginate) {
          return new normalApiCaller_1.NormalApiCaller();
        }
        return new pagedApiCaller_1.PagedApiCaller(this);
      }
    };
    exports2.PageDescriptor = PageDescriptor;
  }
});

// node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports2, module2) {
    module2.exports = require_events().EventEmitter;
  }
});

// node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports2, module2) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var _require = require_buffer();
    var Buffer2 = _require.Buffer;
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = /* @__PURE__ */ function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) {
            ret += s + p.data;
          }
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread({}, options, {
            depth: 0,
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports2, module2) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/readable-stream/errors-browser.js
var require_errors_browser = __commonJS({
  "node_modules/readable-stream/errors-browser.js"(exports2, module2) {
    "use strict";
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = /* @__PURE__ */ function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/state.js"(exports2, module2) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/util-deprecate/browser.js
var require_browser4 = __commonJS({
  "node_modules/util-deprecate/browser.js"(exports2, module2) {
    module2.exports = deprecate;
    function deprecate(fn, msg) {
      if (config("noDeprecation")) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config("throwDeprecation")) {
            throw new Error(msg);
          } else if (config("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config(name) {
      try {
        if (!globalThis.localStorage)
          return false;
      } catch (_) {
        return false;
      }
      var val = globalThis.localStorage[name];
      if (null == val)
        return false;
      return String(val).toLowerCase() === "true";
    }
  }
});

// node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/readable-stream/lib/_stream_writable.js"(exports2, module2) {
    "use strict";
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_browser4()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = globalThis.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/readable-stream/lib/_stream_duplex.js"(exports2, module2) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj) {
        keys2.push(key);
      }
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits_browser()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports2, module2) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports2, module2) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/readable-stream/lib/internal/streams/from-browser.js
var require_from_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports2, module2) {
    module2.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  }
});

// node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/readable-stream/lib/_stream_readable.js"(exports2, module2) {
    "use strict";
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = globalThis.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require_util();
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits_browser()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = __require("string_decoder/").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = __require("string_decoder/").StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++) {
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
        ;
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from_browser();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/readable-stream/lib/_stream_transform.js"(exports2, module2) {
    "use strict";
    module2.exports = Transform;
    var _require$codes = require_errors_browser().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits_browser()(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/readable-stream/lib/_stream_passthrough.js"(exports2, module2) {
    "use strict";
    module2.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits_browser()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports2, module2) {
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors_browser().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// node_modules/readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/readable-stream/readable-browser.js"(exports2, module2) {
    exports2 = module2.exports = require_stream_readable();
    exports2.Stream = exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable();
    exports2.Duplex = require_stream_duplex();
    exports2.Transform = require_stream_transform();
    exports2.PassThrough = require_stream_passthrough();
    exports2.finished = require_end_of_stream();
    exports2.pipeline = require_pipeline();
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports2, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports2, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/end-of-stream/index.js
var require_end_of_stream2 = __commonJS({
  "node_modules/end-of-stream/index.js"(exports2, module2) {
    var once = require_once();
    var noop = function() {
    };
    var isRequest = function(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    };
    var isChildProcess = function(stream) {
      return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
    };
    var eos = function(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var ws = stream._writableState;
      var rs = stream._readableState;
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var cancelled = false;
      var onlegacyfinish = function() {
        if (!stream.writable)
          onfinish();
      };
      var onfinish = function() {
        writable = false;
        if (!readable)
          callback.call(stream);
      };
      var onend = function() {
        readable = false;
        if (!writable)
          callback.call(stream);
      };
      var onexit = function(exitCode) {
        callback.call(stream, exitCode ? new Error("exited with error code: " + exitCode) : null);
      };
      var onerror = function(err) {
        callback.call(stream, err);
      };
      var onclose = function() {
        process.nextTick(onclosenexttick);
      };
      var onclosenexttick = function() {
        if (cancelled)
          return;
        if (readable && !(rs && (rs.ended && !rs.destroyed)))
          return callback.call(stream, new Error("premature close"));
        if (writable && !(ws && (ws.ended && !ws.destroyed)))
          return callback.call(stream, new Error("premature close"));
      };
      var onrequest = function() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !ws) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      if (isChildProcess(stream))
        stream.on("exit", onexit);
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        cancelled = true;
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("exit", onexit);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    };
    module2.exports = eos;
  }
});

// node_modules/stream-shift/index.js
var require_stream_shift = __commonJS({
  "node_modules/stream-shift/index.js"(exports2, module2) {
    module2.exports = shift;
    function shift(stream) {
      var rs = stream._readableState;
      if (!rs)
        return null;
      return rs.objectMode || typeof stream._duplexState === "number" ? stream.read() : stream.read(getStateLength(rs));
    }
    function getStateLength(state) {
      if (state.buffer.length) {
        if (state.buffer.head) {
          return state.buffer.head.data.length;
        }
        return state.buffer[0].length;
      }
      return state.length;
    }
  }
});

// node_modules/google-gax/node_modules/duplexify/index.js
var require_duplexify = __commonJS({
  "node_modules/google-gax/node_modules/duplexify/index.js"(exports2, module2) {
    var stream = require_readable_browser();
    var eos = require_end_of_stream2();
    var inherits = require_inherits_browser();
    var shift = require_stream_shift();
    var SIGNAL_FLUSH = Buffer.from && Buffer.from !== Uint8Array.from ? Buffer.from([0]) : new Buffer([0]);
    var onuncork = function(self2, fn) {
      if (self2._corked)
        self2.once("uncork", fn);
      else
        fn();
    };
    var autoDestroy = function(self2, err) {
      if (self2._autoDestroy)
        self2.destroy(err);
    };
    var destroyer = function(self2, end2) {
      return function(err) {
        if (err)
          autoDestroy(self2, err.message === "premature close" ? null : err);
        else if (end2 && !self2._ended)
          self2.end();
      };
    };
    var end = function(ws, fn) {
      if (!ws)
        return fn();
      if (ws._writableState && ws._writableState.finished)
        return fn();
      if (ws._writableState)
        return ws.end(fn);
      ws.end();
      fn();
    };
    var noop = function() {
    };
    var toStreams2 = function(rs) {
      return new stream.Readable({ objectMode: true, highWaterMark: 16 }).wrap(rs);
    };
    var Duplexify = function(writable, readable, opts) {
      if (!(this instanceof Duplexify))
        return new Duplexify(writable, readable, opts);
      stream.Duplex.call(this, opts);
      this._writable = null;
      this._readable = null;
      this._readable2 = null;
      this._autoDestroy = !opts || opts.autoDestroy !== false;
      this._forwardDestroy = !opts || opts.destroy !== false;
      this._forwardEnd = !opts || opts.end !== false;
      this._corked = 1;
      this._ondrain = null;
      this._drained = false;
      this._forwarding = false;
      this._unwrite = null;
      this._unread = null;
      this._ended = false;
      this.destroyed = false;
      if (writable)
        this.setWritable(writable);
      if (readable)
        this.setReadable(readable);
    };
    inherits(Duplexify, stream.Duplex);
    Duplexify.obj = function(writable, readable, opts) {
      if (!opts)
        opts = {};
      opts.objectMode = true;
      opts.highWaterMark = 16;
      return new Duplexify(writable, readable, opts);
    };
    Duplexify.prototype.cork = function() {
      if (++this._corked === 1)
        this.emit("cork");
    };
    Duplexify.prototype.uncork = function() {
      if (this._corked && --this._corked === 0)
        this.emit("uncork");
    };
    Duplexify.prototype.setWritable = function(writable) {
      if (this._unwrite)
        this._unwrite();
      if (this.destroyed) {
        if (writable && writable.destroy)
          writable.destroy();
        return;
      }
      if (writable === null || writable === false) {
        this.end();
        return;
      }
      var self2 = this;
      var unend = eos(writable, { writable: true, readable: false }, destroyer(this, this._forwardEnd));
      var ondrain = function() {
        var ondrain2 = self2._ondrain;
        self2._ondrain = null;
        if (ondrain2)
          ondrain2();
      };
      var clear = function() {
        self2._writable.removeListener("drain", ondrain);
        unend();
      };
      if (this._unwrite)
        process.nextTick(ondrain);
      this._writable = writable;
      this._writable.on("drain", ondrain);
      this._unwrite = clear;
      this.uncork();
    };
    Duplexify.prototype.setReadable = function(readable) {
      if (this._unread)
        this._unread();
      if (this.destroyed) {
        if (readable && readable.destroy)
          readable.destroy();
        return;
      }
      if (readable === null || readable === false) {
        this.push(null);
        this.resume();
        return;
      }
      var self2 = this;
      var unend = eos(readable, { writable: false, readable: true }, destroyer(this));
      var onreadable = function() {
        self2._forward();
      };
      var onend = function() {
        self2.push(null);
      };
      var clear = function() {
        self2._readable2.removeListener("readable", onreadable);
        self2._readable2.removeListener("end", onend);
        unend();
      };
      this._drained = true;
      this._readable = readable;
      this._readable2 = readable._readableState ? readable : toStreams2(readable);
      this._readable2.on("readable", onreadable);
      this._readable2.on("end", onend);
      this._unread = clear;
      this._forward();
    };
    Duplexify.prototype._read = function() {
      this._drained = true;
      this._forward();
    };
    Duplexify.prototype._forward = function() {
      if (this._forwarding || !this._readable2 || !this._drained)
        return;
      this._forwarding = true;
      var data;
      while (this._drained && (data = shift(this._readable2)) !== null) {
        if (this.destroyed)
          continue;
        this._drained = this.push(data);
      }
      this._forwarding = false;
    };
    Duplexify.prototype.destroy = function(err, cb) {
      if (!cb)
        cb = noop;
      if (this.destroyed)
        return cb(null);
      this.destroyed = true;
      var self2 = this;
      process.nextTick(function() {
        self2._destroy(err);
        cb(null);
      });
    };
    Duplexify.prototype._destroy = function(err) {
      if (err) {
        var ondrain = this._ondrain;
        this._ondrain = null;
        if (ondrain)
          ondrain(err);
        else
          this.emit("error", err);
      }
      if (this._forwardDestroy) {
        if (this._readable && this._readable.destroy)
          this._readable.destroy();
        if (this._writable && this._writable.destroy)
          this._writable.destroy();
      }
      this.emit("close");
    };
    Duplexify.prototype._write = function(data, enc, cb) {
      if (this.destroyed)
        return;
      if (this._corked)
        return onuncork(this, this._write.bind(this, data, enc, cb));
      if (data === SIGNAL_FLUSH)
        return this._finish(cb);
      if (!this._writable)
        return cb();
      if (this._writable.write(data) === false)
        this._ondrain = cb;
      else if (!this.destroyed)
        cb();
    };
    Duplexify.prototype._finish = function(cb) {
      var self2 = this;
      this.emit("preend");
      onuncork(this, function() {
        end(self2._forwardEnd && self2._writable, function() {
          if (self2._writableState.prefinished === false)
            self2._writableState.prefinished = true;
          self2.emit("prefinish");
          onuncork(self2, cb);
        });
      });
    };
    Duplexify.prototype.end = function(data, enc, cb) {
      if (typeof data === "function")
        return this.end(null, null, data);
      if (typeof enc === "function")
        return this.end(data, null, enc);
      this._ended = true;
      if (data)
        this.write(data);
      if (!this._writableState.ending && !this._writableState.destroyed)
        this.write(SIGNAL_FLUSH);
      return stream.Writable.prototype.end.call(this, cb);
    };
    module2.exports = Duplexify;
  }
});

// node_modules/retry-request/index.js
var require_retry_request = __commonJS({
  "node_modules/retry-request/index.js"(exports2, module2) {
    "use strict";
    var { PassThrough } = require_stream();
    var debug = require_browser2()("retry-request");
    var extend = require_extend();
    var DEFAULTS = {
      objectMode: false,
      retries: 2,
      maxRetryDelay: 64,
      retryDelayMultiplier: 2,
      totalTimeout: 600,
      noResponseRetries: 2,
      currentRetryAttempt: 0,
      shouldRetryFn: function(response) {
        const retryRanges = [
          [100, 199],
          [429, 429],
          [500, 599]
        ];
        const statusCode = response.statusCode;
        debug(`Response status: ${statusCode}`);
        let range;
        while (range = retryRanges.shift()) {
          if (statusCode >= range[0] && statusCode <= range[1]) {
            return true;
          }
        }
      }
    };
    function retryRequest(requestOpts, opts, callback) {
      const streamMode = typeof arguments[arguments.length - 1] !== "function";
      if (typeof opts === "function") {
        callback = opts;
      }
      const manualCurrentRetryAttemptWasSet = opts && typeof opts.currentRetryAttempt === "number";
      opts = extend({}, DEFAULTS, opts);
      if (typeof opts.request === "undefined") {
        try {
          opts.request = __require("request");
        } catch (e) {
          throw new Error("A request library must be provided to retry-request.");
        }
      }
      let currentRetryAttempt = opts.currentRetryAttempt;
      let numNoResponseAttempts = 0;
      let streamResponseHandled = false;
      let retryStream;
      let requestStream;
      let delayStream;
      let activeRequest;
      const retryRequest2 = {
        abort: function() {
          if (activeRequest && activeRequest.abort) {
            activeRequest.abort();
          }
        }
      };
      if (streamMode) {
        retryStream = new PassThrough({ objectMode: opts.objectMode });
        retryStream.abort = resetStreams;
      }
      const timeOfFirstRequest = Date.now();
      if (currentRetryAttempt > 0) {
        retryAfterDelay(currentRetryAttempt);
      } else {
        makeRequest();
      }
      if (streamMode) {
        return retryStream;
      } else {
        return retryRequest2;
      }
      function resetStreams() {
        delayStream = null;
        if (requestStream) {
          requestStream.abort && requestStream.abort();
          requestStream.cancel && requestStream.cancel();
          if (requestStream.destroy) {
            requestStream.destroy();
          } else if (requestStream.end) {
            requestStream.end();
          }
        }
      }
      function makeRequest() {
        currentRetryAttempt++;
        debug(`Current retry attempt: ${currentRetryAttempt}`);
        if (streamMode) {
          streamResponseHandled = false;
          delayStream = new PassThrough({ objectMode: opts.objectMode });
          requestStream = opts.request(requestOpts);
          setImmediate(() => {
            retryStream.emit("request");
          });
          requestStream.on("error", (err) => {
            if (streamResponseHandled) {
              return;
            }
            streamResponseHandled = true;
            onResponse(err);
          }).on("response", (resp, body) => {
            if (streamResponseHandled) {
              return;
            }
            streamResponseHandled = true;
            onResponse(null, resp, body);
          }).on("complete", retryStream.emit.bind(retryStream, "complete"));
          requestStream.pipe(delayStream);
        } else {
          activeRequest = opts.request(requestOpts, onResponse);
        }
      }
      function retryAfterDelay(currentRetryAttempt2) {
        if (streamMode) {
          resetStreams();
        }
        const nextRetryDelay = getNextRetryDelay({
          maxRetryDelay: opts.maxRetryDelay,
          retryDelayMultiplier: opts.retryDelayMultiplier,
          retryNumber: currentRetryAttempt2,
          timeOfFirstRequest,
          totalTimeout: opts.totalTimeout
        });
        debug(`Next retry delay: ${nextRetryDelay}`);
        if (nextRetryDelay <= 0) {
          numNoResponseAttempts = opts.noResponseRetries + 1;
          return;
        }
        setTimeout(makeRequest, nextRetryDelay);
      }
      function onResponse(err, response, body) {
        if (err) {
          numNoResponseAttempts++;
          if (numNoResponseAttempts <= opts.noResponseRetries) {
            retryAfterDelay(numNoResponseAttempts);
          } else {
            if (streamMode) {
              retryStream.emit("error", err);
              retryStream.end();
            } else {
              callback(err, response, body);
            }
          }
          return;
        }
        const adjustedCurrentRetryAttempt = manualCurrentRetryAttemptWasSet ? currentRetryAttempt : currentRetryAttempt - 1;
        if (adjustedCurrentRetryAttempt < opts.retries && opts.shouldRetryFn(response)) {
          retryAfterDelay(currentRetryAttempt);
          return;
        }
        if (streamMode) {
          retryStream.emit("response", response);
          delayStream.pipe(retryStream);
          requestStream.on("error", (err2) => {
            retryStream.destroy(err2);
          });
        } else {
          callback(err, response, body);
        }
      }
    }
    module2.exports = retryRequest;
    function getNextRetryDelay(config) {
      const {
        maxRetryDelay,
        retryDelayMultiplier,
        retryNumber,
        timeOfFirstRequest,
        totalTimeout
      } = config;
      const maxRetryDelayMs = maxRetryDelay * 1e3;
      const totalTimeoutMs = totalTimeout * 1e3;
      const jitter = Math.floor(Math.random() * 1e3);
      const calculatedNextRetryDelay = Math.pow(retryDelayMultiplier, retryNumber) * 1e3 + jitter;
      const maxAllowableDelayMs = totalTimeoutMs - (Date.now() - timeOfFirstRequest);
      return Math.min(
        calculatedNextRetryDelay,
        maxAllowableDelayMs,
        maxRetryDelayMs
      );
    }
    module2.exports.getNextRetryDelay = getNextRetryDelay;
  }
});

// node_modules/google-gax/build/src/streamingCalls/streaming.js
var require_streaming = __commonJS({
  "node_modules/google-gax/build/src/streamingCalls/streaming.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamProxy = exports2.StreamType = void 0;
    var googleError_1 = require_googleError();
    var duplexify = require_duplexify();
    var retryRequest = require_retry_request();
    var StreamType;
    (function(StreamType2) {
      StreamType2[StreamType2["SERVER_STREAMING"] = 1] = "SERVER_STREAMING";
      StreamType2[StreamType2["CLIENT_STREAMING"] = 2] = "CLIENT_STREAMING";
      StreamType2[StreamType2["BIDI_STREAMING"] = 3] = "BIDI_STREAMING";
    })(StreamType = exports2.StreamType || (exports2.StreamType = {}));
    var StreamProxy = class extends duplexify {
      constructor(type, callback, rest) {
        super(void 0, void 0, {
          objectMode: true,
          readable: type !== StreamType.CLIENT_STREAMING,
          writable: type !== StreamType.SERVER_STREAMING
        });
        this.type = type;
        this._callback = callback;
        this._isCancelCalled = false;
        this._responseHasSent = false;
        this.rest = rest;
      }
      cancel() {
        if (this.stream) {
          this.stream.cancel();
        } else {
          this._isCancelCalled = true;
        }
      }
      forwardEvents(stream) {
        const eventsToForward = ["metadata", "response", "status"];
        eventsToForward.forEach((event) => {
          stream.on(event, this.emit.bind(this, event));
        });
        stream.on("status", () => {
          if (!this._responseHasSent) {
            stream.emit("response", {
              code: 200,
              details: "",
              message: "OK"
            });
          }
        });
        stream.on("metadata", (metadata) => {
          stream.emit("response", {
            code: 200,
            details: "",
            message: "OK",
            metadata
          });
          this._responseHasSent = true;
        });
        stream.on("error", (error) => {
          googleError_1.GoogleError.parseGRPCStatusDetails(error);
        });
      }
      setStream(apiCall, argument, retryRequestOptions = {}) {
        if (this.type === StreamType.SERVER_STREAMING) {
          if (this.rest) {
            const stream2 = apiCall(argument, this._callback);
            this.stream = stream2;
            this.setReadable(stream2);
          } else {
            const retryStream = retryRequest(null, {
              objectMode: true,
              request: () => {
                if (this._isCancelCalled) {
                  if (this.stream) {
                    this.stream.cancel();
                  }
                  return;
                }
                const stream2 = apiCall(argument, this._callback);
                this.stream = stream2;
                this.forwardEvents(stream2);
                return stream2;
              },
              retries: retryRequestOptions.retries,
              currentRetryAttempt: retryRequestOptions.currentRetryAttempt,
              noResponseRetries: retryRequestOptions.noResponseRetries,
              shouldRetryFn: retryRequestOptions.shouldRetryFn
            });
            this.setReadable(retryStream);
          }
          return;
        }
        const stream = apiCall(argument, this._callback);
        this.stream = stream;
        this.forwardEvents(stream);
        if (this.type === StreamType.CLIENT_STREAMING) {
          this.setWritable(stream);
        }
        if (this.type === StreamType.BIDI_STREAMING) {
          this.setReadable(stream);
          this.setWritable(stream);
        }
        if (this._isCancelCalled && this.stream) {
          this.stream.cancel();
        }
      }
    };
    exports2.StreamProxy = StreamProxy;
  }
});

// node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js
var require_streamingApiCaller = __commonJS({
  "node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamingApiCaller = void 0;
    var warnings_1 = require_warnings();
    var streaming_1 = require_streaming();
    var StreamingApiCaller = class {
      constructor(descriptor) {
        this.descriptor = descriptor;
      }
      init(callback) {
        return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest);
      }
      wrap(func) {
        switch (this.descriptor.type) {
          case streaming_1.StreamType.SERVER_STREAMING:
            return (argument, metadata, options) => {
              return func(argument, metadata, options);
            };
          case streaming_1.StreamType.CLIENT_STREAMING:
            return (argument, metadata, options, callback) => {
              return func(metadata, options, callback);
            };
          case streaming_1.StreamType.BIDI_STREAMING:
            return (argument, metadata, options) => {
              return func(metadata, options);
            };
          default:
            (0, warnings_1.warn)("streaming_wrap_unknown_stream_type", `Unknown stream type: ${this.descriptor.type}`);
        }
        return func;
      }
      call(apiCall, argument, settings, stream) {
        stream.setStream(apiCall, argument, settings.retryRequestOptions);
      }
      fail(stream, err) {
        stream.emit("error", err);
      }
      result(stream) {
        return stream;
      }
    };
    exports2.StreamingApiCaller = StreamingApiCaller;
  }
});

// node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js
var require_streamDescriptor = __commonJS({
  "node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamDescriptor = void 0;
    var streamingApiCaller_1 = require_streamingApiCaller();
    var StreamDescriptor = class {
      constructor(streamType, rest) {
        this.type = streamType;
        this.streaming = true;
        this.rest = rest;
      }
      getApiCaller(settings) {
        settings.retry = null;
        return new streamingApiCaller_1.StreamingApiCaller(this);
      }
    };
    exports2.StreamDescriptor = StreamDescriptor;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js
var require_bundleApiCaller = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleApiCaller = void 0;
    var call_1 = require_call();
    var googleError_1 = require_googleError();
    var BundleApiCaller = class {
      constructor(bundler) {
        this.bundler = bundler;
      }
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      wrap(func) {
        return func;
      }
      call(apiCall, argument, settings, status) {
        if (!settings.isBundling) {
          throw new googleError_1.GoogleError("Bundling enabled with no isBundling!");
        }
        status.call((argument2, callback) => {
          this.bundler.schedule(apiCall, argument2, callback);
          return status;
        }, argument);
      }
      fail(canceller, err) {
        canceller.callback(err);
      }
      result(canceller) {
        return canceller.promise;
      }
    };
    exports2.BundleApiCaller = BundleApiCaller;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js
var require_bundlingUtils = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.computeBundleId = void 0;
    function computeBundleId(obj, discriminatorFields) {
      const ids = [];
      let hasIds = false;
      for (const field of discriminatorFields) {
        const id = at(obj, field);
        if (id === void 0) {
          ids.push(null);
        } else {
          hasIds = true;
          ids.push(id);
        }
      }
      if (!hasIds) {
        return void 0;
      }
      return JSON.stringify(ids);
    }
    exports2.computeBundleId = computeBundleId;
    function at(obj, field) {
      const pathParts = field.split(".");
      let currentObj = obj;
      for (const pathPart of pathParts) {
        currentObj = currentObj === null || currentObj === void 0 ? void 0 : currentObj[pathPart];
      }
      return currentObj;
    }
  }
});

// node_modules/google-gax/build/src/bundlingCalls/task.js
var require_task = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/task.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Task = exports2.deepCopyForResponse = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    function deepCopyForResponse(obj, subresponseInfo) {
      let result;
      if (obj === null) {
        return null;
      }
      if (obj === void 0) {
        return void 0;
      }
      if (Array.isArray(obj)) {
        result = [];
        obj.forEach((element) => {
          result.push(deepCopyForResponse(element, null));
        });
        return result;
      }
      if (obj.copy !== void 0) {
        return obj.copy();
      }
      if (obj instanceof ArrayBuffer) {
        return obj.slice(0);
      }
      if (typeof obj === "object") {
        result = {};
        Object.keys(obj).forEach((key) => {
          if (subresponseInfo && key === subresponseInfo.field && Array.isArray(obj[key])) {
            result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);
          } else {
            result[key] = deepCopyForResponse(obj[key], null);
          }
        });
        return result;
      }
      return obj;
    }
    exports2.deepCopyForResponse = deepCopyForResponse;
    var Task = class {
      constructor(apiCall, bundlingRequest, bundledField, subresponseField) {
        this._apiCall = apiCall;
        this._request = bundlingRequest;
        this._bundledField = bundledField;
        this._subresponseField = subresponseField;
        this._data = [];
      }
      getElementCount() {
        let count = 0;
        for (let i = 0; i < this._data.length; ++i) {
          count += this._data[i].elements.length;
        }
        return count;
      }
      getRequestByteSize() {
        let size = 0;
        for (let i = 0; i < this._data.length; ++i) {
          size += this._data[i].bytes;
        }
        return size;
      }
      run() {
        if (this._data.length === 0) {
          return [];
        }
        const request = this._request;
        const elements = [];
        const ids = [];
        for (let i = 0; i < this._data.length; ++i) {
          elements.push(...this._data[i].elements);
          ids.push(this._data[i].callback.id);
        }
        request[this._bundledField] = elements;
        const self2 = this;
        this.callCanceller = this._apiCall(request, (err, response) => {
          const responses = [];
          if (err) {
            self2._data.forEach(() => {
              responses.push(void 0);
            });
          } else {
            let subresponseInfo = null;
            if (self2._subresponseField) {
              subresponseInfo = {
                field: self2._subresponseField,
                start: 0
              };
            }
            self2._data.forEach((data) => {
              if (subresponseInfo) {
                subresponseInfo.end = subresponseInfo.start + data.elements.length;
              }
              responses.push(deepCopyForResponse(response, subresponseInfo));
              if (subresponseInfo) {
                subresponseInfo.start = subresponseInfo.end;
              }
            });
          }
          for (let i = 0; i < self2._data.length; ++i) {
            if (self2._data[i].cancelled) {
              const error = new googleError_1.GoogleError("cancelled");
              error.code = status_1.Status.CANCELLED;
              self2._data[i].callback(error);
            } else {
              self2._data[i].callback(err, responses[i]);
            }
          }
        });
        return ids;
      }
      extend(elements, bytes, callback) {
        this._data.push({
          elements,
          bytes,
          callback
        });
      }
      cancel(id) {
        if (this.callCanceller) {
          let allCancelled = true;
          this._data.forEach((d) => {
            if (d.callback.id === id) {
              d.cancelled = true;
            }
            if (!d.cancelled) {
              allCancelled = false;
            }
          });
          if (allCancelled) {
            this.callCanceller.cancel();
          }
          return allCancelled;
        }
        for (let i = 0; i < this._data.length; ++i) {
          if (this._data[i].callback.id === id) {
            const error = new googleError_1.GoogleError("cancelled");
            error.code = status_1.Status.CANCELLED;
            this._data[i].callback(error);
            this._data.splice(i, 1);
            break;
          }
        }
        return this._data.length === 0;
      }
    };
    exports2.Task = Task;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js
var require_bundleExecutor = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleExecutor = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var warnings_1 = require_warnings();
    var bundlingUtils_1 = require_bundlingUtils();
    var task_1 = require_task();
    function noop() {
    }
    var BundleExecutor = class {
      constructor(bundleOptions, bundleDescriptor) {
        this._options = bundleOptions;
        this._descriptor = bundleDescriptor;
        this._tasks = {};
        this._timers = {};
        this._invocations = {};
        this._invocationId = 0;
      }
      schedule(apiCall, request, callback) {
        const bundleId = (0, bundlingUtils_1.computeBundleId)(request, this._descriptor.requestDiscriminatorFields);
        callback = callback || noop;
        if (bundleId === void 0) {
          (0, warnings_1.warn)("bundling_schedule_bundleid_undefined", `The request does not have enough information for request bundling. Invoking immediately. Request: ${JSON.stringify(request)} discriminator fields: ${this._descriptor.requestDiscriminatorFields}`);
          return apiCall(request, callback);
        }
        if (request[this._descriptor.bundledField] === void 0) {
          (0, warnings_1.warn)("bundling_no_bundled_field", `Request does not contain field ${this._descriptor.bundledField} that must present for bundling. Invoking immediately. Request: ${JSON.stringify(request)}`);
          return apiCall(request, callback);
        }
        if (!(bundleId in this._tasks)) {
          this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);
        }
        let task = this._tasks[bundleId];
        callback.id = String(this._invocationId++);
        this._invocations[callback.id] = bundleId;
        const bundledField = request[this._descriptor.bundledField];
        const elementCount = bundledField.length;
        let requestBytes = 0;
        const self2 = this;
        bundledField.forEach((obj) => {
          requestBytes += this._descriptor.byteLengthFunction(obj);
        });
        const countLimit = this._options.elementCountLimit || 0;
        const byteLimit = this._options.requestByteLimit || 0;
        if (countLimit > 0 && elementCount > countLimit || byteLimit > 0 && requestBytes >= byteLimit) {
          let message;
          if (countLimit > 0 && elementCount > countLimit) {
            message = "The number of elements " + elementCount + " exceeds the limit " + this._options.elementCountLimit;
          } else {
            message = "The required bytes " + requestBytes + " exceeds the limit " + this._options.requestByteLimit;
          }
          const error = new googleError_1.GoogleError(message);
          error.code = status_1.Status.INVALID_ARGUMENT;
          callback(error);
          return {
            cancel: noop
          };
        }
        const existingCount = task.getElementCount();
        const existingBytes = task.getRequestByteSize();
        if (countLimit > 0 && elementCount + existingCount >= countLimit || byteLimit > 0 && requestBytes + existingBytes >= byteLimit) {
          this._runNow(bundleId);
          this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);
          task = this._tasks[bundleId];
        }
        task.extend(bundledField, requestBytes, callback);
        const ret = {
          cancel() {
            self2._cancel(callback.id);
          }
        };
        const countThreshold = this._options.elementCountThreshold || 0;
        const sizeThreshold = this._options.requestByteThreshold || 0;
        if (countThreshold > 0 && task.getElementCount() >= countThreshold || sizeThreshold > 0 && task.getRequestByteSize() >= sizeThreshold) {
          this._runNow(bundleId);
          return ret;
        }
        if (!(bundleId in this._timers) && this._options.delayThreshold > 0) {
          this._timers[bundleId] = setTimeout(() => {
            delete this._timers[bundleId];
            this._runNow(bundleId);
          }, this._options.delayThreshold);
        }
        return ret;
      }
      _maybeClearTimeout(bundleId) {
        if (bundleId in this._timers) {
          const timerId = this._timers[bundleId];
          delete this._timers[bundleId];
          clearTimeout(timerId);
        }
      }
      _cancel(id) {
        if (!(id in this._invocations)) {
          return;
        }
        const bundleId = this._invocations[id];
        if (!(bundleId in this._tasks)) {
          return;
        }
        const task = this._tasks[bundleId];
        delete this._invocations[id];
        if (task.cancel(id)) {
          this._maybeClearTimeout(bundleId);
          delete this._tasks[bundleId];
        }
      }
      _runNow(bundleId) {
        if (!(bundleId in this._tasks)) {
          (0, warnings_1.warn)("bundle_runnow_bundleid_unknown", `No such bundleid: ${bundleId}`);
          return;
        }
        this._maybeClearTimeout(bundleId);
        const task = this._tasks[bundleId];
        delete this._tasks[bundleId];
        task.run().forEach((id) => {
          delete this._invocations[id];
        });
      }
    };
    exports2.BundleExecutor = BundleExecutor;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js
var require_bundleDescriptor = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleDescriptor = void 0;
    var normalApiCaller_1 = require_normalApiCaller();
    var bundleApiCaller_1 = require_bundleApiCaller();
    var bundleExecutor_1 = require_bundleExecutor();
    var util_1 = require_util3();
    var BundleDescriptor = class {
      constructor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction) {
        if (!byteLengthFunction && typeof subresponseField === "function") {
          byteLengthFunction = subresponseField;
          subresponseField = null;
        }
        this.bundledField = bundledField;
        this.requestDiscriminatorFields = requestDiscriminatorFields.map(util_1.toCamelCase);
        this.subresponseField = subresponseField;
        this.byteLengthFunction = byteLengthFunction;
      }
      getApiCaller(settings) {
        if (settings.isBundling === false) {
          return new normalApiCaller_1.NormalApiCaller();
        }
        return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));
      }
    };
    exports2.BundleDescriptor = BundleDescriptor;
  }
});

// node_modules/google-gax/build/src/descriptor.js
var require_descriptor = __commonJS({
  "node_modules/google-gax/build/src/descriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleDescriptor = exports2.StreamDescriptor = exports2.PageDescriptor = exports2.LongrunningDescriptor = void 0;
    var longRunningDescriptor_1 = require_longRunningDescriptor();
    Object.defineProperty(exports2, "LongrunningDescriptor", { enumerable: true, get: function() {
      return longRunningDescriptor_1.LongRunningDescriptor;
    } });
    var pageDescriptor_1 = require_pageDescriptor();
    Object.defineProperty(exports2, "PageDescriptor", { enumerable: true, get: function() {
      return pageDescriptor_1.PageDescriptor;
    } });
    var streamDescriptor_1 = require_streamDescriptor();
    Object.defineProperty(exports2, "StreamDescriptor", { enumerable: true, get: function() {
      return streamDescriptor_1.StreamDescriptor;
    } });
    var bundleDescriptor_1 = require_bundleDescriptor();
    Object.defineProperty(exports2, "BundleDescriptor", { enumerable: true, get: function() {
      return bundleDescriptor_1.BundleDescriptor;
    } });
  }
});

// node_modules/google-gax/build/src/operations_client_config.json
var require_operations_client_config = __commonJS({
  "node_modules/google-gax/build/src/operations_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.longrunning.Operations": {
          retry_codes: {
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ],
            non_idempotent: []
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 9e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 9e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            GetOperation: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            ListOperations: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            CancelOperation: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            DeleteOperation: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/google-gax/build/protos/operations.json
var require_operations2 = __commonJS({
  "node_modules/google-gax/build/protos/operations.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { longrunning: { options: { cc_enable_arenas: true, csharp_namespace: "Google.LongRunning", go_package: "google.golang.org/genproto/googleapis/longrunning;longrunning", java_multiple_files: true, java_outer_classname: "OperationsProto", java_package: "com.google.longrunning", php_namespace: "Google\\LongRunning" }, nested: { operationInfo: { type: "google.longrunning.OperationInfo", id: 1049, extend: "google.protobuf.MethodOptions" }, Operations: { options: { "(google.api.default_host)": "longrunning.googleapis.com" }, methods: { ListOperations: { requestType: "ListOperationsRequest", responseType: "ListOperationsResponse", options: { "(google.api.http).get": "/v1/{name=operations}", "(google.api.method_signature)": "name,filter" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=operations}" } }, { "(google.api.method_signature)": "name,filter" }] }, GetOperation: { requestType: "GetOperationRequest", responseType: "Operation", options: { "(google.api.http).get": "/v1/operations/{name}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/operations/{name}" } }, { "(google.api.method_signature)": "name" }] }, DeleteOperation: { requestType: "DeleteOperationRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).delete": "/v1/{name=operations/**}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { delete: "/v1/{name=operations/**}" } }, { "(google.api.method_signature)": "name" }] }, CancelOperation: { requestType: "CancelOperationRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).post": "/v1/{name=operations/**}:cancel", "(google.api.http).body": "*", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{name=operations/**}:cancel", body: "*" } }, { "(google.api.method_signature)": "name" }] }, WaitOperation: { requestType: "WaitOperationRequest", responseType: "Operation" } } }, Operation: { oneofs: { result: { oneof: ["error", "response"] } }, fields: { name: { type: "string", id: 1 }, metadata: { type: "google.protobuf.Any", id: 2 }, done: { type: "bool", id: 3 }, error: { type: "google.rpc.Status", id: 4 }, response: { type: "google.protobuf.Any", id: 5 } } }, GetOperationRequest: { fields: { name: { type: "string", id: 1 } } }, ListOperationsRequest: { fields: { name: { type: "string", id: 4 }, filter: { type: "string", id: 1 }, pageSize: { type: "int32", id: 2 }, pageToken: { type: "string", id: 3 } } }, ListOperationsResponse: { fields: { operations: { rule: "repeated", type: "Operation", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, CancelOperationRequest: { fields: { name: { type: "string", id: 1 } } }, DeleteOperationRequest: { fields: { name: { type: "string", id: 1 } } }, WaitOperationRequest: { fields: { name: { type: "string", id: 1 }, timeout: { type: "google.protobuf.Duration", id: 2 } } }, OperationInfo: { fields: { responseType: { type: "string", id: 1 }, metadataType: { type: "string", id: 2 } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ClientProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" } } }, protobuf: { options: { go_package: "github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } }, Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } }, Duration: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } }, Empty: { fields: {} } } }, rpc: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/rpc/status;status", java_multiple_files: true, java_outer_classname: "StatusProto", java_package: "com.google.rpc", objc_class_prefix: "RPC" }, nested: { Status: { fields: { code: { type: "int32", id: 1 }, message: { type: "string", id: 2 }, details: { rule: "repeated", type: "google.protobuf.Any", id: 3 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/transcoding.js
var require_transcoding = __commonJS({
  "node_modules/google-gax/build/src/transcoding.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.overrideHttpRules = exports2.transcode = exports2.isProto3OptionalField = exports2.flattenObject = exports2.match = exports2.applyPattern = exports2.encodeWithoutSlashes = exports2.encodeWithSlashes = exports2.buildQueryStringComponents = exports2.deleteField = exports2.deepCopyWithoutMatchedFields = exports2.getField = void 0;
    var util_1 = require_util3();
    var httpOptionName = "(google.api.http)";
    var proto3OptionalName = "proto3_optional";
    var supportedHttpMethods = ["get", "post", "put", "patch", "delete"];
    function getField(request, field, allowObjects = false) {
      const parts = field.split(".");
      let value = request;
      for (const part of parts) {
        if (typeof value !== "object") {
          return void 0;
        }
        value = value[part];
      }
      if (!allowObjects && typeof value === "object" && !Array.isArray(value) && value !== null) {
        return void 0;
      }
      return value;
    }
    exports2.getField = getField;
    function deepCopyWithoutMatchedFields(request, fieldsToSkip, fullNamePrefix = "") {
      if (typeof request !== "object" || request === null) {
        return request;
      }
      const copy = Object.assign({}, request);
      for (const key in copy) {
        if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {
          delete copy[key];
          continue;
        }
        const nextFullNamePrefix = `${fullNamePrefix}${key}.`;
        if (Array.isArray(copy[key])) {
          copy[key] = copy[key].map((value) => deepCopyWithoutMatchedFields(value, /* @__PURE__ */ new Set()));
        } else if (typeof copy[key] === "object" && copy[key] !== null) {
          copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);
        }
      }
      return copy;
    }
    exports2.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;
    function deleteField(request, field) {
      const parts = field.split(".");
      while (parts.length > 1) {
        if (typeof request !== "object") {
          return;
        }
        const part2 = parts.shift();
        request = request[part2];
      }
      const part = parts.shift();
      if (typeof request !== "object") {
        return;
      }
      delete request[part];
    }
    exports2.deleteField = deleteField;
    function buildQueryStringComponents(request, prefix = "") {
      const resultList = [];
      for (const key in request) {
        if (Array.isArray(request[key])) {
          for (const value of request[key]) {
            resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);
          }
        } else if (typeof request[key] === "object" && request[key] !== null) {
          resultList.push(...buildQueryStringComponents(request[key], `${key}.`));
        } else {
          resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? "null" : request[key].toString())}`);
        }
      }
      return resultList;
    }
    exports2.buildQueryStringComponents = buildQueryStringComponents;
    function encodeWithSlashes(str) {
      return str.split("").map((c) => c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)).join("");
    }
    exports2.encodeWithSlashes = encodeWithSlashes;
    function encodeWithoutSlashes(str) {
      return str.split("").map((c) => c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)).join("");
    }
    exports2.encodeWithoutSlashes = encodeWithoutSlashes;
    function escapeRegExp(str) {
      return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    function applyPattern(pattern, fieldValue) {
      if (!pattern || pattern === "*") {
        return encodeWithSlashes(fieldValue);
      }
      if (!pattern.includes("*") && pattern !== fieldValue) {
        return void 0;
      }
      const regex = new RegExp("^" + escapeRegExp(pattern).replace(/\\\*\\\*/g, "(.+)").replace(/\\\*/g, "([^/]+)") + "$");
      if (!fieldValue.match(regex)) {
        return void 0;
      }
      return encodeWithoutSlashes(fieldValue);
    }
    exports2.applyPattern = applyPattern;
    function fieldToCamelCase(field) {
      const parts = field.split(".");
      return parts.map((part) => (0, util_1.toCamelCase)(part)).join(".");
    }
    function match(request, pattern) {
      let url = pattern;
      const matchedFields = [];
      for (; ; ) {
        const match2 = url.match(/^(.*)\{([^}=]+)(?:=([^}]*))?\}(.*)/);
        if (!match2) {
          break;
        }
        const [, before, field, pattern2, after] = match2;
        const camelCasedField = fieldToCamelCase(field);
        matchedFields.push(fieldToCamelCase(camelCasedField));
        const fieldValue = getField(request, camelCasedField);
        if (fieldValue === void 0) {
          return void 0;
        }
        const appliedPattern = applyPattern(pattern2, fieldValue === null ? "null" : fieldValue.toString());
        if (appliedPattern === void 0) {
          return void 0;
        }
        url = before + appliedPattern + after;
      }
      return { matchedFields, url };
    }
    exports2.match = match;
    function flattenObject(request) {
      const result = {};
      for (const key in request) {
        if (request[key] === void 0) {
          continue;
        }
        if (Array.isArray(request[key])) {
          result[key] = request[key];
          continue;
        }
        if (typeof request[key] === "object" && request[key] !== null) {
          const nested = flattenObject(request[key]);
          for (const nestedKey in nested) {
            result[`${key}.${nestedKey}`] = nested[nestedKey];
          }
          continue;
        }
        result[key] = request[key];
      }
      return result;
    }
    exports2.flattenObject = flattenObject;
    function isProto3OptionalField(field) {
      return field && field.options && field.options[proto3OptionalName];
    }
    exports2.isProto3OptionalField = isProto3OptionalField;
    function transcode(request, parsedOptions) {
      const httpRules = [];
      for (const option of parsedOptions) {
        if (!(httpOptionName in option)) {
          continue;
        }
        const httpRule = option[httpOptionName];
        httpRules.push(httpRule);
        if (httpRule === null || httpRule === void 0 ? void 0 : httpRule.additional_bindings) {
          const additionalBindings = Array.isArray(httpRule.additional_bindings) ? httpRule.additional_bindings : [httpRule.additional_bindings];
          httpRules.push(...additionalBindings);
        }
      }
      for (const httpRule of httpRules) {
        for (const httpMethod of supportedHttpMethods) {
          if (!(httpMethod in httpRule)) {
            continue;
          }
          const pathTemplate = httpRule[httpMethod];
          const matchResult = match(request, pathTemplate);
          if (matchResult === void 0) {
            continue;
          }
          const { url, matchedFields } = matchResult;
          let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));
          if (httpRule.body === "*") {
            return { httpMethod, url, queryString: "", data };
          }
          const queryStringObject = data;
          if (httpRule.body) {
            data = getField(
              queryStringObject,
              fieldToCamelCase(httpRule.body),
              true
            );
            deleteField(queryStringObject, fieldToCamelCase(httpRule.body));
          } else {
            data = "";
          }
          const queryStringComponents = buildQueryStringComponents(queryStringObject);
          const queryString = queryStringComponents.join("&");
          if (!data || typeof data === "object" && Object.keys(data).length === 0) {
            data = "";
          }
          return { httpMethod, url, queryString, data };
        }
      }
      return void 0;
    }
    exports2.transcode = transcode;
    function overrideHttpRules(httpRules, protoJson) {
      for (const rule of httpRules) {
        if (!rule.selector) {
          continue;
        }
        const rpc = protoJson.lookup(rule.selector);
        if (!rpc || !rpc.parsedOptions) {
          continue;
        }
        for (const item of rpc.parsedOptions) {
          if (!(httpOptionName in item)) {
            continue;
          }
          const httpOptions = item[httpOptionName];
          for (const httpMethod in httpOptions) {
            if (httpMethod in rule) {
              if (httpMethod === "additional_bindings") {
                continue;
              }
              httpOptions[httpMethod] = rule[httpMethod];
            }
            if (rule.additional_bindings) {
              httpOptions["additional_bindings"] = !httpOptions["additional_bindings"] ? [] : Array.isArray(httpOptions["additional_bindings"]) ? httpOptions["additional_bindings"] : [httpOptions["additional_bindings"]];
              httpOptions["additional_bindings"].push(...rule.additional_bindings);
            }
          }
        }
      }
    }
    exports2.overrideHttpRules = overrideHttpRules;
  }
});

// node_modules/google-gax/package.json
var require_package3 = __commonJS({
  "node_modules/google-gax/package.json"(exports2, module2) {
    module2.exports = {
      name: "google-gax",
      version: "3.5.2",
      description: "Google API Extensions",
      main: "build/src/index.js",
      types: "build/src/index.d.ts",
      files: [
        "build/src",
        "build/tools/compileProtos.js",
        "build/tools/minify.js",
        "build/protos/"
      ],
      bin: {
        compileProtos: "build/tools/compileProtos.js",
        minifyProtoJson: "build/tools/minify.js"
      },
      dependencies: {
        "@grpc/grpc-js": "~1.7.0",
        "@grpc/proto-loader": "^0.7.0",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        duplexify: "^4.0.0",
        "fast-text-encoding": "^1.0.3",
        "google-auth-library": "^8.0.2",
        "is-stream-ended": "^0.1.4",
        "node-fetch": "^2.6.1",
        "object-hash": "^3.0.0",
        "proto3-json-serializer": "^1.0.0",
        protobufjs: "7.1.2",
        "protobufjs-cli": "1.0.2",
        "retry-request": "^5.0.0"
      },
      devDependencies: {
        "@compodoc/compodoc": "1.1.19",
        "@types/fs-extra": "^9.0.0",
        "@types/mocha": "^9.0.0",
        "@types/ncp": "^2.0.1",
        "@types/node": "^17.0.31",
        "@types/node-fetch": "^2.5.4",
        "@types/object-hash": "^2.1.0",
        "@types/proxyquire": "^1.3.28",
        "@types/pumpify": "^1.4.1",
        "@types/rimraf": "^3.0.0",
        "@types/sinon": "^10.0.0",
        "@types/uglify-js": "^3.17.0",
        c8: "^7.0.0",
        codecov: "^3.1.0",
        execa: "^5.0.0",
        "fs-extra": "^10.0.0",
        "google-proto-files": "^3.0.0",
        gts: "^3.1.0",
        linkinator: "^4.0.0",
        long: "^4.0.0",
        mkdirp: "^1.0.0",
        mocha: "^9.0.0",
        ncp: "^2.0.0",
        "null-loader": "^4.0.0",
        proxyquire: "^2.0.1",
        pumpify: "^2.0.0",
        rimraf: "^3.0.2",
        sinon: "^14.0.0",
        "stream-events": "^1.0.4",
        "ts-loader": "^8.0.0",
        typescript: "^4.6.4",
        "uglify-js": "^3.17.0",
        walkdir: "^0.4.0",
        webpack: "^4.0.0",
        "webpack-cli": "^4.0.0"
      },
      scripts: {
        docs: "compodoc src/",
        pretest: "npm run prepare",
        test: "c8 mocha build/test/unit",
        lint: "gts check",
        clean: "gts clean",
        compile: "tsc -p . && cp src/*.json build/src && cp -r test/fixtures build/test && cp -r protos build/",
        "compile-operation-protos": "pbjs -t json google/longrunning/operations.proto -p ./protos > protos/operations.json && pbjs -t static-module -r operations_protos google/longrunning/operations.proto -p ./protos > protos/operations.js && pbts protos/operations.js -o protos/operations.d.ts",
        "compile-compute-operations-protos": "pbjs -t json google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.json && pbjs -t static-module -r compute_operations_protos google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.js && pbts protos/compute_operations.js -o protos/compute_operations.d.ts",
        "compile-iam-protos": "pbjs -t json google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.json && pbjs -t static-module -r iam_protos google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.js && pbts protos/iam_service.js -o protos/iam_service.d.ts",
        "compile-location-protos": "pbjs -t json google/cloud/location/locations.proto -p ./protos > protos/locations.json && pbjs -t static-module -r locations_protos google/cloud/location/locations.proto -p ./protos > protos/locations.js && pbts protos/locations.js -o protos/locations.d.ts",
        "compile-status-protos": "pbjs -t json google/rpc/status.proto google/rpc/error_details.proto -p ./protos > protos/status.json",
        "compile-http-protos": "pbjs -t static-module -r http_proto --keep-case google/api/http.proto -p ./protos > protos/http.js && pbts protos/http.js -o protos/http.d.ts",
        "compile-showcase-proto": "pbjs -t json google/showcase/v1beta1/echo.proto google/showcase/v1beta1/identity.proto google/showcase/v1beta1/messaging.proto google/showcase/v1beta1/testing.proto -p ./protos > test/fixtures/google-gax-packaging-test-app/protos/protos.json && pbjs -t static-module -r showcase_protos google/showcase/v1beta1/echo.proto google/showcase/v1beta1/identity.proto google/showcase/v1beta1/messaging.proto google/showcase/v1beta1/testing.proto -p ./protos > test/fixtures/google-gax-packaging-test-app/protos/protos.js && pbts test/fixtures/google-gax-packaging-test-app/protos/protos.js -o test/fixtures/google-gax-packaging-test-app/protos/protos.d.ts",
        fix: "gts fix",
        prepare: "npm run compile && node ./build/tools/prepublish.js && mkdirp build/protos && cp -r protos/* build/protos/ && npm run minify-proto-json",
        "system-test": "c8 mocha build/test/system-test --timeout 600000 && npm run test-application",
        "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
        "docs-test": "linkinator docs",
        "predocs-test": "npm run docs",
        "browser-test": "cd test/browser-test && npm run prefetch && npm install && npm test",
        "test-application": "cd test/test-application && npm run prefetch && npm install && npm start",
        prelint: "cd samples; npm link ../; npm install",
        precompile: "gts clean",
        "update-protos": "node ./build/tools/listProtos.js",
        "minify-proto-json": "node ./build/tools/minify.js"
      },
      repository: "googleapis/gax-nodejs",
      keywords: [
        "grpc"
      ],
      author: "Google API Authors",
      license: "Apache-2.0",
      bugs: {
        url: "https://github.com/googleapis/gax-nodejs/issues"
      },
      homepage: "https://github.com/googleapis/gax-nodejs#readme",
      engines: {
        node: ">=12"
      },
      browser: "build/src/fallback.js"
    };
  }
});

// node_modules/google-gax/build/src/operationsClient.js
var require_operationsClient = __commonJS({
  "node_modules/google-gax/build/src/operationsClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OperationsClientBuilder = exports2.OperationsClient = exports2.ALL_SCOPES = exports2.SERVICE_ADDRESS = void 0;
    var createApiCall_1 = require_createApiCall();
    var descriptor_1 = require_descriptor();
    var gax = require_gax();
    var configData = require_operations_client_config();
    var operationProtoJson = require_operations2();
    var transcoding_1 = require_transcoding();
    exports2.SERVICE_ADDRESS = "longrunning.googleapis.com";
    var version = require_package3().version;
    var DEFAULT_SERVICE_PORT = 443;
    var CODE_GEN_NAME_VERSION = "gapic/0.7.1";
    exports2.ALL_SCOPES = [];
    var OperationsClient = class {
      constructor(gaxGrpc, operationsProtos, options) {
        const opts = Object.assign({
          servicePath: exports2.SERVICE_ADDRESS,
          port: DEFAULT_SERVICE_PORT,
          clientConfig: {}
        }, options);
        const googleApiClient = ["gl-node/" + process.versions.node];
        if (opts.libName && opts.libVersion) {
          googleApiClient.push(opts.libName + "/" + opts.libVersion);
        }
        googleApiClient.push(CODE_GEN_NAME_VERSION, "gax/" + version);
        if (opts.fallback) {
          googleApiClient.push("gl-web/" + version);
        } else {
          googleApiClient.push("grpc/" + gaxGrpc.grpcVersion);
        }
        const defaults = gaxGrpc.constructSettings("google.longrunning.Operations", configData, opts.clientConfig || {}, { "x-goog-api-client": googleApiClient.join(" ") });
        this.auth = gaxGrpc.auth;
        this.innerApiCalls = {};
        this.descriptor = {
          listOperations: new descriptor_1.PageDescriptor("pageToken", "nextPageToken", "operations")
        };
        this.operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService("google.longrunning.Operations") : operationsProtos.google.longrunning.Operations, opts);
        const operationsStubMethods = [
          "getOperation",
          "listOperations",
          "cancelOperation",
          "deleteOperation"
        ];
        for (const methodName of operationsStubMethods) {
          const innerCallPromise = this.operationsStub.then((stub) => (...args) => {
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);
        }
      }
      close() {
        this.operationsStub.then((stub) => stub.close());
      }
      getProjectId(callback) {
        if (this.auth && "getProjectId" in this.auth) {
          return this.auth.getProjectId(callback);
        }
        if (callback) {
          callback(new Error("Cannot determine project ID."));
        } else {
          return Promise.reject("Cannot determine project ID.");
        }
      }
      getOperationInternal(request, options, callback) {
        request = request || {};
        options = options || {};
        return this.innerApiCalls.getOperation(request, options, callback);
      }
      getOperation(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.getOperation(request, options, callback);
      }
      listOperations(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.listOperations(request, options, callback);
      }
      listOperationsStream(request, options) {
        const callSettings = new gax.CallSettings(options);
        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);
      }
      listOperationsAsync(request, options) {
        request = request || {};
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);
      }
      cancelOperation(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.cancelOperation(request, options, callback);
      }
      deleteOperation(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.deleteOperation(request, options, callback);
      }
    };
    exports2.OperationsClient = OperationsClient;
    var OperationsClientBuilder = class {
      constructor(gaxGrpc, protoJson) {
        if (protoJson && gaxGrpc.httpRules) {
          (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);
        }
        const operationsProtos = protoJson !== null && protoJson !== void 0 ? protoJson : gaxGrpc.loadProtoJSON(operationProtoJson);
        this.operationsClient = (opts) => {
          if (gaxGrpc.fallback) {
            opts.fallback = gaxGrpc.fallback;
          }
          return new OperationsClient(gaxGrpc, operationsProtos, opts);
        };
        Object.assign(this.operationsClient, OperationsClient);
      }
    };
    exports2.OperationsClientBuilder = OperationsClientBuilder;
  }
});

// node_modules/google-gax/build/src/fallbackProto.js
var require_fallbackProto = __commonJS({
  "node_modules/google-gax/build/src/fallbackProto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeResponse = exports2.encodeRequest = void 0;
    var fallback_1 = require_fallback();
    var googleError_1 = require_googleError();
    function encodeRequest(rpc, protocol, servicePath, servicePort, request) {
      const protoNamespaces = [];
      let currNamespace = rpc.parent;
      while (currNamespace.name !== "") {
        protoNamespaces.unshift(currNamespace.name);
        currNamespace = currNamespace.parent;
      }
      const protoServiceName = protoNamespaces.join(".");
      const rpcName = rpc.name;
      const headers = {
        "Content-Type": "application/x-protobuf"
      };
      const method = "POST";
      const requestMessage = rpc.resolvedRequestType.fromObject(request);
      const body = rpc.resolvedRequestType.encode(requestMessage).finish();
      const url = `${protocol}://${servicePath}:${servicePort}/$rpc/${protoServiceName}/${rpcName}`;
      return {
        method,
        url,
        headers,
        body
      };
    }
    exports2.encodeRequest = encodeRequest;
    function decodeResponse(rpc, ok, response) {
      if (!ok) {
        const statusDecoder = new googleError_1.GoogleErrorDecoder();
        const error = statusDecoder.decodeErrorFromBuffer(response);
        throw error;
      }
      const buffer = response instanceof ArrayBuffer ? new Uint8Array(response) : response;
      const message = rpc.resolvedResponseType.decode(buffer);
      return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);
    }
    exports2.decodeResponse = decodeResponse;
  }
});

// node_modules/google-gax/build/src/fallbackRest.js
var require_fallbackRest = __commonJS({
  "node_modules/google-gax/build/src/fallbackRest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeResponse = exports2.encodeRequest = void 0;
    var serializer = require_src8();
    var fallback_1 = require_fallback();
    var featureDetection_1 = require_featureDetection();
    var googleError_1 = require_googleError();
    var transcoding_1 = require_transcoding();
    if (!(0, featureDetection_1.hasTextEncoder)() || !(0, featureDetection_1.hasTextDecoder)()) {
      require_text_min();
    }
    function encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) {
      const headers = {
        "Content-Type": "application/json"
      };
      const message = rpc.resolvedRequestType.fromObject(request);
      const json = serializer.toProto3JSON(message, {
        numericEnums
      });
      if (!json) {
        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);
      }
      if (typeof json !== "object" || Array.isArray(json)) {
        throw new Error(`Request to RPC ${rpc.name} must be an object.`);
      }
      const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);
      if (!transcoded) {
        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);
      }
      if (numericEnums) {
        transcoded.queryString = (transcoded.queryString ? "&" : "") + "$alt=json%3Benum-encoding=int";
      }
      const method = transcoded.httpMethod.toUpperCase();
      const body = JSON.stringify(transcoded.data);
      const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\//, "")}?${transcoded.queryString}`;
      return {
        method,
        url,
        headers,
        body
      };
    }
    exports2.encodeRequest = encodeRequest;
    function decodeResponse(rpc, ok, response) {
      const decodedString = new TextDecoder().decode(response);
      const json = JSON.parse(decodedString);
      if (!ok) {
        const error = googleError_1.GoogleError.parseHttpError(json);
        throw error;
      }
      const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);
      if (!message) {
        throw new Error(`Received null response from RPC ${rpc.name}`);
      }
      return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);
    }
    exports2.decodeResponse = decodeResponse;
  }
});

// node_modules/google-gax/build/src/streamArrayParser.js
var require_streamArrayParser = __commonJS({
  "node_modules/google-gax/build/src/streamArrayParser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamArrayParser = void 0;
    var abort_controller_1 = require_browser();
    var stream_1 = require_stream();
    var fallbackRest_1 = require_fallbackRest();
    var featureDetection_1 = require_featureDetection();
    var StreamArrayParser = class extends stream_1.Transform {
      constructor(rpc, options) {
        super(Object.assign({}, options, { readableObjectMode: true }));
        this._done = false;
        this._prevBlock = Buffer.from("");
        this._isInString = false;
        this._isSkipped = false;
        this._level = 0;
        this.rpc = rpc;
        this.cancelController = (0, featureDetection_1.hasAbortController)() ? new AbortController() : new abort_controller_1.AbortController();
        this.cancelSignal = this.cancelController.signal;
        this.cancelRequested = false;
      }
      _transform(chunk, _, callback) {
        let objectStart = 0;
        let curIndex = 0;
        if (this._level === 0 && curIndex === 0) {
          if (String.fromCharCode(chunk[0]) !== "[") {
            this.emit("error", new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));
          }
          curIndex++;
          this._level++;
        }
        while (curIndex < chunk.length) {
          const curValue = String.fromCharCode(chunk[curIndex]);
          if (!this._isSkipped) {
            switch (curValue) {
              case "{":
                if (!this._isInString) {
                  this._level++;
                }
                if (!this._isInString && this._level === 2) {
                  objectStart = curIndex;
                }
                break;
              case '"':
                this._isInString = !this._isInString;
                break;
              case "}":
                if (!this._isInString) {
                  this._level--;
                }
                if (!this._isInString && this._level === 1) {
                  const objBuff = Buffer.concat([
                    this._prevBlock,
                    chunk.slice(objectStart, curIndex + 1)
                  ]);
                  try {
                    const msgObj = (0, fallbackRest_1.decodeResponse)(this.rpc, true, objBuff);
                    this.push(msgObj);
                  } catch (err) {
                    this.emit("error", err);
                  }
                  objectStart = curIndex + 1;
                  this._prevBlock = Buffer.from("");
                }
                break;
              case "]":
                if (!this._isInString && this._level === 1) {
                  this._done = true;
                  this.push(null);
                }
                break;
              case "\\":
                this._isSkipped = true;
                break;
              default:
                break;
            }
          } else {
            this._isSkipped = false;
          }
          curIndex++;
        }
        if (this._level > 1) {
          this._prevBlock = Buffer.concat([
            this._prevBlock,
            chunk.slice(objectStart, curIndex)
          ]);
        }
        callback();
      }
      _flush(callback) {
        callback();
      }
      cancel() {
        this._done = true;
        this.cancelRequested = true;
        this.cancelController.abort();
        this.end();
      }
    };
    exports2.StreamArrayParser = StreamArrayParser;
  }
});

// node_modules/google-gax/build/src/fallbackServiceStub.js
var require_fallbackServiceStub = __commonJS({
  "node_modules/google-gax/build/src/fallbackServiceStub.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.generateServiceStub = void 0;
    var node_fetch_1 = require_browser3();
    var abort_controller_1 = require_browser();
    var featureDetection_1 = require_featureDetection();
    var streamArrayParser_1 = require_streamArrayParser();
    var stream_1 = require_stream();
    function generateServiceStub(rpcs, protocol, servicePath, servicePort, authClient, requestEncoder, responseDecoder, numericEnums) {
      const fetch = (0, featureDetection_1.hasWindowFetch)() ? window.fetch : node_fetch_1.default;
      const serviceStub = {
        close: () => {
          return { cancel: () => {
          } };
        }
      };
      for (const [rpcName, rpc] of Object.entries(rpcs)) {
        serviceStub[rpcName] = (request, options, _metadata, callback) => {
          let fetchParameters;
          try {
            fetchParameters = requestEncoder(rpc, protocol, servicePath, servicePort, request, numericEnums);
          } catch (err) {
            callback(err);
            return {
              cancel() {
              }
            };
          }
          const cancelController = (0, featureDetection_1.hasAbortController)() ? new AbortController() : new abort_controller_1.AbortController();
          const cancelSignal = cancelController.signal;
          let cancelRequested = false;
          const url = fetchParameters.url;
          const headers = fetchParameters.headers;
          for (const key of Object.keys(options)) {
            headers[key] = options[key][0];
          }
          const streamArrayParser = new streamArrayParser_1.StreamArrayParser(rpc);
          authClient.getRequestHeaders().then((authHeader) => {
            const fetchRequest = {
              headers: {
                ...authHeader,
                ...headers
              },
              body: fetchParameters.body,
              method: fetchParameters.method,
              signal: cancelSignal
            };
            if (fetchParameters.method === "GET" || fetchParameters.method === "DELETE") {
              delete fetchRequest["body"];
            }
            return fetch(url, fetchRequest);
          }).then((response) => {
            if (response.ok && rpc.responseStream) {
              (0, stream_1.pipeline)(response.body, streamArrayParser, (err) => {
                if (err && (!cancelRequested || err instanceof Error && err.name !== "AbortError")) {
                  if (callback) {
                    callback(err);
                  }
                  streamArrayParser.emit("error", err);
                }
              });
              return;
            } else {
              return Promise.all([
                Promise.resolve(response.ok),
                response.arrayBuffer()
              ]).then(([ok, buffer]) => {
                const response2 = responseDecoder(rpc, ok, buffer);
                callback(null, response2);
              }).catch((err) => {
                if (!cancelRequested || err.name !== "AbortError") {
                  if (rpc.responseStream) {
                    if (callback) {
                      callback(err);
                    }
                    streamArrayParser.emit("error", err);
                  } else {
                    callback(err);
                  }
                }
              });
            }
          }).catch((err) => callback(err));
          if (rpc.responseStream) {
            return streamArrayParser;
          }
          return {
            cancel: () => {
              cancelRequested = true;
              cancelController.abort();
            }
          };
        };
      }
      return serviceStub;
    }
    exports2.generateServiceStub = generateServiceStub;
  }
});

// node_modules/google-gax/build/protos/iam_service.js
var require_iam_service = __commonJS({
  "node_modules/google-gax/build/protos/iam_service.js"(exports2, module2) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd)
        define(["protobufjs/minimal"], factory);
      else if (typeof __require === "function" && typeof module2 === "object" && module2 && module2.exports)
        module2.exports = factory(require_minimal2());
    })(exports2, function($protobuf) {
      "use strict";
      var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
      var $root = $protobuf.roots.iam_protos || ($protobuf.roots.iam_protos = {});
      $root.google = function() {
        var google = {};
        google.iam = function() {
          var iam = {};
          iam.v1 = function() {
            var v12 = {};
            v12.IAMPolicy = function() {
              function IAMPolicy(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
              }
              (IAMPolicy.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = IAMPolicy;
              IAMPolicy.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
              };
              Object.defineProperty(IAMPolicy.prototype.setIamPolicy = function setIamPolicy(request, callback) {
                return this.rpcCall(setIamPolicy, $root.google.iam.v1.SetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
              }, "name", { value: "SetIamPolicy" });
              Object.defineProperty(IAMPolicy.prototype.getIamPolicy = function getIamPolicy(request, callback) {
                return this.rpcCall(getIamPolicy, $root.google.iam.v1.GetIamPolicyRequest, $root.google.iam.v1.Policy, request, callback);
              }, "name", { value: "GetIamPolicy" });
              Object.defineProperty(IAMPolicy.prototype.testIamPermissions = function testIamPermissions(request, callback) {
                return this.rpcCall(testIamPermissions, $root.google.iam.v1.TestIamPermissionsRequest, $root.google.iam.v1.TestIamPermissionsResponse, request, callback);
              }, "name", { value: "TestIamPermissions" });
              return IAMPolicy;
            }();
            v12.SetIamPolicyRequest = function() {
              function SetIamPolicyRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              SetIamPolicyRequest.prototype.resource = "";
              SetIamPolicyRequest.prototype.policy = null;
              SetIamPolicyRequest.create = function create(properties) {
                return new SetIamPolicyRequest(properties);
              };
              SetIamPolicyRequest.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                  writer.uint32(10).string(message.resource);
                if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                  $root.google.iam.v1.Policy.encode(message.policy, writer.uint32(18).fork()).ldelim();
                return writer;
              };
              SetIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              SetIamPolicyRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.SetIamPolicyRequest();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.resource = reader.string();
                      break;
                    case 2:
                      message.policy = $root.google.iam.v1.Policy.decode(reader, reader.uint32());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              SetIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              SetIamPolicyRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.resource != null && message.hasOwnProperty("resource")) {
                  if (!$util.isString(message.resource))
                    return "resource: string expected";
                }
                if (message.policy != null && message.hasOwnProperty("policy")) {
                  var error = $root.google.iam.v1.Policy.verify(message.policy);
                  if (error)
                    return "policy." + error;
                }
                return null;
              };
              SetIamPolicyRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.SetIamPolicyRequest)
                  return object;
                var message = new $root.google.iam.v1.SetIamPolicyRequest();
                if (object.resource != null)
                  message.resource = String(object.resource);
                if (object.policy != null) {
                  if (typeof object.policy !== "object")
                    throw TypeError(".google.iam.v1.SetIamPolicyRequest.policy: object expected");
                  message.policy = $root.google.iam.v1.Policy.fromObject(object.policy);
                }
                return message;
              };
              SetIamPolicyRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.resource = "";
                  object.policy = null;
                }
                if (message.resource != null && message.hasOwnProperty("resource"))
                  object.resource = message.resource;
                if (message.policy != null && message.hasOwnProperty("policy"))
                  object.policy = $root.google.iam.v1.Policy.toObject(message.policy, options);
                return object;
              };
              SetIamPolicyRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return SetIamPolicyRequest;
            }();
            v12.GetIamPolicyRequest = function() {
              function GetIamPolicyRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              GetIamPolicyRequest.prototype.resource = "";
              GetIamPolicyRequest.prototype.options = null;
              GetIamPolicyRequest.create = function create(properties) {
                return new GetIamPolicyRequest(properties);
              };
              GetIamPolicyRequest.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                  writer.uint32(10).string(message.resource);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                  $root.google.iam.v1.GetPolicyOptions.encode(message.options, writer.uint32(18).fork()).ldelim();
                return writer;
              };
              GetIamPolicyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              GetIamPolicyRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.GetIamPolicyRequest();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.resource = reader.string();
                      break;
                    case 2:
                      message.options = $root.google.iam.v1.GetPolicyOptions.decode(reader, reader.uint32());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              GetIamPolicyRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              GetIamPolicyRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.resource != null && message.hasOwnProperty("resource")) {
                  if (!$util.isString(message.resource))
                    return "resource: string expected";
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                  var error = $root.google.iam.v1.GetPolicyOptions.verify(message.options);
                  if (error)
                    return "options." + error;
                }
                return null;
              };
              GetIamPolicyRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.GetIamPolicyRequest)
                  return object;
                var message = new $root.google.iam.v1.GetIamPolicyRequest();
                if (object.resource != null)
                  message.resource = String(object.resource);
                if (object.options != null) {
                  if (typeof object.options !== "object")
                    throw TypeError(".google.iam.v1.GetIamPolicyRequest.options: object expected");
                  message.options = $root.google.iam.v1.GetPolicyOptions.fromObject(object.options);
                }
                return message;
              };
              GetIamPolicyRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.resource = "";
                  object.options = null;
                }
                if (message.resource != null && message.hasOwnProperty("resource"))
                  object.resource = message.resource;
                if (message.options != null && message.hasOwnProperty("options"))
                  object.options = $root.google.iam.v1.GetPolicyOptions.toObject(message.options, options);
                return object;
              };
              GetIamPolicyRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return GetIamPolicyRequest;
            }();
            v12.TestIamPermissionsRequest = function() {
              function TestIamPermissionsRequest(properties) {
                this.permissions = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              TestIamPermissionsRequest.prototype.resource = "";
              TestIamPermissionsRequest.prototype.permissions = $util.emptyArray;
              TestIamPermissionsRequest.create = function create(properties) {
                return new TestIamPermissionsRequest(properties);
              };
              TestIamPermissionsRequest.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.resource != null && Object.hasOwnProperty.call(message, "resource"))
                  writer.uint32(10).string(message.resource);
                if (message.permissions != null && message.permissions.length)
                  for (var i = 0; i < message.permissions.length; ++i)
                    writer.uint32(18).string(message.permissions[i]);
                return writer;
              };
              TestIamPermissionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              TestIamPermissionsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.TestIamPermissionsRequest();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.resource = reader.string();
                      break;
                    case 2:
                      if (!(message.permissions && message.permissions.length))
                        message.permissions = [];
                      message.permissions.push(reader.string());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              TestIamPermissionsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              TestIamPermissionsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.resource != null && message.hasOwnProperty("resource")) {
                  if (!$util.isString(message.resource))
                    return "resource: string expected";
                }
                if (message.permissions != null && message.hasOwnProperty("permissions")) {
                  if (!Array.isArray(message.permissions))
                    return "permissions: array expected";
                  for (var i = 0; i < message.permissions.length; ++i)
                    if (!$util.isString(message.permissions[i]))
                      return "permissions: string[] expected";
                }
                return null;
              };
              TestIamPermissionsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.TestIamPermissionsRequest)
                  return object;
                var message = new $root.google.iam.v1.TestIamPermissionsRequest();
                if (object.resource != null)
                  message.resource = String(object.resource);
                if (object.permissions) {
                  if (!Array.isArray(object.permissions))
                    throw TypeError(".google.iam.v1.TestIamPermissionsRequest.permissions: array expected");
                  message.permissions = [];
                  for (var i = 0; i < object.permissions.length; ++i)
                    message.permissions[i] = String(object.permissions[i]);
                }
                return message;
              };
              TestIamPermissionsRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.permissions = [];
                if (options.defaults)
                  object.resource = "";
                if (message.resource != null && message.hasOwnProperty("resource"))
                  object.resource = message.resource;
                if (message.permissions && message.permissions.length) {
                  object.permissions = [];
                  for (var j = 0; j < message.permissions.length; ++j)
                    object.permissions[j] = message.permissions[j];
                }
                return object;
              };
              TestIamPermissionsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return TestIamPermissionsRequest;
            }();
            v12.TestIamPermissionsResponse = function() {
              function TestIamPermissionsResponse(properties) {
                this.permissions = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              TestIamPermissionsResponse.prototype.permissions = $util.emptyArray;
              TestIamPermissionsResponse.create = function create(properties) {
                return new TestIamPermissionsResponse(properties);
              };
              TestIamPermissionsResponse.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.permissions != null && message.permissions.length)
                  for (var i = 0; i < message.permissions.length; ++i)
                    writer.uint32(10).string(message.permissions[i]);
                return writer;
              };
              TestIamPermissionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              TestIamPermissionsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.TestIamPermissionsResponse();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      if (!(message.permissions && message.permissions.length))
                        message.permissions = [];
                      message.permissions.push(reader.string());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              TestIamPermissionsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              TestIamPermissionsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.permissions != null && message.hasOwnProperty("permissions")) {
                  if (!Array.isArray(message.permissions))
                    return "permissions: array expected";
                  for (var i = 0; i < message.permissions.length; ++i)
                    if (!$util.isString(message.permissions[i]))
                      return "permissions: string[] expected";
                }
                return null;
              };
              TestIamPermissionsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.TestIamPermissionsResponse)
                  return object;
                var message = new $root.google.iam.v1.TestIamPermissionsResponse();
                if (object.permissions) {
                  if (!Array.isArray(object.permissions))
                    throw TypeError(".google.iam.v1.TestIamPermissionsResponse.permissions: array expected");
                  message.permissions = [];
                  for (var i = 0; i < object.permissions.length; ++i)
                    message.permissions[i] = String(object.permissions[i]);
                }
                return message;
              };
              TestIamPermissionsResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.permissions = [];
                if (message.permissions && message.permissions.length) {
                  object.permissions = [];
                  for (var j = 0; j < message.permissions.length; ++j)
                    object.permissions[j] = message.permissions[j];
                }
                return object;
              };
              TestIamPermissionsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return TestIamPermissionsResponse;
            }();
            v12.GetPolicyOptions = function() {
              function GetPolicyOptions(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              GetPolicyOptions.prototype.requestedPolicyVersion = 0;
              GetPolicyOptions.create = function create(properties) {
                return new GetPolicyOptions(properties);
              };
              GetPolicyOptions.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.requestedPolicyVersion != null && Object.hasOwnProperty.call(message, "requestedPolicyVersion"))
                  writer.uint32(8).int32(message.requestedPolicyVersion);
                return writer;
              };
              GetPolicyOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              GetPolicyOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.GetPolicyOptions();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.requestedPolicyVersion = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              GetPolicyOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              GetPolicyOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.requestedPolicyVersion != null && message.hasOwnProperty("requestedPolicyVersion")) {
                  if (!$util.isInteger(message.requestedPolicyVersion))
                    return "requestedPolicyVersion: integer expected";
                }
                return null;
              };
              GetPolicyOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.GetPolicyOptions)
                  return object;
                var message = new $root.google.iam.v1.GetPolicyOptions();
                if (object.requestedPolicyVersion != null)
                  message.requestedPolicyVersion = object.requestedPolicyVersion | 0;
                return message;
              };
              GetPolicyOptions.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults)
                  object.requestedPolicyVersion = 0;
                if (message.requestedPolicyVersion != null && message.hasOwnProperty("requestedPolicyVersion"))
                  object.requestedPolicyVersion = message.requestedPolicyVersion;
                return object;
              };
              GetPolicyOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return GetPolicyOptions;
            }();
            v12.Policy = function() {
              function Policy(properties) {
                this.bindings = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Policy.prototype.version = 0;
              Policy.prototype.bindings = $util.emptyArray;
              Policy.prototype.etag = $util.newBuffer([]);
              Policy.create = function create(properties) {
                return new Policy(properties);
              };
              Policy.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                  writer.uint32(8).int32(message.version);
                if (message.etag != null && Object.hasOwnProperty.call(message, "etag"))
                  writer.uint32(26).bytes(message.etag);
                if (message.bindings != null && message.bindings.length)
                  for (var i = 0; i < message.bindings.length; ++i)
                    $root.google.iam.v1.Binding.encode(message.bindings[i], writer.uint32(34).fork()).ldelim();
                return writer;
              };
              Policy.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Policy.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Policy();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.version = reader.int32();
                      break;
                    case 4:
                      if (!(message.bindings && message.bindings.length))
                        message.bindings = [];
                      message.bindings.push($root.google.iam.v1.Binding.decode(reader, reader.uint32()));
                      break;
                    case 3:
                      message.etag = reader.bytes();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Policy.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Policy.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.version != null && message.hasOwnProperty("version")) {
                  if (!$util.isInteger(message.version))
                    return "version: integer expected";
                }
                if (message.bindings != null && message.hasOwnProperty("bindings")) {
                  if (!Array.isArray(message.bindings))
                    return "bindings: array expected";
                  for (var i = 0; i < message.bindings.length; ++i) {
                    var error = $root.google.iam.v1.Binding.verify(message.bindings[i]);
                    if (error)
                      return "bindings." + error;
                  }
                }
                if (message.etag != null && message.hasOwnProperty("etag")) {
                  if (!(message.etag && typeof message.etag.length === "number" || $util.isString(message.etag)))
                    return "etag: buffer expected";
                }
                return null;
              };
              Policy.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.Policy)
                  return object;
                var message = new $root.google.iam.v1.Policy();
                if (object.version != null)
                  message.version = object.version | 0;
                if (object.bindings) {
                  if (!Array.isArray(object.bindings))
                    throw TypeError(".google.iam.v1.Policy.bindings: array expected");
                  message.bindings = [];
                  for (var i = 0; i < object.bindings.length; ++i) {
                    if (typeof object.bindings[i] !== "object")
                      throw TypeError(".google.iam.v1.Policy.bindings: object expected");
                    message.bindings[i] = $root.google.iam.v1.Binding.fromObject(object.bindings[i]);
                  }
                }
                if (object.etag != null) {
                  if (typeof object.etag === "string")
                    $util.base64.decode(object.etag, message.etag = $util.newBuffer($util.base64.length(object.etag)), 0);
                  else if (object.etag.length)
                    message.etag = object.etag;
                }
                return message;
              };
              Policy.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.bindings = [];
                if (options.defaults) {
                  object.version = 0;
                  if (options.bytes === String)
                    object.etag = "";
                  else {
                    object.etag = [];
                    if (options.bytes !== Array)
                      object.etag = $util.newBuffer(object.etag);
                  }
                }
                if (message.version != null && message.hasOwnProperty("version"))
                  object.version = message.version;
                if (message.etag != null && message.hasOwnProperty("etag"))
                  object.etag = options.bytes === String ? $util.base64.encode(message.etag, 0, message.etag.length) : options.bytes === Array ? Array.prototype.slice.call(message.etag) : message.etag;
                if (message.bindings && message.bindings.length) {
                  object.bindings = [];
                  for (var j = 0; j < message.bindings.length; ++j)
                    object.bindings[j] = $root.google.iam.v1.Binding.toObject(message.bindings[j], options);
                }
                return object;
              };
              Policy.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Policy;
            }();
            v12.Binding = function() {
              function Binding(properties) {
                this.members = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Binding.prototype.role = "";
              Binding.prototype.members = $util.emptyArray;
              Binding.prototype.condition = null;
              Binding.create = function create(properties) {
                return new Binding(properties);
              };
              Binding.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                  writer.uint32(10).string(message.role);
                if (message.members != null && message.members.length)
                  for (var i = 0; i < message.members.length; ++i)
                    writer.uint32(18).string(message.members[i]);
                if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                  $root.google.type.Expr.encode(message.condition, writer.uint32(26).fork()).ldelim();
                return writer;
              };
              Binding.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Binding.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.Binding();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.role = reader.string();
                      break;
                    case 2:
                      if (!(message.members && message.members.length))
                        message.members = [];
                      message.members.push(reader.string());
                      break;
                    case 3:
                      message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Binding.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Binding.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.role != null && message.hasOwnProperty("role")) {
                  if (!$util.isString(message.role))
                    return "role: string expected";
                }
                if (message.members != null && message.hasOwnProperty("members")) {
                  if (!Array.isArray(message.members))
                    return "members: array expected";
                  for (var i = 0; i < message.members.length; ++i)
                    if (!$util.isString(message.members[i]))
                      return "members: string[] expected";
                }
                if (message.condition != null && message.hasOwnProperty("condition")) {
                  var error = $root.google.type.Expr.verify(message.condition);
                  if (error)
                    return "condition." + error;
                }
                return null;
              };
              Binding.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.Binding)
                  return object;
                var message = new $root.google.iam.v1.Binding();
                if (object.role != null)
                  message.role = String(object.role);
                if (object.members) {
                  if (!Array.isArray(object.members))
                    throw TypeError(".google.iam.v1.Binding.members: array expected");
                  message.members = [];
                  for (var i = 0; i < object.members.length; ++i)
                    message.members[i] = String(object.members[i]);
                }
                if (object.condition != null) {
                  if (typeof object.condition !== "object")
                    throw TypeError(".google.iam.v1.Binding.condition: object expected");
                  message.condition = $root.google.type.Expr.fromObject(object.condition);
                }
                return message;
              };
              Binding.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.members = [];
                if (options.defaults) {
                  object.role = "";
                  object.condition = null;
                }
                if (message.role != null && message.hasOwnProperty("role"))
                  object.role = message.role;
                if (message.members && message.members.length) {
                  object.members = [];
                  for (var j = 0; j < message.members.length; ++j)
                    object.members[j] = message.members[j];
                }
                if (message.condition != null && message.hasOwnProperty("condition"))
                  object.condition = $root.google.type.Expr.toObject(message.condition, options);
                return object;
              };
              Binding.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Binding;
            }();
            v12.PolicyDelta = function() {
              function PolicyDelta(properties) {
                this.bindingDeltas = [];
                this.auditConfigDeltas = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              PolicyDelta.prototype.bindingDeltas = $util.emptyArray;
              PolicyDelta.prototype.auditConfigDeltas = $util.emptyArray;
              PolicyDelta.create = function create(properties) {
                return new PolicyDelta(properties);
              };
              PolicyDelta.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.bindingDeltas != null && message.bindingDeltas.length)
                  for (var i = 0; i < message.bindingDeltas.length; ++i)
                    $root.google.iam.v1.BindingDelta.encode(message.bindingDeltas[i], writer.uint32(10).fork()).ldelim();
                if (message.auditConfigDeltas != null && message.auditConfigDeltas.length)
                  for (var i = 0; i < message.auditConfigDeltas.length; ++i)
                    $root.google.iam.v1.AuditConfigDelta.encode(message.auditConfigDeltas[i], writer.uint32(18).fork()).ldelim();
                return writer;
              };
              PolicyDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              PolicyDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.PolicyDelta();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      if (!(message.bindingDeltas && message.bindingDeltas.length))
                        message.bindingDeltas = [];
                      message.bindingDeltas.push($root.google.iam.v1.BindingDelta.decode(reader, reader.uint32()));
                      break;
                    case 2:
                      if (!(message.auditConfigDeltas && message.auditConfigDeltas.length))
                        message.auditConfigDeltas = [];
                      message.auditConfigDeltas.push($root.google.iam.v1.AuditConfigDelta.decode(reader, reader.uint32()));
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              PolicyDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              PolicyDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.bindingDeltas != null && message.hasOwnProperty("bindingDeltas")) {
                  if (!Array.isArray(message.bindingDeltas))
                    return "bindingDeltas: array expected";
                  for (var i = 0; i < message.bindingDeltas.length; ++i) {
                    var error = $root.google.iam.v1.BindingDelta.verify(message.bindingDeltas[i]);
                    if (error)
                      return "bindingDeltas." + error;
                  }
                }
                if (message.auditConfigDeltas != null && message.hasOwnProperty("auditConfigDeltas")) {
                  if (!Array.isArray(message.auditConfigDeltas))
                    return "auditConfigDeltas: array expected";
                  for (var i = 0; i < message.auditConfigDeltas.length; ++i) {
                    var error = $root.google.iam.v1.AuditConfigDelta.verify(message.auditConfigDeltas[i]);
                    if (error)
                      return "auditConfigDeltas." + error;
                  }
                }
                return null;
              };
              PolicyDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.PolicyDelta)
                  return object;
                var message = new $root.google.iam.v1.PolicyDelta();
                if (object.bindingDeltas) {
                  if (!Array.isArray(object.bindingDeltas))
                    throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: array expected");
                  message.bindingDeltas = [];
                  for (var i = 0; i < object.bindingDeltas.length; ++i) {
                    if (typeof object.bindingDeltas[i] !== "object")
                      throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: object expected");
                    message.bindingDeltas[i] = $root.google.iam.v1.BindingDelta.fromObject(object.bindingDeltas[i]);
                  }
                }
                if (object.auditConfigDeltas) {
                  if (!Array.isArray(object.auditConfigDeltas))
                    throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected");
                  message.auditConfigDeltas = [];
                  for (var i = 0; i < object.auditConfigDeltas.length; ++i) {
                    if (typeof object.auditConfigDeltas[i] !== "object")
                      throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected");
                    message.auditConfigDeltas[i] = $root.google.iam.v1.AuditConfigDelta.fromObject(object.auditConfigDeltas[i]);
                  }
                }
                return message;
              };
              PolicyDelta.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.bindingDeltas = [];
                  object.auditConfigDeltas = [];
                }
                if (message.bindingDeltas && message.bindingDeltas.length) {
                  object.bindingDeltas = [];
                  for (var j = 0; j < message.bindingDeltas.length; ++j)
                    object.bindingDeltas[j] = $root.google.iam.v1.BindingDelta.toObject(message.bindingDeltas[j], options);
                }
                if (message.auditConfigDeltas && message.auditConfigDeltas.length) {
                  object.auditConfigDeltas = [];
                  for (var j = 0; j < message.auditConfigDeltas.length; ++j)
                    object.auditConfigDeltas[j] = $root.google.iam.v1.AuditConfigDelta.toObject(message.auditConfigDeltas[j], options);
                }
                return object;
              };
              PolicyDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return PolicyDelta;
            }();
            v12.BindingDelta = function() {
              function BindingDelta(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              BindingDelta.prototype.action = 0;
              BindingDelta.prototype.role = "";
              BindingDelta.prototype.member = "";
              BindingDelta.prototype.condition = null;
              BindingDelta.create = function create(properties) {
                return new BindingDelta(properties);
              };
              BindingDelta.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                  writer.uint32(8).int32(message.action);
                if (message.role != null && Object.hasOwnProperty.call(message, "role"))
                  writer.uint32(18).string(message.role);
                if (message.member != null && Object.hasOwnProperty.call(message, "member"))
                  writer.uint32(26).string(message.member);
                if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
                  $root.google.type.Expr.encode(message.condition, writer.uint32(34).fork()).ldelim();
                return writer;
              };
              BindingDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              BindingDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.BindingDelta();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.action = reader.int32();
                      break;
                    case 2:
                      message.role = reader.string();
                      break;
                    case 3:
                      message.member = reader.string();
                      break;
                    case 4:
                      message.condition = $root.google.type.Expr.decode(reader, reader.uint32());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              BindingDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              BindingDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.action != null && message.hasOwnProperty("action"))
                  switch (message.action) {
                    default:
                      return "action: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                      break;
                  }
                if (message.role != null && message.hasOwnProperty("role")) {
                  if (!$util.isString(message.role))
                    return "role: string expected";
                }
                if (message.member != null && message.hasOwnProperty("member")) {
                  if (!$util.isString(message.member))
                    return "member: string expected";
                }
                if (message.condition != null && message.hasOwnProperty("condition")) {
                  var error = $root.google.type.Expr.verify(message.condition);
                  if (error)
                    return "condition." + error;
                }
                return null;
              };
              BindingDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.BindingDelta)
                  return object;
                var message = new $root.google.iam.v1.BindingDelta();
                switch (object.action) {
                  case "ACTION_UNSPECIFIED":
                  case 0:
                    message.action = 0;
                    break;
                  case "ADD":
                  case 1:
                    message.action = 1;
                    break;
                  case "REMOVE":
                  case 2:
                    message.action = 2;
                    break;
                }
                if (object.role != null)
                  message.role = String(object.role);
                if (object.member != null)
                  message.member = String(object.member);
                if (object.condition != null) {
                  if (typeof object.condition !== "object")
                    throw TypeError(".google.iam.v1.BindingDelta.condition: object expected");
                  message.condition = $root.google.type.Expr.fromObject(object.condition);
                }
                return message;
              };
              BindingDelta.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                  object.role = "";
                  object.member = "";
                  object.condition = null;
                }
                if (message.action != null && message.hasOwnProperty("action"))
                  object.action = options.enums === String ? $root.google.iam.v1.BindingDelta.Action[message.action] : message.action;
                if (message.role != null && message.hasOwnProperty("role"))
                  object.role = message.role;
                if (message.member != null && message.hasOwnProperty("member"))
                  object.member = message.member;
                if (message.condition != null && message.hasOwnProperty("condition"))
                  object.condition = $root.google.type.Expr.toObject(message.condition, options);
                return object;
              };
              BindingDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              BindingDelta.Action = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "ADD"] = 1;
                values[valuesById[2] = "REMOVE"] = 2;
                return values;
              }();
              return BindingDelta;
            }();
            v12.AuditConfigDelta = function() {
              function AuditConfigDelta(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              AuditConfigDelta.prototype.action = 0;
              AuditConfigDelta.prototype.service = "";
              AuditConfigDelta.prototype.exemptedMember = "";
              AuditConfigDelta.prototype.logType = "";
              AuditConfigDelta.create = function create(properties) {
                return new AuditConfigDelta(properties);
              };
              AuditConfigDelta.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                  writer.uint32(8).int32(message.action);
                if (message.service != null && Object.hasOwnProperty.call(message, "service"))
                  writer.uint32(18).string(message.service);
                if (message.exemptedMember != null && Object.hasOwnProperty.call(message, "exemptedMember"))
                  writer.uint32(26).string(message.exemptedMember);
                if (message.logType != null && Object.hasOwnProperty.call(message, "logType"))
                  writer.uint32(34).string(message.logType);
                return writer;
              };
              AuditConfigDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              AuditConfigDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.AuditConfigDelta();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.action = reader.int32();
                      break;
                    case 2:
                      message.service = reader.string();
                      break;
                    case 3:
                      message.exemptedMember = reader.string();
                      break;
                    case 4:
                      message.logType = reader.string();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              AuditConfigDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              AuditConfigDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.action != null && message.hasOwnProperty("action"))
                  switch (message.action) {
                    default:
                      return "action: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                      break;
                  }
                if (message.service != null && message.hasOwnProperty("service")) {
                  if (!$util.isString(message.service))
                    return "service: string expected";
                }
                if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember")) {
                  if (!$util.isString(message.exemptedMember))
                    return "exemptedMember: string expected";
                }
                if (message.logType != null && message.hasOwnProperty("logType")) {
                  if (!$util.isString(message.logType))
                    return "logType: string expected";
                }
                return null;
              };
              AuditConfigDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.google.iam.v1.AuditConfigDelta)
                  return object;
                var message = new $root.google.iam.v1.AuditConfigDelta();
                switch (object.action) {
                  case "ACTION_UNSPECIFIED":
                  case 0:
                    message.action = 0;
                    break;
                  case "ADD":
                  case 1:
                    message.action = 1;
                    break;
                  case "REMOVE":
                  case 2:
                    message.action = 2;
                    break;
                }
                if (object.service != null)
                  message.service = String(object.service);
                if (object.exemptedMember != null)
                  message.exemptedMember = String(object.exemptedMember);
                if (object.logType != null)
                  message.logType = String(object.logType);
                return message;
              };
              AuditConfigDelta.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                  object.service = "";
                  object.exemptedMember = "";
                  object.logType = "";
                }
                if (message.action != null && message.hasOwnProperty("action"))
                  object.action = options.enums === String ? $root.google.iam.v1.AuditConfigDelta.Action[message.action] : message.action;
                if (message.service != null && message.hasOwnProperty("service"))
                  object.service = message.service;
                if (message.exemptedMember != null && message.hasOwnProperty("exemptedMember"))
                  object.exemptedMember = message.exemptedMember;
                if (message.logType != null && message.hasOwnProperty("logType"))
                  object.logType = message.logType;
                return object;
              };
              AuditConfigDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              AuditConfigDelta.Action = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "ADD"] = 1;
                values[valuesById[2] = "REMOVE"] = 2;
                return values;
              }();
              return AuditConfigDelta;
            }();
            v12.logging = function() {
              var logging = {};
              logging.AuditData = function() {
                function AuditData(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                AuditData.prototype.policyDelta = null;
                AuditData.create = function create(properties) {
                  return new AuditData(properties);
                };
                AuditData.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.policyDelta != null && Object.hasOwnProperty.call(message, "policyDelta"))
                    $root.google.iam.v1.PolicyDelta.encode(message.policyDelta, writer.uint32(18).fork()).ldelim();
                  return writer;
                };
                AuditData.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                AuditData.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.iam.v1.logging.AuditData();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 2:
                        message.policyDelta = $root.google.iam.v1.PolicyDelta.decode(reader, reader.uint32());
                        break;
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                AuditData.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                AuditData.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.policyDelta != null && message.hasOwnProperty("policyDelta")) {
                    var error = $root.google.iam.v1.PolicyDelta.verify(message.policyDelta);
                    if (error)
                      return "policyDelta." + error;
                  }
                  return null;
                };
                AuditData.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.iam.v1.logging.AuditData)
                    return object;
                  var message = new $root.google.iam.v1.logging.AuditData();
                  if (object.policyDelta != null) {
                    if (typeof object.policyDelta !== "object")
                      throw TypeError(".google.iam.v1.logging.AuditData.policyDelta: object expected");
                    message.policyDelta = $root.google.iam.v1.PolicyDelta.fromObject(object.policyDelta);
                  }
                  return message;
                };
                AuditData.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.policyDelta = null;
                  if (message.policyDelta != null && message.hasOwnProperty("policyDelta"))
                    object.policyDelta = $root.google.iam.v1.PolicyDelta.toObject(message.policyDelta, options);
                  return object;
                };
                AuditData.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                return AuditData;
              }();
              return logging;
            }();
            return v12;
          }();
          return iam;
        }();
        google.api = function() {
          var api = {};
          api.Http = function() {
            function Http(properties) {
              this.rules = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Http.prototype.rules = $util.emptyArray;
            Http.prototype.fullyDecodeReservedExpansion = false;
            Http.create = function create(properties) {
              return new Http(properties);
            };
            Http.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.rules != null && message.rules.length)
                for (var i = 0; i < message.rules.length; ++i)
                  $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(10).fork()).ldelim();
              if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                writer.uint32(16).bool(message.fullyDecodeReservedExpansion);
              return writer;
            };
            Http.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Http.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.Http();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.rules && message.rules.length))
                      message.rules = [];
                    message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  case 2:
                    message.fullyDecodeReservedExpansion = reader.bool();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Http.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Http.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.rules != null && message.hasOwnProperty("rules")) {
                if (!Array.isArray(message.rules))
                  return "rules: array expected";
                for (var i = 0; i < message.rules.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.rules[i]);
                  if (error)
                    return "rules." + error;
                }
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion")) {
                if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                  return "fullyDecodeReservedExpansion: boolean expected";
              }
              return null;
            };
            Http.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.Http)
                return object;
              var message = new $root.google.api.Http();
              if (object.rules) {
                if (!Array.isArray(object.rules))
                  throw TypeError(".google.api.Http.rules: array expected");
                message.rules = [];
                for (var i = 0; i < object.rules.length; ++i) {
                  if (typeof object.rules[i] !== "object")
                    throw TypeError(".google.api.Http.rules: object expected");
                  message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                }
              }
              if (object.fullyDecodeReservedExpansion != null)
                message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
              return message;
            };
            Http.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.rules = [];
              if (options.defaults)
                object.fullyDecodeReservedExpansion = false;
              if (message.rules && message.rules.length) {
                object.rules = [];
                for (var j = 0; j < message.rules.length; ++j)
                  object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
              return object;
            };
            Http.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Http;
          }();
          api.HttpRule = function() {
            function HttpRule(properties) {
              this.additionalBindings = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            HttpRule.prototype.selector = "";
            HttpRule.prototype.get = "";
            HttpRule.prototype.put = "";
            HttpRule.prototype.post = "";
            HttpRule.prototype["delete"] = "";
            HttpRule.prototype.patch = "";
            HttpRule.prototype.custom = null;
            HttpRule.prototype.body = "";
            HttpRule.prototype.responseBody = "";
            HttpRule.prototype.additionalBindings = $util.emptyArray;
            var $oneOfFields;
            Object.defineProperty(HttpRule.prototype, "pattern", {
              get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            HttpRule.create = function create(properties) {
              return new HttpRule(properties);
            };
            HttpRule.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                writer.uint32(10).string(message.selector);
              if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                writer.uint32(18).string(message.get);
              if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                writer.uint32(26).string(message.put);
              if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                writer.uint32(34).string(message.post);
              if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                writer.uint32(42).string(message["delete"]);
              if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                writer.uint32(50).string(message.patch);
              if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                writer.uint32(58).string(message.body);
              if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(66).fork()).ldelim();
              if (message.additionalBindings != null && message.additionalBindings.length)
                for (var i = 0; i < message.additionalBindings.length; ++i)
                  $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(90).fork()).ldelim();
              if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                writer.uint32(98).string(message.responseBody);
              return writer;
            };
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            HttpRule.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.selector = reader.string();
                    break;
                  case 2:
                    message.get = reader.string();
                    break;
                  case 3:
                    message.put = reader.string();
                    break;
                  case 4:
                    message.post = reader.string();
                    break;
                  case 5:
                    message["delete"] = reader.string();
                    break;
                  case 6:
                    message.patch = reader.string();
                    break;
                  case 8:
                    message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                    break;
                  case 7:
                    message.body = reader.string();
                    break;
                  case 12:
                    message.responseBody = reader.string();
                    break;
                  case 11:
                    if (!(message.additionalBindings && message.additionalBindings.length))
                      message.additionalBindings = [];
                    message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            HttpRule.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              var properties = {};
              if (message.selector != null && message.hasOwnProperty("selector")) {
                if (!$util.isString(message.selector))
                  return "selector: string expected";
              }
              if (message.get != null && message.hasOwnProperty("get")) {
                properties.pattern = 1;
                if (!$util.isString(message.get))
                  return "get: string expected";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.put))
                  return "put: string expected";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.post))
                  return "post: string expected";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message["delete"]))
                  return "delete: string expected";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.patch))
                  return "patch: string expected";
              }
              if (message.custom != null && message.hasOwnProperty("custom")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                {
                  var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                  if (error)
                    return "custom." + error;
                }
              }
              if (message.body != null && message.hasOwnProperty("body")) {
                if (!$util.isString(message.body))
                  return "body: string expected";
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody")) {
                if (!$util.isString(message.responseBody))
                  return "responseBody: string expected";
              }
              if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                if (!Array.isArray(message.additionalBindings))
                  return "additionalBindings: array expected";
                for (var i = 0; i < message.additionalBindings.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                  if (error)
                    return "additionalBindings." + error;
                }
              }
              return null;
            };
            HttpRule.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.HttpRule)
                return object;
              var message = new $root.google.api.HttpRule();
              if (object.selector != null)
                message.selector = String(object.selector);
              if (object.get != null)
                message.get = String(object.get);
              if (object.put != null)
                message.put = String(object.put);
              if (object.post != null)
                message.post = String(object.post);
              if (object["delete"] != null)
                message["delete"] = String(object["delete"]);
              if (object.patch != null)
                message.patch = String(object.patch);
              if (object.custom != null) {
                if (typeof object.custom !== "object")
                  throw TypeError(".google.api.HttpRule.custom: object expected");
                message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
              }
              if (object.body != null)
                message.body = String(object.body);
              if (object.responseBody != null)
                message.responseBody = String(object.responseBody);
              if (object.additionalBindings) {
                if (!Array.isArray(object.additionalBindings))
                  throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                message.additionalBindings = [];
                for (var i = 0; i < object.additionalBindings.length; ++i) {
                  if (typeof object.additionalBindings[i] !== "object")
                    throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                  message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                }
              }
              return message;
            };
            HttpRule.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.additionalBindings = [];
              if (options.defaults) {
                object.selector = "";
                object.body = "";
                object.responseBody = "";
              }
              if (message.selector != null && message.hasOwnProperty("selector"))
                object.selector = message.selector;
              if (message.get != null && message.hasOwnProperty("get")) {
                object.get = message.get;
                if (options.oneofs)
                  object.pattern = "get";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                object.put = message.put;
                if (options.oneofs)
                  object.pattern = "put";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                object.post = message.post;
                if (options.oneofs)
                  object.pattern = "post";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                object["delete"] = message["delete"];
                if (options.oneofs)
                  object.pattern = "delete";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                object.patch = message.patch;
                if (options.oneofs)
                  object.pattern = "patch";
              }
              if (message.body != null && message.hasOwnProperty("body"))
                object.body = message.body;
              if (message.custom != null && message.hasOwnProperty("custom")) {
                object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                if (options.oneofs)
                  object.pattern = "custom";
              }
              if (message.additionalBindings && message.additionalBindings.length) {
                object.additionalBindings = [];
                for (var j = 0; j < message.additionalBindings.length; ++j)
                  object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                object.responseBody = message.responseBody;
              return object;
            };
            HttpRule.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return HttpRule;
          }();
          api.CustomHttpPattern = function() {
            function CustomHttpPattern(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CustomHttpPattern.prototype.kind = "";
            CustomHttpPattern.prototype.path = "";
            CustomHttpPattern.create = function create(properties) {
              return new CustomHttpPattern(properties);
            };
            CustomHttpPattern.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                writer.uint32(10).string(message.kind);
              if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                writer.uint32(18).string(message.path);
              return writer;
            };
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CustomHttpPattern.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.kind = reader.string();
                    break;
                  case 2:
                    message.path = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CustomHttpPattern.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.kind != null && message.hasOwnProperty("kind")) {
                if (!$util.isString(message.kind))
                  return "kind: string expected";
              }
              if (message.path != null && message.hasOwnProperty("path")) {
                if (!$util.isString(message.path))
                  return "path: string expected";
              }
              return null;
            };
            CustomHttpPattern.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CustomHttpPattern)
                return object;
              var message = new $root.google.api.CustomHttpPattern();
              if (object.kind != null)
                message.kind = String(object.kind);
              if (object.path != null)
                message.path = String(object.path);
              return message;
            };
            CustomHttpPattern.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.kind = "";
                object.path = "";
              }
              if (message.kind != null && message.hasOwnProperty("kind"))
                object.kind = message.kind;
              if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
              return object;
            };
            CustomHttpPattern.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return CustomHttpPattern;
          }();
          api.FieldBehavior = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
            values[valuesById[1] = "OPTIONAL"] = 1;
            values[valuesById[2] = "REQUIRED"] = 2;
            values[valuesById[3] = "OUTPUT_ONLY"] = 3;
            values[valuesById[4] = "INPUT_ONLY"] = 4;
            values[valuesById[5] = "IMMUTABLE"] = 5;
            return values;
          }();
          api.ResourceDescriptor = function() {
            function ResourceDescriptor(properties) {
              this.pattern = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ResourceDescriptor.prototype.type = "";
            ResourceDescriptor.prototype.pattern = $util.emptyArray;
            ResourceDescriptor.prototype.nameField = "";
            ResourceDescriptor.prototype.history = 0;
            ResourceDescriptor.prototype.plural = "";
            ResourceDescriptor.prototype.singular = "";
            ResourceDescriptor.create = function create(properties) {
              return new ResourceDescriptor(properties);
            };
            ResourceDescriptor.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(10).string(message.type);
              if (message.pattern != null && message.pattern.length)
                for (var i = 0; i < message.pattern.length; ++i)
                  writer.uint32(18).string(message.pattern[i]);
              if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                writer.uint32(26).string(message.nameField);
              if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                writer.uint32(32).int32(message.history);
              if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                writer.uint32(42).string(message.plural);
              if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                writer.uint32(50).string(message.singular);
              return writer;
            };
            ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ResourceDescriptor.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.type = reader.string();
                    break;
                  case 2:
                    if (!(message.pattern && message.pattern.length))
                      message.pattern = [];
                    message.pattern.push(reader.string());
                    break;
                  case 3:
                    message.nameField = reader.string();
                    break;
                  case 4:
                    message.history = reader.int32();
                    break;
                  case 5:
                    message.plural = reader.string();
                    break;
                  case 6:
                    message.singular = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ResourceDescriptor.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type != null && message.hasOwnProperty("type")) {
                if (!$util.isString(message.type))
                  return "type: string expected";
              }
              if (message.pattern != null && message.hasOwnProperty("pattern")) {
                if (!Array.isArray(message.pattern))
                  return "pattern: array expected";
                for (var i = 0; i < message.pattern.length; ++i)
                  if (!$util.isString(message.pattern[i]))
                    return "pattern: string[] expected";
              }
              if (message.nameField != null && message.hasOwnProperty("nameField")) {
                if (!$util.isString(message.nameField))
                  return "nameField: string expected";
              }
              if (message.history != null && message.hasOwnProperty("history"))
                switch (message.history) {
                  default:
                    return "history: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.plural != null && message.hasOwnProperty("plural")) {
                if (!$util.isString(message.plural))
                  return "plural: string expected";
              }
              if (message.singular != null && message.hasOwnProperty("singular")) {
                if (!$util.isString(message.singular))
                  return "singular: string expected";
              }
              return null;
            };
            ResourceDescriptor.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ResourceDescriptor)
                return object;
              var message = new $root.google.api.ResourceDescriptor();
              if (object.type != null)
                message.type = String(object.type);
              if (object.pattern) {
                if (!Array.isArray(object.pattern))
                  throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                message.pattern = [];
                for (var i = 0; i < object.pattern.length; ++i)
                  message.pattern[i] = String(object.pattern[i]);
              }
              if (object.nameField != null)
                message.nameField = String(object.nameField);
              switch (object.history) {
                case "HISTORY_UNSPECIFIED":
                case 0:
                  message.history = 0;
                  break;
                case "ORIGINALLY_SINGLE_PATTERN":
                case 1:
                  message.history = 1;
                  break;
                case "FUTURE_MULTI_PATTERN":
                case 2:
                  message.history = 2;
                  break;
              }
              if (object.plural != null)
                message.plural = String(object.plural);
              if (object.singular != null)
                message.singular = String(object.singular);
              return message;
            };
            ResourceDescriptor.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.pattern = [];
              if (options.defaults) {
                object.type = "";
                object.nameField = "";
                object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                object.plural = "";
                object.singular = "";
              }
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
              if (message.pattern && message.pattern.length) {
                object.pattern = [];
                for (var j = 0; j < message.pattern.length; ++j)
                  object.pattern[j] = message.pattern[j];
              }
              if (message.nameField != null && message.hasOwnProperty("nameField"))
                object.nameField = message.nameField;
              if (message.history != null && message.hasOwnProperty("history"))
                object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] : message.history;
              if (message.plural != null && message.hasOwnProperty("plural"))
                object.plural = message.plural;
              if (message.singular != null && message.hasOwnProperty("singular"))
                object.singular = message.singular;
              return object;
            };
            ResourceDescriptor.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ResourceDescriptor.History = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
              values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
              values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
              return values;
            }();
            return ResourceDescriptor;
          }();
          api.ResourceReference = function() {
            function ResourceReference(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ResourceReference.prototype.type = "";
            ResourceReference.prototype.childType = "";
            ResourceReference.create = function create(properties) {
              return new ResourceReference(properties);
            };
            ResourceReference.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(10).string(message.type);
              if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                writer.uint32(18).string(message.childType);
              return writer;
            };
            ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ResourceReference.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.type = reader.string();
                    break;
                  case 2:
                    message.childType = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ResourceReference.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ResourceReference.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type != null && message.hasOwnProperty("type")) {
                if (!$util.isString(message.type))
                  return "type: string expected";
              }
              if (message.childType != null && message.hasOwnProperty("childType")) {
                if (!$util.isString(message.childType))
                  return "childType: string expected";
              }
              return null;
            };
            ResourceReference.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ResourceReference)
                return object;
              var message = new $root.google.api.ResourceReference();
              if (object.type != null)
                message.type = String(object.type);
              if (object.childType != null)
                message.childType = String(object.childType);
              return message;
            };
            ResourceReference.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.type = "";
                object.childType = "";
              }
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
              if (message.childType != null && message.hasOwnProperty("childType"))
                object.childType = message.childType;
              return object;
            };
            ResourceReference.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ResourceReference;
          }();
          return api;
        }();
        google.protobuf = function() {
          var protobuf = {};
          protobuf.FileDescriptorSet = function() {
            function FileDescriptorSet(properties) {
              this.file = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorSet.prototype.file = $util.emptyArray;
            FileDescriptorSet.create = function create(properties) {
              return new FileDescriptorSet(properties);
            };
            FileDescriptorSet.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.file != null && message.file.length)
                for (var i = 0; i < message.file.length; ++i)
                  $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorSet.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.file && message.file.length))
                      message.file = [];
                    message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorSet.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.file != null && message.hasOwnProperty("file")) {
                if (!Array.isArray(message.file))
                  return "file: array expected";
                for (var i = 0; i < message.file.length; ++i) {
                  var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                  if (error)
                    return "file." + error;
                }
              }
              return null;
            };
            FileDescriptorSet.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorSet)
                return object;
              var message = new $root.google.protobuf.FileDescriptorSet();
              if (object.file) {
                if (!Array.isArray(object.file))
                  throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                message.file = [];
                for (var i = 0; i < object.file.length; ++i) {
                  if (typeof object.file[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                  message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                }
              }
              return message;
            };
            FileDescriptorSet.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.file = [];
              if (message.file && message.file.length) {
                object.file = [];
                for (var j = 0; j < message.file.length; ++j)
                  object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
              }
              return object;
            };
            FileDescriptorSet.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return FileDescriptorSet;
          }();
          protobuf.FileDescriptorProto = function() {
            function FileDescriptorProto(properties) {
              this.dependency = [];
              this.publicDependency = [];
              this.weakDependency = [];
              this.messageType = [];
              this.enumType = [];
              this.service = [];
              this.extension = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorProto.prototype.name = "";
            FileDescriptorProto.prototype["package"] = "";
            FileDescriptorProto.prototype.dependency = $util.emptyArray;
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
            FileDescriptorProto.prototype.messageType = $util.emptyArray;
            FileDescriptorProto.prototype.enumType = $util.emptyArray;
            FileDescriptorProto.prototype.service = $util.emptyArray;
            FileDescriptorProto.prototype.extension = $util.emptyArray;
            FileDescriptorProto.prototype.options = null;
            FileDescriptorProto.prototype.sourceCodeInfo = null;
            FileDescriptorProto.prototype.syntax = "";
            FileDescriptorProto.create = function create(properties) {
              return new FileDescriptorProto(properties);
            };
            FileDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                writer.uint32(18).string(message["package"]);
              if (message.dependency != null && message.dependency.length)
                for (var i = 0; i < message.dependency.length; ++i)
                  writer.uint32(26).string(message.dependency[i]);
              if (message.messageType != null && message.messageType.length)
                for (var i = 0; i < message.messageType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(34).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(42).fork()).ldelim();
              if (message.service != null && message.service.length)
                for (var i = 0; i < message.service.length; ++i)
                  $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(50).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(58).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(66).fork()).ldelim();
              if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(74).fork()).ldelim();
              if (message.publicDependency != null && message.publicDependency.length)
                for (var i = 0; i < message.publicDependency.length; ++i)
                  writer.uint32(80).int32(message.publicDependency[i]);
              if (message.weakDependency != null && message.weakDependency.length)
                for (var i = 0; i < message.weakDependency.length; ++i)
                  writer.uint32(88).int32(message.weakDependency[i]);
              if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                writer.uint32(98).string(message.syntax);
              return writer;
            };
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message["package"] = reader.string();
                    break;
                  case 3:
                    if (!(message.dependency && message.dependency.length))
                      message.dependency = [];
                    message.dependency.push(reader.string());
                    break;
                  case 10:
                    if (!(message.publicDependency && message.publicDependency.length))
                      message.publicDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.publicDependency.push(reader.int32());
                    } else
                      message.publicDependency.push(reader.int32());
                    break;
                  case 11:
                    if (!(message.weakDependency && message.weakDependency.length))
                      message.weakDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.weakDependency.push(reader.int32());
                    } else
                      message.weakDependency.push(reader.int32());
                    break;
                  case 4:
                    if (!(message.messageType && message.messageType.length))
                      message.messageType = [];
                    message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 5:
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 6:
                    if (!(message.service && message.service.length))
                      message.service = [];
                    message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 7:
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 8:
                    message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                    break;
                  case 9:
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                    break;
                  case 12:
                    message.syntax = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message["package"] != null && message.hasOwnProperty("package")) {
                if (!$util.isString(message["package"]))
                  return "package: string expected";
              }
              if (message.dependency != null && message.hasOwnProperty("dependency")) {
                if (!Array.isArray(message.dependency))
                  return "dependency: array expected";
                for (var i = 0; i < message.dependency.length; ++i)
                  if (!$util.isString(message.dependency[i]))
                    return "dependency: string[] expected";
              }
              if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                if (!Array.isArray(message.publicDependency))
                  return "publicDependency: array expected";
                for (var i = 0; i < message.publicDependency.length; ++i)
                  if (!$util.isInteger(message.publicDependency[i]))
                    return "publicDependency: integer[] expected";
              }
              if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                if (!Array.isArray(message.weakDependency))
                  return "weakDependency: array expected";
                for (var i = 0; i < message.weakDependency.length; ++i)
                  if (!$util.isInteger(message.weakDependency[i]))
                    return "weakDependency: integer[] expected";
              }
              if (message.messageType != null && message.hasOwnProperty("messageType")) {
                if (!Array.isArray(message.messageType))
                  return "messageType: array expected";
                for (var i = 0; i < message.messageType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                  if (error)
                    return "messageType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.service != null && message.hasOwnProperty("service")) {
                if (!Array.isArray(message.service))
                  return "service: array expected";
                for (var i = 0; i < message.service.length; ++i) {
                  var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                  if (error)
                    return "service." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FileOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                if (error)
                  return "sourceCodeInfo." + error;
              }
              if (message.syntax != null && message.hasOwnProperty("syntax")) {
                if (!$util.isString(message.syntax))
                  return "syntax: string expected";
              }
              return null;
            };
            FileDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FileDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object["package"] != null)
                message["package"] = String(object["package"]);
              if (object.dependency) {
                if (!Array.isArray(object.dependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                message.dependency = [];
                for (var i = 0; i < object.dependency.length; ++i)
                  message.dependency[i] = String(object.dependency[i]);
              }
              if (object.publicDependency) {
                if (!Array.isArray(object.publicDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                message.publicDependency = [];
                for (var i = 0; i < object.publicDependency.length; ++i)
                  message.publicDependency[i] = object.publicDependency[i] | 0;
              }
              if (object.weakDependency) {
                if (!Array.isArray(object.weakDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                message.weakDependency = [];
                for (var i = 0; i < object.weakDependency.length; ++i)
                  message.weakDependency[i] = object.weakDependency[i] | 0;
              }
              if (object.messageType) {
                if (!Array.isArray(object.messageType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                message.messageType = [];
                for (var i = 0; i < object.messageType.length; ++i) {
                  if (typeof object.messageType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                  message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.service) {
                if (!Array.isArray(object.service))
                  throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                message.service = [];
                for (var i = 0; i < object.service.length; ++i) {
                  if (typeof object.service[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                  message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
              }
              if (object.sourceCodeInfo != null) {
                if (typeof object.sourceCodeInfo !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
              }
              if (object.syntax != null)
                message.syntax = String(object.syntax);
              return message;
            };
            FileDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.dependency = [];
                object.messageType = [];
                object.enumType = [];
                object.service = [];
                object.extension = [];
                object.publicDependency = [];
                object.weakDependency = [];
              }
              if (options.defaults) {
                object.name = "";
                object["package"] = "";
                object.options = null;
                object.sourceCodeInfo = null;
                object.syntax = "";
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message["package"] != null && message.hasOwnProperty("package"))
                object["package"] = message["package"];
              if (message.dependency && message.dependency.length) {
                object.dependency = [];
                for (var j = 0; j < message.dependency.length; ++j)
                  object.dependency[j] = message.dependency[j];
              }
              if (message.messageType && message.messageType.length) {
                object.messageType = [];
                for (var j = 0; j < message.messageType.length; ++j)
                  object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.service && message.service.length) {
                object.service = [];
                for (var j = 0; j < message.service.length; ++j)
                  object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
              if (message.publicDependency && message.publicDependency.length) {
                object.publicDependency = [];
                for (var j = 0; j < message.publicDependency.length; ++j)
                  object.publicDependency[j] = message.publicDependency[j];
              }
              if (message.weakDependency && message.weakDependency.length) {
                object.weakDependency = [];
                for (var j = 0; j < message.weakDependency.length; ++j)
                  object.weakDependency[j] = message.weakDependency[j];
              }
              if (message.syntax != null && message.hasOwnProperty("syntax"))
                object.syntax = message.syntax;
              return object;
            };
            FileDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return FileDescriptorProto;
          }();
          protobuf.DescriptorProto = function() {
            function DescriptorProto(properties) {
              this.field = [];
              this.extension = [];
              this.nestedType = [];
              this.enumType = [];
              this.extensionRange = [];
              this.oneofDecl = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DescriptorProto.prototype.name = "";
            DescriptorProto.prototype.field = $util.emptyArray;
            DescriptorProto.prototype.extension = $util.emptyArray;
            DescriptorProto.prototype.nestedType = $util.emptyArray;
            DescriptorProto.prototype.enumType = $util.emptyArray;
            DescriptorProto.prototype.extensionRange = $util.emptyArray;
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;
            DescriptorProto.prototype.options = null;
            DescriptorProto.prototype.reservedRange = $util.emptyArray;
            DescriptorProto.prototype.reservedName = $util.emptyArray;
            DescriptorProto.create = function create(properties) {
              return new DescriptorProto(properties);
            };
            DescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.field != null && message.field.length)
                for (var i = 0; i < message.field.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(18).fork()).ldelim();
              if (message.nestedType != null && message.nestedType.length)
                for (var i = 0; i < message.nestedType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(26).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(34).fork()).ldelim();
              if (message.extensionRange != null && message.extensionRange.length)
                for (var i = 0; i < message.extensionRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(42).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(50).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(58).fork()).ldelim();
              if (message.oneofDecl != null && message.oneofDecl.length)
                for (var i = 0; i < message.oneofDecl.length; ++i)
                  $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(66).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(74).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(82).string(message.reservedName[i]);
              return writer;
            };
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    if (!(message.field && message.field.length))
                      message.field = [];
                    message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 6:
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    if (!(message.nestedType && message.nestedType.length))
                      message.nestedType = [];
                    message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 4:
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 5:
                    if (!(message.extensionRange && message.extensionRange.length))
                      message.extensionRange = [];
                    message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                    break;
                  case 8:
                    if (!(message.oneofDecl && message.oneofDecl.length))
                      message.oneofDecl = [];
                    message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 7:
                    message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                    break;
                  case 9:
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                    break;
                  case 10:
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.field != null && message.hasOwnProperty("field")) {
                if (!Array.isArray(message.field))
                  return "field: array expected";
                for (var i = 0; i < message.field.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                  if (error)
                    return "field." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                if (!Array.isArray(message.nestedType))
                  return "nestedType: array expected";
                for (var i = 0; i < message.nestedType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                  if (error)
                    return "nestedType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                if (!Array.isArray(message.extensionRange))
                  return "extensionRange: array expected";
                for (var i = 0; i < message.extensionRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                  if (error)
                    return "extensionRange." + error;
                }
              }
              if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                if (!Array.isArray(message.oneofDecl))
                  return "oneofDecl: array expected";
                for (var i = 0; i < message.oneofDecl.length; ++i) {
                  var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                  if (error)
                    return "oneofDecl." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MessageOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            DescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.DescriptorProto)
                return object;
              var message = new $root.google.protobuf.DescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.field) {
                if (!Array.isArray(object.field))
                  throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                message.field = [];
                for (var i = 0; i < object.field.length; ++i) {
                  if (typeof object.field[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                  message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.nestedType) {
                if (!Array.isArray(object.nestedType))
                  throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                message.nestedType = [];
                for (var i = 0; i < object.nestedType.length; ++i) {
                  if (typeof object.nestedType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                  message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.extensionRange) {
                if (!Array.isArray(object.extensionRange))
                  throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                message.extensionRange = [];
                for (var i = 0; i < object.extensionRange.length; ++i) {
                  if (typeof object.extensionRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                  message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                }
              }
              if (object.oneofDecl) {
                if (!Array.isArray(object.oneofDecl))
                  throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                message.oneofDecl = [];
                for (var i = 0; i < object.oneofDecl.length; ++i) {
                  if (typeof object.oneofDecl[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                  message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            DescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.field = [];
                object.nestedType = [];
                object.enumType = [];
                object.extensionRange = [];
                object.extension = [];
                object.oneofDecl = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.field && message.field.length) {
                object.field = [];
                for (var j = 0; j < message.field.length; ++j)
                  object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
              }
              if (message.nestedType && message.nestedType.length) {
                object.nestedType = [];
                for (var j = 0; j < message.nestedType.length; ++j)
                  object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.extensionRange && message.extensionRange.length) {
                object.extensionRange = [];
                for (var j = 0; j < message.extensionRange.length; ++j)
                  object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
              if (message.oneofDecl && message.oneofDecl.length) {
                object.oneofDecl = [];
                for (var j = 0; j < message.oneofDecl.length; ++j)
                  object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
              }
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            DescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DescriptorProto.ExtensionRange = function() {
              function ExtensionRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ExtensionRange.prototype.start = 0;
              ExtensionRange.prototype.end = 0;
              ExtensionRange.prototype.options = null;
              ExtensionRange.create = function create(properties) {
                return new ExtensionRange(properties);
              };
              ExtensionRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(8).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(16).int32(message.end);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                  $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
                return writer;
              };
              ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ExtensionRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.start = reader.int32();
                      break;
                    case 2:
                      message.end = reader.int32();
                      break;
                    case 3:
                      message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ExtensionRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                  var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                  if (error)
                    return "options." + error;
                }
                return null;
              };
              ExtensionRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                if (object.options != null) {
                  if (typeof object.options !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                  message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                }
                return message;
              };
              ExtensionRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                  object.options = null;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                if (message.options != null && message.hasOwnProperty("options"))
                  object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                return object;
              };
              ExtensionRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return ExtensionRange;
            }();
            DescriptorProto.ReservedRange = function() {
              function ReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ReservedRange.prototype.start = 0;
              ReservedRange.prototype.end = 0;
              ReservedRange.create = function create(properties) {
                return new ReservedRange(properties);
              };
              ReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(8).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(16).int32(message.end);
                return writer;
              };
              ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.start = reader.int32();
                      break;
                    case 2:
                      message.end = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              ReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              ReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              ReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return ReservedRange;
            }();
            return DescriptorProto;
          }();
          protobuf.ExtensionRangeOptions = function() {
            function ExtensionRangeOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
            ExtensionRangeOptions.create = function create(properties) {
              return new ExtensionRangeOptions(properties);
            };
            ExtensionRangeOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ExtensionRangeOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ExtensionRangeOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            ExtensionRangeOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                return object;
              var message = new $root.google.protobuf.ExtensionRangeOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            ExtensionRangeOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ExtensionRangeOptions;
          }();
          protobuf.FieldDescriptorProto = function() {
            function FieldDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldDescriptorProto.prototype.name = "";
            FieldDescriptorProto.prototype.number = 0;
            FieldDescriptorProto.prototype.label = 1;
            FieldDescriptorProto.prototype.type = 1;
            FieldDescriptorProto.prototype.typeName = "";
            FieldDescriptorProto.prototype.extendee = "";
            FieldDescriptorProto.prototype.defaultValue = "";
            FieldDescriptorProto.prototype.oneofIndex = 0;
            FieldDescriptorProto.prototype.jsonName = "";
            FieldDescriptorProto.prototype.options = null;
            FieldDescriptorProto.prototype.proto3Optional = false;
            FieldDescriptorProto.create = function create(properties) {
              return new FieldDescriptorProto(properties);
            };
            FieldDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                writer.uint32(18).string(message.extendee);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(24).int32(message.number);
              if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                writer.uint32(32).int32(message.label);
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(40).int32(message.type);
              if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                writer.uint32(50).string(message.typeName);
              if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                writer.uint32(58).string(message.defaultValue);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(66).fork()).ldelim();
              if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                writer.uint32(72).int32(message.oneofIndex);
              if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                writer.uint32(82).string(message.jsonName);
              if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                writer.uint32(136).bool(message.proto3Optional);
              return writer;
            };
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 3:
                    message.number = reader.int32();
                    break;
                  case 4:
                    message.label = reader.int32();
                    break;
                  case 5:
                    message.type = reader.int32();
                    break;
                  case 6:
                    message.typeName = reader.string();
                    break;
                  case 2:
                    message.extendee = reader.string();
                    break;
                  case 7:
                    message.defaultValue = reader.string();
                    break;
                  case 9:
                    message.oneofIndex = reader.int32();
                    break;
                  case 10:
                    message.jsonName = reader.string();
                    break;
                  case 8:
                    message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                    break;
                  case 17:
                    message.proto3Optional = reader.bool();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.label != null && message.hasOwnProperty("label"))
                switch (message.label) {
                  default:
                    return "label: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                  default:
                    return "type: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                    break;
                }
              if (message.typeName != null && message.hasOwnProperty("typeName")) {
                if (!$util.isString(message.typeName))
                  return "typeName: string expected";
              }
              if (message.extendee != null && message.hasOwnProperty("extendee")) {
                if (!$util.isString(message.extendee))
                  return "extendee: string expected";
              }
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue")) {
                if (!$util.isString(message.defaultValue))
                  return "defaultValue: string expected";
              }
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex")) {
                if (!$util.isInteger(message.oneofIndex))
                  return "oneofIndex: integer expected";
              }
              if (message.jsonName != null && message.hasOwnProperty("jsonName")) {
                if (!$util.isString(message.jsonName))
                  return "jsonName: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FieldOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional")) {
                if (typeof message.proto3Optional !== "boolean")
                  return "proto3Optional: boolean expected";
              }
              return null;
            };
            FieldDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FieldDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                  message.label = 1;
                  break;
                case "LABEL_REQUIRED":
                case 2:
                  message.label = 2;
                  break;
                case "LABEL_REPEATED":
                case 3:
                  message.label = 3;
                  break;
              }
              switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                  message.type = 1;
                  break;
                case "TYPE_FLOAT":
                case 2:
                  message.type = 2;
                  break;
                case "TYPE_INT64":
                case 3:
                  message.type = 3;
                  break;
                case "TYPE_UINT64":
                case 4:
                  message.type = 4;
                  break;
                case "TYPE_INT32":
                case 5:
                  message.type = 5;
                  break;
                case "TYPE_FIXED64":
                case 6:
                  message.type = 6;
                  break;
                case "TYPE_FIXED32":
                case 7:
                  message.type = 7;
                  break;
                case "TYPE_BOOL":
                case 8:
                  message.type = 8;
                  break;
                case "TYPE_STRING":
                case 9:
                  message.type = 9;
                  break;
                case "TYPE_GROUP":
                case 10:
                  message.type = 10;
                  break;
                case "TYPE_MESSAGE":
                case 11:
                  message.type = 11;
                  break;
                case "TYPE_BYTES":
                case 12:
                  message.type = 12;
                  break;
                case "TYPE_UINT32":
                case 13:
                  message.type = 13;
                  break;
                case "TYPE_ENUM":
                case 14:
                  message.type = 14;
                  break;
                case "TYPE_SFIXED32":
                case 15:
                  message.type = 15;
                  break;
                case "TYPE_SFIXED64":
                case 16:
                  message.type = 16;
                  break;
                case "TYPE_SINT32":
                case 17:
                  message.type = 17;
                  break;
                case "TYPE_SINT64":
                case 18:
                  message.type = 18;
                  break;
              }
              if (object.typeName != null)
                message.typeName = String(object.typeName);
              if (object.extendee != null)
                message.extendee = String(object.extendee);
              if (object.defaultValue != null)
                message.defaultValue = String(object.defaultValue);
              if (object.oneofIndex != null)
                message.oneofIndex = object.oneofIndex | 0;
              if (object.jsonName != null)
                message.jsonName = String(object.jsonName);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
              }
              if (object.proto3Optional != null)
                message.proto3Optional = Boolean(object.proto3Optional);
              return message;
            };
            FieldDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.extendee = "";
                object.number = 0;
                object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                object.typeName = "";
                object.defaultValue = "";
                object.options = null;
                object.oneofIndex = 0;
                object.jsonName = "";
                object.proto3Optional = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.extendee != null && message.hasOwnProperty("extendee"))
                object.extendee = message.extendee;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.label != null && message.hasOwnProperty("label"))
                object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
              if (message.typeName != null && message.hasOwnProperty("typeName"))
                object.typeName = message.typeName;
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                object.defaultValue = message.defaultValue;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                object.oneofIndex = message.oneofIndex;
              if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                object.jsonName = message.jsonName;
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                object.proto3Optional = message.proto3Optional;
              return object;
            };
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldDescriptorProto.Type = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "TYPE_DOUBLE"] = 1;
              values[valuesById[2] = "TYPE_FLOAT"] = 2;
              values[valuesById[3] = "TYPE_INT64"] = 3;
              values[valuesById[4] = "TYPE_UINT64"] = 4;
              values[valuesById[5] = "TYPE_INT32"] = 5;
              values[valuesById[6] = "TYPE_FIXED64"] = 6;
              values[valuesById[7] = "TYPE_FIXED32"] = 7;
              values[valuesById[8] = "TYPE_BOOL"] = 8;
              values[valuesById[9] = "TYPE_STRING"] = 9;
              values[valuesById[10] = "TYPE_GROUP"] = 10;
              values[valuesById[11] = "TYPE_MESSAGE"] = 11;
              values[valuesById[12] = "TYPE_BYTES"] = 12;
              values[valuesById[13] = "TYPE_UINT32"] = 13;
              values[valuesById[14] = "TYPE_ENUM"] = 14;
              values[valuesById[15] = "TYPE_SFIXED32"] = 15;
              values[valuesById[16] = "TYPE_SFIXED64"] = 16;
              values[valuesById[17] = "TYPE_SINT32"] = 17;
              values[valuesById[18] = "TYPE_SINT64"] = 18;
              return values;
            }();
            FieldDescriptorProto.Label = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
              values[valuesById[2] = "LABEL_REQUIRED"] = 2;
              values[valuesById[3] = "LABEL_REPEATED"] = 3;
              return values;
            }();
            return FieldDescriptorProto;
          }();
          protobuf.OneofDescriptorProto = function() {
            function OneofDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofDescriptorProto.prototype.name = "";
            OneofDescriptorProto.prototype.options = null;
            OneofDescriptorProto.create = function create(properties) {
              return new OneofDescriptorProto(properties);
            };
            OneofDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(18).fork()).ldelim();
              return writer;
            };
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.OneofOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            OneofDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                return object;
              var message = new $root.google.protobuf.OneofDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
              }
              return message;
            };
            OneofDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
              return object;
            };
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return OneofDescriptorProto;
          }();
          protobuf.EnumDescriptorProto = function() {
            function EnumDescriptorProto(properties) {
              this.value = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumDescriptorProto.prototype.name = "";
            EnumDescriptorProto.prototype.value = $util.emptyArray;
            EnumDescriptorProto.prototype.options = null;
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
            EnumDescriptorProto.create = function create(properties) {
              return new EnumDescriptorProto(properties);
            };
            EnumDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.value != null && message.value.length)
                for (var i = 0; i < message.value.length; ++i)
                  $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(18).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(34).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(42).string(message.reservedName[i]);
              return writer;
            };
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    if (!(message.value && message.value.length))
                      message.value = [];
                    message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                    break;
                  case 4:
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                    break;
                  case 5:
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.value != null && message.hasOwnProperty("value")) {
                if (!Array.isArray(message.value))
                  return "value: array expected";
                for (var i = 0; i < message.value.length; ++i) {
                  var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                  if (error)
                    return "value." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            EnumDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.value) {
                if (!Array.isArray(object.value))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                message.value = [];
                for (var i = 0; i < object.value.length; ++i) {
                  if (typeof object.value[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                  message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            EnumDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.value = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.value && message.value.length) {
                object.value = [];
                for (var j = 0; j < message.value.length; ++j)
                  object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumDescriptorProto.EnumReservedRange = function() {
              function EnumReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              EnumReservedRange.prototype.start = 0;
              EnumReservedRange.prototype.end = 0;
              EnumReservedRange.create = function create(properties) {
                return new EnumReservedRange(properties);
              };
              EnumReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(8).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(16).int32(message.end);
                return writer;
              };
              EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              EnumReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.start = reader.int32();
                      break;
                    case 2:
                      message.end = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              EnumReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              EnumReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                  return object;
                var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              EnumReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              EnumReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return EnumReservedRange;
            }();
            return EnumDescriptorProto;
          }();
          protobuf.EnumValueDescriptorProto = function() {
            function EnumValueDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueDescriptorProto.prototype.name = "";
            EnumValueDescriptorProto.prototype.number = 0;
            EnumValueDescriptorProto.prototype.options = null;
            EnumValueDescriptorProto.create = function create(properties) {
              return new EnumValueDescriptorProto(properties);
            };
            EnumValueDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(16).int32(message.number);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
              return writer;
            };
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.number = reader.int32();
                    break;
                  case 3:
                    message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumValueDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
              }
              return message;
            };
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.number = 0;
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
              return object;
            };
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return EnumValueDescriptorProto;
          }();
          protobuf.ServiceDescriptorProto = function() {
            function ServiceDescriptorProto(properties) {
              this.method = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceDescriptorProto.prototype.name = "";
            ServiceDescriptorProto.prototype.method = $util.emptyArray;
            ServiceDescriptorProto.prototype.options = null;
            ServiceDescriptorProto.create = function create(properties) {
              return new ServiceDescriptorProto(properties);
            };
            ServiceDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.method != null && message.method.length)
                for (var i = 0; i < message.method.length; ++i)
                  $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(18).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
              return writer;
            };
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    if (!(message.method && message.method.length))
                      message.method = [];
                    message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.method != null && message.hasOwnProperty("method")) {
                if (!Array.isArray(message.method))
                  return "method: array expected";
                for (var i = 0; i < message.method.length; ++i) {
                  var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                  if (error)
                    return "method." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            ServiceDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                return object;
              var message = new $root.google.protobuf.ServiceDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.method) {
                if (!Array.isArray(object.method))
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                message.method = [];
                for (var i = 0; i < object.method.length; ++i) {
                  if (typeof object.method[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                  message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
              }
              return message;
            };
            ServiceDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.method = [];
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.method && message.method.length) {
                object.method = [];
                for (var j = 0; j < message.method.length; ++j)
                  object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
              return object;
            };
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ServiceDescriptorProto;
          }();
          protobuf.MethodDescriptorProto = function() {
            function MethodDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodDescriptorProto.prototype.name = "";
            MethodDescriptorProto.prototype.inputType = "";
            MethodDescriptorProto.prototype.outputType = "";
            MethodDescriptorProto.prototype.options = null;
            MethodDescriptorProto.prototype.clientStreaming = false;
            MethodDescriptorProto.prototype.serverStreaming = false;
            MethodDescriptorProto.create = function create(properties) {
              return new MethodDescriptorProto(properties);
            };
            MethodDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                writer.uint32(18).string(message.inputType);
              if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                writer.uint32(26).string(message.outputType);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(34).fork()).ldelim();
              if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                writer.uint32(40).bool(message.clientStreaming);
              if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                writer.uint32(48).bool(message.serverStreaming);
              return writer;
            };
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.inputType = reader.string();
                    break;
                  case 3:
                    message.outputType = reader.string();
                    break;
                  case 4:
                    message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                    break;
                  case 5:
                    message.clientStreaming = reader.bool();
                    break;
                  case 6:
                    message.serverStreaming = reader.bool();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.inputType != null && message.hasOwnProperty("inputType")) {
                if (!$util.isString(message.inputType))
                  return "inputType: string expected";
              }
              if (message.outputType != null && message.hasOwnProperty("outputType")) {
                if (!$util.isString(message.outputType))
                  return "outputType: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MethodOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming")) {
                if (typeof message.clientStreaming !== "boolean")
                  return "clientStreaming: boolean expected";
              }
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming")) {
                if (typeof message.serverStreaming !== "boolean")
                  return "serverStreaming: boolean expected";
              }
              return null;
            };
            MethodDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                return object;
              var message = new $root.google.protobuf.MethodDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.inputType != null)
                message.inputType = String(object.inputType);
              if (object.outputType != null)
                message.outputType = String(object.outputType);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
              }
              if (object.clientStreaming != null)
                message.clientStreaming = Boolean(object.clientStreaming);
              if (object.serverStreaming != null)
                message.serverStreaming = Boolean(object.serverStreaming);
              return message;
            };
            MethodDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.inputType = "";
                object.outputType = "";
                object.options = null;
                object.clientStreaming = false;
                object.serverStreaming = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.inputType != null && message.hasOwnProperty("inputType"))
                object.inputType = message.inputType;
              if (message.outputType != null && message.hasOwnProperty("outputType"))
                object.outputType = message.outputType;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                object.clientStreaming = message.clientStreaming;
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                object.serverStreaming = message.serverStreaming;
              return object;
            };
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return MethodDescriptorProto;
          }();
          protobuf.FileOptions = function() {
            function FileOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.resourceDefinition"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileOptions.prototype.javaPackage = "";
            FileOptions.prototype.javaOuterClassname = "";
            FileOptions.prototype.javaMultipleFiles = false;
            FileOptions.prototype.javaGenerateEqualsAndHash = false;
            FileOptions.prototype.javaStringCheckUtf8 = false;
            FileOptions.prototype.optimizeFor = 1;
            FileOptions.prototype.goPackage = "";
            FileOptions.prototype.ccGenericServices = false;
            FileOptions.prototype.javaGenericServices = false;
            FileOptions.prototype.pyGenericServices = false;
            FileOptions.prototype.phpGenericServices = false;
            FileOptions.prototype.deprecated = false;
            FileOptions.prototype.ccEnableArenas = true;
            FileOptions.prototype.objcClassPrefix = "";
            FileOptions.prototype.csharpNamespace = "";
            FileOptions.prototype.swiftPrefix = "";
            FileOptions.prototype.phpClassPrefix = "";
            FileOptions.prototype.phpNamespace = "";
            FileOptions.prototype.phpMetadataNamespace = "";
            FileOptions.prototype.rubyPackage = "";
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;
            FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
            FileOptions.create = function create(properties) {
              return new FileOptions(properties);
            };
            FileOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                writer.uint32(10).string(message.javaPackage);
              if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                writer.uint32(66).string(message.javaOuterClassname);
              if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                writer.uint32(72).int32(message.optimizeFor);
              if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                writer.uint32(80).bool(message.javaMultipleFiles);
              if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                writer.uint32(90).string(message.goPackage);
              if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                writer.uint32(128).bool(message.ccGenericServices);
              if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                writer.uint32(136).bool(message.javaGenericServices);
              if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                writer.uint32(144).bool(message.pyGenericServices);
              if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                writer.uint32(160).bool(message.javaGenerateEqualsAndHash);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(184).bool(message.deprecated);
              if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                writer.uint32(216).bool(message.javaStringCheckUtf8);
              if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                writer.uint32(248).bool(message.ccEnableArenas);
              if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                writer.uint32(290).string(message.objcClassPrefix);
              if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                writer.uint32(298).string(message.csharpNamespace);
              if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                writer.uint32(314).string(message.swiftPrefix);
              if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                writer.uint32(322).string(message.phpClassPrefix);
              if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                writer.uint32(330).string(message.phpNamespace);
              if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                writer.uint32(336).bool(message.phpGenericServices);
              if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                writer.uint32(354).string(message.phpMetadataNamespace);
              if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                writer.uint32(362).string(message.rubyPackage);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                  $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(8426).fork()).ldelim();
              return writer;
            };
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.javaPackage = reader.string();
                    break;
                  case 8:
                    message.javaOuterClassname = reader.string();
                    break;
                  case 10:
                    message.javaMultipleFiles = reader.bool();
                    break;
                  case 20:
                    message.javaGenerateEqualsAndHash = reader.bool();
                    break;
                  case 27:
                    message.javaStringCheckUtf8 = reader.bool();
                    break;
                  case 9:
                    message.optimizeFor = reader.int32();
                    break;
                  case 11:
                    message.goPackage = reader.string();
                    break;
                  case 16:
                    message.ccGenericServices = reader.bool();
                    break;
                  case 17:
                    message.javaGenericServices = reader.bool();
                    break;
                  case 18:
                    message.pyGenericServices = reader.bool();
                    break;
                  case 42:
                    message.phpGenericServices = reader.bool();
                    break;
                  case 23:
                    message.deprecated = reader.bool();
                    break;
                  case 31:
                    message.ccEnableArenas = reader.bool();
                    break;
                  case 36:
                    message.objcClassPrefix = reader.string();
                    break;
                  case 37:
                    message.csharpNamespace = reader.string();
                    break;
                  case 39:
                    message.swiftPrefix = reader.string();
                    break;
                  case 40:
                    message.phpClassPrefix = reader.string();
                    break;
                  case 41:
                    message.phpNamespace = reader.string();
                    break;
                  case 44:
                    message.phpMetadataNamespace = reader.string();
                    break;
                  case 45:
                    message.rubyPackage = reader.string();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  case 1053:
                    if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                      message[".google.api.resourceDefinition"] = [];
                    message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage")) {
                if (!$util.isString(message.javaPackage))
                  return "javaPackage: string expected";
              }
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname")) {
                if (!$util.isString(message.javaOuterClassname))
                  return "javaOuterClassname: string expected";
              }
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles")) {
                if (typeof message.javaMultipleFiles !== "boolean")
                  return "javaMultipleFiles: boolean expected";
              }
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash")) {
                if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                  return "javaGenerateEqualsAndHash: boolean expected";
              }
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8")) {
                if (typeof message.javaStringCheckUtf8 !== "boolean")
                  return "javaStringCheckUtf8: boolean expected";
              }
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                switch (message.optimizeFor) {
                  default:
                    return "optimizeFor: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.goPackage != null && message.hasOwnProperty("goPackage")) {
                if (!$util.isString(message.goPackage))
                  return "goPackage: string expected";
              }
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices")) {
                if (typeof message.ccGenericServices !== "boolean")
                  return "ccGenericServices: boolean expected";
              }
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices")) {
                if (typeof message.javaGenericServices !== "boolean")
                  return "javaGenericServices: boolean expected";
              }
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices")) {
                if (typeof message.pyGenericServices !== "boolean")
                  return "pyGenericServices: boolean expected";
              }
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices")) {
                if (typeof message.phpGenericServices !== "boolean")
                  return "phpGenericServices: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas")) {
                if (typeof message.ccEnableArenas !== "boolean")
                  return "ccEnableArenas: boolean expected";
              }
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix")) {
                if (!$util.isString(message.objcClassPrefix))
                  return "objcClassPrefix: string expected";
              }
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace")) {
                if (!$util.isString(message.csharpNamespace))
                  return "csharpNamespace: string expected";
              }
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix")) {
                if (!$util.isString(message.swiftPrefix))
                  return "swiftPrefix: string expected";
              }
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix")) {
                if (!$util.isString(message.phpClassPrefix))
                  return "phpClassPrefix: string expected";
              }
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace")) {
                if (!$util.isString(message.phpNamespace))
                  return "phpNamespace: string expected";
              }
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace")) {
                if (!$util.isString(message.phpMetadataNamespace))
                  return "phpMetadataNamespace: string expected";
              }
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage")) {
                if (!$util.isString(message.rubyPackage))
                  return "rubyPackage: string expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                if (!Array.isArray(message[".google.api.resourceDefinition"]))
                  return ".google.api.resourceDefinition: array expected";
                for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                  var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                  if (error)
                    return ".google.api.resourceDefinition." + error;
                }
              }
              return null;
            };
            FileOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileOptions)
                return object;
              var message = new $root.google.protobuf.FileOptions();
              if (object.javaPackage != null)
                message.javaPackage = String(object.javaPackage);
              if (object.javaOuterClassname != null)
                message.javaOuterClassname = String(object.javaOuterClassname);
              if (object.javaMultipleFiles != null)
                message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
              if (object.javaGenerateEqualsAndHash != null)
                message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
              if (object.javaStringCheckUtf8 != null)
                message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
              switch (object.optimizeFor) {
                case "SPEED":
                case 1:
                  message.optimizeFor = 1;
                  break;
                case "CODE_SIZE":
                case 2:
                  message.optimizeFor = 2;
                  break;
                case "LITE_RUNTIME":
                case 3:
                  message.optimizeFor = 3;
                  break;
              }
              if (object.goPackage != null)
                message.goPackage = String(object.goPackage);
              if (object.ccGenericServices != null)
                message.ccGenericServices = Boolean(object.ccGenericServices);
              if (object.javaGenericServices != null)
                message.javaGenericServices = Boolean(object.javaGenericServices);
              if (object.pyGenericServices != null)
                message.pyGenericServices = Boolean(object.pyGenericServices);
              if (object.phpGenericServices != null)
                message.phpGenericServices = Boolean(object.phpGenericServices);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.ccEnableArenas != null)
                message.ccEnableArenas = Boolean(object.ccEnableArenas);
              if (object.objcClassPrefix != null)
                message.objcClassPrefix = String(object.objcClassPrefix);
              if (object.csharpNamespace != null)
                message.csharpNamespace = String(object.csharpNamespace);
              if (object.swiftPrefix != null)
                message.swiftPrefix = String(object.swiftPrefix);
              if (object.phpClassPrefix != null)
                message.phpClassPrefix = String(object.phpClassPrefix);
              if (object.phpNamespace != null)
                message.phpNamespace = String(object.phpNamespace);
              if (object.phpMetadataNamespace != null)
                message.phpMetadataNamespace = String(object.phpMetadataNamespace);
              if (object.rubyPackage != null)
                message.rubyPackage = String(object.rubyPackage);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.resourceDefinition"]) {
                if (!Array.isArray(object[".google.api.resourceDefinition"]))
                  throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                message[".google.api.resourceDefinition"] = [];
                for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                  if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                  message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                }
              }
              return message;
            };
            FileOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.resourceDefinition"] = [];
              }
              if (options.defaults) {
                object.javaPackage = "";
                object.javaOuterClassname = "";
                object.optimizeFor = options.enums === String ? "SPEED" : 1;
                object.javaMultipleFiles = false;
                object.goPackage = "";
                object.ccGenericServices = false;
                object.javaGenericServices = false;
                object.pyGenericServices = false;
                object.javaGenerateEqualsAndHash = false;
                object.deprecated = false;
                object.javaStringCheckUtf8 = false;
                object.ccEnableArenas = true;
                object.objcClassPrefix = "";
                object.csharpNamespace = "";
                object.swiftPrefix = "";
                object.phpClassPrefix = "";
                object.phpNamespace = "";
                object.phpGenericServices = false;
                object.phpMetadataNamespace = "";
                object.rubyPackage = "";
              }
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                object.javaPackage = message.javaPackage;
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                object.javaOuterClassname = message.javaOuterClassname;
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                object.javaMultipleFiles = message.javaMultipleFiles;
              if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                object.goPackage = message.goPackage;
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                object.ccGenericServices = message.ccGenericServices;
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                object.javaGenericServices = message.javaGenericServices;
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                object.pyGenericServices = message.pyGenericServices;
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                object.ccEnableArenas = message.ccEnableArenas;
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                object.objcClassPrefix = message.objcClassPrefix;
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                object.csharpNamespace = message.csharpNamespace;
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                object.swiftPrefix = message.swiftPrefix;
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                object.phpClassPrefix = message.phpClassPrefix;
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                object.phpNamespace = message.phpNamespace;
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                object.phpGenericServices = message.phpGenericServices;
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                object.phpMetadataNamespace = message.phpMetadataNamespace;
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                object.rubyPackage = message.rubyPackage;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                object[".google.api.resourceDefinition"] = [];
                for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                  object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
              }
              return object;
            };
            FileOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileOptions.OptimizeMode = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "SPEED"] = 1;
              values[valuesById[2] = "CODE_SIZE"] = 2;
              values[valuesById[3] = "LITE_RUNTIME"] = 3;
              return values;
            }();
            return FileOptions;
          }();
          protobuf.MessageOptions = function() {
            function MessageOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MessageOptions.prototype.messageSetWireFormat = false;
            MessageOptions.prototype.noStandardDescriptorAccessor = false;
            MessageOptions.prototype.deprecated = false;
            MessageOptions.prototype.mapEntry = false;
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
            MessageOptions.prototype[".google.api.resource"] = null;
            MessageOptions.create = function create(properties) {
              return new MessageOptions(properties);
            };
            MessageOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                writer.uint32(8).bool(message.messageSetWireFormat);
              if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                writer.uint32(16).bool(message.noStandardDescriptorAccessor);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(24).bool(message.deprecated);
              if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                writer.uint32(56).bool(message.mapEntry);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(8426).fork()).ldelim();
              return writer;
            };
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MessageOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.messageSetWireFormat = reader.bool();
                    break;
                  case 2:
                    message.noStandardDescriptorAccessor = reader.bool();
                    break;
                  case 3:
                    message.deprecated = reader.bool();
                    break;
                  case 7:
                    message.mapEntry = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  case 1053:
                    message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MessageOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat")) {
                if (typeof message.messageSetWireFormat !== "boolean")
                  return "messageSetWireFormat: boolean expected";
              }
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor")) {
                if (typeof message.noStandardDescriptorAccessor !== "boolean")
                  return "noStandardDescriptorAccessor: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry")) {
                if (typeof message.mapEntry !== "boolean")
                  return "mapEntry: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                if (error)
                  return ".google.api.resource." + error;
              }
              return null;
            };
            MessageOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MessageOptions)
                return object;
              var message = new $root.google.protobuf.MessageOptions();
              if (object.messageSetWireFormat != null)
                message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
              if (object.noStandardDescriptorAccessor != null)
                message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.mapEntry != null)
                message.mapEntry = Boolean(object.mapEntry);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.resource"] != null) {
                if (typeof object[".google.api.resource"] !== "object")
                  throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
              }
              return message;
            };
            MessageOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.messageSetWireFormat = false;
                object.noStandardDescriptorAccessor = false;
                object.deprecated = false;
                object.mapEntry = false;
                object[".google.api.resource"] = null;
              }
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                object.messageSetWireFormat = message.messageSetWireFormat;
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                object.mapEntry = message.mapEntry;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
              return object;
            };
            MessageOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return MessageOptions;
          }();
          protobuf.FieldOptions = function() {
            function FieldOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.fieldBehavior"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldOptions.prototype.ctype = 0;
            FieldOptions.prototype.packed = false;
            FieldOptions.prototype.jstype = 0;
            FieldOptions.prototype.lazy = false;
            FieldOptions.prototype.deprecated = false;
            FieldOptions.prototype.weak = false;
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
            FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
            FieldOptions.prototype[".google.api.resourceReference"] = null;
            FieldOptions.create = function create(properties) {
              return new FieldOptions(properties);
            };
            FieldOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                writer.uint32(8).int32(message.ctype);
              if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                writer.uint32(16).bool(message.packed);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(24).bool(message.deprecated);
              if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                writer.uint32(40).bool(message.lazy);
              if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                writer.uint32(48).int32(message.jstype);
              if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                writer.uint32(80).bool(message.weak);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                writer.uint32(8418).fork();
                for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                  writer.int32(message[".google.api.fieldBehavior"][i]);
                writer.ldelim();
              }
              if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(8442).fork()).ldelim();
              return writer;
            };
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.ctype = reader.int32();
                    break;
                  case 2:
                    message.packed = reader.bool();
                    break;
                  case 6:
                    message.jstype = reader.int32();
                    break;
                  case 5:
                    message.lazy = reader.bool();
                    break;
                  case 3:
                    message.deprecated = reader.bool();
                    break;
                  case 10:
                    message.weak = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  case 1052:
                    if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                      message[".google.api.fieldBehavior"] = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message[".google.api.fieldBehavior"].push(reader.int32());
                    } else
                      message[".google.api.fieldBehavior"].push(reader.int32());
                    break;
                  case 1055:
                    message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                switch (message.ctype) {
                  default:
                    return "ctype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.packed != null && message.hasOwnProperty("packed")) {
                if (typeof message.packed !== "boolean")
                  return "packed: boolean expected";
              }
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                switch (message.jstype) {
                  default:
                    return "jstype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.lazy != null && message.hasOwnProperty("lazy")) {
                if (typeof message.lazy !== "boolean")
                  return "lazy: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.weak != null && message.hasOwnProperty("weak")) {
                if (typeof message.weak !== "boolean")
                  return "weak: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                if (!Array.isArray(message[".google.api.fieldBehavior"]))
                  return ".google.api.fieldBehavior: array expected";
                for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                  switch (message[".google.api.fieldBehavior"][i]) {
                    default:
                      return ".google.api.fieldBehavior: enum value[] expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                      break;
                  }
              }
              if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                if (error)
                  return ".google.api.resourceReference." + error;
              }
              return null;
            };
            FieldOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldOptions)
                return object;
              var message = new $root.google.protobuf.FieldOptions();
              switch (object.ctype) {
                case "STRING":
                case 0:
                  message.ctype = 0;
                  break;
                case "CORD":
                case 1:
                  message.ctype = 1;
                  break;
                case "STRING_PIECE":
                case 2:
                  message.ctype = 2;
                  break;
              }
              if (object.packed != null)
                message.packed = Boolean(object.packed);
              switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                  message.jstype = 0;
                  break;
                case "JS_STRING":
                case 1:
                  message.jstype = 1;
                  break;
                case "JS_NUMBER":
                case 2:
                  message.jstype = 2;
                  break;
              }
              if (object.lazy != null)
                message.lazy = Boolean(object.lazy);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.weak != null)
                message.weak = Boolean(object.weak);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.fieldBehavior"]) {
                if (!Array.isArray(object[".google.api.fieldBehavior"]))
                  throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                message[".google.api.fieldBehavior"] = [];
                for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                  switch (object[".google.api.fieldBehavior"][i]) {
                    default:
                    case "FIELD_BEHAVIOR_UNSPECIFIED":
                    case 0:
                      message[".google.api.fieldBehavior"][i] = 0;
                      break;
                    case "OPTIONAL":
                    case 1:
                      message[".google.api.fieldBehavior"][i] = 1;
                      break;
                    case "REQUIRED":
                    case 2:
                      message[".google.api.fieldBehavior"][i] = 2;
                      break;
                    case "OUTPUT_ONLY":
                    case 3:
                      message[".google.api.fieldBehavior"][i] = 3;
                      break;
                    case "INPUT_ONLY":
                    case 4:
                      message[".google.api.fieldBehavior"][i] = 4;
                      break;
                    case "IMMUTABLE":
                    case 5:
                      message[".google.api.fieldBehavior"][i] = 5;
                      break;
                  }
              }
              if (object[".google.api.resourceReference"] != null) {
                if (typeof object[".google.api.resourceReference"] !== "object")
                  throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
              }
              return message;
            };
            FieldOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.fieldBehavior"] = [];
              }
              if (options.defaults) {
                object.ctype = options.enums === String ? "STRING" : 0;
                object.packed = false;
                object.deprecated = false;
                object.lazy = false;
                object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                object.weak = false;
                object[".google.api.resourceReference"] = null;
              }
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
              if (message.packed != null && message.hasOwnProperty("packed"))
                object.packed = message.packed;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.lazy != null && message.hasOwnProperty("lazy"))
                object.lazy = message.lazy;
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
              if (message.weak != null && message.hasOwnProperty("weak"))
                object.weak = message.weak;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                object[".google.api.fieldBehavior"] = [];
                for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                  object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
              }
              if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
              return object;
            };
            FieldOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldOptions.CType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "STRING"] = 0;
              values[valuesById[1] = "CORD"] = 1;
              values[valuesById[2] = "STRING_PIECE"] = 2;
              return values;
            }();
            FieldOptions.JSType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "JS_NORMAL"] = 0;
              values[valuesById[1] = "JS_STRING"] = 1;
              values[valuesById[2] = "JS_NUMBER"] = 2;
              return values;
            }();
            return FieldOptions;
          }();
          protobuf.OneofOptions = function() {
            function OneofOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
            OneofOptions.create = function create(properties) {
              return new OneofOptions(properties);
            };
            OneofOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            OneofOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofOptions)
                return object;
              var message = new $root.google.protobuf.OneofOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            OneofOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            OneofOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return OneofOptions;
          }();
          protobuf.EnumOptions = function() {
            function EnumOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumOptions.prototype.allowAlias = false;
            EnumOptions.prototype.deprecated = false;
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumOptions.create = function create(properties) {
              return new EnumOptions(properties);
            };
            EnumOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                writer.uint32(16).bool(message.allowAlias);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(24).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2:
                    message.allowAlias = reader.bool();
                    break;
                  case 3:
                    message.deprecated = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias")) {
                if (typeof message.allowAlias !== "boolean")
                  return "allowAlias: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumOptions)
                return object;
              var message = new $root.google.protobuf.EnumOptions();
              if (object.allowAlias != null)
                message.allowAlias = Boolean(object.allowAlias);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.allowAlias = false;
                object.deprecated = false;
              }
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                object.allowAlias = message.allowAlias;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return EnumOptions;
          }();
          protobuf.EnumValueOptions = function() {
            function EnumValueOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueOptions.prototype.deprecated = false;
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumValueOptions.create = function create(properties) {
              return new EnumValueOptions(properties);
            };
            EnumValueOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(8).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.deprecated = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumValueOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueOptions)
                return object;
              var message = new $root.google.protobuf.EnumValueOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumValueOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults)
                object.deprecated = false;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumValueOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return EnumValueOptions;
          }();
          protobuf.ServiceOptions = function() {
            function ServiceOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceOptions.prototype.deprecated = false;
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
            ServiceOptions.prototype[".google.api.defaultHost"] = "";
            ServiceOptions.prototype[".google.api.oauthScopes"] = "";
            ServiceOptions.create = function create(properties) {
              return new ServiceOptions(properties);
            };
            ServiceOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(264).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                writer.uint32(8394).string(message[".google.api.defaultHost"]);
              if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                writer.uint32(8402).string(message[".google.api.oauthScopes"]);
              return writer;
            };
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33:
                    message.deprecated = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  case 1049:
                    message[".google.api.defaultHost"] = reader.string();
                    break;
                  case 1050:
                    message[".google.api.oauthScopes"] = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost")) {
                if (!$util.isString(message[".google.api.defaultHost"]))
                  return ".google.api.defaultHost: string expected";
              }
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes")) {
                if (!$util.isString(message[".google.api.oauthScopes"]))
                  return ".google.api.oauthScopes: string expected";
              }
              return null;
            };
            ServiceOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceOptions)
                return object;
              var message = new $root.google.protobuf.ServiceOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.defaultHost"] != null)
                message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
              if (object[".google.api.oauthScopes"] != null)
                message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
              return message;
            };
            ServiceOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.deprecated = false;
                object[".google.api.defaultHost"] = "";
                object[".google.api.oauthScopes"] = "";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
              return object;
            };
            ServiceOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ServiceOptions;
          }();
          protobuf.MethodOptions = function() {
            function MethodOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.methodSignature"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodOptions.prototype.deprecated = false;
            MethodOptions.prototype.idempotencyLevel = 0;
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
            MethodOptions.prototype[".google.api.http"] = null;
            MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
            MethodOptions.create = function create(properties) {
              return new MethodOptions(properties);
            };
            MethodOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(264).bool(message.deprecated);
              if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                writer.uint32(272).int32(message.idempotencyLevel);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  writer.uint32(8410).string(message[".google.api.methodSignature"][i]);
              if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(578365826).fork()).ldelim();
              return writer;
            };
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33:
                    message.deprecated = reader.bool();
                    break;
                  case 34:
                    message.idempotencyLevel = reader.int32();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  case 72295728:
                    message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                    break;
                  case 1051:
                    if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                      message[".google.api.methodSignature"] = [];
                    message[".google.api.methodSignature"].push(reader.string());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                switch (message.idempotencyLevel) {
                  default:
                    return "idempotencyLevel: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                if (error)
                  return ".google.api.http." + error;
              }
              if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                if (!Array.isArray(message[".google.api.methodSignature"]))
                  return ".google.api.methodSignature: array expected";
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  if (!$util.isString(message[".google.api.methodSignature"][i]))
                    return ".google.api.methodSignature: string[] expected";
              }
              return null;
            };
            MethodOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodOptions)
                return object;
              var message = new $root.google.protobuf.MethodOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              switch (object.idempotencyLevel) {
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                  message.idempotencyLevel = 0;
                  break;
                case "NO_SIDE_EFFECTS":
                case 1:
                  message.idempotencyLevel = 1;
                  break;
                case "IDEMPOTENT":
                case 2:
                  message.idempotencyLevel = 2;
                  break;
              }
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.http"] != null) {
                if (typeof object[".google.api.http"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
              }
              if (object[".google.api.methodSignature"]) {
                if (!Array.isArray(object[".google.api.methodSignature"]))
                  throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                message[".google.api.methodSignature"] = [];
                for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                  message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
              }
              return message;
            };
            MethodOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.methodSignature"] = [];
              }
              if (options.defaults) {
                object.deprecated = false;
                object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                object[".google.api.http"] = null;
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                object[".google.api.methodSignature"] = [];
                for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                  object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
              return object;
            };
            MethodOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodOptions.IdempotencyLevel = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
              values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
              values[valuesById[2] = "IDEMPOTENT"] = 2;
              return values;
            }();
            return MethodOptions;
          }();
          protobuf.UninterpretedOption = function() {
            function UninterpretedOption(properties) {
              this.name = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            UninterpretedOption.prototype.name = $util.emptyArray;
            UninterpretedOption.prototype.identifierValue = "";
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            UninterpretedOption.prototype.doubleValue = 0;
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
            UninterpretedOption.prototype.aggregateValue = "";
            UninterpretedOption.create = function create(properties) {
              return new UninterpretedOption(properties);
            };
            UninterpretedOption.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && message.name.length)
                for (var i = 0; i < message.name.length; ++i)
                  $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(18).fork()).ldelim();
              if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                writer.uint32(26).string(message.identifierValue);
              if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                writer.uint32(32).uint64(message.positiveIntValue);
              if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                writer.uint32(40).int64(message.negativeIntValue);
              if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                writer.uint32(49).double(message.doubleValue);
              if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                writer.uint32(58).bytes(message.stringValue);
              if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                writer.uint32(66).string(message.aggregateValue);
              return writer;
            };
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            UninterpretedOption.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2:
                    if (!(message.name && message.name.length))
                      message.name = [];
                    message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.identifierValue = reader.string();
                    break;
                  case 4:
                    message.positiveIntValue = reader.uint64();
                    break;
                  case 5:
                    message.negativeIntValue = reader.int64();
                    break;
                  case 6:
                    message.doubleValue = reader.double();
                    break;
                  case 7:
                    message.stringValue = reader.bytes();
                    break;
                  case 8:
                    message.aggregateValue = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            UninterpretedOption.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!Array.isArray(message.name))
                  return "name: array expected";
                for (var i = 0; i < message.name.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                  if (error)
                    return "name." + error;
                }
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue")) {
                if (!$util.isString(message.identifierValue))
                  return "identifierValue: string expected";
              }
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue")) {
                if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                  return "positiveIntValue: integer|Long expected";
              }
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue")) {
                if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                  return "negativeIntValue: integer|Long expected";
              }
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                if (typeof message.doubleValue !== "number")
                  return "doubleValue: number expected";
              }
              if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                  return "stringValue: buffer expected";
              }
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue")) {
                if (!$util.isString(message.aggregateValue))
                  return "aggregateValue: string expected";
              }
              return null;
            };
            UninterpretedOption.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.UninterpretedOption)
                return object;
              var message = new $root.google.protobuf.UninterpretedOption();
              if (object.name) {
                if (!Array.isArray(object.name))
                  throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                message.name = [];
                for (var i = 0; i < object.name.length; ++i) {
                  if (typeof object.name[i] !== "object")
                    throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                  message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                }
              }
              if (object.identifierValue != null)
                message.identifierValue = String(object.identifierValue);
              if (object.positiveIntValue != null) {
                if ($util.Long)
                  (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                else if (typeof object.positiveIntValue === "string")
                  message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                else if (typeof object.positiveIntValue === "number")
                  message.positiveIntValue = object.positiveIntValue;
                else if (typeof object.positiveIntValue === "object")
                  message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
              }
              if (object.negativeIntValue != null) {
                if ($util.Long)
                  (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                else if (typeof object.negativeIntValue === "string")
                  message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                else if (typeof object.negativeIntValue === "number")
                  message.negativeIntValue = object.negativeIntValue;
                else if (typeof object.negativeIntValue === "object")
                  message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
              }
              if (object.doubleValue != null)
                message.doubleValue = Number(object.doubleValue);
              if (object.stringValue != null) {
                if (typeof object.stringValue === "string")
                  $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                else if (object.stringValue.length)
                  message.stringValue = object.stringValue;
              }
              if (object.aggregateValue != null)
                message.aggregateValue = String(object.aggregateValue);
              return message;
            };
            UninterpretedOption.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.name = [];
              if (options.defaults) {
                object.identifierValue = "";
                if ($util.Long) {
                  var long = new $util.Long(0, 0, true);
                  object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.positiveIntValue = options.longs === String ? "0" : 0;
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.negativeIntValue = options.longs === String ? "0" : 0;
                object.doubleValue = 0;
                if (options.bytes === String)
                  object.stringValue = "";
                else {
                  object.stringValue = [];
                  if (options.bytes !== Array)
                    object.stringValue = $util.newBuffer(object.stringValue);
                }
                object.aggregateValue = "";
              }
              if (message.name && message.name.length) {
                object.name = [];
                for (var j = 0; j < message.name.length; ++j)
                  object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                object.identifierValue = message.identifierValue;
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                if (typeof message.positiveIntValue === "number")
                  object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                else
                  object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                if (typeof message.negativeIntValue === "number")
                  object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                else
                  object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
              if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                object.aggregateValue = message.aggregateValue;
              return object;
            };
            UninterpretedOption.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            UninterpretedOption.NamePart = function() {
              function NamePart(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              NamePart.prototype.namePart = "";
              NamePart.prototype.isExtension = false;
              NamePart.create = function create(properties) {
                return new NamePart(properties);
              };
              NamePart.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                writer.uint32(10).string(message.namePart);
                writer.uint32(16).bool(message.isExtension);
                return writer;
              };
              NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              NamePart.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.namePart = reader.string();
                      break;
                    case 2:
                      message.isExtension = reader.bool();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                if (!message.hasOwnProperty("namePart"))
                  throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                if (!message.hasOwnProperty("isExtension"))
                  throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                return message;
              };
              NamePart.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              NamePart.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (!$util.isString(message.namePart))
                  return "namePart: string expected";
                if (typeof message.isExtension !== "boolean")
                  return "isExtension: boolean expected";
                return null;
              };
              NamePart.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                  return object;
                var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                if (object.namePart != null)
                  message.namePart = String(object.namePart);
                if (object.isExtension != null)
                  message.isExtension = Boolean(object.isExtension);
                return message;
              };
              NamePart.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.namePart = "";
                  object.isExtension = false;
                }
                if (message.namePart != null && message.hasOwnProperty("namePart"))
                  object.namePart = message.namePart;
                if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                  object.isExtension = message.isExtension;
                return object;
              };
              NamePart.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return NamePart;
            }();
            return UninterpretedOption;
          }();
          protobuf.SourceCodeInfo = function() {
            function SourceCodeInfo(properties) {
              this.location = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            SourceCodeInfo.prototype.location = $util.emptyArray;
            SourceCodeInfo.create = function create(properties) {
              return new SourceCodeInfo(properties);
            };
            SourceCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.location != null && message.location.length)
                for (var i = 0; i < message.location.length; ++i)
                  $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            SourceCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.location && message.location.length))
                      message.location = [];
                    message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            SourceCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.location != null && message.hasOwnProperty("location")) {
                if (!Array.isArray(message.location))
                  return "location: array expected";
                for (var i = 0; i < message.location.length; ++i) {
                  var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                  if (error)
                    return "location." + error;
                }
              }
              return null;
            };
            SourceCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.SourceCodeInfo)
                return object;
              var message = new $root.google.protobuf.SourceCodeInfo();
              if (object.location) {
                if (!Array.isArray(object.location))
                  throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                message.location = [];
                for (var i = 0; i < object.location.length; ++i) {
                  if (typeof object.location[i] !== "object")
                    throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                  message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                }
              }
              return message;
            };
            SourceCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.location = [];
              if (message.location && message.location.length) {
                object.location = [];
                for (var j = 0; j < message.location.length; ++j)
                  object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
              }
              return object;
            };
            SourceCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            SourceCodeInfo.Location = function() {
              function Location(properties) {
                this.path = [];
                this.span = [];
                this.leadingDetachedComments = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Location.prototype.path = $util.emptyArray;
              Location.prototype.span = $util.emptyArray;
              Location.prototype.leadingComments = "";
              Location.prototype.trailingComments = "";
              Location.prototype.leadingDetachedComments = $util.emptyArray;
              Location.create = function create(properties) {
                return new Location(properties);
              };
              Location.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(10).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.span != null && message.span.length) {
                  writer.uint32(18).fork();
                  for (var i = 0; i < message.span.length; ++i)
                    writer.int32(message.span[i]);
                  writer.ldelim();
                }
                if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                  writer.uint32(26).string(message.leadingComments);
                if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                  writer.uint32(34).string(message.trailingComments);
                if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    writer.uint32(50).string(message.leadingDetachedComments[i]);
                return writer;
              };
              Location.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Location.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    case 2:
                      if (!(message.span && message.span.length))
                        message.span = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.span.push(reader.int32());
                      } else
                        message.span.push(reader.int32());
                      break;
                    case 3:
                      message.leadingComments = reader.string();
                      break;
                    case 4:
                      message.trailingComments = reader.string();
                      break;
                    case 6:
                      if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                        message.leadingDetachedComments = [];
                      message.leadingDetachedComments.push(reader.string());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Location.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Location.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.span != null && message.hasOwnProperty("span")) {
                  if (!Array.isArray(message.span))
                    return "span: array expected";
                  for (var i = 0; i < message.span.length; ++i)
                    if (!$util.isInteger(message.span[i]))
                      return "span: integer[] expected";
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments")) {
                  if (!$util.isString(message.leadingComments))
                    return "leadingComments: string expected";
                }
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments")) {
                  if (!$util.isString(message.trailingComments))
                    return "trailingComments: string expected";
                }
                if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                  if (!Array.isArray(message.leadingDetachedComments))
                    return "leadingDetachedComments: array expected";
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    if (!$util.isString(message.leadingDetachedComments[i]))
                      return "leadingDetachedComments: string[] expected";
                }
                return null;
              };
              Location.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                  return object;
                var message = new $root.google.protobuf.SourceCodeInfo.Location();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.span) {
                  if (!Array.isArray(object.span))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                  message.span = [];
                  for (var i = 0; i < object.span.length; ++i)
                    message.span[i] = object.span[i] | 0;
                }
                if (object.leadingComments != null)
                  message.leadingComments = String(object.leadingComments);
                if (object.trailingComments != null)
                  message.trailingComments = String(object.trailingComments);
                if (object.leadingDetachedComments) {
                  if (!Array.isArray(object.leadingDetachedComments))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                  message.leadingDetachedComments = [];
                  for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                    message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                }
                return message;
              };
              Location.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.path = [];
                  object.span = [];
                  object.leadingDetachedComments = [];
                }
                if (options.defaults) {
                  object.leadingComments = "";
                  object.trailingComments = "";
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.span && message.span.length) {
                  object.span = [];
                  for (var j = 0; j < message.span.length; ++j)
                    object.span[j] = message.span[j];
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                  object.leadingComments = message.leadingComments;
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                  object.trailingComments = message.trailingComments;
                if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                  object.leadingDetachedComments = [];
                  for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                    object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                }
                return object;
              };
              Location.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Location;
            }();
            return SourceCodeInfo;
          }();
          protobuf.GeneratedCodeInfo = function() {
            function GeneratedCodeInfo(properties) {
              this.annotation = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
            GeneratedCodeInfo.create = function create(properties) {
              return new GeneratedCodeInfo(properties);
            };
            GeneratedCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.annotation != null && message.annotation.length)
                for (var i = 0; i < message.annotation.length; ++i)
                  $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GeneratedCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.annotation && message.annotation.length))
                      message.annotation = [];
                    message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GeneratedCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.annotation != null && message.hasOwnProperty("annotation")) {
                if (!Array.isArray(message.annotation))
                  return "annotation: array expected";
                for (var i = 0; i < message.annotation.length; ++i) {
                  var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                  if (error)
                    return "annotation." + error;
                }
              }
              return null;
            };
            GeneratedCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                return object;
              var message = new $root.google.protobuf.GeneratedCodeInfo();
              if (object.annotation) {
                if (!Array.isArray(object.annotation))
                  throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                message.annotation = [];
                for (var i = 0; i < object.annotation.length; ++i) {
                  if (typeof object.annotation[i] !== "object")
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                  message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                }
              }
              return message;
            };
            GeneratedCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.annotation = [];
              if (message.annotation && message.annotation.length) {
                object.annotation = [];
                for (var j = 0; j < message.annotation.length; ++j)
                  object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
              }
              return object;
            };
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GeneratedCodeInfo.Annotation = function() {
              function Annotation(properties) {
                this.path = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Annotation.prototype.path = $util.emptyArray;
              Annotation.prototype.sourceFile = "";
              Annotation.prototype.begin = 0;
              Annotation.prototype.end = 0;
              Annotation.create = function create(properties) {
                return new Annotation(properties);
              };
              Annotation.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(10).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                  writer.uint32(18).string(message.sourceFile);
                if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                  writer.uint32(24).int32(message.begin);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(32).int32(message.end);
                return writer;
              };
              Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Annotation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    case 2:
                      message.sourceFile = reader.string();
                      break;
                    case 3:
                      message.begin = reader.int32();
                      break;
                    case 4:
                      message.end = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Annotation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Annotation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile")) {
                  if (!$util.isString(message.sourceFile))
                    return "sourceFile: string expected";
                }
                if (message.begin != null && message.hasOwnProperty("begin")) {
                  if (!$util.isInteger(message.begin))
                    return "begin: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              Annotation.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                  return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.sourceFile != null)
                  message.sourceFile = String(object.sourceFile);
                if (object.begin != null)
                  message.begin = object.begin | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              Annotation.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.path = [];
                if (options.defaults) {
                  object.sourceFile = "";
                  object.begin = 0;
                  object.end = 0;
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                  object.sourceFile = message.sourceFile;
                if (message.begin != null && message.hasOwnProperty("begin"))
                  object.begin = message.begin;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              Annotation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Annotation;
            }();
            return GeneratedCodeInfo;
          }();
          return protobuf;
        }();
        google.type = function() {
          var type = {};
          type.Expr = function() {
            function Expr(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Expr.prototype.expression = "";
            Expr.prototype.title = "";
            Expr.prototype.description = "";
            Expr.prototype.location = "";
            Expr.create = function create(properties) {
              return new Expr(properties);
            };
            Expr.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.expression != null && Object.hasOwnProperty.call(message, "expression"))
                writer.uint32(10).string(message.expression);
              if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                writer.uint32(18).string(message.title);
              if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                writer.uint32(26).string(message.description);
              if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                writer.uint32(34).string(message.location);
              return writer;
            };
            Expr.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Expr.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.type.Expr();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.expression = reader.string();
                    break;
                  case 2:
                    message.title = reader.string();
                    break;
                  case 3:
                    message.description = reader.string();
                    break;
                  case 4:
                    message.location = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Expr.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Expr.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.expression != null && message.hasOwnProperty("expression")) {
                if (!$util.isString(message.expression))
                  return "expression: string expected";
              }
              if (message.title != null && message.hasOwnProperty("title")) {
                if (!$util.isString(message.title))
                  return "title: string expected";
              }
              if (message.description != null && message.hasOwnProperty("description")) {
                if (!$util.isString(message.description))
                  return "description: string expected";
              }
              if (message.location != null && message.hasOwnProperty("location")) {
                if (!$util.isString(message.location))
                  return "location: string expected";
              }
              return null;
            };
            Expr.fromObject = function fromObject(object) {
              if (object instanceof $root.google.type.Expr)
                return object;
              var message = new $root.google.type.Expr();
              if (object.expression != null)
                message.expression = String(object.expression);
              if (object.title != null)
                message.title = String(object.title);
              if (object.description != null)
                message.description = String(object.description);
              if (object.location != null)
                message.location = String(object.location);
              return message;
            };
            Expr.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.expression = "";
                object.title = "";
                object.description = "";
                object.location = "";
              }
              if (message.expression != null && message.hasOwnProperty("expression"))
                object.expression = message.expression;
              if (message.title != null && message.hasOwnProperty("title"))
                object.title = message.title;
              if (message.description != null && message.hasOwnProperty("description"))
                object.description = message.description;
              if (message.location != null && message.hasOwnProperty("location"))
                object.location = message.location;
              return object;
            };
            Expr.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Expr;
          }();
          return type;
        }();
        return google;
      }();
      return $root;
    });
  }
});

// node_modules/google-gax/build/protos/locations.js
var require_locations = __commonJS({
  "node_modules/google-gax/build/protos/locations.js"(exports2, module2) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd)
        define(["protobufjs/minimal"], factory);
      else if (typeof __require === "function" && typeof module2 === "object" && module2 && module2.exports)
        module2.exports = factory(require_minimal2());
    })(exports2, function($protobuf) {
      "use strict";
      var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
      var $root = $protobuf.roots.locations_protos || ($protobuf.roots.locations_protos = {});
      $root.google = function() {
        var google = {};
        google.cloud = function() {
          var cloud = {};
          cloud.location = function() {
            var location = {};
            location.Locations = function() {
              function Locations(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
              }
              (Locations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Locations;
              Locations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
              };
              Object.defineProperty(Locations.prototype.listLocations = function listLocations(request, callback) {
                return this.rpcCall(listLocations, $root.google.cloud.location.ListLocationsRequest, $root.google.cloud.location.ListLocationsResponse, request, callback);
              }, "name", { value: "ListLocations" });
              Object.defineProperty(Locations.prototype.getLocation = function getLocation(request, callback) {
                return this.rpcCall(getLocation, $root.google.cloud.location.GetLocationRequest, $root.google.cloud.location.Location, request, callback);
              }, "name", { value: "GetLocation" });
              return Locations;
            }();
            location.ListLocationsRequest = function() {
              function ListLocationsRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ListLocationsRequest.prototype.name = "";
              ListLocationsRequest.prototype.filter = "";
              ListLocationsRequest.prototype.pageSize = 0;
              ListLocationsRequest.prototype.pageToken = "";
              ListLocationsRequest.create = function create(properties) {
                return new ListLocationsRequest(properties);
              };
              ListLocationsRequest.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                  writer.uint32(10).string(message.name);
                if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                  writer.uint32(18).string(message.filter);
                if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                  writer.uint32(24).int32(message.pageSize);
                if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                  writer.uint32(34).string(message.pageToken);
                return writer;
              };
              ListLocationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ListLocationsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.location.ListLocationsRequest();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.name = reader.string();
                      break;
                    case 2:
                      message.filter = reader.string();
                      break;
                    case 3:
                      message.pageSize = reader.int32();
                      break;
                    case 4:
                      message.pageToken = reader.string();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ListLocationsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ListLocationsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                  if (!$util.isString(message.name))
                    return "name: string expected";
                }
                if (message.filter != null && message.hasOwnProperty("filter")) {
                  if (!$util.isString(message.filter))
                    return "filter: string expected";
                }
                if (message.pageSize != null && message.hasOwnProperty("pageSize")) {
                  if (!$util.isInteger(message.pageSize))
                    return "pageSize: integer expected";
                }
                if (message.pageToken != null && message.hasOwnProperty("pageToken")) {
                  if (!$util.isString(message.pageToken))
                    return "pageToken: string expected";
                }
                return null;
              };
              ListLocationsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.cloud.location.ListLocationsRequest)
                  return object;
                var message = new $root.google.cloud.location.ListLocationsRequest();
                if (object.name != null)
                  message.name = String(object.name);
                if (object.filter != null)
                  message.filter = String(object.filter);
                if (object.pageSize != null)
                  message.pageSize = object.pageSize | 0;
                if (object.pageToken != null)
                  message.pageToken = String(object.pageToken);
                return message;
              };
              ListLocationsRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.name = "";
                  object.filter = "";
                  object.pageSize = 0;
                  object.pageToken = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                  object.name = message.name;
                if (message.filter != null && message.hasOwnProperty("filter"))
                  object.filter = message.filter;
                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                  object.pageSize = message.pageSize;
                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                  object.pageToken = message.pageToken;
                return object;
              };
              ListLocationsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return ListLocationsRequest;
            }();
            location.ListLocationsResponse = function() {
              function ListLocationsResponse(properties) {
                this.locations = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ListLocationsResponse.prototype.locations = $util.emptyArray;
              ListLocationsResponse.prototype.nextPageToken = "";
              ListLocationsResponse.create = function create(properties) {
                return new ListLocationsResponse(properties);
              };
              ListLocationsResponse.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.locations != null && message.locations.length)
                  for (var i = 0; i < message.locations.length; ++i)
                    $root.google.cloud.location.Location.encode(message.locations[i], writer.uint32(10).fork()).ldelim();
                if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                  writer.uint32(18).string(message.nextPageToken);
                return writer;
              };
              ListLocationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ListLocationsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.location.ListLocationsResponse();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      if (!(message.locations && message.locations.length))
                        message.locations = [];
                      message.locations.push($root.google.cloud.location.Location.decode(reader, reader.uint32()));
                      break;
                    case 2:
                      message.nextPageToken = reader.string();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ListLocationsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ListLocationsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.locations != null && message.hasOwnProperty("locations")) {
                  if (!Array.isArray(message.locations))
                    return "locations: array expected";
                  for (var i = 0; i < message.locations.length; ++i) {
                    var error = $root.google.cloud.location.Location.verify(message.locations[i]);
                    if (error)
                      return "locations." + error;
                  }
                }
                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken")) {
                  if (!$util.isString(message.nextPageToken))
                    return "nextPageToken: string expected";
                }
                return null;
              };
              ListLocationsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.cloud.location.ListLocationsResponse)
                  return object;
                var message = new $root.google.cloud.location.ListLocationsResponse();
                if (object.locations) {
                  if (!Array.isArray(object.locations))
                    throw TypeError(".google.cloud.location.ListLocationsResponse.locations: array expected");
                  message.locations = [];
                  for (var i = 0; i < object.locations.length; ++i) {
                    if (typeof object.locations[i] !== "object")
                      throw TypeError(".google.cloud.location.ListLocationsResponse.locations: object expected");
                    message.locations[i] = $root.google.cloud.location.Location.fromObject(object.locations[i]);
                  }
                }
                if (object.nextPageToken != null)
                  message.nextPageToken = String(object.nextPageToken);
                return message;
              };
              ListLocationsResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.locations = [];
                if (options.defaults)
                  object.nextPageToken = "";
                if (message.locations && message.locations.length) {
                  object.locations = [];
                  for (var j = 0; j < message.locations.length; ++j)
                    object.locations[j] = $root.google.cloud.location.Location.toObject(message.locations[j], options);
                }
                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                  object.nextPageToken = message.nextPageToken;
                return object;
              };
              ListLocationsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return ListLocationsResponse;
            }();
            location.GetLocationRequest = function() {
              function GetLocationRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              GetLocationRequest.prototype.name = "";
              GetLocationRequest.create = function create(properties) {
                return new GetLocationRequest(properties);
              };
              GetLocationRequest.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                  writer.uint32(10).string(message.name);
                return writer;
              };
              GetLocationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              GetLocationRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.location.GetLocationRequest();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.name = reader.string();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              GetLocationRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              GetLocationRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                  if (!$util.isString(message.name))
                    return "name: string expected";
                }
                return null;
              };
              GetLocationRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.cloud.location.GetLocationRequest)
                  return object;
                var message = new $root.google.cloud.location.GetLocationRequest();
                if (object.name != null)
                  message.name = String(object.name);
                return message;
              };
              GetLocationRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults)
                  object.name = "";
                if (message.name != null && message.hasOwnProperty("name"))
                  object.name = message.name;
                return object;
              };
              GetLocationRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return GetLocationRequest;
            }();
            location.Location = function() {
              function Location(properties) {
                this.labels = {};
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Location.prototype.name = "";
              Location.prototype.locationId = "";
              Location.prototype.displayName = "";
              Location.prototype.labels = $util.emptyObject;
              Location.prototype.metadata = null;
              Location.create = function create(properties) {
                return new Location(properties);
              };
              Location.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                  writer.uint32(10).string(message.name);
                if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                  for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                    writer.uint32(18).fork().uint32(10).string(keys[i]).uint32(18).string(message.labels[keys[i]]).ldelim();
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                  $root.google.protobuf.Any.encode(message.metadata, writer.uint32(26).fork()).ldelim();
                if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                  writer.uint32(34).string(message.locationId);
                if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                  writer.uint32(42).string(message.displayName);
                return writer;
              };
              Location.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Location.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.location.Location(), key, value;
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.name = reader.string();
                      break;
                    case 4:
                      message.locationId = reader.string();
                      break;
                    case 5:
                      message.displayName = reader.string();
                      break;
                    case 2:
                      if (message.labels === $util.emptyObject)
                        message.labels = {};
                      var end2 = reader.uint32() + reader.pos;
                      key = "";
                      value = "";
                      while (reader.pos < end2) {
                        var tag2 = reader.uint32();
                        switch (tag2 >>> 3) {
                          case 1:
                            key = reader.string();
                            break;
                          case 2:
                            value = reader.string();
                            break;
                          default:
                            reader.skipType(tag2 & 7);
                            break;
                        }
                      }
                      message.labels[key] = value;
                      break;
                    case 3:
                      message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Location.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Location.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                  if (!$util.isString(message.name))
                    return "name: string expected";
                }
                if (message.locationId != null && message.hasOwnProperty("locationId")) {
                  if (!$util.isString(message.locationId))
                    return "locationId: string expected";
                }
                if (message.displayName != null && message.hasOwnProperty("displayName")) {
                  if (!$util.isString(message.displayName))
                    return "displayName: string expected";
                }
                if (message.labels != null && message.hasOwnProperty("labels")) {
                  if (!$util.isObject(message.labels))
                    return "labels: object expected";
                  var key = Object.keys(message.labels);
                  for (var i = 0; i < key.length; ++i)
                    if (!$util.isString(message.labels[key[i]]))
                      return "labels: string{k:string} expected";
                }
                if (message.metadata != null && message.hasOwnProperty("metadata")) {
                  var error = $root.google.protobuf.Any.verify(message.metadata);
                  if (error)
                    return "metadata." + error;
                }
                return null;
              };
              Location.fromObject = function fromObject(object) {
                if (object instanceof $root.google.cloud.location.Location)
                  return object;
                var message = new $root.google.cloud.location.Location();
                if (object.name != null)
                  message.name = String(object.name);
                if (object.locationId != null)
                  message.locationId = String(object.locationId);
                if (object.displayName != null)
                  message.displayName = String(object.displayName);
                if (object.labels) {
                  if (typeof object.labels !== "object")
                    throw TypeError(".google.cloud.location.Location.labels: object expected");
                  message.labels = {};
                  for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                }
                if (object.metadata != null) {
                  if (typeof object.metadata !== "object")
                    throw TypeError(".google.cloud.location.Location.metadata: object expected");
                  message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
                }
                return message;
              };
              Location.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.objects || options.defaults)
                  object.labels = {};
                if (options.defaults) {
                  object.name = "";
                  object.metadata = null;
                  object.locationId = "";
                  object.displayName = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                  object.name = message.name;
                var keys2;
                if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                  object.labels = {};
                  for (var j = 0; j < keys2.length; ++j)
                    object.labels[keys2[j]] = message.labels[keys2[j]];
                }
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                  object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
                if (message.locationId != null && message.hasOwnProperty("locationId"))
                  object.locationId = message.locationId;
                if (message.displayName != null && message.hasOwnProperty("displayName"))
                  object.displayName = message.displayName;
                return object;
              };
              Location.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Location;
            }();
            return location;
          }();
          return cloud;
        }();
        google.api = function() {
          var api = {};
          api.Http = function() {
            function Http(properties) {
              this.rules = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Http.prototype.rules = $util.emptyArray;
            Http.prototype.fullyDecodeReservedExpansion = false;
            Http.create = function create(properties) {
              return new Http(properties);
            };
            Http.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.rules != null && message.rules.length)
                for (var i = 0; i < message.rules.length; ++i)
                  $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(10).fork()).ldelim();
              if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                writer.uint32(16).bool(message.fullyDecodeReservedExpansion);
              return writer;
            };
            Http.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Http.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.Http();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.rules && message.rules.length))
                      message.rules = [];
                    message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  case 2:
                    message.fullyDecodeReservedExpansion = reader.bool();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Http.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Http.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.rules != null && message.hasOwnProperty("rules")) {
                if (!Array.isArray(message.rules))
                  return "rules: array expected";
                for (var i = 0; i < message.rules.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.rules[i]);
                  if (error)
                    return "rules." + error;
                }
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion")) {
                if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                  return "fullyDecodeReservedExpansion: boolean expected";
              }
              return null;
            };
            Http.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.Http)
                return object;
              var message = new $root.google.api.Http();
              if (object.rules) {
                if (!Array.isArray(object.rules))
                  throw TypeError(".google.api.Http.rules: array expected");
                message.rules = [];
                for (var i = 0; i < object.rules.length; ++i) {
                  if (typeof object.rules[i] !== "object")
                    throw TypeError(".google.api.Http.rules: object expected");
                  message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                }
              }
              if (object.fullyDecodeReservedExpansion != null)
                message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
              return message;
            };
            Http.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.rules = [];
              if (options.defaults)
                object.fullyDecodeReservedExpansion = false;
              if (message.rules && message.rules.length) {
                object.rules = [];
                for (var j = 0; j < message.rules.length; ++j)
                  object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
              return object;
            };
            Http.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Http;
          }();
          api.HttpRule = function() {
            function HttpRule(properties) {
              this.additionalBindings = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            HttpRule.prototype.selector = "";
            HttpRule.prototype.get = null;
            HttpRule.prototype.put = null;
            HttpRule.prototype.post = null;
            HttpRule.prototype["delete"] = null;
            HttpRule.prototype.patch = null;
            HttpRule.prototype.custom = null;
            HttpRule.prototype.body = "";
            HttpRule.prototype.responseBody = "";
            HttpRule.prototype.additionalBindings = $util.emptyArray;
            var $oneOfFields;
            Object.defineProperty(HttpRule.prototype, "pattern", {
              get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            HttpRule.create = function create(properties) {
              return new HttpRule(properties);
            };
            HttpRule.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                writer.uint32(10).string(message.selector);
              if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                writer.uint32(18).string(message.get);
              if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                writer.uint32(26).string(message.put);
              if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                writer.uint32(34).string(message.post);
              if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                writer.uint32(42).string(message["delete"]);
              if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                writer.uint32(50).string(message.patch);
              if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                writer.uint32(58).string(message.body);
              if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(66).fork()).ldelim();
              if (message.additionalBindings != null && message.additionalBindings.length)
                for (var i = 0; i < message.additionalBindings.length; ++i)
                  $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(90).fork()).ldelim();
              if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                writer.uint32(98).string(message.responseBody);
              return writer;
            };
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            HttpRule.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.selector = reader.string();
                    break;
                  case 2:
                    message.get = reader.string();
                    break;
                  case 3:
                    message.put = reader.string();
                    break;
                  case 4:
                    message.post = reader.string();
                    break;
                  case 5:
                    message["delete"] = reader.string();
                    break;
                  case 6:
                    message.patch = reader.string();
                    break;
                  case 8:
                    message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                    break;
                  case 7:
                    message.body = reader.string();
                    break;
                  case 12:
                    message.responseBody = reader.string();
                    break;
                  case 11:
                    if (!(message.additionalBindings && message.additionalBindings.length))
                      message.additionalBindings = [];
                    message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            HttpRule.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              var properties = {};
              if (message.selector != null && message.hasOwnProperty("selector")) {
                if (!$util.isString(message.selector))
                  return "selector: string expected";
              }
              if (message.get != null && message.hasOwnProperty("get")) {
                properties.pattern = 1;
                if (!$util.isString(message.get))
                  return "get: string expected";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.put))
                  return "put: string expected";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.post))
                  return "post: string expected";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message["delete"]))
                  return "delete: string expected";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.patch))
                  return "patch: string expected";
              }
              if (message.custom != null && message.hasOwnProperty("custom")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                {
                  var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                  if (error)
                    return "custom." + error;
                }
              }
              if (message.body != null && message.hasOwnProperty("body")) {
                if (!$util.isString(message.body))
                  return "body: string expected";
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody")) {
                if (!$util.isString(message.responseBody))
                  return "responseBody: string expected";
              }
              if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                if (!Array.isArray(message.additionalBindings))
                  return "additionalBindings: array expected";
                for (var i = 0; i < message.additionalBindings.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                  if (error)
                    return "additionalBindings." + error;
                }
              }
              return null;
            };
            HttpRule.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.HttpRule)
                return object;
              var message = new $root.google.api.HttpRule();
              if (object.selector != null)
                message.selector = String(object.selector);
              if (object.get != null)
                message.get = String(object.get);
              if (object.put != null)
                message.put = String(object.put);
              if (object.post != null)
                message.post = String(object.post);
              if (object["delete"] != null)
                message["delete"] = String(object["delete"]);
              if (object.patch != null)
                message.patch = String(object.patch);
              if (object.custom != null) {
                if (typeof object.custom !== "object")
                  throw TypeError(".google.api.HttpRule.custom: object expected");
                message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
              }
              if (object.body != null)
                message.body = String(object.body);
              if (object.responseBody != null)
                message.responseBody = String(object.responseBody);
              if (object.additionalBindings) {
                if (!Array.isArray(object.additionalBindings))
                  throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                message.additionalBindings = [];
                for (var i = 0; i < object.additionalBindings.length; ++i) {
                  if (typeof object.additionalBindings[i] !== "object")
                    throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                  message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                }
              }
              return message;
            };
            HttpRule.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.additionalBindings = [];
              if (options.defaults) {
                object.selector = "";
                object.body = "";
                object.responseBody = "";
              }
              if (message.selector != null && message.hasOwnProperty("selector"))
                object.selector = message.selector;
              if (message.get != null && message.hasOwnProperty("get")) {
                object.get = message.get;
                if (options.oneofs)
                  object.pattern = "get";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                object.put = message.put;
                if (options.oneofs)
                  object.pattern = "put";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                object.post = message.post;
                if (options.oneofs)
                  object.pattern = "post";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                object["delete"] = message["delete"];
                if (options.oneofs)
                  object.pattern = "delete";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                object.patch = message.patch;
                if (options.oneofs)
                  object.pattern = "patch";
              }
              if (message.body != null && message.hasOwnProperty("body"))
                object.body = message.body;
              if (message.custom != null && message.hasOwnProperty("custom")) {
                object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                if (options.oneofs)
                  object.pattern = "custom";
              }
              if (message.additionalBindings && message.additionalBindings.length) {
                object.additionalBindings = [];
                for (var j = 0; j < message.additionalBindings.length; ++j)
                  object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                object.responseBody = message.responseBody;
              return object;
            };
            HttpRule.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return HttpRule;
          }();
          api.CustomHttpPattern = function() {
            function CustomHttpPattern(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CustomHttpPattern.prototype.kind = "";
            CustomHttpPattern.prototype.path = "";
            CustomHttpPattern.create = function create(properties) {
              return new CustomHttpPattern(properties);
            };
            CustomHttpPattern.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                writer.uint32(10).string(message.kind);
              if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                writer.uint32(18).string(message.path);
              return writer;
            };
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CustomHttpPattern.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.kind = reader.string();
                    break;
                  case 2:
                    message.path = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CustomHttpPattern.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.kind != null && message.hasOwnProperty("kind")) {
                if (!$util.isString(message.kind))
                  return "kind: string expected";
              }
              if (message.path != null && message.hasOwnProperty("path")) {
                if (!$util.isString(message.path))
                  return "path: string expected";
              }
              return null;
            };
            CustomHttpPattern.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CustomHttpPattern)
                return object;
              var message = new $root.google.api.CustomHttpPattern();
              if (object.kind != null)
                message.kind = String(object.kind);
              if (object.path != null)
                message.path = String(object.path);
              return message;
            };
            CustomHttpPattern.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.kind = "";
                object.path = "";
              }
              if (message.kind != null && message.hasOwnProperty("kind"))
                object.kind = message.kind;
              if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
              return object;
            };
            CustomHttpPattern.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return CustomHttpPattern;
          }();
          return api;
        }();
        google.protobuf = function() {
          var protobuf = {};
          protobuf.FileDescriptorSet = function() {
            function FileDescriptorSet(properties) {
              this.file = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorSet.prototype.file = $util.emptyArray;
            FileDescriptorSet.create = function create(properties) {
              return new FileDescriptorSet(properties);
            };
            FileDescriptorSet.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.file != null && message.file.length)
                for (var i = 0; i < message.file.length; ++i)
                  $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorSet.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.file && message.file.length))
                      message.file = [];
                    message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorSet.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.file != null && message.hasOwnProperty("file")) {
                if (!Array.isArray(message.file))
                  return "file: array expected";
                for (var i = 0; i < message.file.length; ++i) {
                  var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                  if (error)
                    return "file." + error;
                }
              }
              return null;
            };
            FileDescriptorSet.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorSet)
                return object;
              var message = new $root.google.protobuf.FileDescriptorSet();
              if (object.file) {
                if (!Array.isArray(object.file))
                  throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                message.file = [];
                for (var i = 0; i < object.file.length; ++i) {
                  if (typeof object.file[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                  message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                }
              }
              return message;
            };
            FileDescriptorSet.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.file = [];
              if (message.file && message.file.length) {
                object.file = [];
                for (var j = 0; j < message.file.length; ++j)
                  object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
              }
              return object;
            };
            FileDescriptorSet.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return FileDescriptorSet;
          }();
          protobuf.FileDescriptorProto = function() {
            function FileDescriptorProto(properties) {
              this.dependency = [];
              this.publicDependency = [];
              this.weakDependency = [];
              this.messageType = [];
              this.enumType = [];
              this.service = [];
              this.extension = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorProto.prototype.name = "";
            FileDescriptorProto.prototype["package"] = "";
            FileDescriptorProto.prototype.dependency = $util.emptyArray;
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
            FileDescriptorProto.prototype.messageType = $util.emptyArray;
            FileDescriptorProto.prototype.enumType = $util.emptyArray;
            FileDescriptorProto.prototype.service = $util.emptyArray;
            FileDescriptorProto.prototype.extension = $util.emptyArray;
            FileDescriptorProto.prototype.options = null;
            FileDescriptorProto.prototype.sourceCodeInfo = null;
            FileDescriptorProto.prototype.syntax = "";
            FileDescriptorProto.create = function create(properties) {
              return new FileDescriptorProto(properties);
            };
            FileDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                writer.uint32(18).string(message["package"]);
              if (message.dependency != null && message.dependency.length)
                for (var i = 0; i < message.dependency.length; ++i)
                  writer.uint32(26).string(message.dependency[i]);
              if (message.messageType != null && message.messageType.length)
                for (var i = 0; i < message.messageType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(34).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(42).fork()).ldelim();
              if (message.service != null && message.service.length)
                for (var i = 0; i < message.service.length; ++i)
                  $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(50).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(58).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(66).fork()).ldelim();
              if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(74).fork()).ldelim();
              if (message.publicDependency != null && message.publicDependency.length)
                for (var i = 0; i < message.publicDependency.length; ++i)
                  writer.uint32(80).int32(message.publicDependency[i]);
              if (message.weakDependency != null && message.weakDependency.length)
                for (var i = 0; i < message.weakDependency.length; ++i)
                  writer.uint32(88).int32(message.weakDependency[i]);
              if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                writer.uint32(98).string(message.syntax);
              return writer;
            };
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message["package"] = reader.string();
                    break;
                  case 3:
                    if (!(message.dependency && message.dependency.length))
                      message.dependency = [];
                    message.dependency.push(reader.string());
                    break;
                  case 10:
                    if (!(message.publicDependency && message.publicDependency.length))
                      message.publicDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.publicDependency.push(reader.int32());
                    } else
                      message.publicDependency.push(reader.int32());
                    break;
                  case 11:
                    if (!(message.weakDependency && message.weakDependency.length))
                      message.weakDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.weakDependency.push(reader.int32());
                    } else
                      message.weakDependency.push(reader.int32());
                    break;
                  case 4:
                    if (!(message.messageType && message.messageType.length))
                      message.messageType = [];
                    message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 5:
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 6:
                    if (!(message.service && message.service.length))
                      message.service = [];
                    message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 7:
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 8:
                    message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                    break;
                  case 9:
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                    break;
                  case 12:
                    message.syntax = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message["package"] != null && message.hasOwnProperty("package")) {
                if (!$util.isString(message["package"]))
                  return "package: string expected";
              }
              if (message.dependency != null && message.hasOwnProperty("dependency")) {
                if (!Array.isArray(message.dependency))
                  return "dependency: array expected";
                for (var i = 0; i < message.dependency.length; ++i)
                  if (!$util.isString(message.dependency[i]))
                    return "dependency: string[] expected";
              }
              if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                if (!Array.isArray(message.publicDependency))
                  return "publicDependency: array expected";
                for (var i = 0; i < message.publicDependency.length; ++i)
                  if (!$util.isInteger(message.publicDependency[i]))
                    return "publicDependency: integer[] expected";
              }
              if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                if (!Array.isArray(message.weakDependency))
                  return "weakDependency: array expected";
                for (var i = 0; i < message.weakDependency.length; ++i)
                  if (!$util.isInteger(message.weakDependency[i]))
                    return "weakDependency: integer[] expected";
              }
              if (message.messageType != null && message.hasOwnProperty("messageType")) {
                if (!Array.isArray(message.messageType))
                  return "messageType: array expected";
                for (var i = 0; i < message.messageType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                  if (error)
                    return "messageType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.service != null && message.hasOwnProperty("service")) {
                if (!Array.isArray(message.service))
                  return "service: array expected";
                for (var i = 0; i < message.service.length; ++i) {
                  var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                  if (error)
                    return "service." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FileOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                if (error)
                  return "sourceCodeInfo." + error;
              }
              if (message.syntax != null && message.hasOwnProperty("syntax")) {
                if (!$util.isString(message.syntax))
                  return "syntax: string expected";
              }
              return null;
            };
            FileDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FileDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object["package"] != null)
                message["package"] = String(object["package"]);
              if (object.dependency) {
                if (!Array.isArray(object.dependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                message.dependency = [];
                for (var i = 0; i < object.dependency.length; ++i)
                  message.dependency[i] = String(object.dependency[i]);
              }
              if (object.publicDependency) {
                if (!Array.isArray(object.publicDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                message.publicDependency = [];
                for (var i = 0; i < object.publicDependency.length; ++i)
                  message.publicDependency[i] = object.publicDependency[i] | 0;
              }
              if (object.weakDependency) {
                if (!Array.isArray(object.weakDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                message.weakDependency = [];
                for (var i = 0; i < object.weakDependency.length; ++i)
                  message.weakDependency[i] = object.weakDependency[i] | 0;
              }
              if (object.messageType) {
                if (!Array.isArray(object.messageType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                message.messageType = [];
                for (var i = 0; i < object.messageType.length; ++i) {
                  if (typeof object.messageType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                  message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.service) {
                if (!Array.isArray(object.service))
                  throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                message.service = [];
                for (var i = 0; i < object.service.length; ++i) {
                  if (typeof object.service[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                  message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
              }
              if (object.sourceCodeInfo != null) {
                if (typeof object.sourceCodeInfo !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
              }
              if (object.syntax != null)
                message.syntax = String(object.syntax);
              return message;
            };
            FileDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.dependency = [];
                object.messageType = [];
                object.enumType = [];
                object.service = [];
                object.extension = [];
                object.publicDependency = [];
                object.weakDependency = [];
              }
              if (options.defaults) {
                object.name = "";
                object["package"] = "";
                object.options = null;
                object.sourceCodeInfo = null;
                object.syntax = "";
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message["package"] != null && message.hasOwnProperty("package"))
                object["package"] = message["package"];
              if (message.dependency && message.dependency.length) {
                object.dependency = [];
                for (var j = 0; j < message.dependency.length; ++j)
                  object.dependency[j] = message.dependency[j];
              }
              if (message.messageType && message.messageType.length) {
                object.messageType = [];
                for (var j = 0; j < message.messageType.length; ++j)
                  object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.service && message.service.length) {
                object.service = [];
                for (var j = 0; j < message.service.length; ++j)
                  object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
              if (message.publicDependency && message.publicDependency.length) {
                object.publicDependency = [];
                for (var j = 0; j < message.publicDependency.length; ++j)
                  object.publicDependency[j] = message.publicDependency[j];
              }
              if (message.weakDependency && message.weakDependency.length) {
                object.weakDependency = [];
                for (var j = 0; j < message.weakDependency.length; ++j)
                  object.weakDependency[j] = message.weakDependency[j];
              }
              if (message.syntax != null && message.hasOwnProperty("syntax"))
                object.syntax = message.syntax;
              return object;
            };
            FileDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return FileDescriptorProto;
          }();
          protobuf.DescriptorProto = function() {
            function DescriptorProto(properties) {
              this.field = [];
              this.extension = [];
              this.nestedType = [];
              this.enumType = [];
              this.extensionRange = [];
              this.oneofDecl = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DescriptorProto.prototype.name = "";
            DescriptorProto.prototype.field = $util.emptyArray;
            DescriptorProto.prototype.extension = $util.emptyArray;
            DescriptorProto.prototype.nestedType = $util.emptyArray;
            DescriptorProto.prototype.enumType = $util.emptyArray;
            DescriptorProto.prototype.extensionRange = $util.emptyArray;
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;
            DescriptorProto.prototype.options = null;
            DescriptorProto.prototype.reservedRange = $util.emptyArray;
            DescriptorProto.prototype.reservedName = $util.emptyArray;
            DescriptorProto.create = function create(properties) {
              return new DescriptorProto(properties);
            };
            DescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.field != null && message.field.length)
                for (var i = 0; i < message.field.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(18).fork()).ldelim();
              if (message.nestedType != null && message.nestedType.length)
                for (var i = 0; i < message.nestedType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(26).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(34).fork()).ldelim();
              if (message.extensionRange != null && message.extensionRange.length)
                for (var i = 0; i < message.extensionRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(42).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(50).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(58).fork()).ldelim();
              if (message.oneofDecl != null && message.oneofDecl.length)
                for (var i = 0; i < message.oneofDecl.length; ++i)
                  $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(66).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(74).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(82).string(message.reservedName[i]);
              return writer;
            };
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    if (!(message.field && message.field.length))
                      message.field = [];
                    message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 6:
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    if (!(message.nestedType && message.nestedType.length))
                      message.nestedType = [];
                    message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 4:
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 5:
                    if (!(message.extensionRange && message.extensionRange.length))
                      message.extensionRange = [];
                    message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                    break;
                  case 8:
                    if (!(message.oneofDecl && message.oneofDecl.length))
                      message.oneofDecl = [];
                    message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 7:
                    message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                    break;
                  case 9:
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                    break;
                  case 10:
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.field != null && message.hasOwnProperty("field")) {
                if (!Array.isArray(message.field))
                  return "field: array expected";
                for (var i = 0; i < message.field.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                  if (error)
                    return "field." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                if (!Array.isArray(message.nestedType))
                  return "nestedType: array expected";
                for (var i = 0; i < message.nestedType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                  if (error)
                    return "nestedType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                if (!Array.isArray(message.extensionRange))
                  return "extensionRange: array expected";
                for (var i = 0; i < message.extensionRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                  if (error)
                    return "extensionRange." + error;
                }
              }
              if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                if (!Array.isArray(message.oneofDecl))
                  return "oneofDecl: array expected";
                for (var i = 0; i < message.oneofDecl.length; ++i) {
                  var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                  if (error)
                    return "oneofDecl." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MessageOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            DescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.DescriptorProto)
                return object;
              var message = new $root.google.protobuf.DescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.field) {
                if (!Array.isArray(object.field))
                  throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                message.field = [];
                for (var i = 0; i < object.field.length; ++i) {
                  if (typeof object.field[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                  message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.nestedType) {
                if (!Array.isArray(object.nestedType))
                  throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                message.nestedType = [];
                for (var i = 0; i < object.nestedType.length; ++i) {
                  if (typeof object.nestedType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                  message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.extensionRange) {
                if (!Array.isArray(object.extensionRange))
                  throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                message.extensionRange = [];
                for (var i = 0; i < object.extensionRange.length; ++i) {
                  if (typeof object.extensionRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                  message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                }
              }
              if (object.oneofDecl) {
                if (!Array.isArray(object.oneofDecl))
                  throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                message.oneofDecl = [];
                for (var i = 0; i < object.oneofDecl.length; ++i) {
                  if (typeof object.oneofDecl[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                  message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            DescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.field = [];
                object.nestedType = [];
                object.enumType = [];
                object.extensionRange = [];
                object.extension = [];
                object.oneofDecl = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.field && message.field.length) {
                object.field = [];
                for (var j = 0; j < message.field.length; ++j)
                  object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
              }
              if (message.nestedType && message.nestedType.length) {
                object.nestedType = [];
                for (var j = 0; j < message.nestedType.length; ++j)
                  object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.extensionRange && message.extensionRange.length) {
                object.extensionRange = [];
                for (var j = 0; j < message.extensionRange.length; ++j)
                  object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
              if (message.oneofDecl && message.oneofDecl.length) {
                object.oneofDecl = [];
                for (var j = 0; j < message.oneofDecl.length; ++j)
                  object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
              }
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            DescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DescriptorProto.ExtensionRange = function() {
              function ExtensionRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ExtensionRange.prototype.start = 0;
              ExtensionRange.prototype.end = 0;
              ExtensionRange.prototype.options = null;
              ExtensionRange.create = function create(properties) {
                return new ExtensionRange(properties);
              };
              ExtensionRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(8).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(16).int32(message.end);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                  $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
                return writer;
              };
              ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ExtensionRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.start = reader.int32();
                      break;
                    case 2:
                      message.end = reader.int32();
                      break;
                    case 3:
                      message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ExtensionRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                  var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                  if (error)
                    return "options." + error;
                }
                return null;
              };
              ExtensionRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                if (object.options != null) {
                  if (typeof object.options !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                  message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                }
                return message;
              };
              ExtensionRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                  object.options = null;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                if (message.options != null && message.hasOwnProperty("options"))
                  object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                return object;
              };
              ExtensionRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return ExtensionRange;
            }();
            DescriptorProto.ReservedRange = function() {
              function ReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ReservedRange.prototype.start = 0;
              ReservedRange.prototype.end = 0;
              ReservedRange.create = function create(properties) {
                return new ReservedRange(properties);
              };
              ReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(8).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(16).int32(message.end);
                return writer;
              };
              ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.start = reader.int32();
                      break;
                    case 2:
                      message.end = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              ReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              ReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              ReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return ReservedRange;
            }();
            return DescriptorProto;
          }();
          protobuf.ExtensionRangeOptions = function() {
            function ExtensionRangeOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
            ExtensionRangeOptions.create = function create(properties) {
              return new ExtensionRangeOptions(properties);
            };
            ExtensionRangeOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ExtensionRangeOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ExtensionRangeOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            ExtensionRangeOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                return object;
              var message = new $root.google.protobuf.ExtensionRangeOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            ExtensionRangeOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ExtensionRangeOptions;
          }();
          protobuf.FieldDescriptorProto = function() {
            function FieldDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldDescriptorProto.prototype.name = "";
            FieldDescriptorProto.prototype.number = 0;
            FieldDescriptorProto.prototype.label = 1;
            FieldDescriptorProto.prototype.type = 1;
            FieldDescriptorProto.prototype.typeName = "";
            FieldDescriptorProto.prototype.extendee = "";
            FieldDescriptorProto.prototype.defaultValue = "";
            FieldDescriptorProto.prototype.oneofIndex = 0;
            FieldDescriptorProto.prototype.jsonName = "";
            FieldDescriptorProto.prototype.options = null;
            FieldDescriptorProto.prototype.proto3Optional = false;
            FieldDescriptorProto.create = function create(properties) {
              return new FieldDescriptorProto(properties);
            };
            FieldDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                writer.uint32(18).string(message.extendee);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(24).int32(message.number);
              if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                writer.uint32(32).int32(message.label);
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(40).int32(message.type);
              if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                writer.uint32(50).string(message.typeName);
              if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                writer.uint32(58).string(message.defaultValue);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(66).fork()).ldelim();
              if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                writer.uint32(72).int32(message.oneofIndex);
              if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                writer.uint32(82).string(message.jsonName);
              if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                writer.uint32(136).bool(message.proto3Optional);
              return writer;
            };
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 3:
                    message.number = reader.int32();
                    break;
                  case 4:
                    message.label = reader.int32();
                    break;
                  case 5:
                    message.type = reader.int32();
                    break;
                  case 6:
                    message.typeName = reader.string();
                    break;
                  case 2:
                    message.extendee = reader.string();
                    break;
                  case 7:
                    message.defaultValue = reader.string();
                    break;
                  case 9:
                    message.oneofIndex = reader.int32();
                    break;
                  case 10:
                    message.jsonName = reader.string();
                    break;
                  case 8:
                    message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                    break;
                  case 17:
                    message.proto3Optional = reader.bool();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.label != null && message.hasOwnProperty("label"))
                switch (message.label) {
                  default:
                    return "label: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                  default:
                    return "type: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                    break;
                }
              if (message.typeName != null && message.hasOwnProperty("typeName")) {
                if (!$util.isString(message.typeName))
                  return "typeName: string expected";
              }
              if (message.extendee != null && message.hasOwnProperty("extendee")) {
                if (!$util.isString(message.extendee))
                  return "extendee: string expected";
              }
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue")) {
                if (!$util.isString(message.defaultValue))
                  return "defaultValue: string expected";
              }
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex")) {
                if (!$util.isInteger(message.oneofIndex))
                  return "oneofIndex: integer expected";
              }
              if (message.jsonName != null && message.hasOwnProperty("jsonName")) {
                if (!$util.isString(message.jsonName))
                  return "jsonName: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FieldOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional")) {
                if (typeof message.proto3Optional !== "boolean")
                  return "proto3Optional: boolean expected";
              }
              return null;
            };
            FieldDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FieldDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                  message.label = 1;
                  break;
                case "LABEL_REQUIRED":
                case 2:
                  message.label = 2;
                  break;
                case "LABEL_REPEATED":
                case 3:
                  message.label = 3;
                  break;
              }
              switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                  message.type = 1;
                  break;
                case "TYPE_FLOAT":
                case 2:
                  message.type = 2;
                  break;
                case "TYPE_INT64":
                case 3:
                  message.type = 3;
                  break;
                case "TYPE_UINT64":
                case 4:
                  message.type = 4;
                  break;
                case "TYPE_INT32":
                case 5:
                  message.type = 5;
                  break;
                case "TYPE_FIXED64":
                case 6:
                  message.type = 6;
                  break;
                case "TYPE_FIXED32":
                case 7:
                  message.type = 7;
                  break;
                case "TYPE_BOOL":
                case 8:
                  message.type = 8;
                  break;
                case "TYPE_STRING":
                case 9:
                  message.type = 9;
                  break;
                case "TYPE_GROUP":
                case 10:
                  message.type = 10;
                  break;
                case "TYPE_MESSAGE":
                case 11:
                  message.type = 11;
                  break;
                case "TYPE_BYTES":
                case 12:
                  message.type = 12;
                  break;
                case "TYPE_UINT32":
                case 13:
                  message.type = 13;
                  break;
                case "TYPE_ENUM":
                case 14:
                  message.type = 14;
                  break;
                case "TYPE_SFIXED32":
                case 15:
                  message.type = 15;
                  break;
                case "TYPE_SFIXED64":
                case 16:
                  message.type = 16;
                  break;
                case "TYPE_SINT32":
                case 17:
                  message.type = 17;
                  break;
                case "TYPE_SINT64":
                case 18:
                  message.type = 18;
                  break;
              }
              if (object.typeName != null)
                message.typeName = String(object.typeName);
              if (object.extendee != null)
                message.extendee = String(object.extendee);
              if (object.defaultValue != null)
                message.defaultValue = String(object.defaultValue);
              if (object.oneofIndex != null)
                message.oneofIndex = object.oneofIndex | 0;
              if (object.jsonName != null)
                message.jsonName = String(object.jsonName);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
              }
              if (object.proto3Optional != null)
                message.proto3Optional = Boolean(object.proto3Optional);
              return message;
            };
            FieldDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.extendee = "";
                object.number = 0;
                object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                object.typeName = "";
                object.defaultValue = "";
                object.options = null;
                object.oneofIndex = 0;
                object.jsonName = "";
                object.proto3Optional = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.extendee != null && message.hasOwnProperty("extendee"))
                object.extendee = message.extendee;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.label != null && message.hasOwnProperty("label"))
                object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
              if (message.typeName != null && message.hasOwnProperty("typeName"))
                object.typeName = message.typeName;
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                object.defaultValue = message.defaultValue;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                object.oneofIndex = message.oneofIndex;
              if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                object.jsonName = message.jsonName;
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                object.proto3Optional = message.proto3Optional;
              return object;
            };
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldDescriptorProto.Type = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "TYPE_DOUBLE"] = 1;
              values[valuesById[2] = "TYPE_FLOAT"] = 2;
              values[valuesById[3] = "TYPE_INT64"] = 3;
              values[valuesById[4] = "TYPE_UINT64"] = 4;
              values[valuesById[5] = "TYPE_INT32"] = 5;
              values[valuesById[6] = "TYPE_FIXED64"] = 6;
              values[valuesById[7] = "TYPE_FIXED32"] = 7;
              values[valuesById[8] = "TYPE_BOOL"] = 8;
              values[valuesById[9] = "TYPE_STRING"] = 9;
              values[valuesById[10] = "TYPE_GROUP"] = 10;
              values[valuesById[11] = "TYPE_MESSAGE"] = 11;
              values[valuesById[12] = "TYPE_BYTES"] = 12;
              values[valuesById[13] = "TYPE_UINT32"] = 13;
              values[valuesById[14] = "TYPE_ENUM"] = 14;
              values[valuesById[15] = "TYPE_SFIXED32"] = 15;
              values[valuesById[16] = "TYPE_SFIXED64"] = 16;
              values[valuesById[17] = "TYPE_SINT32"] = 17;
              values[valuesById[18] = "TYPE_SINT64"] = 18;
              return values;
            }();
            FieldDescriptorProto.Label = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
              values[valuesById[2] = "LABEL_REQUIRED"] = 2;
              values[valuesById[3] = "LABEL_REPEATED"] = 3;
              return values;
            }();
            return FieldDescriptorProto;
          }();
          protobuf.OneofDescriptorProto = function() {
            function OneofDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofDescriptorProto.prototype.name = "";
            OneofDescriptorProto.prototype.options = null;
            OneofDescriptorProto.create = function create(properties) {
              return new OneofDescriptorProto(properties);
            };
            OneofDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(18).fork()).ldelim();
              return writer;
            };
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.OneofOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            OneofDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                return object;
              var message = new $root.google.protobuf.OneofDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
              }
              return message;
            };
            OneofDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
              return object;
            };
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return OneofDescriptorProto;
          }();
          protobuf.EnumDescriptorProto = function() {
            function EnumDescriptorProto(properties) {
              this.value = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumDescriptorProto.prototype.name = "";
            EnumDescriptorProto.prototype.value = $util.emptyArray;
            EnumDescriptorProto.prototype.options = null;
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
            EnumDescriptorProto.create = function create(properties) {
              return new EnumDescriptorProto(properties);
            };
            EnumDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.value != null && message.value.length)
                for (var i = 0; i < message.value.length; ++i)
                  $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(18).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(34).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(42).string(message.reservedName[i]);
              return writer;
            };
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    if (!(message.value && message.value.length))
                      message.value = [];
                    message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                    break;
                  case 4:
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                    break;
                  case 5:
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.value != null && message.hasOwnProperty("value")) {
                if (!Array.isArray(message.value))
                  return "value: array expected";
                for (var i = 0; i < message.value.length; ++i) {
                  var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                  if (error)
                    return "value." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            EnumDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.value) {
                if (!Array.isArray(object.value))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                message.value = [];
                for (var i = 0; i < object.value.length; ++i) {
                  if (typeof object.value[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                  message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            EnumDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.value = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.value && message.value.length) {
                object.value = [];
                for (var j = 0; j < message.value.length; ++j)
                  object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumDescriptorProto.EnumReservedRange = function() {
              function EnumReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              EnumReservedRange.prototype.start = 0;
              EnumReservedRange.prototype.end = 0;
              EnumReservedRange.create = function create(properties) {
                return new EnumReservedRange(properties);
              };
              EnumReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(8).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(16).int32(message.end);
                return writer;
              };
              EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              EnumReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.start = reader.int32();
                      break;
                    case 2:
                      message.end = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              EnumReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              EnumReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                  return object;
                var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              EnumReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              EnumReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return EnumReservedRange;
            }();
            return EnumDescriptorProto;
          }();
          protobuf.EnumValueDescriptorProto = function() {
            function EnumValueDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueDescriptorProto.prototype.name = "";
            EnumValueDescriptorProto.prototype.number = 0;
            EnumValueDescriptorProto.prototype.options = null;
            EnumValueDescriptorProto.create = function create(properties) {
              return new EnumValueDescriptorProto(properties);
            };
            EnumValueDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(16).int32(message.number);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
              return writer;
            };
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.number = reader.int32();
                    break;
                  case 3:
                    message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumValueDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
              }
              return message;
            };
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.number = 0;
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
              return object;
            };
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return EnumValueDescriptorProto;
          }();
          protobuf.ServiceDescriptorProto = function() {
            function ServiceDescriptorProto(properties) {
              this.method = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceDescriptorProto.prototype.name = "";
            ServiceDescriptorProto.prototype.method = $util.emptyArray;
            ServiceDescriptorProto.prototype.options = null;
            ServiceDescriptorProto.create = function create(properties) {
              return new ServiceDescriptorProto(properties);
            };
            ServiceDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.method != null && message.method.length)
                for (var i = 0; i < message.method.length; ++i)
                  $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(18).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(26).fork()).ldelim();
              return writer;
            };
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    if (!(message.method && message.method.length))
                      message.method = [];
                    message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.method != null && message.hasOwnProperty("method")) {
                if (!Array.isArray(message.method))
                  return "method: array expected";
                for (var i = 0; i < message.method.length; ++i) {
                  var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                  if (error)
                    return "method." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            ServiceDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                return object;
              var message = new $root.google.protobuf.ServiceDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.method) {
                if (!Array.isArray(object.method))
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                message.method = [];
                for (var i = 0; i < object.method.length; ++i) {
                  if (typeof object.method[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                  message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
              }
              return message;
            };
            ServiceDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.method = [];
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.method && message.method.length) {
                object.method = [];
                for (var j = 0; j < message.method.length; ++j)
                  object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
              return object;
            };
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ServiceDescriptorProto;
          }();
          protobuf.MethodDescriptorProto = function() {
            function MethodDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodDescriptorProto.prototype.name = "";
            MethodDescriptorProto.prototype.inputType = "";
            MethodDescriptorProto.prototype.outputType = "";
            MethodDescriptorProto.prototype.options = null;
            MethodDescriptorProto.prototype.clientStreaming = false;
            MethodDescriptorProto.prototype.serverStreaming = false;
            MethodDescriptorProto.create = function create(properties) {
              return new MethodDescriptorProto(properties);
            };
            MethodDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(10).string(message.name);
              if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                writer.uint32(18).string(message.inputType);
              if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                writer.uint32(26).string(message.outputType);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(34).fork()).ldelim();
              if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                writer.uint32(40).bool(message.clientStreaming);
              if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                writer.uint32(48).bool(message.serverStreaming);
              return writer;
            };
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.name = reader.string();
                    break;
                  case 2:
                    message.inputType = reader.string();
                    break;
                  case 3:
                    message.outputType = reader.string();
                    break;
                  case 4:
                    message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                    break;
                  case 5:
                    message.clientStreaming = reader.bool();
                    break;
                  case 6:
                    message.serverStreaming = reader.bool();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.inputType != null && message.hasOwnProperty("inputType")) {
                if (!$util.isString(message.inputType))
                  return "inputType: string expected";
              }
              if (message.outputType != null && message.hasOwnProperty("outputType")) {
                if (!$util.isString(message.outputType))
                  return "outputType: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MethodOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming")) {
                if (typeof message.clientStreaming !== "boolean")
                  return "clientStreaming: boolean expected";
              }
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming")) {
                if (typeof message.serverStreaming !== "boolean")
                  return "serverStreaming: boolean expected";
              }
              return null;
            };
            MethodDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                return object;
              var message = new $root.google.protobuf.MethodDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.inputType != null)
                message.inputType = String(object.inputType);
              if (object.outputType != null)
                message.outputType = String(object.outputType);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
              }
              if (object.clientStreaming != null)
                message.clientStreaming = Boolean(object.clientStreaming);
              if (object.serverStreaming != null)
                message.serverStreaming = Boolean(object.serverStreaming);
              return message;
            };
            MethodDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.inputType = "";
                object.outputType = "";
                object.options = null;
                object.clientStreaming = false;
                object.serverStreaming = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.inputType != null && message.hasOwnProperty("inputType"))
                object.inputType = message.inputType;
              if (message.outputType != null && message.hasOwnProperty("outputType"))
                object.outputType = message.outputType;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                object.clientStreaming = message.clientStreaming;
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                object.serverStreaming = message.serverStreaming;
              return object;
            };
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return MethodDescriptorProto;
          }();
          protobuf.FileOptions = function() {
            function FileOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileOptions.prototype.javaPackage = "";
            FileOptions.prototype.javaOuterClassname = "";
            FileOptions.prototype.javaMultipleFiles = false;
            FileOptions.prototype.javaGenerateEqualsAndHash = false;
            FileOptions.prototype.javaStringCheckUtf8 = false;
            FileOptions.prototype.optimizeFor = 1;
            FileOptions.prototype.goPackage = "";
            FileOptions.prototype.ccGenericServices = false;
            FileOptions.prototype.javaGenericServices = false;
            FileOptions.prototype.pyGenericServices = false;
            FileOptions.prototype.phpGenericServices = false;
            FileOptions.prototype.deprecated = false;
            FileOptions.prototype.ccEnableArenas = true;
            FileOptions.prototype.objcClassPrefix = "";
            FileOptions.prototype.csharpNamespace = "";
            FileOptions.prototype.swiftPrefix = "";
            FileOptions.prototype.phpClassPrefix = "";
            FileOptions.prototype.phpNamespace = "";
            FileOptions.prototype.phpMetadataNamespace = "";
            FileOptions.prototype.rubyPackage = "";
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;
            FileOptions.create = function create(properties) {
              return new FileOptions(properties);
            };
            FileOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                writer.uint32(10).string(message.javaPackage);
              if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                writer.uint32(66).string(message.javaOuterClassname);
              if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                writer.uint32(72).int32(message.optimizeFor);
              if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                writer.uint32(80).bool(message.javaMultipleFiles);
              if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                writer.uint32(90).string(message.goPackage);
              if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                writer.uint32(128).bool(message.ccGenericServices);
              if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                writer.uint32(136).bool(message.javaGenericServices);
              if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                writer.uint32(144).bool(message.pyGenericServices);
              if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                writer.uint32(160).bool(message.javaGenerateEqualsAndHash);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(184).bool(message.deprecated);
              if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                writer.uint32(216).bool(message.javaStringCheckUtf8);
              if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                writer.uint32(248).bool(message.ccEnableArenas);
              if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                writer.uint32(290).string(message.objcClassPrefix);
              if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                writer.uint32(298).string(message.csharpNamespace);
              if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                writer.uint32(314).string(message.swiftPrefix);
              if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                writer.uint32(322).string(message.phpClassPrefix);
              if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                writer.uint32(330).string(message.phpNamespace);
              if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                writer.uint32(336).bool(message.phpGenericServices);
              if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                writer.uint32(354).string(message.phpMetadataNamespace);
              if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                writer.uint32(362).string(message.rubyPackage);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.javaPackage = reader.string();
                    break;
                  case 8:
                    message.javaOuterClassname = reader.string();
                    break;
                  case 10:
                    message.javaMultipleFiles = reader.bool();
                    break;
                  case 20:
                    message.javaGenerateEqualsAndHash = reader.bool();
                    break;
                  case 27:
                    message.javaStringCheckUtf8 = reader.bool();
                    break;
                  case 9:
                    message.optimizeFor = reader.int32();
                    break;
                  case 11:
                    message.goPackage = reader.string();
                    break;
                  case 16:
                    message.ccGenericServices = reader.bool();
                    break;
                  case 17:
                    message.javaGenericServices = reader.bool();
                    break;
                  case 18:
                    message.pyGenericServices = reader.bool();
                    break;
                  case 42:
                    message.phpGenericServices = reader.bool();
                    break;
                  case 23:
                    message.deprecated = reader.bool();
                    break;
                  case 31:
                    message.ccEnableArenas = reader.bool();
                    break;
                  case 36:
                    message.objcClassPrefix = reader.string();
                    break;
                  case 37:
                    message.csharpNamespace = reader.string();
                    break;
                  case 39:
                    message.swiftPrefix = reader.string();
                    break;
                  case 40:
                    message.phpClassPrefix = reader.string();
                    break;
                  case 41:
                    message.phpNamespace = reader.string();
                    break;
                  case 44:
                    message.phpMetadataNamespace = reader.string();
                    break;
                  case 45:
                    message.rubyPackage = reader.string();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage")) {
                if (!$util.isString(message.javaPackage))
                  return "javaPackage: string expected";
              }
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname")) {
                if (!$util.isString(message.javaOuterClassname))
                  return "javaOuterClassname: string expected";
              }
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles")) {
                if (typeof message.javaMultipleFiles !== "boolean")
                  return "javaMultipleFiles: boolean expected";
              }
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash")) {
                if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                  return "javaGenerateEqualsAndHash: boolean expected";
              }
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8")) {
                if (typeof message.javaStringCheckUtf8 !== "boolean")
                  return "javaStringCheckUtf8: boolean expected";
              }
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                switch (message.optimizeFor) {
                  default:
                    return "optimizeFor: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.goPackage != null && message.hasOwnProperty("goPackage")) {
                if (!$util.isString(message.goPackage))
                  return "goPackage: string expected";
              }
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices")) {
                if (typeof message.ccGenericServices !== "boolean")
                  return "ccGenericServices: boolean expected";
              }
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices")) {
                if (typeof message.javaGenericServices !== "boolean")
                  return "javaGenericServices: boolean expected";
              }
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices")) {
                if (typeof message.pyGenericServices !== "boolean")
                  return "pyGenericServices: boolean expected";
              }
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices")) {
                if (typeof message.phpGenericServices !== "boolean")
                  return "phpGenericServices: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas")) {
                if (typeof message.ccEnableArenas !== "boolean")
                  return "ccEnableArenas: boolean expected";
              }
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix")) {
                if (!$util.isString(message.objcClassPrefix))
                  return "objcClassPrefix: string expected";
              }
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace")) {
                if (!$util.isString(message.csharpNamespace))
                  return "csharpNamespace: string expected";
              }
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix")) {
                if (!$util.isString(message.swiftPrefix))
                  return "swiftPrefix: string expected";
              }
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix")) {
                if (!$util.isString(message.phpClassPrefix))
                  return "phpClassPrefix: string expected";
              }
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace")) {
                if (!$util.isString(message.phpNamespace))
                  return "phpNamespace: string expected";
              }
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace")) {
                if (!$util.isString(message.phpMetadataNamespace))
                  return "phpMetadataNamespace: string expected";
              }
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage")) {
                if (!$util.isString(message.rubyPackage))
                  return "rubyPackage: string expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            FileOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileOptions)
                return object;
              var message = new $root.google.protobuf.FileOptions();
              if (object.javaPackage != null)
                message.javaPackage = String(object.javaPackage);
              if (object.javaOuterClassname != null)
                message.javaOuterClassname = String(object.javaOuterClassname);
              if (object.javaMultipleFiles != null)
                message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
              if (object.javaGenerateEqualsAndHash != null)
                message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
              if (object.javaStringCheckUtf8 != null)
                message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
              switch (object.optimizeFor) {
                case "SPEED":
                case 1:
                  message.optimizeFor = 1;
                  break;
                case "CODE_SIZE":
                case 2:
                  message.optimizeFor = 2;
                  break;
                case "LITE_RUNTIME":
                case 3:
                  message.optimizeFor = 3;
                  break;
              }
              if (object.goPackage != null)
                message.goPackage = String(object.goPackage);
              if (object.ccGenericServices != null)
                message.ccGenericServices = Boolean(object.ccGenericServices);
              if (object.javaGenericServices != null)
                message.javaGenericServices = Boolean(object.javaGenericServices);
              if (object.pyGenericServices != null)
                message.pyGenericServices = Boolean(object.pyGenericServices);
              if (object.phpGenericServices != null)
                message.phpGenericServices = Boolean(object.phpGenericServices);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.ccEnableArenas != null)
                message.ccEnableArenas = Boolean(object.ccEnableArenas);
              if (object.objcClassPrefix != null)
                message.objcClassPrefix = String(object.objcClassPrefix);
              if (object.csharpNamespace != null)
                message.csharpNamespace = String(object.csharpNamespace);
              if (object.swiftPrefix != null)
                message.swiftPrefix = String(object.swiftPrefix);
              if (object.phpClassPrefix != null)
                message.phpClassPrefix = String(object.phpClassPrefix);
              if (object.phpNamespace != null)
                message.phpNamespace = String(object.phpNamespace);
              if (object.phpMetadataNamespace != null)
                message.phpMetadataNamespace = String(object.phpMetadataNamespace);
              if (object.rubyPackage != null)
                message.rubyPackage = String(object.rubyPackage);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            FileOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.javaPackage = "";
                object.javaOuterClassname = "";
                object.optimizeFor = options.enums === String ? "SPEED" : 1;
                object.javaMultipleFiles = false;
                object.goPackage = "";
                object.ccGenericServices = false;
                object.javaGenericServices = false;
                object.pyGenericServices = false;
                object.javaGenerateEqualsAndHash = false;
                object.deprecated = false;
                object.javaStringCheckUtf8 = false;
                object.ccEnableArenas = true;
                object.objcClassPrefix = "";
                object.csharpNamespace = "";
                object.swiftPrefix = "";
                object.phpClassPrefix = "";
                object.phpNamespace = "";
                object.phpGenericServices = false;
                object.phpMetadataNamespace = "";
                object.rubyPackage = "";
              }
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                object.javaPackage = message.javaPackage;
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                object.javaOuterClassname = message.javaOuterClassname;
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                object.javaMultipleFiles = message.javaMultipleFiles;
              if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                object.goPackage = message.goPackage;
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                object.ccGenericServices = message.ccGenericServices;
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                object.javaGenericServices = message.javaGenericServices;
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                object.pyGenericServices = message.pyGenericServices;
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                object.ccEnableArenas = message.ccEnableArenas;
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                object.objcClassPrefix = message.objcClassPrefix;
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                object.csharpNamespace = message.csharpNamespace;
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                object.swiftPrefix = message.swiftPrefix;
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                object.phpClassPrefix = message.phpClassPrefix;
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                object.phpNamespace = message.phpNamespace;
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                object.phpGenericServices = message.phpGenericServices;
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                object.phpMetadataNamespace = message.phpMetadataNamespace;
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                object.rubyPackage = message.rubyPackage;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            FileOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileOptions.OptimizeMode = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "SPEED"] = 1;
              values[valuesById[2] = "CODE_SIZE"] = 2;
              values[valuesById[3] = "LITE_RUNTIME"] = 3;
              return values;
            }();
            return FileOptions;
          }();
          protobuf.MessageOptions = function() {
            function MessageOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MessageOptions.prototype.messageSetWireFormat = false;
            MessageOptions.prototype.noStandardDescriptorAccessor = false;
            MessageOptions.prototype.deprecated = false;
            MessageOptions.prototype.mapEntry = false;
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
            MessageOptions.create = function create(properties) {
              return new MessageOptions(properties);
            };
            MessageOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                writer.uint32(8).bool(message.messageSetWireFormat);
              if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                writer.uint32(16).bool(message.noStandardDescriptorAccessor);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(24).bool(message.deprecated);
              if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                writer.uint32(56).bool(message.mapEntry);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MessageOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.messageSetWireFormat = reader.bool();
                    break;
                  case 2:
                    message.noStandardDescriptorAccessor = reader.bool();
                    break;
                  case 3:
                    message.deprecated = reader.bool();
                    break;
                  case 7:
                    message.mapEntry = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MessageOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat")) {
                if (typeof message.messageSetWireFormat !== "boolean")
                  return "messageSetWireFormat: boolean expected";
              }
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor")) {
                if (typeof message.noStandardDescriptorAccessor !== "boolean")
                  return "noStandardDescriptorAccessor: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry")) {
                if (typeof message.mapEntry !== "boolean")
                  return "mapEntry: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            MessageOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MessageOptions)
                return object;
              var message = new $root.google.protobuf.MessageOptions();
              if (object.messageSetWireFormat != null)
                message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
              if (object.noStandardDescriptorAccessor != null)
                message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.mapEntry != null)
                message.mapEntry = Boolean(object.mapEntry);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            MessageOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.messageSetWireFormat = false;
                object.noStandardDescriptorAccessor = false;
                object.deprecated = false;
                object.mapEntry = false;
              }
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                object.messageSetWireFormat = message.messageSetWireFormat;
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                object.mapEntry = message.mapEntry;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            MessageOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return MessageOptions;
          }();
          protobuf.FieldOptions = function() {
            function FieldOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldOptions.prototype.ctype = 0;
            FieldOptions.prototype.packed = false;
            FieldOptions.prototype.jstype = 0;
            FieldOptions.prototype.lazy = false;
            FieldOptions.prototype.deprecated = false;
            FieldOptions.prototype.weak = false;
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
            FieldOptions.create = function create(properties) {
              return new FieldOptions(properties);
            };
            FieldOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                writer.uint32(8).int32(message.ctype);
              if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                writer.uint32(16).bool(message.packed);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(24).bool(message.deprecated);
              if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                writer.uint32(40).bool(message.lazy);
              if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                writer.uint32(48).int32(message.jstype);
              if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                writer.uint32(80).bool(message.weak);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.ctype = reader.int32();
                    break;
                  case 2:
                    message.packed = reader.bool();
                    break;
                  case 6:
                    message.jstype = reader.int32();
                    break;
                  case 5:
                    message.lazy = reader.bool();
                    break;
                  case 3:
                    message.deprecated = reader.bool();
                    break;
                  case 10:
                    message.weak = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                switch (message.ctype) {
                  default:
                    return "ctype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.packed != null && message.hasOwnProperty("packed")) {
                if (typeof message.packed !== "boolean")
                  return "packed: boolean expected";
              }
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                switch (message.jstype) {
                  default:
                    return "jstype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.lazy != null && message.hasOwnProperty("lazy")) {
                if (typeof message.lazy !== "boolean")
                  return "lazy: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.weak != null && message.hasOwnProperty("weak")) {
                if (typeof message.weak !== "boolean")
                  return "weak: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            FieldOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldOptions)
                return object;
              var message = new $root.google.protobuf.FieldOptions();
              switch (object.ctype) {
                case "STRING":
                case 0:
                  message.ctype = 0;
                  break;
                case "CORD":
                case 1:
                  message.ctype = 1;
                  break;
                case "STRING_PIECE":
                case 2:
                  message.ctype = 2;
                  break;
              }
              if (object.packed != null)
                message.packed = Boolean(object.packed);
              switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                  message.jstype = 0;
                  break;
                case "JS_STRING":
                case 1:
                  message.jstype = 1;
                  break;
                case "JS_NUMBER":
                case 2:
                  message.jstype = 2;
                  break;
              }
              if (object.lazy != null)
                message.lazy = Boolean(object.lazy);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.weak != null)
                message.weak = Boolean(object.weak);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            FieldOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.ctype = options.enums === String ? "STRING" : 0;
                object.packed = false;
                object.deprecated = false;
                object.lazy = false;
                object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                object.weak = false;
              }
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
              if (message.packed != null && message.hasOwnProperty("packed"))
                object.packed = message.packed;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.lazy != null && message.hasOwnProperty("lazy"))
                object.lazy = message.lazy;
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
              if (message.weak != null && message.hasOwnProperty("weak"))
                object.weak = message.weak;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            FieldOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldOptions.CType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "STRING"] = 0;
              values[valuesById[1] = "CORD"] = 1;
              values[valuesById[2] = "STRING_PIECE"] = 2;
              return values;
            }();
            FieldOptions.JSType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "JS_NORMAL"] = 0;
              values[valuesById[1] = "JS_STRING"] = 1;
              values[valuesById[2] = "JS_NUMBER"] = 2;
              return values;
            }();
            return FieldOptions;
          }();
          protobuf.OneofOptions = function() {
            function OneofOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
            OneofOptions.create = function create(properties) {
              return new OneofOptions(properties);
            };
            OneofOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            OneofOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofOptions)
                return object;
              var message = new $root.google.protobuf.OneofOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            OneofOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            OneofOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return OneofOptions;
          }();
          protobuf.EnumOptions = function() {
            function EnumOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumOptions.prototype.allowAlias = false;
            EnumOptions.prototype.deprecated = false;
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumOptions.create = function create(properties) {
              return new EnumOptions(properties);
            };
            EnumOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                writer.uint32(16).bool(message.allowAlias);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(24).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2:
                    message.allowAlias = reader.bool();
                    break;
                  case 3:
                    message.deprecated = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias")) {
                if (typeof message.allowAlias !== "boolean")
                  return "allowAlias: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumOptions)
                return object;
              var message = new $root.google.protobuf.EnumOptions();
              if (object.allowAlias != null)
                message.allowAlias = Boolean(object.allowAlias);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.allowAlias = false;
                object.deprecated = false;
              }
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                object.allowAlias = message.allowAlias;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return EnumOptions;
          }();
          protobuf.EnumValueOptions = function() {
            function EnumValueOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueOptions.prototype.deprecated = false;
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumValueOptions.create = function create(properties) {
              return new EnumValueOptions(properties);
            };
            EnumValueOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(8).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              return writer;
            };
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.deprecated = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumValueOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueOptions)
                return object;
              var message = new $root.google.protobuf.EnumValueOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumValueOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults)
                object.deprecated = false;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumValueOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return EnumValueOptions;
          }();
          protobuf.ServiceOptions = function() {
            function ServiceOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceOptions.prototype.deprecated = false;
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
            ServiceOptions.prototype[".google.api.defaultHost"] = "";
            ServiceOptions.prototype[".google.api.oauthScopes"] = "";
            ServiceOptions.create = function create(properties) {
              return new ServiceOptions(properties);
            };
            ServiceOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(264).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                writer.uint32(8394).string(message[".google.api.defaultHost"]);
              if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                writer.uint32(8402).string(message[".google.api.oauthScopes"]);
              return writer;
            };
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33:
                    message.deprecated = reader.bool();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  case 1049:
                    message[".google.api.defaultHost"] = reader.string();
                    break;
                  case 1050:
                    message[".google.api.oauthScopes"] = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost")) {
                if (!$util.isString(message[".google.api.defaultHost"]))
                  return ".google.api.defaultHost: string expected";
              }
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes")) {
                if (!$util.isString(message[".google.api.oauthScopes"]))
                  return ".google.api.oauthScopes: string expected";
              }
              return null;
            };
            ServiceOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceOptions)
                return object;
              var message = new $root.google.protobuf.ServiceOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.defaultHost"] != null)
                message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
              if (object[".google.api.oauthScopes"] != null)
                message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
              return message;
            };
            ServiceOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.deprecated = false;
                object[".google.api.defaultHost"] = "";
                object[".google.api.oauthScopes"] = "";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
              return object;
            };
            ServiceOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return ServiceOptions;
          }();
          protobuf.MethodOptions = function() {
            function MethodOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.methodSignature"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodOptions.prototype.deprecated = false;
            MethodOptions.prototype.idempotencyLevel = 0;
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
            MethodOptions.prototype[".google.api.http"] = null;
            MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
            MethodOptions.create = function create(properties) {
              return new MethodOptions(properties);
            };
            MethodOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(264).bool(message.deprecated);
              if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                writer.uint32(272).int32(message.idempotencyLevel);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(7994).fork()).ldelim();
              if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  writer.uint32(8410).string(message[".google.api.methodSignature"][i]);
              if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(578365826).fork()).ldelim();
              return writer;
            };
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33:
                    message.deprecated = reader.bool();
                    break;
                  case 34:
                    message.idempotencyLevel = reader.int32();
                    break;
                  case 999:
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  case 72295728:
                    message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                    break;
                  case 1051:
                    if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                      message[".google.api.methodSignature"] = [];
                    message[".google.api.methodSignature"].push(reader.string());
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                switch (message.idempotencyLevel) {
                  default:
                    return "idempotencyLevel: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                if (error)
                  return ".google.api.http." + error;
              }
              if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                if (!Array.isArray(message[".google.api.methodSignature"]))
                  return ".google.api.methodSignature: array expected";
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  if (!$util.isString(message[".google.api.methodSignature"][i]))
                    return ".google.api.methodSignature: string[] expected";
              }
              return null;
            };
            MethodOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodOptions)
                return object;
              var message = new $root.google.protobuf.MethodOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              switch (object.idempotencyLevel) {
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                  message.idempotencyLevel = 0;
                  break;
                case "NO_SIDE_EFFECTS":
                case 1:
                  message.idempotencyLevel = 1;
                  break;
                case "IDEMPOTENT":
                case 2:
                  message.idempotencyLevel = 2;
                  break;
              }
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.http"] != null) {
                if (typeof object[".google.api.http"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
              }
              if (object[".google.api.methodSignature"]) {
                if (!Array.isArray(object[".google.api.methodSignature"]))
                  throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                message[".google.api.methodSignature"] = [];
                for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                  message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
              }
              return message;
            };
            MethodOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.methodSignature"] = [];
              }
              if (options.defaults) {
                object.deprecated = false;
                object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                object[".google.api.http"] = null;
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                object[".google.api.methodSignature"] = [];
                for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                  object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
              return object;
            };
            MethodOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodOptions.IdempotencyLevel = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
              values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
              values[valuesById[2] = "IDEMPOTENT"] = 2;
              return values;
            }();
            return MethodOptions;
          }();
          protobuf.UninterpretedOption = function() {
            function UninterpretedOption(properties) {
              this.name = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            UninterpretedOption.prototype.name = $util.emptyArray;
            UninterpretedOption.prototype.identifierValue = "";
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            UninterpretedOption.prototype.doubleValue = 0;
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
            UninterpretedOption.prototype.aggregateValue = "";
            UninterpretedOption.create = function create(properties) {
              return new UninterpretedOption(properties);
            };
            UninterpretedOption.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && message.name.length)
                for (var i = 0; i < message.name.length; ++i)
                  $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(18).fork()).ldelim();
              if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                writer.uint32(26).string(message.identifierValue);
              if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                writer.uint32(32).uint64(message.positiveIntValue);
              if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                writer.uint32(40).int64(message.negativeIntValue);
              if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                writer.uint32(49).double(message.doubleValue);
              if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                writer.uint32(58).bytes(message.stringValue);
              if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                writer.uint32(66).string(message.aggregateValue);
              return writer;
            };
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            UninterpretedOption.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2:
                    if (!(message.name && message.name.length))
                      message.name = [];
                    message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                    break;
                  case 3:
                    message.identifierValue = reader.string();
                    break;
                  case 4:
                    message.positiveIntValue = reader.uint64();
                    break;
                  case 5:
                    message.negativeIntValue = reader.int64();
                    break;
                  case 6:
                    message.doubleValue = reader.double();
                    break;
                  case 7:
                    message.stringValue = reader.bytes();
                    break;
                  case 8:
                    message.aggregateValue = reader.string();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            UninterpretedOption.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!Array.isArray(message.name))
                  return "name: array expected";
                for (var i = 0; i < message.name.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                  if (error)
                    return "name." + error;
                }
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue")) {
                if (!$util.isString(message.identifierValue))
                  return "identifierValue: string expected";
              }
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue")) {
                if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                  return "positiveIntValue: integer|Long expected";
              }
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue")) {
                if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                  return "negativeIntValue: integer|Long expected";
              }
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                if (typeof message.doubleValue !== "number")
                  return "doubleValue: number expected";
              }
              if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                  return "stringValue: buffer expected";
              }
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue")) {
                if (!$util.isString(message.aggregateValue))
                  return "aggregateValue: string expected";
              }
              return null;
            };
            UninterpretedOption.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.UninterpretedOption)
                return object;
              var message = new $root.google.protobuf.UninterpretedOption();
              if (object.name) {
                if (!Array.isArray(object.name))
                  throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                message.name = [];
                for (var i = 0; i < object.name.length; ++i) {
                  if (typeof object.name[i] !== "object")
                    throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                  message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                }
              }
              if (object.identifierValue != null)
                message.identifierValue = String(object.identifierValue);
              if (object.positiveIntValue != null) {
                if ($util.Long)
                  (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                else if (typeof object.positiveIntValue === "string")
                  message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                else if (typeof object.positiveIntValue === "number")
                  message.positiveIntValue = object.positiveIntValue;
                else if (typeof object.positiveIntValue === "object")
                  message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
              }
              if (object.negativeIntValue != null) {
                if ($util.Long)
                  (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                else if (typeof object.negativeIntValue === "string")
                  message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                else if (typeof object.negativeIntValue === "number")
                  message.negativeIntValue = object.negativeIntValue;
                else if (typeof object.negativeIntValue === "object")
                  message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
              }
              if (object.doubleValue != null)
                message.doubleValue = Number(object.doubleValue);
              if (object.stringValue != null) {
                if (typeof object.stringValue === "string")
                  $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                else if (object.stringValue.length)
                  message.stringValue = object.stringValue;
              }
              if (object.aggregateValue != null)
                message.aggregateValue = String(object.aggregateValue);
              return message;
            };
            UninterpretedOption.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.name = [];
              if (options.defaults) {
                object.identifierValue = "";
                if ($util.Long) {
                  var long = new $util.Long(0, 0, true);
                  object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.positiveIntValue = options.longs === String ? "0" : 0;
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.negativeIntValue = options.longs === String ? "0" : 0;
                object.doubleValue = 0;
                if (options.bytes === String)
                  object.stringValue = "";
                else {
                  object.stringValue = [];
                  if (options.bytes !== Array)
                    object.stringValue = $util.newBuffer(object.stringValue);
                }
                object.aggregateValue = "";
              }
              if (message.name && message.name.length) {
                object.name = [];
                for (var j = 0; j < message.name.length; ++j)
                  object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                object.identifierValue = message.identifierValue;
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                if (typeof message.positiveIntValue === "number")
                  object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                else
                  object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                if (typeof message.negativeIntValue === "number")
                  object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                else
                  object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
              if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                object.aggregateValue = message.aggregateValue;
              return object;
            };
            UninterpretedOption.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            UninterpretedOption.NamePart = function() {
              function NamePart(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              NamePart.prototype.namePart = "";
              NamePart.prototype.isExtension = false;
              NamePart.create = function create(properties) {
                return new NamePart(properties);
              };
              NamePart.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                writer.uint32(10).string(message.namePart);
                writer.uint32(16).bool(message.isExtension);
                return writer;
              };
              NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              NamePart.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      message.namePart = reader.string();
                      break;
                    case 2:
                      message.isExtension = reader.bool();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                if (!message.hasOwnProperty("namePart"))
                  throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                if (!message.hasOwnProperty("isExtension"))
                  throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                return message;
              };
              NamePart.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              NamePart.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (!$util.isString(message.namePart))
                  return "namePart: string expected";
                if (typeof message.isExtension !== "boolean")
                  return "isExtension: boolean expected";
                return null;
              };
              NamePart.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                  return object;
                var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                if (object.namePart != null)
                  message.namePart = String(object.namePart);
                if (object.isExtension != null)
                  message.isExtension = Boolean(object.isExtension);
                return message;
              };
              NamePart.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.namePart = "";
                  object.isExtension = false;
                }
                if (message.namePart != null && message.hasOwnProperty("namePart"))
                  object.namePart = message.namePart;
                if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                  object.isExtension = message.isExtension;
                return object;
              };
              NamePart.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return NamePart;
            }();
            return UninterpretedOption;
          }();
          protobuf.SourceCodeInfo = function() {
            function SourceCodeInfo(properties) {
              this.location = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            SourceCodeInfo.prototype.location = $util.emptyArray;
            SourceCodeInfo.create = function create(properties) {
              return new SourceCodeInfo(properties);
            };
            SourceCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.location != null && message.location.length)
                for (var i = 0; i < message.location.length; ++i)
                  $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            SourceCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.location && message.location.length))
                      message.location = [];
                    message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            SourceCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.location != null && message.hasOwnProperty("location")) {
                if (!Array.isArray(message.location))
                  return "location: array expected";
                for (var i = 0; i < message.location.length; ++i) {
                  var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                  if (error)
                    return "location." + error;
                }
              }
              return null;
            };
            SourceCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.SourceCodeInfo)
                return object;
              var message = new $root.google.protobuf.SourceCodeInfo();
              if (object.location) {
                if (!Array.isArray(object.location))
                  throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                message.location = [];
                for (var i = 0; i < object.location.length; ++i) {
                  if (typeof object.location[i] !== "object")
                    throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                  message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                }
              }
              return message;
            };
            SourceCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.location = [];
              if (message.location && message.location.length) {
                object.location = [];
                for (var j = 0; j < message.location.length; ++j)
                  object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
              }
              return object;
            };
            SourceCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            SourceCodeInfo.Location = function() {
              function Location(properties) {
                this.path = [];
                this.span = [];
                this.leadingDetachedComments = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Location.prototype.path = $util.emptyArray;
              Location.prototype.span = $util.emptyArray;
              Location.prototype.leadingComments = "";
              Location.prototype.trailingComments = "";
              Location.prototype.leadingDetachedComments = $util.emptyArray;
              Location.create = function create(properties) {
                return new Location(properties);
              };
              Location.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(10).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.span != null && message.span.length) {
                  writer.uint32(18).fork();
                  for (var i = 0; i < message.span.length; ++i)
                    writer.int32(message.span[i]);
                  writer.ldelim();
                }
                if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                  writer.uint32(26).string(message.leadingComments);
                if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                  writer.uint32(34).string(message.trailingComments);
                if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    writer.uint32(50).string(message.leadingDetachedComments[i]);
                return writer;
              };
              Location.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Location.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    case 2:
                      if (!(message.span && message.span.length))
                        message.span = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.span.push(reader.int32());
                      } else
                        message.span.push(reader.int32());
                      break;
                    case 3:
                      message.leadingComments = reader.string();
                      break;
                    case 4:
                      message.trailingComments = reader.string();
                      break;
                    case 6:
                      if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                        message.leadingDetachedComments = [];
                      message.leadingDetachedComments.push(reader.string());
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Location.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Location.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.span != null && message.hasOwnProperty("span")) {
                  if (!Array.isArray(message.span))
                    return "span: array expected";
                  for (var i = 0; i < message.span.length; ++i)
                    if (!$util.isInteger(message.span[i]))
                      return "span: integer[] expected";
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments")) {
                  if (!$util.isString(message.leadingComments))
                    return "leadingComments: string expected";
                }
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments")) {
                  if (!$util.isString(message.trailingComments))
                    return "trailingComments: string expected";
                }
                if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                  if (!Array.isArray(message.leadingDetachedComments))
                    return "leadingDetachedComments: array expected";
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    if (!$util.isString(message.leadingDetachedComments[i]))
                      return "leadingDetachedComments: string[] expected";
                }
                return null;
              };
              Location.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                  return object;
                var message = new $root.google.protobuf.SourceCodeInfo.Location();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.span) {
                  if (!Array.isArray(object.span))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                  message.span = [];
                  for (var i = 0; i < object.span.length; ++i)
                    message.span[i] = object.span[i] | 0;
                }
                if (object.leadingComments != null)
                  message.leadingComments = String(object.leadingComments);
                if (object.trailingComments != null)
                  message.trailingComments = String(object.trailingComments);
                if (object.leadingDetachedComments) {
                  if (!Array.isArray(object.leadingDetachedComments))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                  message.leadingDetachedComments = [];
                  for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                    message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                }
                return message;
              };
              Location.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.path = [];
                  object.span = [];
                  object.leadingDetachedComments = [];
                }
                if (options.defaults) {
                  object.leadingComments = "";
                  object.trailingComments = "";
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.span && message.span.length) {
                  object.span = [];
                  for (var j = 0; j < message.span.length; ++j)
                    object.span[j] = message.span[j];
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                  object.leadingComments = message.leadingComments;
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                  object.trailingComments = message.trailingComments;
                if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                  object.leadingDetachedComments = [];
                  for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                    object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                }
                return object;
              };
              Location.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Location;
            }();
            return SourceCodeInfo;
          }();
          protobuf.GeneratedCodeInfo = function() {
            function GeneratedCodeInfo(properties) {
              this.annotation = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
            GeneratedCodeInfo.create = function create(properties) {
              return new GeneratedCodeInfo(properties);
            };
            GeneratedCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.annotation != null && message.annotation.length)
                for (var i = 0; i < message.annotation.length; ++i)
                  $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(10).fork()).ldelim();
              return writer;
            };
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GeneratedCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    if (!(message.annotation && message.annotation.length))
                      message.annotation = [];
                    message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GeneratedCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.annotation != null && message.hasOwnProperty("annotation")) {
                if (!Array.isArray(message.annotation))
                  return "annotation: array expected";
                for (var i = 0; i < message.annotation.length; ++i) {
                  var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                  if (error)
                    return "annotation." + error;
                }
              }
              return null;
            };
            GeneratedCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                return object;
              var message = new $root.google.protobuf.GeneratedCodeInfo();
              if (object.annotation) {
                if (!Array.isArray(object.annotation))
                  throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                message.annotation = [];
                for (var i = 0; i < object.annotation.length; ++i) {
                  if (typeof object.annotation[i] !== "object")
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                  message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                }
              }
              return message;
            };
            GeneratedCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.annotation = [];
              if (message.annotation && message.annotation.length) {
                object.annotation = [];
                for (var j = 0; j < message.annotation.length; ++j)
                  object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
              }
              return object;
            };
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GeneratedCodeInfo.Annotation = function() {
              function Annotation(properties) {
                this.path = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Annotation.prototype.path = $util.emptyArray;
              Annotation.prototype.sourceFile = "";
              Annotation.prototype.begin = 0;
              Annotation.prototype.end = 0;
              Annotation.create = function create(properties) {
                return new Annotation(properties);
              };
              Annotation.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(10).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                  writer.uint32(18).string(message.sourceFile);
                if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                  writer.uint32(24).int32(message.begin);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(32).int32(message.end);
                return writer;
              };
              Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Annotation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1:
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    case 2:
                      message.sourceFile = reader.string();
                      break;
                    case 3:
                      message.begin = reader.int32();
                      break;
                    case 4:
                      message.end = reader.int32();
                      break;
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Annotation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Annotation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile")) {
                  if (!$util.isString(message.sourceFile))
                    return "sourceFile: string expected";
                }
                if (message.begin != null && message.hasOwnProperty("begin")) {
                  if (!$util.isInteger(message.begin))
                    return "begin: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              Annotation.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                  return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.sourceFile != null)
                  message.sourceFile = String(object.sourceFile);
                if (object.begin != null)
                  message.begin = object.begin | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              Annotation.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.path = [];
                if (options.defaults) {
                  object.sourceFile = "";
                  object.begin = 0;
                  object.end = 0;
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                  object.sourceFile = message.sourceFile;
                if (message.begin != null && message.hasOwnProperty("begin"))
                  object.begin = message.begin;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              Annotation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              return Annotation;
            }();
            return GeneratedCodeInfo;
          }();
          protobuf.Any = function() {
            function Any(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Any.prototype.type_url = "";
            Any.prototype.value = $util.newBuffer([]);
            Any.create = function create(properties) {
              return new Any(properties);
            };
            Any.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                writer.uint32(10).string(message.type_url);
              if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(18).bytes(message.value);
              return writer;
            };
            Any.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Any.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1:
                    message.type_url = reader.string();
                    break;
                  case 2:
                    message.value = reader.bytes();
                    break;
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Any.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Any.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type_url != null && message.hasOwnProperty("type_url")) {
                if (!$util.isString(message.type_url))
                  return "type_url: string expected";
              }
              if (message.value != null && message.hasOwnProperty("value")) {
                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                  return "value: buffer expected";
              }
              return null;
            };
            Any.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Any)
                return object;
              var message = new $root.google.protobuf.Any();
              if (object.type_url != null)
                message.type_url = String(object.type_url);
              if (object.value != null) {
                if (typeof object.value === "string")
                  $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length)
                  message.value = object.value;
              }
              return message;
            };
            Any.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.type_url = "";
                if (options.bytes === String)
                  object.value = "";
                else {
                  object.value = [];
                  if (options.bytes !== Array)
                    object.value = $util.newBuffer(object.value);
                }
              }
              if (message.type_url != null && message.hasOwnProperty("type_url"))
                object.type_url = message.type_url;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
              return object;
            };
            Any.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            return Any;
          }();
          return protobuf;
        }();
        return google;
      }();
      return $root;
    });
  }
});

// node_modules/google-gax/build/src/pathTemplate.js
var require_pathTemplate = __commonJS({
  "node_modules/google-gax/build/src/pathTemplate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PathTemplate = void 0;
    var PathTemplate = class {
      constructor(data) {
        this.bindings = {};
        this.data = data;
        this.segments = this.parsePathTemplate(data);
        this.size = this.segments.length;
      }
      match(path) {
        let pathSegments = path.split("/");
        const bindings = {};
        if (pathSegments.length !== this.segments.length) {
          if (!this.data.includes("**")) {
            throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same.`);
          } else if (pathSegments.length !== this.segments.length + 1) {
            throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same with one wildcard.`);
          }
        }
        for (let index = 0; index < this.segments.length && pathSegments.length > 0; index++) {
          if (this.segments[index] !== pathSegments[0]) {
            if (!this.segments[index].includes("*")) {
              throw new TypeError(`segment does not match, ${this.segments[index]} and  ${pathSegments[index]}.`);
            } else {
              let segment = this.segments[index];
              const matches = segment.match(/\{[$0-9a-zA-Z_]+=.*?\}/g);
              if (!matches) {
                throw new Error(`Error processing path template segment ${segment}`);
              }
              const variables = matches.map((str) => str.replace(/^\{/, "").replace(/=.*/, ""));
              if (segment.includes("**")) {
                bindings[variables[0]] = pathSegments[0] + "/" + pathSegments[1];
                pathSegments = pathSegments.slice(2);
              } else {
                if (variables.length === 1) {
                  bindings[variables[0]] = pathSegments[0];
                } else {
                  const value = pathSegments[0].split(/[-_.~]/);
                  if (value.length !== variables.length) {
                    throw new Error(`segment ${segment} does not match ${pathSegments[0]}`);
                  }
                  for (const v of variables) {
                    bindings[v] = value[0];
                    segment = segment.replace(`{${v}=*}`, `${value[0]}`);
                    value.shift();
                  }
                  if (segment !== pathSegments[0]) {
                    throw new TypeError(`non slash resource pattern ${this.segments[index]} and ${pathSegments[0]} should have same separator`);
                  }
                }
                pathSegments.shift();
              }
            }
          } else {
            pathSegments.shift();
          }
        }
        return bindings;
      }
      render(bindings) {
        if (Object.keys(bindings).length !== Object.keys(this.bindings).length) {
          throw new TypeError(`The number of variables ${Object.keys(bindings).length} does not match the number of needed variables ${Object.keys(this.bindings).length}`);
        }
        let path = this.inspect();
        for (const key of Object.keys(bindings)) {
          const b = bindings[key].toString();
          if (!this.bindings[key]) {
            throw new TypeError(`render fails for not matching ${bindings[key]}`);
          }
          const variable = this.bindings[key];
          if (variable === "*") {
            if (!b.match(/[^/{}]+/)) {
              throw new TypeError(`render fails for not matching ${b}`);
            }
            path = path.replace(`{${key}=*}`, `${b}`);
          } else if (variable === "**") {
            if (!b.match(/[^{}]+/)) {
              throw new TypeError(`render fails for not matching ${b}`);
            }
            path = path.replace(`{${key}=**}`, `${b}`);
          }
        }
        return path;
      }
      inspect() {
        return this.segments.join("/");
      }
      parsePathTemplate(data) {
        const pathSegments = splitPathTemplate(data);
        let index = 0;
        let wildCardCount = 0;
        const segments = [];
        let matches;
        pathSegments.forEach((segment) => {
          if (segment === "*" || segment === "**") {
            this.bindings[`$${index}`] = segment;
            segments.push(`{$${index}=${segment}}`);
            index = index + 1;
            if (segment === "**") {
              ++wildCardCount;
            }
          } else if (matches = segment.match(/\{[0-9a-zA-Z-.~_]+(?:=.*?)?\}/g)) {
            for (const subsegment of matches) {
              const pairMatch = subsegment.match(/^\{([0-9a-zA-Z-.~_]+)(?:=(.*?))?\}$/);
              if (!pairMatch) {
                throw new Error(`Cannot process path template segment ${subsegment}`);
              }
              const key = pairMatch[1];
              let value = pairMatch[2];
              if (!value) {
                value = "*";
                segment = segment.replace(key, key + "=*");
                this.bindings[key] = value;
              } else if (value === "*") {
                this.bindings[key] = value;
              } else if (value === "**") {
                ++wildCardCount;
                this.bindings[key] = value;
              }
            }
            segments.push(segment);
          } else if (segment.match(/[0-9a-zA-Z-.~_]+/)) {
            segments.push(segment);
          }
        });
        if (wildCardCount > 1) {
          throw new TypeError("Can not have more than one wildcard.");
        }
        return segments;
      }
    };
    exports2.PathTemplate = PathTemplate;
    function splitPathTemplate(data) {
      let left = 0;
      let right = 0;
      let bracketCount = 0;
      const segments = [];
      while (right >= left && right < data.length) {
        if (data.charAt(right) === "{") {
          bracketCount = bracketCount + 1;
        } else if (data.charAt(right) === "}") {
          bracketCount = bracketCount - 1;
        } else if (data.charAt(right) === "/") {
          if (right === data.length - 1) {
            throw new TypeError("Invalid path, it can not be ended by /");
          }
          if (bracketCount === 0) {
            segments.push(data.substring(left, right));
            left = right + 1;
          }
        }
        if (right === data.length - 1) {
          if (bracketCount !== 0) {
            throw new TypeError("Brackets are invalid.");
          }
          segments.push(data.substring(left));
        }
        right = right + 1;
      }
      return segments;
    }
  }
});

// node_modules/google-gax/build/src/iam_policy_service_client_config.json
var require_iam_policy_service_client_config = __commonJS({
  "node_modules/google-gax/build/src/iam_policy_service_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.iam.v1.IAMPolicy": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 2e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 2e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            GetIamPolicy: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            SetIamPolicy: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            TestIamPermissions: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/google-gax/build/protos/iam_service.json
var require_iam_service2 = __commonJS({
  "node_modules/google-gax/build/protos/iam_service.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { iam: { nested: { v1: { options: { cc_enable_arenas: true, csharp_namespace: "Google.Cloud.Iam.V1", go_package: "google.golang.org/genproto/googleapis/iam/v1;iam", java_multiple_files: true, java_outer_classname: "PolicyProto", java_package: "com.google.iam.v1", php_namespace: "Google\\Cloud\\Iam\\V1" }, nested: { IAMPolicy: { options: { "(google.api.default_host)": "iam-meta-api.googleapis.com" }, methods: { SetIamPolicy: { requestType: "SetIamPolicyRequest", responseType: "Policy", options: { "(google.api.http).post": "/v1/{resource=**}:setIamPolicy", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{resource=**}:setIamPolicy", body: "*" } }] }, GetIamPolicy: { requestType: "GetIamPolicyRequest", responseType: "Policy", options: { "(google.api.http).post": "/v1/{resource=**}:getIamPolicy", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{resource=**}:getIamPolicy", body: "*" } }] }, TestIamPermissions: { requestType: "TestIamPermissionsRequest", responseType: "TestIamPermissionsResponse", options: { "(google.api.http).post": "/v1/{resource=**}:testIamPermissions", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{resource=**}:testIamPermissions", body: "*" } }] } } }, SetIamPolicyRequest: { fields: { resource: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "*" } }, policy: { type: "Policy", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } } } }, GetIamPolicyRequest: { fields: { resource: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "*" } }, options: { type: "GetPolicyOptions", id: 2 } } }, TestIamPermissionsRequest: { fields: { resource: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "*" } }, permissions: { rule: "repeated", type: "string", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } } } }, TestIamPermissionsResponse: { fields: { permissions: { rule: "repeated", type: "string", id: 1 } } }, GetPolicyOptions: { fields: { requestedPolicyVersion: { type: "int32", id: 1 } } }, Policy: { fields: { version: { type: "int32", id: 1 }, bindings: { rule: "repeated", type: "Binding", id: 4 }, etag: { type: "bytes", id: 3 } } }, Binding: { fields: { role: { type: "string", id: 1 }, members: { rule: "repeated", type: "string", id: 2 }, condition: { type: "google.type.Expr", id: 3 } } }, PolicyDelta: { fields: { bindingDeltas: { rule: "repeated", type: "BindingDelta", id: 1 }, auditConfigDeltas: { rule: "repeated", type: "AuditConfigDelta", id: 2 } } }, BindingDelta: { fields: { action: { type: "Action", id: 1 }, role: { type: "string", id: 2 }, member: { type: "string", id: 3 }, condition: { type: "google.type.Expr", id: 4 } }, nested: { Action: { values: { ACTION_UNSPECIFIED: 0, ADD: 1, REMOVE: 2 } } } }, AuditConfigDelta: { fields: { action: { type: "Action", id: 1 }, service: { type: "string", id: 2 }, exemptedMember: { type: "string", id: 3 }, logType: { type: "string", id: 4 } }, nested: { Action: { values: { ACTION_UNSPECIFIED: 0, ADD: 1, REMOVE: 2 } } } }, logging: { options: { csharp_namespace: "Google.Cloud.Iam.V1.Logging", go_package: "google.golang.org/genproto/googleapis/iam/v1/logging;logging", java_multiple_files: true, java_outer_classname: "AuditDataProto", java_package: "com.google.iam.v1.logging" }, nested: { AuditData: { fields: { policyDelta: { type: "google.iam.v1.PolicyDelta", id: 2 } } } } } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ResourceProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" }, fieldBehavior: { rule: "repeated", type: "google.api.FieldBehavior", id: 1052, extend: "google.protobuf.FieldOptions" }, FieldBehavior: { values: { FIELD_BEHAVIOR_UNSPECIFIED: 0, OPTIONAL: 1, REQUIRED: 2, OUTPUT_ONLY: 3, INPUT_ONLY: 4, IMMUTABLE: 5 } }, resourceReference: { type: "google.api.ResourceReference", id: 1055, extend: "google.protobuf.FieldOptions" }, resourceDefinition: { rule: "repeated", type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.FileOptions" }, resource: { type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.MessageOptions" }, ResourceDescriptor: { fields: { type: { type: "string", id: 1 }, pattern: { rule: "repeated", type: "string", id: 2 }, nameField: { type: "string", id: 3 }, history: { type: "History", id: 4 }, plural: { type: "string", id: 5 }, singular: { type: "string", id: 6 } }, nested: { History: { values: { HISTORY_UNSPECIFIED: 0, ORIGINALLY_SINGLE_PATTERN: 1, FUTURE_MULTI_PATTERN: 2 } } } }, ResourceReference: { fields: { type: { type: "string", id: 1 }, childType: { type: "string", id: 2 } } } } }, protobuf: { options: { go_package: "github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } } } }, type: { options: { go_package: "google.golang.org/genproto/googleapis/type/expr;expr", java_multiple_files: true, java_outer_classname: "ExprProto", java_package: "com.google.type", objc_class_prefix: "GTP" }, nested: { Expr: { fields: { expression: { type: "string", id: 1 }, title: { type: "string", id: 2 }, description: { type: "string", id: 3 }, location: { type: "string", id: 4 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/iamService.js
var require_iamService = __commonJS({
  "node_modules/google-gax/build/src/iamService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IamClient = void 0;
    var createApiCall_1 = require_createApiCall();
    var routingHeader = require_routingHeader();
    var gapicConfig = require_iam_policy_service_client_config();
    var fallback = require_fallback();
    var version = require_package3().version;
    var jsonProtos = require_iam_service2();
    var IamClient = class {
      constructor(gaxGrpc, options) {
        this._terminated = false;
        this.descriptors = { page: {}, stream: {}, longrunning: {} };
        this.innerApiCalls = {};
        this.gaxGrpc = gaxGrpc;
        const opts = Object.assign({
          servicePath: options.servicePath,
          port: options.port,
          clientConfig: options.clientConfig,
          apiEndpoint: options.apiEndpoint,
          fallback: options.fallback
        }, options);
        version = opts.fallback ? fallback.version : version;
        opts.scopes = this.constructor.scopes;
        this._opts = opts;
        this.auth = gaxGrpc.auth;
        const clientHeader = [`gax/${version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);
        this._defaults = gaxGrpc.constructSettings("google.iam.v1.IAMPolicy", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
      }
      initialize() {
        if (this.iamPolicyStub) {
          return this.iamPolicyStub;
        }
        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.iam.v1.IAMPolicy") : this._protos.google.iam.v1.IAMPolicy, this._opts);
        const iamPolicyStubMethods = [
          "getIamPolicy",
          "setIamPolicy",
          "testIamPermissions"
        ];
        for (const methodName of iamPolicyStubMethods) {
          const innerCallPromise = this.iamPolicyStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);
        }
        return this.iamPolicyStub;
      }
      static get servicePath() {
        return "cloudkms.googleapis.com";
      }
      static get apiEndpoint() {
        return "cloudkms.googleapis.com";
      }
      static get port() {
        return 443;
      }
      static get scopes() {
        return [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloudkms"
        ];
      }
      getProjectId(callback) {
        if (this.auth && "getProjectId" in this.auth) {
          return this.auth.getProjectId(callback);
        }
        if (callback) {
          callback(new Error("Cannot determine project ID."));
        } else {
          return Promise.reject("Cannot determine project ID.");
        }
      }
      getIamPolicy(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          resource: request.resource
        });
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
      }
      setIamPolicy(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          resource: request.resource
        });
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
      }
      testIamPermissions(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          resource: request.resource
        });
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
      }
      close() {
        this.initialize();
        if (!this._terminated) {
          return this.iamPolicyStub.then((stub) => {
            this._terminated = true;
            stub.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.IamClient = IamClient;
  }
});

// node_modules/google-gax/build/protos/locations.json
var require_locations2 = __commonJS({
  "node_modules/google-gax/build/protos/locations.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { cloud: { nested: { location: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/cloud/location;location", java_multiple_files: true, java_outer_classname: "LocationsProto", java_package: "com.google.cloud.location" }, nested: { Locations: { options: { "(google.api.default_host)": "cloud.googleapis.com", "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform" }, methods: { ListLocations: { requestType: "ListLocationsRequest", responseType: "ListLocationsResponse", options: { "(google.api.http).get": "/v1/{name=locations}", "(google.api.http).additional_bindings.get": "/v1/{name=projects/*}/locations" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=locations}", additional_bindings: { get: "/v1/{name=projects/*}/locations" } } }] }, GetLocation: { requestType: "GetLocationRequest", responseType: "Location", options: { "(google.api.http).get": "/v1/{name=locations/*}", "(google.api.http).additional_bindings.get": "/v1/{name=projects/*/locations/*}" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=locations/*}", additional_bindings: { get: "/v1/{name=projects/*/locations/*}" } } }] } } }, ListLocationsRequest: { fields: { name: { type: "string", id: 1 }, filter: { type: "string", id: 2 }, pageSize: { type: "int32", id: 3 }, pageToken: { type: "string", id: 4 } } }, ListLocationsResponse: { fields: { locations: { rule: "repeated", type: "Location", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, GetLocationRequest: { fields: { name: { type: "string", id: 1 } } }, Location: { fields: { name: { type: "string", id: 1 }, locationId: { type: "string", id: 4 }, displayName: { type: "string", id: 5 }, labels: { keyType: "string", type: "string", id: 2 }, metadata: { type: "google.protobuf.Any", id: 3 } } } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ClientProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" } } }, protobuf: { options: { go_package: "google.golang.org/protobuf/types/descriptorpb", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } }, Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/locations_client_config.json
var require_locations_client_config = __commonJS({
  "node_modules/google-gax/build/src/locations_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.cloud.location.Locations": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            ListLocations: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            GetLocation: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/google-gax/build/src/locationService.js
var require_locationService = __commonJS({
  "node_modules/google-gax/build/src/locationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LocationsClient = void 0;
    var gax = require_gax();
    var warnings_1 = require_warnings();
    var createApiCall_1 = require_createApiCall();
    var routingHeader = require_routingHeader();
    var pageDescriptor_1 = require_pageDescriptor();
    var jsonProtos = require_locations2();
    var gapicConfig = require_locations_client_config();
    var version = require_package3().version;
    var LocationsClient = class {
      constructor(gaxGrpc, opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        this.gaxGrpc = gaxGrpc;
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        this._opts = opts;
        this.auth = gaxGrpc.auth;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
        } else if (opts.fallback === "rest") {
          clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = gaxGrpc.loadProtoJSON(jsonProtos);
        this.descriptors.page = {
          listLocations: new pageDescriptor_1.PageDescriptor("pageToken", "nextPageToken", "locations")
        };
        this._defaults = gaxGrpc.constructSettings("google.cloud.location.Locations", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = warnings_1.warn;
      }
      initialize() {
        if (this.locationsStub) {
          return this.locationsStub;
        }
        this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.cloud.location.Locations") : this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath);
        const locationsStubMethods = ["listLocations", "getLocation"];
        for (const methodName of locationsStubMethods) {
          const callPromise = this.locationsStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.page[methodName] || void 0;
          const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.locationsStub;
      }
      static get servicePath() {
        return "cloud.googleapis.com";
      }
      static get apiEndpoint() {
        return "cloud.googleapis.com";
      }
      static get port() {
        return 443;
      }
      static get scopes() {
        return ["https://www.googleapis.com/auth/cloud-platform"];
      }
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      getLocation(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          name: request.name || ""
        });
        this.initialize();
        return this.innerApiCalls.getLocation(request, options, callback);
      }
      listLocations(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          name: request.name || ""
        });
        this.initialize();
        return this.innerApiCalls.listLocations(request, options, callback);
      }
      listLocationsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          name: request.name || ""
        });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls["listLocations"], request, callSettings);
      }
      close() {
        this.initialize();
        if (!this._terminated) {
          return this.locationsStub.then((stub) => {
            this._terminated = true;
            stub.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.LocationsClient = LocationsClient;
  }
});

// node_modules/google-gax/build/src/fallback.js
var require_fallback = __commonJS({
  "node_modules/google-gax/build/src/fallback.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fallback = exports2.GoogleError = exports2.operation = exports2.Operation = exports2.warn = exports2.protobufMinimal = exports2.protobuf = exports2.createApiCall = exports2.LocationProtos = exports2.IamProtos = exports2.operationsProtos = exports2.lro = exports2.GrpcClient = exports2.defaultToObjectOptions = exports2.LocationsClient = exports2.IamClient = exports2.OperationsClient = exports2.StreamType = exports2.StreamDescriptor = exports2.PageDescriptor = exports2.LongrunningDescriptor = exports2.BundleDescriptor = exports2.version = exports2.createDefaultBackoffSettings = exports2.RetryOptions = exports2.constructSettings = exports2.CallSettings = exports2.routingHeader = exports2.PathTemplate = void 0;
    var objectHash = require_object_hash();
    var protobuf = require_protobufjs();
    exports2.protobuf = protobuf;
    var gax = require_gax();
    var routingHeader = require_routingHeader();
    exports2.routingHeader = routingHeader;
    var status_1 = require_status();
    var google_auth_library_1 = require_src7();
    var operationsClient_1 = require_operationsClient();
    var createApiCall_1 = require_createApiCall();
    var fallbackProto = require_fallbackProto();
    var fallbackRest = require_fallbackRest();
    var featureDetection_1 = require_featureDetection();
    var fallbackServiceStub_1 = require_fallbackServiceStub();
    var streaming_1 = require_streaming();
    var util_1 = require_util3();
    var IamProtos = require_iam_service();
    exports2.IamProtos = IamProtos;
    var LocationProtos = require_locations();
    exports2.LocationProtos = LocationProtos;
    var operationsProtos = require_operations();
    exports2.operationsProtos = operationsProtos;
    var pathTemplate_1 = require_pathTemplate();
    Object.defineProperty(exports2, "PathTemplate", { enumerable: true, get: function() {
      return pathTemplate_1.PathTemplate;
    } });
    var gax_1 = require_gax();
    Object.defineProperty(exports2, "CallSettings", { enumerable: true, get: function() {
      return gax_1.CallSettings;
    } });
    Object.defineProperty(exports2, "constructSettings", { enumerable: true, get: function() {
      return gax_1.constructSettings;
    } });
    Object.defineProperty(exports2, "RetryOptions", { enumerable: true, get: function() {
      return gax_1.RetryOptions;
    } });
    Object.defineProperty(exports2, "createDefaultBackoffSettings", { enumerable: true, get: function() {
      return gax_1.createDefaultBackoffSettings;
    } });
    exports2.version = require_package3().version + "-fallback";
    var descriptor_1 = require_descriptor();
    Object.defineProperty(exports2, "BundleDescriptor", { enumerable: true, get: function() {
      return descriptor_1.BundleDescriptor;
    } });
    Object.defineProperty(exports2, "LongrunningDescriptor", { enumerable: true, get: function() {
      return descriptor_1.LongrunningDescriptor;
    } });
    Object.defineProperty(exports2, "PageDescriptor", { enumerable: true, get: function() {
      return descriptor_1.PageDescriptor;
    } });
    Object.defineProperty(exports2, "StreamDescriptor", { enumerable: true, get: function() {
      return descriptor_1.StreamDescriptor;
    } });
    var streaming_2 = require_streaming();
    Object.defineProperty(exports2, "StreamType", { enumerable: true, get: function() {
      return streaming_2.StreamType;
    } });
    var operationsClient_2 = require_operationsClient();
    Object.defineProperty(exports2, "OperationsClient", { enumerable: true, get: function() {
      return operationsClient_2.OperationsClient;
    } });
    var iamService_1 = require_iamService();
    Object.defineProperty(exports2, "IamClient", { enumerable: true, get: function() {
      return iamService_1.IamClient;
    } });
    var locationService_1 = require_locationService();
    Object.defineProperty(exports2, "LocationsClient", { enumerable: true, get: function() {
      return locationService_1.LocationsClient;
    } });
    exports2.defaultToObjectOptions = {
      keepCase: false,
      longs: String,
      enums: String,
      defaults: true,
      oneofs: true
    };
    var CLIENT_VERSION_HEADER = "x-goog-api-client";
    var GrpcClient = class {
      constructor(options = {}) {
        var _a;
        if (!(0, featureDetection_1.isNodeJS)()) {
          if (!options.auth) {
            throw new Error(JSON.stringify(options) + "You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.");
          }
          this.auth = options.auth;
        } else {
          this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);
        }
        this.fallback = options.fallback !== "rest" ? "proto" : "rest";
        this.grpcVersion = require_package3().version;
        this.httpRules = options.httpRules;
        this.numericEnums = (_a = options.numericEnums) !== null && _a !== void 0 ? _a : false;
      }
      static clearProtoCache() {
        GrpcClient.protoCache.clear();
      }
      loadProto(jsonObject) {
        const rootObject = protobuf.Root.fromJSON(jsonObject);
        return rootObject;
      }
      loadProtoJSON(json, ignoreCache = false) {
        const hash = objectHash(JSON.stringify(json)).toString();
        const cached = GrpcClient.protoCache.get(hash);
        if (cached && !ignoreCache) {
          return cached;
        }
        const root = protobuf.Root.fromJSON(json);
        GrpcClient.protoCache.set(hash, root);
        return root;
      }
      static getServiceMethods(service) {
        const methods = {};
        for (const [methodName, methodObject] of Object.entries(service.methods)) {
          const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);
          methods[methodNameLowerCamelCase] = methodObject;
        }
        return methods;
      }
      constructSettings(serviceName, clientConfig, configOverrides, headers) {
        function buildMetadata(abTests, moreHeaders) {
          const metadata = {};
          if (!headers) {
            headers = {};
          }
          for (const key in headers) {
            metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];
          }
          const clientVersions = [];
          if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {
            clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(" "));
          }
          clientVersions.push(`grpc-web/${exports2.version}`);
          metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(" ")];
          if (!moreHeaders) {
            return metadata;
          }
          for (const key in moreHeaders) {
            if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {
              const value = moreHeaders[key];
              if (Array.isArray(value)) {
                if (metadata[key] === void 0) {
                  metadata[key] = value;
                } else {
                  if (Array.isArray(metadata[key])) {
                    metadata[key].push(...value);
                  } else {
                    throw new Error(`Can not add value ${value} to the call metadata.`);
                  }
                }
              } else {
                metadata[key] = [value];
              }
            }
          }
          return metadata;
        }
        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });
      }
      async createStub(service, opts, customServicePath) {
        if (!this.authClient) {
          if (this.auth && "getClient" in this.auth) {
            this.authClient = await this.auth.getClient();
          } else if (this.auth && "getRequestHeaders" in this.auth) {
            this.authClient = this.auth;
          }
        }
        if (!this.authClient) {
          throw new Error("No authentication was provided");
        }
        service.resolveAll();
        const methods = GrpcClient.getServiceMethods(service);
        const protocol = opts.protocol || "https";
        let servicePath = opts.servicePath;
        if (!servicePath && service.options && service.options["(google.api.default_host)"]) {
          servicePath = service.options["(google.api.default_host)"];
        }
        if (!servicePath) {
          throw new Error(`Cannot determine service API path for service ${service.name}.`);
        }
        let servicePort;
        const match = servicePath.match(/^(.*):(\d+)$/);
        if (match) {
          servicePath = match[1];
          servicePort = parseInt(match[2]);
        }
        if (opts.port) {
          servicePort = opts.port;
        } else if (!servicePort) {
          servicePort = 443;
        }
        const encoder = this.fallback === "rest" ? fallbackRest.encodeRequest : fallbackProto.encodeRequest;
        const decoder = this.fallback === "rest" ? fallbackRest.decodeResponse : fallbackProto.decodeResponse;
        const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder, this.numericEnums);
        return serviceStub;
      }
      static createByteLengthFunction(message) {
        return gax.createByteLengthFunction(message);
      }
    };
    exports2.GrpcClient = GrpcClient;
    GrpcClient.protoCache = /* @__PURE__ */ new Map();
    function lro(options) {
      options = Object.assign({ scopes: [] }, options);
      if (options.protoJson) {
        options = Object.assign(options, { fallback: "rest" });
      }
      const gaxGrpc = new GrpcClient(options);
      return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);
    }
    exports2.lro = lro;
    function createApiCall(func, settings, descriptor, fallback2) {
      if ((!fallback2 || fallback2 === "rest") && descriptor && "streaming" in descriptor && descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {
        return () => {
          throw new Error("The REST transport currently does not support client-streaming or bidi-stream calls.");
        };
      }
      if ((fallback2 === "proto" || fallback2 === true) && descriptor && "streaming" in descriptor) {
        return () => {
          throw new Error("The gRPC-fallback (proto over HTTP) transport currently does not support streaming calls.");
        };
      }
      return (0, createApiCall_1.createApiCall)(func, settings, descriptor);
    }
    exports2.createApiCall = createApiCall;
    exports2.protobufMinimal = require_minimal2();
    var warnings_1 = require_warnings();
    Object.defineProperty(exports2, "warn", { enumerable: true, get: function() {
      return warnings_1.warn;
    } });
    var longrunning_1 = require_longrunning();
    Object.defineProperty(exports2, "Operation", { enumerable: true, get: function() {
      return longrunning_1.Operation;
    } });
    Object.defineProperty(exports2, "operation", { enumerable: true, get: function() {
      return longrunning_1.operation;
    } });
    var googleError_1 = require_googleError();
    Object.defineProperty(exports2, "GoogleError", { enumerable: true, get: function() {
      return googleError_1.GoogleError;
    } });
    var fallback = module2.exports;
    exports2.fallback = fallback;
  }
});

// node_modules/@google-cloud/firestore/build/src/util.js
var require_util5 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wrapError = exports2.silencePromise = exports2.getRetryParams = exports2.getRetryCodes = exports2.isPermanentRpcError = exports2.isFunction = exports2.isEmpty = exports2.isPlainObject = exports2.isObject = exports2.requestTag = exports2.autoId = exports2.Deferred = void 0;
    var crypto_1 = require_crypto();
    var gapicConfig = require_firestore_client_config();
    var Deferred = class {
      constructor() {
        this.resolve = () => {
        };
        this.reject = () => {
        };
        this.promise = new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
        });
      }
    };
    exports2.Deferred = Deferred;
    function autoId() {
      const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      let autoId2 = "";
      while (autoId2.length < 20) {
        const bytes = (0, crypto_1.randomBytes)(40);
        bytes.forEach((b) => {
          const maxValue = 62 * 4 - 1;
          if (autoId2.length < 20 && b <= maxValue) {
            autoId2 += chars.charAt(b % 62);
          }
        });
      }
      return autoId2;
    }
    exports2.autoId = autoId;
    function requestTag() {
      return autoId().substr(0, 5);
    }
    exports2.requestTag = requestTag;
    function isObject(value) {
      return Object.prototype.toString.call(value) === "[object Object]";
    }
    exports2.isObject = isObject;
    function isPlainObject(input) {
      return isObject(input) && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null || input.constructor.name === "Object");
    }
    exports2.isPlainObject = isPlainObject;
    function isEmpty(value) {
      return Object.keys(value).length === 0;
    }
    exports2.isEmpty = isEmpty;
    function isFunction(value) {
      return typeof value === "function";
    }
    exports2.isFunction = isFunction;
    function isPermanentRpcError(err, methodName) {
      if (err.code !== void 0) {
        const retryCodes = getRetryCodes(methodName);
        return retryCodes.indexOf(err.code) === -1;
      } else {
        return false;
      }
    }
    exports2.isPermanentRpcError = isPermanentRpcError;
    var serviceConfig;
    function getServiceConfig(methodName) {
      if (!serviceConfig) {
        serviceConfig = require_fallback().constructSettings("google.firestore.v1.Firestore", gapicConfig, {}, require_status().Status);
      }
      return serviceConfig[methodName];
    }
    function getRetryCodes(methodName) {
      var _a, _b, _c;
      return (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.retryCodes) !== null && _c !== void 0 ? _c : [];
    }
    exports2.getRetryCodes = getRetryCodes;
    function getRetryParams(methodName) {
      var _a, _b, _c;
      return (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.backoffSettings) !== null && _c !== void 0 ? _c : require_fallback().createDefaultBackoffSettings();
    }
    exports2.getRetryParams = getRetryParams;
    function silencePromise(promise) {
      return promise.then(() => {
      }, () => {
      });
    }
    exports2.silencePromise = silencePromise;
    function wrapError(err, stack) {
      err.stack += "\nCaused by: " + stack;
      return err;
    }
    exports2.wrapError = wrapError;
  }
});

// node_modules/@google-cloud/firestore/build/src/timestamp.js
var require_timestamp2 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/timestamp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Timestamp = void 0;
    var validate_1 = require_validate();
    var MS_TO_NANOS = 1e6;
    var MIN_SECONDS = -62135596800;
    var MAX_SECONDS = 253402300799;
    var Timestamp2 = class {
      constructor(seconds, nanoseconds) {
        (0, validate_1.validateInteger)("seconds", seconds, {
          minValue: MIN_SECONDS,
          maxValue: MAX_SECONDS
        });
        (0, validate_1.validateInteger)("nanoseconds", nanoseconds, {
          minValue: 0,
          maxValue: 999999999
        });
        this._seconds = seconds;
        this._nanoseconds = nanoseconds;
      }
      static now() {
        return Timestamp2.fromMillis(Date.now());
      }
      static fromDate(date) {
        return Timestamp2.fromMillis(date.getTime());
      }
      static fromMillis(milliseconds) {
        const seconds = Math.floor(milliseconds / 1e3);
        const nanos = Math.floor((milliseconds - seconds * 1e3) * MS_TO_NANOS);
        return new Timestamp2(seconds, nanos);
      }
      static fromProto(timestamp) {
        return new Timestamp2(Number(timestamp.seconds || 0), timestamp.nanos || 0);
      }
      get seconds() {
        return this._seconds;
      }
      get nanoseconds() {
        return this._nanoseconds;
      }
      toDate() {
        return new Date(this._seconds * 1e3 + Math.round(this._nanoseconds / MS_TO_NANOS));
      }
      toMillis() {
        return this._seconds * 1e3 + Math.floor(this._nanoseconds / MS_TO_NANOS);
      }
      isEqual(other) {
        return this === other || other instanceof Timestamp2 && this._seconds === other.seconds && this._nanoseconds === other.nanoseconds;
      }
      toProto() {
        const timestamp = {};
        if (this.seconds) {
          timestamp.seconds = this.seconds.toString();
        }
        if (this.nanoseconds) {
          timestamp.nanos = this.nanoseconds;
        }
        return { timestampValue: timestamp };
      }
      valueOf() {
        const adjustedSeconds = this.seconds - MIN_SECONDS;
        const formattedSeconds = String(adjustedSeconds).padStart(12, "0");
        const formattedNanoseconds = String(this.nanoseconds).padStart(9, "0");
        return formattedSeconds + "." + formattedNanoseconds;
      }
    };
    exports2.Timestamp = Timestamp2;
  }
});

// node_modules/@google-cloud/firestore/build/src/validate.js
var require_validate = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateEnumValue = exports2.validateMaxNumberOfArguments = exports2.validateMinNumberOfArguments = exports2.validateOptional = exports2.invalidArgumentMessage = exports2.validateTimestamp = exports2.validateInteger = exports2.validateNumber = exports2.validateBoolean = exports2.validateHost = exports2.validateString = exports2.validateObject = exports2.validateFunction = exports2.customObjectMessage = void 0;
    var url_1 = require_url();
    var util_1 = require_util5();
    var timestamp_1 = require_timestamp2();
    function customObjectMessage(arg, value, path) {
      const fieldPathMessage = path ? ` (found in field "${path}")` : "";
      if ((0, util_1.isObject)(value)) {
        const typeName = value.constructor.name;
        switch (typeName) {
          case "DocumentReference":
          case "FieldPath":
          case "FieldValue":
          case "GeoPoint":
          case "Timestamp":
            return `${invalidArgumentMessage(arg, "Firestore document")} Detected an object of type "${typeName}" that doesn't match the expected instance${fieldPathMessage}. Please ensure that the Firestore types you are using are from the same NPM package.)`;
          case "Object":
            return `${invalidArgumentMessage(arg, "Firestore document")} Invalid use of type "${typeof value}" as a Firestore argument${fieldPathMessage}.`;
          default:
            return `${invalidArgumentMessage(arg, "Firestore document")} Couldn't serialize object of type "${typeName}"${fieldPathMessage}. Firestore doesn't support JavaScript objects with custom prototypes (i.e. objects that were created via the "new" operator).`;
        }
      } else {
        return `${invalidArgumentMessage(arg, "Firestore document")} Input is not a plain JavaScript object${fieldPathMessage}.`;
      }
    }
    exports2.customObjectMessage = customObjectMessage;
    function validateFunction(arg, value, options) {
      if (!validateOptional(value, options)) {
        if (!(0, util_1.isFunction)(value)) {
          throw new Error(invalidArgumentMessage(arg, "function"));
        }
      }
    }
    exports2.validateFunction = validateFunction;
    function validateObject(arg, value, options) {
      if (!validateOptional(value, options)) {
        if (!(0, util_1.isObject)(value)) {
          throw new Error(invalidArgumentMessage(arg, "object"));
        }
      }
    }
    exports2.validateObject = validateObject;
    function validateString(arg, value, options) {
      if (!validateOptional(value, options)) {
        if (typeof value !== "string") {
          throw new Error(invalidArgumentMessage(arg, "string"));
        }
      }
    }
    exports2.validateString = validateString;
    function validateHost(arg, value, options) {
      if (!validateOptional(value, options)) {
        validateString(arg, value);
        const urlString = `http://${value}/`;
        let parsed;
        try {
          parsed = new url_1.URL(urlString);
        } catch (e) {
          throw new Error(invalidArgumentMessage(arg, "host"));
        }
        if (parsed.search !== "" || parsed.pathname !== "/" || parsed.username !== "") {
          throw new Error(invalidArgumentMessage(arg, "host"));
        }
      }
    }
    exports2.validateHost = validateHost;
    function validateBoolean(arg, value, options) {
      if (!validateOptional(value, options)) {
        if (typeof value !== "boolean") {
          throw new Error(invalidArgumentMessage(arg, "boolean"));
        }
      }
    }
    exports2.validateBoolean = validateBoolean;
    function validateNumber(arg, value, options) {
      const min = options !== void 0 && options.minValue !== void 0 ? options.minValue : -Infinity;
      const max = options !== void 0 && options.maxValue !== void 0 ? options.maxValue : Infinity;
      if (!validateOptional(value, options)) {
        if (typeof value !== "number" || isNaN(value)) {
          throw new Error(invalidArgumentMessage(arg, "number"));
        } else if (value < min || value > max) {
          throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);
        }
      }
    }
    exports2.validateNumber = validateNumber;
    function validateInteger(arg, value, options) {
      const min = options !== void 0 && options.minValue !== void 0 ? options.minValue : -Infinity;
      const max = options !== void 0 && options.maxValue !== void 0 ? options.maxValue : Infinity;
      if (!validateOptional(value, options)) {
        if (typeof value !== "number" || isNaN(value) || value % 1 !== 0) {
          throw new Error(invalidArgumentMessage(arg, "integer"));
        } else if (value < min || value > max) {
          throw new Error(`${formatArgumentName(arg)} must be within [${min}, ${max}] inclusive, but was: ${value}`);
        }
      }
    }
    exports2.validateInteger = validateInteger;
    function validateTimestamp(arg, value, options) {
      if (!validateOptional(value, options)) {
        if (!(value instanceof timestamp_1.Timestamp)) {
          throw new Error(invalidArgumentMessage(arg, "Timestamp"));
        }
      }
    }
    exports2.validateTimestamp = validateTimestamp;
    function invalidArgumentMessage(arg, expectedType) {
      return `${formatArgumentName(arg)} is not a valid ${expectedType}.`;
    }
    exports2.invalidArgumentMessage = invalidArgumentMessage;
    function validateOptional(value, options) {
      return value === void 0 && options !== void 0 && options.optional === true;
    }
    exports2.validateOptional = validateOptional;
    function formatPlural(num, str) {
      return `${num} ${str}` + (num === 1 ? "" : "s");
    }
    function formatArgumentName(arg) {
      return typeof arg === "string" ? `Value for argument "${arg}"` : `Element at index ${arg}`;
    }
    function validateMinNumberOfArguments(funcName, args, minSize) {
      if (args.length < minSize) {
        throw new Error(`Function "${funcName}()" requires at least ${formatPlural(minSize, "argument")}.`);
      }
    }
    exports2.validateMinNumberOfArguments = validateMinNumberOfArguments;
    function validateMaxNumberOfArguments(funcName, args, maxSize) {
      if (args.length > maxSize) {
        throw new Error(`Function "${funcName}()" accepts at most ${formatPlural(maxSize, "argument")}.`);
      }
    }
    exports2.validateMaxNumberOfArguments = validateMaxNumberOfArguments;
    function validateEnumValue(arg, value, allowedValues, options) {
      if (!validateOptional(value, options)) {
        const expectedDescription = [];
        for (const allowed of allowedValues) {
          if (allowed === value) {
            return;
          }
          expectedDescription.push(allowed);
        }
        throw new Error(`${formatArgumentName(arg)} is invalid. Acceptable values are: ${expectedDescription.join(", ")}`);
      }
    }
    exports2.validateEnumValue = validateEnumValue;
  }
});

// node_modules/@google-cloud/firestore/build/src/logger.js
var require_logger = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setLibVersion = exports2.setLogFunction = exports2.logger = void 0;
    var util = require_util();
    var validate_1 = require_validate();
    var libVersion;
    var logFunction = null;
    function logger(methodName, requestTag, logMessage, ...additionalArgs) {
      requestTag = requestTag || "#####";
      if (logFunction) {
        const formattedMessage = util.format(logMessage, ...additionalArgs);
        const time = new Date().toISOString();
        logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` + formattedMessage);
      }
    }
    exports2.logger = logger;
    function setLogFunction2(logger2) {
      if (logger2 !== null)
        (0, validate_1.validateFunction)("logger", logger2);
      logFunction = logger2;
    }
    exports2.setLogFunction = setLogFunction2;
    function setLibVersion(version) {
      libVersion = version;
    }
    exports2.setLibVersion = setLibVersion;
  }
});

// node_modules/@google-cloud/firestore/build/src/backoff.js
var require_backoff = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/backoff.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExponentialBackoff = exports2.setTimeoutHandler = exports2.delayExecution = exports2.MAX_RETRY_ATTEMPTS = exports2.DEFAULT_BACKOFF_FACTOR = exports2.DEFAULT_BACKOFF_MAX_DELAY_MS = exports2.DEFAULT_BACKOFF_INITIAL_DELAY_MS = void 0;
    var logger_1 = require_logger();
    exports2.DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1e3;
    exports2.DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1e3;
    exports2.DEFAULT_BACKOFF_FACTOR = 1.5;
    var DEFAULT_JITTER_FACTOR = 1;
    exports2.MAX_RETRY_ATTEMPTS = 10;
    exports2.delayExecution = setTimeout;
    function setTimeoutHandler(handler) {
      exports2.delayExecution = (f, ms) => {
        handler(f, ms);
        const timeout = {
          hasRef: () => {
            throw new Error("For tests only. Not Implemented");
          },
          ref: () => {
            throw new Error("For tests only. Not Implemented");
          },
          refresh: () => {
            throw new Error("For tests only. Not Implemented");
          },
          unref: () => {
            throw new Error("For tests only. Not Implemented");
          },
          [Symbol.toPrimitive]: () => {
            throw new Error("For tests only. Not Implemented");
          }
        };
        return timeout;
      };
    }
    exports2.setTimeoutHandler = setTimeoutHandler;
    var ExponentialBackoff = class {
      constructor(options = {}) {
        this._retryCount = 0;
        this.currentBaseMs = 0;
        this.awaitingBackoffCompletion = false;
        this.initialDelayMs = options.initialDelayMs !== void 0 ? options.initialDelayMs : exports2.DEFAULT_BACKOFF_INITIAL_DELAY_MS;
        this.backoffFactor = options.backoffFactor !== void 0 ? options.backoffFactor : exports2.DEFAULT_BACKOFF_FACTOR;
        this.maxDelayMs = options.maxDelayMs !== void 0 ? options.maxDelayMs : exports2.DEFAULT_BACKOFF_MAX_DELAY_MS;
        this.jitterFactor = options.jitterFactor !== void 0 ? options.jitterFactor : DEFAULT_JITTER_FACTOR;
      }
      reset() {
        this._retryCount = 0;
        this.currentBaseMs = 0;
      }
      resetToMax() {
        this.currentBaseMs = this.maxDelayMs;
      }
      backoffAndWait() {
        if (this.awaitingBackoffCompletion) {
          return Promise.reject(new Error("A backoff operation is already in progress."));
        }
        if (this.retryCount > exports2.MAX_RETRY_ATTEMPTS) {
          return Promise.reject(new Error("Exceeded maximum number of retries allowed."));
        }
        const delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();
        if (this.currentBaseMs > 0) {
          (0, logger_1.logger)("ExponentialBackoff.backoffAndWait", null, `Backing off for ${delayWithJitterMs} ms (base delay: ${this.currentBaseMs} ms)`);
        }
        this.currentBaseMs *= this.backoffFactor;
        this.currentBaseMs = Math.max(this.currentBaseMs, this.initialDelayMs);
        this.currentBaseMs = Math.min(this.currentBaseMs, this.maxDelayMs);
        this._retryCount += 1;
        return new Promise((resolve) => {
          this.awaitingBackoffCompletion = true;
          (0, exports2.delayExecution)(() => {
            this.awaitingBackoffCompletion = false;
            resolve();
          }, delayWithJitterMs);
        });
      }
      get retryCount() {
        return this._retryCount;
      }
      jitterDelayMs() {
        return (Math.random() - 0.5) * this.jitterFactor * this.currentBaseMs;
      }
    };
    exports2.ExponentialBackoff = ExponentialBackoff;
  }
});

// node_modules/@google-cloud/firestore/build/src/rate-limiter.js
var require_rate_limiter = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/rate-limiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RateLimiter = void 0;
    var assert = require_assert();
    var logger_1 = require_logger();
    var RateLimiter = class {
      constructor(initialCapacity, multiplier, multiplierMillis, maximumCapacity, startTimeMillis = Date.now()) {
        this.initialCapacity = initialCapacity;
        this.multiplier = multiplier;
        this.multiplierMillis = multiplierMillis;
        this.maximumCapacity = maximumCapacity;
        this.startTimeMillis = startTimeMillis;
        this.availableTokens = initialCapacity;
        this.lastRefillTimeMillis = startTimeMillis;
        this.previousCapacity = initialCapacity;
      }
      tryMakeRequest(numOperations, requestTimeMillis = Date.now()) {
        this.refillTokens(requestTimeMillis);
        if (numOperations <= this.availableTokens) {
          this.availableTokens -= numOperations;
          return true;
        }
        return false;
      }
      getNextRequestDelayMs(numOperations, requestTimeMillis = Date.now()) {
        this.refillTokens(requestTimeMillis);
        if (numOperations < this.availableTokens) {
          return 0;
        }
        const capacity = this.calculateCapacity(requestTimeMillis);
        if (capacity < numOperations) {
          return -1;
        }
        const requiredTokens = numOperations - this.availableTokens;
        return Math.ceil(requiredTokens * 1e3 / capacity);
      }
      refillTokens(requestTimeMillis) {
        if (requestTimeMillis >= this.lastRefillTimeMillis) {
          const elapsedTime = requestTimeMillis - this.lastRefillTimeMillis;
          const capacity = this.calculateCapacity(requestTimeMillis);
          const tokensToAdd = Math.floor(elapsedTime * capacity / 1e3);
          if (tokensToAdd > 0) {
            this.availableTokens = Math.min(capacity, this.availableTokens + tokensToAdd);
            this.lastRefillTimeMillis = requestTimeMillis;
          }
        } else {
          throw new Error("Request time should not be before the last token refill time.");
        }
      }
      calculateCapacity(requestTimeMillis) {
        assert(requestTimeMillis >= this.startTimeMillis, "startTime cannot be after currentTime");
        const millisElapsed = requestTimeMillis - this.startTimeMillis;
        const operationsPerSecond = Math.min(Math.floor(Math.pow(this.multiplier, Math.floor(millisElapsed / this.multiplierMillis)) * this.initialCapacity), this.maximumCapacity);
        if (operationsPerSecond !== this.previousCapacity) {
          (0, logger_1.logger)("RateLimiter.calculateCapacity", null, `New request capacity: ${operationsPerSecond} operations per second.`);
        }
        this.previousCapacity = operationsPerSecond;
        return operationsPerSecond;
      }
    };
    exports2.RateLimiter = RateLimiter;
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf)
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString)
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (!equal(a[key], b[key]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    };
  }
});

// node_modules/@google-cloud/firestore/build/src/convert.js
var require_convert = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/convert.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fieldsFromJson = exports2.valueFromJson = exports2.detectValueType = exports2.timestampFromJson = void 0;
    var validate_1 = require_validate();
    function timestampFromJson(timestampValue, argumentName) {
      let timestampProto = {};
      if (typeof timestampValue === "string") {
        const date = new Date(timestampValue);
        const seconds = Math.floor(date.getTime() / 1e3);
        let nanos = 0;
        if (timestampValue.length > 20) {
          const nanoString = timestampValue.substring(20, timestampValue.length - 1);
          const trailingZeroes = 9 - nanoString.length;
          nanos = Number(nanoString) * Math.pow(10, trailingZeroes);
        }
        if (isNaN(seconds) || isNaN(nanos)) {
          argumentName = argumentName || "timestampValue";
          throw new Error(`Specify a valid ISO 8601 timestamp for "${argumentName}".`);
        }
        timestampProto = {
          seconds: seconds || void 0,
          nanos: nanos || void 0
        };
      } else if (timestampValue !== void 0) {
        (0, validate_1.validateObject)("timestampValue", timestampValue);
        timestampProto = {
          seconds: timestampValue.seconds || void 0,
          nanos: timestampValue.nanos || void 0
        };
      }
      return timestampProto;
    }
    exports2.timestampFromJson = timestampFromJson;
    function bytesFromJson(bytesValue) {
      if (typeof bytesValue === "string") {
        return Buffer.from(bytesValue, "base64");
      } else {
        return bytesValue;
      }
    }
    function detectValueType(proto) {
      if (proto.valueType) {
        return proto.valueType;
      }
      const detectedValues = [];
      if (proto.stringValue !== void 0) {
        detectedValues.push("stringValue");
      }
      if (proto.booleanValue !== void 0) {
        detectedValues.push("booleanValue");
      }
      if (proto.integerValue !== void 0) {
        detectedValues.push("integerValue");
      }
      if (proto.doubleValue !== void 0) {
        detectedValues.push("doubleValue");
      }
      if (proto.timestampValue !== void 0) {
        detectedValues.push("timestampValue");
      }
      if (proto.referenceValue !== void 0) {
        detectedValues.push("referenceValue");
      }
      if (proto.arrayValue !== void 0) {
        detectedValues.push("arrayValue");
      }
      if (proto.nullValue !== void 0) {
        detectedValues.push("nullValue");
      }
      if (proto.mapValue !== void 0) {
        detectedValues.push("mapValue");
      }
      if (proto.geoPointValue !== void 0) {
        detectedValues.push("geoPointValue");
      }
      if (proto.bytesValue !== void 0) {
        detectedValues.push("bytesValue");
      }
      if (detectedValues.length !== 1) {
        throw new Error(`Unable to infer type value from '${JSON.stringify(proto)}'.`);
      }
      return detectedValues[0];
    }
    exports2.detectValueType = detectValueType;
    function valueFromJson(fieldValue) {
      const valueType = detectValueType(fieldValue);
      switch (valueType) {
        case "timestampValue":
          return {
            timestampValue: timestampFromJson(fieldValue.timestampValue)
          };
        case "bytesValue":
          return {
            bytesValue: bytesFromJson(fieldValue.bytesValue)
          };
        case "doubleValue":
          return {
            doubleValue: Number(fieldValue.doubleValue)
          };
        case "arrayValue": {
          const arrayValue = [];
          if (Array.isArray(fieldValue.arrayValue.values)) {
            for (const value of fieldValue.arrayValue.values) {
              arrayValue.push(valueFromJson(value));
            }
          }
          return {
            arrayValue: {
              values: arrayValue
            }
          };
        }
        case "mapValue": {
          const mapValue = {};
          const fields = fieldValue.mapValue.fields;
          if (fields) {
            for (const prop of Object.keys(fields)) {
              mapValue[prop] = valueFromJson(fieldValue.mapValue.fields[prop]);
            }
          }
          return {
            mapValue: {
              fields: mapValue
            }
          };
        }
        default:
          return fieldValue;
      }
    }
    exports2.valueFromJson = valueFromJson;
    function fieldsFromJson(document) {
      const result = {};
      for (const prop of Object.keys(document)) {
        result[prop] = valueFromJson(document[prop]);
      }
      return result;
    }
    exports2.fieldsFromJson = fieldsFromJson;
  }
});

// node_modules/@google-cloud/firestore/build/src/geo-point.js
var require_geo_point = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/geo-point.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GeoPoint = void 0;
    var validate_1 = require_validate();
    var GeoPoint2 = class {
      constructor(latitude, longitude) {
        (0, validate_1.validateNumber)("latitude", latitude, { minValue: -90, maxValue: 90 });
        (0, validate_1.validateNumber)("longitude", longitude, { minValue: -180, maxValue: 180 });
        this._latitude = latitude;
        this._longitude = longitude;
      }
      get latitude() {
        return this._latitude;
      }
      get longitude() {
        return this._longitude;
      }
      isEqual(other) {
        return this === other || other instanceof GeoPoint2 && this.latitude === other.latitude && this.longitude === other.longitude;
      }
      toProto() {
        return {
          geoPointValue: {
            latitude: this.latitude,
            longitude: this.longitude
          }
        };
      }
      static fromProto(proto) {
        return new GeoPoint2(proto.latitude || 0, proto.longitude || 0);
      }
    };
    exports2.GeoPoint = GeoPoint2;
  }
});

// node_modules/@google-cloud/firestore/build/src/path.js
var require_path3 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateFieldPath = exports2.FieldPath = exports2.validateResourcePath = exports2.QualifiedResourcePath = exports2.ResourcePath = exports2.DEFAULT_DATABASE_ID = void 0;
    var util_1 = require_util5();
    var validate_1 = require_validate();
    exports2.DEFAULT_DATABASE_ID = "(default)";
    var RESOURCE_PATH_RE = /^projects\/([^/]*)\/databases\/([^/]*)(?:\/documents\/)?([\s\S]*)$/;
    var UNESCAPED_FIELD_NAME_RE = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
    var FIELD_PATH_RE = /^[^*~/[\]]+$/;
    var Path = class {
      constructor(segments) {
        this.segments = segments;
      }
      get size() {
        return this.segments.length;
      }
      append(relativePath) {
        if (relativePath instanceof Path) {
          return this.construct(this.segments.concat(relativePath.segments));
        }
        return this.construct(this.segments.concat(this.split(relativePath)));
      }
      parent() {
        if (this.segments.length === 0) {
          return null;
        }
        return this.construct(this.segments.slice(0, this.segments.length - 1));
      }
      isPrefixOf(other) {
        if (other.segments.length < this.segments.length) {
          return false;
        }
        for (let i = 0; i < this.segments.length; i++) {
          if (this.segments[i] !== other.segments[i]) {
            return false;
          }
        }
        return true;
      }
      compareTo(other) {
        const len = Math.min(this.segments.length, other.segments.length);
        for (let i = 0; i < len; i++) {
          if (this.segments[i] < other.segments[i]) {
            return -1;
          }
          if (this.segments[i] > other.segments[i]) {
            return 1;
          }
        }
        if (this.segments.length < other.segments.length) {
          return -1;
        }
        if (this.segments.length > other.segments.length) {
          return 1;
        }
        return 0;
      }
      toArray() {
        return this.segments.slice();
      }
      popLast() {
        this.segments.pop();
        return this.construct(this.segments);
      }
      isEqual(other) {
        return this === other || this.compareTo(other) === 0;
      }
    };
    var ResourcePath = class extends Path {
      constructor(...segments) {
        super(segments);
      }
      get isDocument() {
        return this.segments.length > 0 && this.segments.length % 2 === 0;
      }
      get isCollection() {
        return this.segments.length % 2 === 1;
      }
      get id() {
        if (this.segments.length > 0) {
          return this.segments[this.segments.length - 1];
        }
        return null;
      }
      get relativeName() {
        return this.segments.join("/");
      }
      construct(segments) {
        return new ResourcePath(...segments);
      }
      split(relativePath) {
        return relativePath.split("/").filter((segment) => segment.length > 0);
      }
      toQualifiedResourcePath(projectIdIfMissing) {
        return new QualifiedResourcePath(projectIdIfMissing, exports2.DEFAULT_DATABASE_ID, ...this.segments);
      }
    };
    exports2.ResourcePath = ResourcePath;
    ResourcePath.EMPTY = new ResourcePath();
    var QualifiedResourcePath = class extends ResourcePath {
      constructor(projectId, databaseId, ...segments) {
        super(...segments);
        this.projectId = projectId;
        this.databaseId = databaseId;
      }
      get relativeName() {
        return this.segments.join("/");
      }
      static fromSlashSeparatedString(absolutePath) {
        const elements = RESOURCE_PATH_RE.exec(absolutePath);
        if (elements) {
          const project = elements[1];
          const database = elements[2];
          const path = elements[3];
          return new QualifiedResourcePath(project, database).append(path);
        }
        throw new Error(`Resource name '${absolutePath}' is not valid.`);
      }
      append(relativePath) {
        return super.append(relativePath);
      }
      parent() {
        return super.parent();
      }
      get formattedName() {
        const components = [
          "projects",
          this.projectId,
          "databases",
          this.databaseId,
          "documents",
          ...this.segments
        ];
        return components.join("/");
      }
      construct(segments) {
        return new QualifiedResourcePath(this.projectId, this.databaseId, ...segments);
      }
      toQualifiedResourcePath() {
        return this;
      }
      compareTo(other) {
        if (other instanceof QualifiedResourcePath) {
          if (this.projectId < other.projectId) {
            return -1;
          }
          if (this.projectId > other.projectId) {
            return 1;
          }
          if (this.databaseId < other.databaseId) {
            return -1;
          }
          if (this.databaseId > other.databaseId) {
            return 1;
          }
        }
        return super.compareTo(other);
      }
      toProto() {
        return {
          referenceValue: this.formattedName
        };
      }
    };
    exports2.QualifiedResourcePath = QualifiedResourcePath;
    function validateResourcePath(arg, resourcePath) {
      if (typeof resourcePath !== "string" || resourcePath === "") {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "resource path")} Path must be a non-empty string.`);
      }
      if (resourcePath.indexOf("//") >= 0) {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "resource path")} Paths must not contain //.`);
      }
    }
    exports2.validateResourcePath = validateResourcePath;
    var FieldPath2 = class extends Path {
      constructor(...segments) {
        if (Array.isArray(segments[0])) {
          throw new Error("The FieldPath constructor no longer supports an array as its first argument. Please unpack your array and call FieldPath() with individual arguments.");
        }
        (0, validate_1.validateMinNumberOfArguments)("FieldPath", segments, 1);
        for (let i = 0; i < segments.length; ++i) {
          (0, validate_1.validateString)(i, segments[i]);
          if (segments[i].length === 0) {
            throw new Error(`Element at index ${i} should not be an empty string.`);
          }
        }
        super(segments);
      }
      static documentId() {
        return FieldPath2._DOCUMENT_ID;
      }
      static fromArgument(fieldPath) {
        return fieldPath instanceof FieldPath2 ? fieldPath : new FieldPath2(...fieldPath.split("."));
      }
      get formattedName() {
        return this.segments.map((str) => {
          return UNESCAPED_FIELD_NAME_RE.test(str) ? str : "`" + str.replace("\\", "\\\\").replace("`", "\\`") + "`";
        }).join(".");
      }
      toString() {
        return this.formattedName;
      }
      split(fieldPath) {
        return fieldPath.split(".");
      }
      construct(segments) {
        return new FieldPath2(...segments);
      }
      isEqual(other) {
        return super.isEqual(other);
      }
    };
    exports2.FieldPath = FieldPath2;
    FieldPath2._DOCUMENT_ID = new FieldPath2("__name__");
    function validateFieldPath(arg, fieldPath) {
      if (fieldPath instanceof FieldPath2) {
        return;
      }
      if (fieldPath === void 0) {
        throw new Error((0, validate_1.invalidArgumentMessage)(arg, "field path") + " The path cannot be omitted.");
      }
      if ((0, util_1.isObject)(fieldPath) && fieldPath.constructor.name === "FieldPath") {
        throw new Error((0, validate_1.customObjectMessage)(arg, fieldPath));
      }
      if (typeof fieldPath !== "string") {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "field path")} Paths can only be specified as strings or via a FieldPath object.`);
      }
      if (fieldPath.indexOf("..") >= 0) {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "field path")} Paths must not contain ".." in them.`);
      }
      if (fieldPath.startsWith(".") || fieldPath.endsWith(".")) {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "field path")} Paths must not start or end with ".".`);
      }
      if (!FIELD_PATH_RE.test(fieldPath)) {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "field path")} Paths can't be empty and must not contain
    "*~/[]".`);
      }
    }
    exports2.validateFieldPath = validateFieldPath;
  }
});

// node_modules/@google-cloud/firestore/build/src/serializer.js
var require_serializer = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/serializer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateUserInput = exports2.Serializer = void 0;
    var convert_1 = require_convert();
    var field_value_1 = require_field_value();
    var geo_point_1 = require_geo_point();
    var index_1 = require_src9();
    var path_1 = require_path3();
    var timestamp_1 = require_timestamp2();
    var util_1 = require_util5();
    var validate_1 = require_validate();
    var MAX_DEPTH = 20;
    var Serializer = class {
      constructor(firestore) {
        this.createReference = (path) => firestore.doc(path);
        this.createInteger = (n) => firestore._settings.useBigInt ? BigInt(n) : Number(n);
        this.allowUndefined = !!firestore._settings.ignoreUndefinedProperties;
      }
      encodeFields(obj) {
        const fields = {};
        for (const prop of Object.keys(obj)) {
          const val = this.encodeValue(obj[prop]);
          if (val) {
            fields[prop] = val;
          }
        }
        return fields;
      }
      encodeValue(val) {
        if (val instanceof field_value_1.FieldTransform) {
          return null;
        }
        if (typeof val === "string") {
          return {
            stringValue: val
          };
        }
        if (typeof val === "boolean") {
          return {
            booleanValue: val
          };
        }
        if (typeof val === "number") {
          const isNegativeZero = val === 0 && 1 / val === 1 / -0;
          if (Number.isSafeInteger(val) && !isNegativeZero) {
            return {
              integerValue: val
            };
          } else {
            return {
              doubleValue: val
            };
          }
        }
        if (typeof val === "bigint") {
          return {
            integerValue: val.toString()
          };
        }
        if (val instanceof Date) {
          const timestamp = timestamp_1.Timestamp.fromDate(val);
          return {
            timestampValue: {
              seconds: timestamp.seconds,
              nanos: timestamp.nanoseconds
            }
          };
        }
        if (isMomentJsType(val)) {
          const timestamp = timestamp_1.Timestamp.fromDate(val.toDate());
          return {
            timestampValue: {
              seconds: timestamp.seconds,
              nanos: timestamp.nanoseconds
            }
          };
        }
        if (val === null) {
          return {
            nullValue: "NULL_VALUE"
          };
        }
        if (val instanceof Buffer || val instanceof Uint8Array) {
          return {
            bytesValue: val
          };
        }
        if ((0, util_1.isObject)(val)) {
          const toProto = val["toProto"];
          if (typeof toProto === "function") {
            return toProto.bind(val)();
          }
        }
        if (Array.isArray(val)) {
          const array = {
            arrayValue: {}
          };
          if (val.length > 0) {
            array.arrayValue.values = [];
            for (let i = 0; i < val.length; ++i) {
              const enc = this.encodeValue(val[i]);
              if (enc) {
                array.arrayValue.values.push(enc);
              }
            }
          }
          return array;
        }
        if (typeof val === "object" && (0, util_1.isPlainObject)(val)) {
          const map = {
            mapValue: {}
          };
          if (!(0, util_1.isEmpty)(val)) {
            map.mapValue.fields = this.encodeFields(val);
            if ((0, util_1.isEmpty)(map.mapValue.fields)) {
              return null;
            }
          }
          return map;
        }
        if (val === void 0 && this.allowUndefined) {
          return null;
        }
        throw new Error(`Cannot encode value: ${val}`);
      }
      decodeValue(proto) {
        const valueType = (0, convert_1.detectValueType)(proto);
        switch (valueType) {
          case "stringValue": {
            return proto.stringValue;
          }
          case "booleanValue": {
            return proto.booleanValue;
          }
          case "integerValue": {
            return this.createInteger(proto.integerValue);
          }
          case "doubleValue": {
            return proto.doubleValue;
          }
          case "timestampValue": {
            return timestamp_1.Timestamp.fromProto(proto.timestampValue);
          }
          case "referenceValue": {
            const resourcePath = path_1.QualifiedResourcePath.fromSlashSeparatedString(proto.referenceValue);
            return this.createReference(resourcePath.relativeName);
          }
          case "arrayValue": {
            const array = [];
            if (Array.isArray(proto.arrayValue.values)) {
              for (const value of proto.arrayValue.values) {
                array.push(this.decodeValue(value));
              }
            }
            return array;
          }
          case "nullValue": {
            return null;
          }
          case "mapValue": {
            const obj = {};
            const fields = proto.mapValue.fields;
            if (fields) {
              for (const prop of Object.keys(fields)) {
                obj[prop] = this.decodeValue(fields[prop]);
              }
            }
            return obj;
          }
          case "geoPointValue": {
            return geo_point_1.GeoPoint.fromProto(proto.geoPointValue);
          }
          case "bytesValue": {
            return proto.bytesValue;
          }
          default: {
            throw new Error("Cannot decode type from Firestore Value: " + JSON.stringify(proto));
          }
        }
      }
    };
    exports2.Serializer = Serializer;
    function validateUserInput(arg, value, desc, options, path, level, inArray) {
      if (path && path.size > MAX_DEPTH) {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Input object is deeper than ${MAX_DEPTH} levels or contains a cycle.`);
      }
      level = level || 0;
      inArray = inArray || false;
      const fieldPathMessage = path ? ` (found in field "${path}")` : "";
      if (Array.isArray(value)) {
        for (let i = 0; i < value.length; ++i) {
          validateUserInput(
            arg,
            value[i],
            desc,
            options,
            path ? path.append(String(i)) : new path_1.FieldPath(String(i)),
            level + 1,
            true
          );
        }
      } else if ((0, util_1.isPlainObject)(value)) {
        for (const prop of Object.keys(value)) {
          validateUserInput(arg, value[prop], desc, options, path ? path.append(new path_1.FieldPath(prop)) : new path_1.FieldPath(prop), level + 1, inArray);
        }
      } else if (value === void 0) {
        if (options.allowUndefined && level === 0) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} "undefined" values are only ignored inside of objects.`);
        } else if (!options.allowUndefined) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use "undefined" as a Firestore value${fieldPathMessage}. If you want to ignore undefined values, enable \`ignoreUndefinedProperties\`.`);
        }
      } else if (value instanceof field_value_1.DeleteTransform) {
        if (inArray) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);
        } else if (options.allowDeletes === "none") {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() or set() with {merge:true}${fieldPathMessage}.`);
        } else if (options.allowDeletes === "root") {
          if (level === 0) {
          } else if (level === 1 && (path === null || path === void 0 ? void 0 : path.size) === 1) {
          } else {
            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() or set() with {merge:true}${fieldPathMessage}.`);
          }
        }
      } else if (value instanceof field_value_1.FieldTransform) {
        if (inArray) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);
        } else if (!options.allowTransforms) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() can only be used in set(), create() or update()${fieldPathMessage}.`);
        }
      } else if (value instanceof path_1.FieldPath) {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use object of type "FieldPath" as a Firestore value${fieldPathMessage}.`);
      } else if (value instanceof index_1.DocumentReference) {
      } else if (value instanceof geo_point_1.GeoPoint) {
      } else if (value instanceof timestamp_1.Timestamp || value instanceof Date) {
      } else if (isMomentJsType(value)) {
      } else if (value instanceof Buffer || value instanceof Uint8Array) {
      } else if (value === null) {
      } else if (typeof value === "object") {
        throw new Error((0, validate_1.customObjectMessage)(arg, value, path));
      }
    }
    exports2.validateUserInput = validateUserInput;
    function isMomentJsType(value) {
      return typeof value === "object" && value !== null && value.constructor && value.constructor.name === "Moment" && typeof value.toDate === "function";
    }
  }
});

// node_modules/@google-cloud/firestore/build/src/field-value.js
var require_field_value = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/field-value.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteTransform = exports2.FieldTransform = exports2.FieldValue = void 0;
    var deepEqual = require_fast_deep_equal();
    var serializer_1 = require_serializer();
    var validate_1 = require_validate();
    var FieldValue2 = class {
      constructor() {
      }
      static delete() {
        return DeleteTransform.DELETE_SENTINEL;
      }
      static serverTimestamp() {
        return ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL;
      }
      static increment(n) {
        (0, validate_1.validateMinNumberOfArguments)("FieldValue.increment", arguments, 1);
        return new NumericIncrementTransform(n);
      }
      static arrayUnion(...elements) {
        (0, validate_1.validateMinNumberOfArguments)("FieldValue.arrayUnion", elements, 1);
        return new ArrayUnionTransform(elements);
      }
      static arrayRemove(...elements) {
        (0, validate_1.validateMinNumberOfArguments)("FieldValue.arrayRemove", elements, 1);
        return new ArrayRemoveTransform(elements);
      }
      isEqual(other) {
        return this === other;
      }
    };
    exports2.FieldValue = FieldValue2;
    var FieldTransform = class extends FieldValue2 {
    };
    exports2.FieldTransform = FieldTransform;
    var DeleteTransform = class extends FieldTransform {
      constructor() {
        super();
      }
      get includeInDocumentMask() {
        return true;
      }
      get includeInDocumentTransform() {
        return false;
      }
      get methodName() {
        return "FieldValue.delete";
      }
      validate() {
      }
      toProto() {
        throw new Error("FieldValue.delete() should not be included in a FieldTransform");
      }
    };
    exports2.DeleteTransform = DeleteTransform;
    DeleteTransform.DELETE_SENTINEL = new DeleteTransform();
    var ServerTimestampTransform = class extends FieldTransform {
      constructor() {
        super();
      }
      get includeInDocumentMask() {
        return false;
      }
      get includeInDocumentTransform() {
        return true;
      }
      get methodName() {
        return "FieldValue.serverTimestamp";
      }
      validate() {
      }
      toProto(serializer, fieldPath) {
        return {
          fieldPath: fieldPath.formattedName,
          setToServerValue: "REQUEST_TIME"
        };
      }
    };
    ServerTimestampTransform.SERVER_TIMESTAMP_SENTINEL = new ServerTimestampTransform();
    var NumericIncrementTransform = class extends FieldTransform {
      constructor(operand) {
        super();
        this.operand = operand;
      }
      get includeInDocumentMask() {
        return false;
      }
      get includeInDocumentTransform() {
        return true;
      }
      get methodName() {
        return "FieldValue.increment";
      }
      validate() {
        (0, validate_1.validateNumber)("FieldValue.increment()", this.operand);
      }
      toProto(serializer, fieldPath) {
        const encodedOperand = serializer.encodeValue(this.operand);
        return { fieldPath: fieldPath.formattedName, increment: encodedOperand };
      }
      isEqual(other) {
        return this === other || other instanceof NumericIncrementTransform && this.operand === other.operand;
      }
    };
    var ArrayUnionTransform = class extends FieldTransform {
      constructor(elements) {
        super();
        this.elements = elements;
      }
      get includeInDocumentMask() {
        return false;
      }
      get includeInDocumentTransform() {
        return true;
      }
      get methodName() {
        return "FieldValue.arrayUnion";
      }
      validate(allowUndefined) {
        for (let i = 0; i < this.elements.length; ++i) {
          validateArrayElement(i, this.elements[i], allowUndefined);
        }
      }
      toProto(serializer, fieldPath) {
        const encodedElements = serializer.encodeValue(this.elements).arrayValue;
        return {
          fieldPath: fieldPath.formattedName,
          appendMissingElements: encodedElements
        };
      }
      isEqual(other) {
        return this === other || other instanceof ArrayUnionTransform && deepEqual(this.elements, other.elements);
      }
    };
    var ArrayRemoveTransform = class extends FieldTransform {
      constructor(elements) {
        super();
        this.elements = elements;
      }
      get includeInDocumentMask() {
        return false;
      }
      get includeInDocumentTransform() {
        return true;
      }
      get methodName() {
        return "FieldValue.arrayRemove";
      }
      validate(allowUndefined) {
        for (let i = 0; i < this.elements.length; ++i) {
          validateArrayElement(i, this.elements[i], allowUndefined);
        }
      }
      toProto(serializer, fieldPath) {
        const encodedElements = serializer.encodeValue(this.elements).arrayValue;
        return {
          fieldPath: fieldPath.formattedName,
          removeAllFromArray: encodedElements
        };
      }
      isEqual(other) {
        return this === other || other instanceof ArrayRemoveTransform && deepEqual(this.elements, other.elements);
      }
    };
    function validateArrayElement(arg, value, allowUndefined) {
      if (Array.isArray(value)) {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "array element")} Nested arrays are not supported.`);
      }
      (0, serializer_1.validateUserInput)(
        arg,
        value,
        "array element",
        { allowDeletes: "none", allowTransforms: false, allowUndefined },
        void 0,
        0,
        true
      );
    }
  }
});

// node_modules/@google-cloud/firestore/build/src/document-change.js
var require_document_change = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/document-change.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DocumentChange = void 0;
    var DocumentChange = class {
      constructor(type, document, oldIndex, newIndex) {
        this._type = type;
        this._document = document;
        this._oldIndex = oldIndex;
        this._newIndex = newIndex;
      }
      get type() {
        return this._type;
      }
      get doc() {
        return this._document;
      }
      get oldIndex() {
        return this._oldIndex;
      }
      get newIndex() {
        return this._newIndex;
      }
      isEqual(other) {
        if (this === other) {
          return true;
        }
        return other instanceof DocumentChange && this._type === other._type && this._oldIndex === other._oldIndex && this._newIndex === other._newIndex && this._document.isEqual(other._document);
      }
    };
    exports2.DocumentChange = DocumentChange;
  }
});

// node_modules/@google-cloud/firestore/build/src/order.js
var require_order = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/order.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compare = exports2.compareArrays = exports2.primitiveComparator = void 0;
    var convert_1 = require_convert();
    var path_1 = require_path3();
    var TypeOrder;
    (function(TypeOrder2) {
      TypeOrder2[TypeOrder2["NULL"] = 0] = "NULL";
      TypeOrder2[TypeOrder2["BOOLEAN"] = 1] = "BOOLEAN";
      TypeOrder2[TypeOrder2["NUMBER"] = 2] = "NUMBER";
      TypeOrder2[TypeOrder2["TIMESTAMP"] = 3] = "TIMESTAMP";
      TypeOrder2[TypeOrder2["STRING"] = 4] = "STRING";
      TypeOrder2[TypeOrder2["BLOB"] = 5] = "BLOB";
      TypeOrder2[TypeOrder2["REF"] = 6] = "REF";
      TypeOrder2[TypeOrder2["GEO_POINT"] = 7] = "GEO_POINT";
      TypeOrder2[TypeOrder2["ARRAY"] = 8] = "ARRAY";
      TypeOrder2[TypeOrder2["OBJECT"] = 9] = "OBJECT";
    })(TypeOrder || (TypeOrder = {}));
    function typeOrder(val) {
      const valueType = (0, convert_1.detectValueType)(val);
      switch (valueType) {
        case "nullValue":
          return TypeOrder.NULL;
        case "integerValue":
          return TypeOrder.NUMBER;
        case "doubleValue":
          return TypeOrder.NUMBER;
        case "stringValue":
          return TypeOrder.STRING;
        case "booleanValue":
          return TypeOrder.BOOLEAN;
        case "arrayValue":
          return TypeOrder.ARRAY;
        case "timestampValue":
          return TypeOrder.TIMESTAMP;
        case "geoPointValue":
          return TypeOrder.GEO_POINT;
        case "bytesValue":
          return TypeOrder.BLOB;
        case "referenceValue":
          return TypeOrder.REF;
        case "mapValue":
          return TypeOrder.OBJECT;
        default:
          throw new Error("Unexpected value type: " + valueType);
      }
    }
    function primitiveComparator(left, right) {
      if (left < right) {
        return -1;
      }
      if (left > right) {
        return 1;
      }
      return 0;
    }
    exports2.primitiveComparator = primitiveComparator;
    function compareNumbers(left, right) {
      if (left < right) {
        return -1;
      }
      if (left > right) {
        return 1;
      }
      if (left === right) {
        return 0;
      }
      if (isNaN(left)) {
        return isNaN(right) ? 0 : -1;
      }
      return 1;
    }
    function compareNumberProtos(left, right) {
      let leftValue, rightValue;
      if (left.integerValue !== void 0) {
        leftValue = Number(left.integerValue);
      } else {
        leftValue = Number(left.doubleValue);
      }
      if (right.integerValue !== void 0) {
        rightValue = Number(right.integerValue);
      } else {
        rightValue = Number(right.doubleValue);
      }
      return compareNumbers(leftValue, rightValue);
    }
    function compareTimestamps(left, right) {
      const seconds = primitiveComparator(left.seconds || 0, right.seconds || 0);
      if (seconds !== 0) {
        return seconds;
      }
      return primitiveComparator(left.nanos || 0, right.nanos || 0);
    }
    function compareBlobs(left, right) {
      if (!(left instanceof Buffer) || !(right instanceof Buffer)) {
        throw new Error("Blobs can only be compared if they are Buffers.");
      }
      return Buffer.compare(left, right);
    }
    function compareReferenceProtos(left, right) {
      const leftPath = path_1.QualifiedResourcePath.fromSlashSeparatedString(left.referenceValue);
      const rightPath = path_1.QualifiedResourcePath.fromSlashSeparatedString(right.referenceValue);
      return leftPath.compareTo(rightPath);
    }
    function compareGeoPoints(left, right) {
      return primitiveComparator(left.latitude || 0, right.latitude || 0) || primitiveComparator(left.longitude || 0, right.longitude || 0);
    }
    function compareArrays(left, right) {
      for (let i = 0; i < left.length && i < right.length; i++) {
        const valueComparison = compare(left[i], right[i]);
        if (valueComparison !== 0) {
          return valueComparison;
        }
      }
      return primitiveComparator(left.length, right.length);
    }
    exports2.compareArrays = compareArrays;
    function compareObjects(left, right) {
      const leftKeys = Object.keys(left);
      const rightKeys = Object.keys(right);
      leftKeys.sort();
      rightKeys.sort();
      for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
        const keyComparison = primitiveComparator(leftKeys[i], rightKeys[i]);
        if (keyComparison !== 0) {
          return keyComparison;
        }
        const key = leftKeys[i];
        const valueComparison = compare(left[key], right[key]);
        if (valueComparison !== 0) {
          return valueComparison;
        }
      }
      return primitiveComparator(leftKeys.length, rightKeys.length);
    }
    function compare(left, right) {
      const leftType = typeOrder(left);
      const rightType = typeOrder(right);
      const typeComparison = primitiveComparator(leftType, rightType);
      if (typeComparison !== 0) {
        return typeComparison;
      }
      switch (leftType) {
        case TypeOrder.NULL:
          return 0;
        case TypeOrder.BOOLEAN:
          return primitiveComparator(left.booleanValue, right.booleanValue);
        case TypeOrder.STRING:
          return primitiveComparator(left.stringValue, right.stringValue);
        case TypeOrder.NUMBER:
          return compareNumberProtos(left, right);
        case TypeOrder.TIMESTAMP:
          return compareTimestamps(left.timestampValue, right.timestampValue);
        case TypeOrder.BLOB:
          return compareBlobs(left.bytesValue, right.bytesValue);
        case TypeOrder.REF:
          return compareReferenceProtos(left, right);
        case TypeOrder.GEO_POINT:
          return compareGeoPoints(left.geoPointValue, right.geoPointValue);
        case TypeOrder.ARRAY:
          return compareArrays(left.arrayValue.values || [], right.arrayValue.values || []);
        case TypeOrder.OBJECT:
          return compareObjects(left.mapValue.fields || {}, right.mapValue.fields || {});
        default:
          throw new Error(`Encountered unknown type order: ${leftType}`);
      }
    }
    exports2.compare = compare;
  }
});

// node_modules/@google-cloud/firestore/build/src/types.js
var require_types2 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultConverter = void 0;
    var defaultConverterObj = {
      toFirestore(modelObject) {
        return modelObject;
      },
      fromFirestore(snapshot) {
        return snapshot.data();
      }
    };
    function defaultConverter() {
      return defaultConverterObj;
    }
    exports2.defaultConverter = defaultConverter;
  }
});

// node_modules/functional-red-black-tree/rbtree.js
var require_rbtree = __commonJS({
  "node_modules/functional-red-black-tree/rbtree.js"(exports2, module2) {
    "use strict";
    module2.exports = createRBTree;
    var RED = 0;
    var BLACK = 1;
    function RBNode(color, key, value, left, right, count) {
      this._color = color;
      this.key = key;
      this.value = value;
      this.left = left;
      this.right = right;
      this._count = count;
    }
    function cloneNode(node) {
      return new RBNode(node._color, node.key, node.value, node.left, node.right, node._count);
    }
    function repaint(color, node) {
      return new RBNode(color, node.key, node.value, node.left, node.right, node._count);
    }
    function recount(node) {
      node._count = 1 + (node.left ? node.left._count : 0) + (node.right ? node.right._count : 0);
    }
    function RedBlackTree(compare, root) {
      this._compare = compare;
      this.root = root;
    }
    var proto = RedBlackTree.prototype;
    Object.defineProperty(proto, "keys", {
      get: function() {
        var result = [];
        this.forEach(function(k, v) {
          result.push(k);
        });
        return result;
      }
    });
    Object.defineProperty(proto, "values", {
      get: function() {
        var result = [];
        this.forEach(function(k, v) {
          result.push(v);
        });
        return result;
      }
    });
    Object.defineProperty(proto, "length", {
      get: function() {
        if (this.root) {
          return this.root._count;
        }
        return 0;
      }
    });
    proto.insert = function(key, value) {
      var cmp = this._compare;
      var n = this.root;
      var n_stack = [];
      var d_stack = [];
      while (n) {
        var d = cmp(key, n.key);
        n_stack.push(n);
        d_stack.push(d);
        if (d <= 0) {
          n = n.left;
        } else {
          n = n.right;
        }
      }
      n_stack.push(new RBNode(RED, key, value, null, null, 1));
      for (var s = n_stack.length - 2; s >= 0; --s) {
        var n = n_stack[s];
        if (d_stack[s] <= 0) {
          n_stack[s] = new RBNode(n._color, n.key, n.value, n_stack[s + 1], n.right, n._count + 1);
        } else {
          n_stack[s] = new RBNode(n._color, n.key, n.value, n.left, n_stack[s + 1], n._count + 1);
        }
      }
      for (var s = n_stack.length - 1; s > 1; --s) {
        var p = n_stack[s - 1];
        var n = n_stack[s];
        if (p._color === BLACK || n._color === BLACK) {
          break;
        }
        var pp = n_stack[s - 2];
        if (pp.left === p) {
          if (p.left === n) {
            var y = pp.right;
            if (y && y._color === RED) {
              p._color = BLACK;
              pp.right = repaint(BLACK, y);
              pp._color = RED;
              s -= 1;
            } else {
              pp._color = RED;
              pp.left = p.right;
              p._color = BLACK;
              p.right = pp;
              n_stack[s - 2] = p;
              n_stack[s - 1] = n;
              recount(pp);
              recount(p);
              if (s >= 3) {
                var ppp = n_stack[s - 3];
                if (ppp.left === pp) {
                  ppp.left = p;
                } else {
                  ppp.right = p;
                }
              }
              break;
            }
          } else {
            var y = pp.right;
            if (y && y._color === RED) {
              p._color = BLACK;
              pp.right = repaint(BLACK, y);
              pp._color = RED;
              s -= 1;
            } else {
              p.right = n.left;
              pp._color = RED;
              pp.left = n.right;
              n._color = BLACK;
              n.left = p;
              n.right = pp;
              n_stack[s - 2] = n;
              n_stack[s - 1] = p;
              recount(pp);
              recount(p);
              recount(n);
              if (s >= 3) {
                var ppp = n_stack[s - 3];
                if (ppp.left === pp) {
                  ppp.left = n;
                } else {
                  ppp.right = n;
                }
              }
              break;
            }
          }
        } else {
          if (p.right === n) {
            var y = pp.left;
            if (y && y._color === RED) {
              p._color = BLACK;
              pp.left = repaint(BLACK, y);
              pp._color = RED;
              s -= 1;
            } else {
              pp._color = RED;
              pp.right = p.left;
              p._color = BLACK;
              p.left = pp;
              n_stack[s - 2] = p;
              n_stack[s - 1] = n;
              recount(pp);
              recount(p);
              if (s >= 3) {
                var ppp = n_stack[s - 3];
                if (ppp.right === pp) {
                  ppp.right = p;
                } else {
                  ppp.left = p;
                }
              }
              break;
            }
          } else {
            var y = pp.left;
            if (y && y._color === RED) {
              p._color = BLACK;
              pp.left = repaint(BLACK, y);
              pp._color = RED;
              s -= 1;
            } else {
              p.left = n.right;
              pp._color = RED;
              pp.right = n.left;
              n._color = BLACK;
              n.right = p;
              n.left = pp;
              n_stack[s - 2] = n;
              n_stack[s - 1] = p;
              recount(pp);
              recount(p);
              recount(n);
              if (s >= 3) {
                var ppp = n_stack[s - 3];
                if (ppp.right === pp) {
                  ppp.right = n;
                } else {
                  ppp.left = n;
                }
              }
              break;
            }
          }
        }
      }
      n_stack[0]._color = BLACK;
      return new RedBlackTree(cmp, n_stack[0]);
    };
    function doVisitFull(visit, node) {
      if (node.left) {
        var v = doVisitFull(visit, node.left);
        if (v) {
          return v;
        }
      }
      var v = visit(node.key, node.value);
      if (v) {
        return v;
      }
      if (node.right) {
        return doVisitFull(visit, node.right);
      }
    }
    function doVisitHalf(lo, compare, visit, node) {
      var l = compare(lo, node.key);
      if (l <= 0) {
        if (node.left) {
          var v = doVisitHalf(lo, compare, visit, node.left);
          if (v) {
            return v;
          }
        }
        var v = visit(node.key, node.value);
        if (v) {
          return v;
        }
      }
      if (node.right) {
        return doVisitHalf(lo, compare, visit, node.right);
      }
    }
    function doVisit(lo, hi, compare, visit, node) {
      var l = compare(lo, node.key);
      var h = compare(hi, node.key);
      var v;
      if (l <= 0) {
        if (node.left) {
          v = doVisit(lo, hi, compare, visit, node.left);
          if (v) {
            return v;
          }
        }
        if (h > 0) {
          v = visit(node.key, node.value);
          if (v) {
            return v;
          }
        }
      }
      if (h > 0 && node.right) {
        return doVisit(lo, hi, compare, visit, node.right);
      }
    }
    proto.forEach = function rbTreeForEach(visit, lo, hi) {
      if (!this.root) {
        return;
      }
      switch (arguments.length) {
        case 1:
          return doVisitFull(visit, this.root);
          break;
        case 2:
          return doVisitHalf(lo, this._compare, visit, this.root);
          break;
        case 3:
          if (this._compare(lo, hi) >= 0) {
            return;
          }
          return doVisit(lo, hi, this._compare, visit, this.root);
          break;
      }
    };
    Object.defineProperty(proto, "begin", {
      get: function() {
        var stack = [];
        var n = this.root;
        while (n) {
          stack.push(n);
          n = n.left;
        }
        return new RedBlackTreeIterator(this, stack);
      }
    });
    Object.defineProperty(proto, "end", {
      get: function() {
        var stack = [];
        var n = this.root;
        while (n) {
          stack.push(n);
          n = n.right;
        }
        return new RedBlackTreeIterator(this, stack);
      }
    });
    proto.at = function(idx) {
      if (idx < 0) {
        return new RedBlackTreeIterator(this, []);
      }
      var n = this.root;
      var stack = [];
      while (true) {
        stack.push(n);
        if (n.left) {
          if (idx < n.left._count) {
            n = n.left;
            continue;
          }
          idx -= n.left._count;
        }
        if (!idx) {
          return new RedBlackTreeIterator(this, stack);
        }
        idx -= 1;
        if (n.right) {
          if (idx >= n.right._count) {
            break;
          }
          n = n.right;
        } else {
          break;
        }
      }
      return new RedBlackTreeIterator(this, []);
    };
    proto.ge = function(key) {
      var cmp = this._compare;
      var n = this.root;
      var stack = [];
      var last_ptr = 0;
      while (n) {
        var d = cmp(key, n.key);
        stack.push(n);
        if (d <= 0) {
          last_ptr = stack.length;
        }
        if (d <= 0) {
          n = n.left;
        } else {
          n = n.right;
        }
      }
      stack.length = last_ptr;
      return new RedBlackTreeIterator(this, stack);
    };
    proto.gt = function(key) {
      var cmp = this._compare;
      var n = this.root;
      var stack = [];
      var last_ptr = 0;
      while (n) {
        var d = cmp(key, n.key);
        stack.push(n);
        if (d < 0) {
          last_ptr = stack.length;
        }
        if (d < 0) {
          n = n.left;
        } else {
          n = n.right;
        }
      }
      stack.length = last_ptr;
      return new RedBlackTreeIterator(this, stack);
    };
    proto.lt = function(key) {
      var cmp = this._compare;
      var n = this.root;
      var stack = [];
      var last_ptr = 0;
      while (n) {
        var d = cmp(key, n.key);
        stack.push(n);
        if (d > 0) {
          last_ptr = stack.length;
        }
        if (d <= 0) {
          n = n.left;
        } else {
          n = n.right;
        }
      }
      stack.length = last_ptr;
      return new RedBlackTreeIterator(this, stack);
    };
    proto.le = function(key) {
      var cmp = this._compare;
      var n = this.root;
      var stack = [];
      var last_ptr = 0;
      while (n) {
        var d = cmp(key, n.key);
        stack.push(n);
        if (d >= 0) {
          last_ptr = stack.length;
        }
        if (d < 0) {
          n = n.left;
        } else {
          n = n.right;
        }
      }
      stack.length = last_ptr;
      return new RedBlackTreeIterator(this, stack);
    };
    proto.find = function(key) {
      var cmp = this._compare;
      var n = this.root;
      var stack = [];
      while (n) {
        var d = cmp(key, n.key);
        stack.push(n);
        if (d === 0) {
          return new RedBlackTreeIterator(this, stack);
        }
        if (d <= 0) {
          n = n.left;
        } else {
          n = n.right;
        }
      }
      return new RedBlackTreeIterator(this, []);
    };
    proto.remove = function(key) {
      var iter = this.find(key);
      if (iter) {
        return iter.remove();
      }
      return this;
    };
    proto.get = function(key) {
      var cmp = this._compare;
      var n = this.root;
      while (n) {
        var d = cmp(key, n.key);
        if (d === 0) {
          return n.value;
        }
        if (d <= 0) {
          n = n.left;
        } else {
          n = n.right;
        }
      }
      return;
    };
    function RedBlackTreeIterator(tree, stack) {
      this.tree = tree;
      this._stack = stack;
    }
    var iproto = RedBlackTreeIterator.prototype;
    Object.defineProperty(iproto, "valid", {
      get: function() {
        return this._stack.length > 0;
      }
    });
    Object.defineProperty(iproto, "node", {
      get: function() {
        if (this._stack.length > 0) {
          return this._stack[this._stack.length - 1];
        }
        return null;
      },
      enumerable: true
    });
    iproto.clone = function() {
      return new RedBlackTreeIterator(this.tree, this._stack.slice());
    };
    function swapNode(n, v) {
      n.key = v.key;
      n.value = v.value;
      n.left = v.left;
      n.right = v.right;
      n._color = v._color;
      n._count = v._count;
    }
    function fixDoubleBlack(stack) {
      var n, p, s, z;
      for (var i = stack.length - 1; i >= 0; --i) {
        n = stack[i];
        if (i === 0) {
          n._color = BLACK;
          return;
        }
        p = stack[i - 1];
        if (p.left === n) {
          s = p.right;
          if (s.right && s.right._color === RED) {
            s = p.right = cloneNode(s);
            z = s.right = cloneNode(s.right);
            p.right = s.left;
            s.left = p;
            s.right = z;
            s._color = p._color;
            n._color = BLACK;
            p._color = BLACK;
            z._color = BLACK;
            recount(p);
            recount(s);
            if (i > 1) {
              var pp = stack[i - 2];
              if (pp.left === p) {
                pp.left = s;
              } else {
                pp.right = s;
              }
            }
            stack[i - 1] = s;
            return;
          } else if (s.left && s.left._color === RED) {
            s = p.right = cloneNode(s);
            z = s.left = cloneNode(s.left);
            p.right = z.left;
            s.left = z.right;
            z.left = p;
            z.right = s;
            z._color = p._color;
            p._color = BLACK;
            s._color = BLACK;
            n._color = BLACK;
            recount(p);
            recount(s);
            recount(z);
            if (i > 1) {
              var pp = stack[i - 2];
              if (pp.left === p) {
                pp.left = z;
              } else {
                pp.right = z;
              }
            }
            stack[i - 1] = z;
            return;
          }
          if (s._color === BLACK) {
            if (p._color === RED) {
              p._color = BLACK;
              p.right = repaint(RED, s);
              return;
            } else {
              p.right = repaint(RED, s);
              continue;
            }
          } else {
            s = cloneNode(s);
            p.right = s.left;
            s.left = p;
            s._color = p._color;
            p._color = RED;
            recount(p);
            recount(s);
            if (i > 1) {
              var pp = stack[i - 2];
              if (pp.left === p) {
                pp.left = s;
              } else {
                pp.right = s;
              }
            }
            stack[i - 1] = s;
            stack[i] = p;
            if (i + 1 < stack.length) {
              stack[i + 1] = n;
            } else {
              stack.push(n);
            }
            i = i + 2;
          }
        } else {
          s = p.left;
          if (s.left && s.left._color === RED) {
            s = p.left = cloneNode(s);
            z = s.left = cloneNode(s.left);
            p.left = s.right;
            s.right = p;
            s.left = z;
            s._color = p._color;
            n._color = BLACK;
            p._color = BLACK;
            z._color = BLACK;
            recount(p);
            recount(s);
            if (i > 1) {
              var pp = stack[i - 2];
              if (pp.right === p) {
                pp.right = s;
              } else {
                pp.left = s;
              }
            }
            stack[i - 1] = s;
            return;
          } else if (s.right && s.right._color === RED) {
            s = p.left = cloneNode(s);
            z = s.right = cloneNode(s.right);
            p.left = z.right;
            s.right = z.left;
            z.right = p;
            z.left = s;
            z._color = p._color;
            p._color = BLACK;
            s._color = BLACK;
            n._color = BLACK;
            recount(p);
            recount(s);
            recount(z);
            if (i > 1) {
              var pp = stack[i - 2];
              if (pp.right === p) {
                pp.right = z;
              } else {
                pp.left = z;
              }
            }
            stack[i - 1] = z;
            return;
          }
          if (s._color === BLACK) {
            if (p._color === RED) {
              p._color = BLACK;
              p.left = repaint(RED, s);
              return;
            } else {
              p.left = repaint(RED, s);
              continue;
            }
          } else {
            s = cloneNode(s);
            p.left = s.right;
            s.right = p;
            s._color = p._color;
            p._color = RED;
            recount(p);
            recount(s);
            if (i > 1) {
              var pp = stack[i - 2];
              if (pp.right === p) {
                pp.right = s;
              } else {
                pp.left = s;
              }
            }
            stack[i - 1] = s;
            stack[i] = p;
            if (i + 1 < stack.length) {
              stack[i + 1] = n;
            } else {
              stack.push(n);
            }
            i = i + 2;
          }
        }
      }
    }
    iproto.remove = function() {
      var stack = this._stack;
      if (stack.length === 0) {
        return this.tree;
      }
      var cstack = new Array(stack.length);
      var n = stack[stack.length - 1];
      cstack[cstack.length - 1] = new RBNode(n._color, n.key, n.value, n.left, n.right, n._count);
      for (var i = stack.length - 2; i >= 0; --i) {
        var n = stack[i];
        if (n.left === stack[i + 1]) {
          cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count);
        } else {
          cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);
        }
      }
      n = cstack[cstack.length - 1];
      if (n.left && n.right) {
        var split = cstack.length;
        n = n.left;
        while (n.right) {
          cstack.push(n);
          n = n.right;
        }
        var v = cstack[split - 1];
        cstack.push(new RBNode(n._color, v.key, v.value, n.left, n.right, n._count));
        cstack[split - 1].key = n.key;
        cstack[split - 1].value = n.value;
        for (var i = cstack.length - 2; i >= split; --i) {
          n = cstack[i];
          cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);
        }
        cstack[split - 1].left = cstack[split];
      }
      n = cstack[cstack.length - 1];
      if (n._color === RED) {
        var p = cstack[cstack.length - 2];
        if (p.left === n) {
          p.left = null;
        } else if (p.right === n) {
          p.right = null;
        }
        cstack.pop();
        for (var i = 0; i < cstack.length; ++i) {
          cstack[i]._count--;
        }
        return new RedBlackTree(this.tree._compare, cstack[0]);
      } else {
        if (n.left || n.right) {
          if (n.left) {
            swapNode(n, n.left);
          } else if (n.right) {
            swapNode(n, n.right);
          }
          n._color = BLACK;
          for (var i = 0; i < cstack.length - 1; ++i) {
            cstack[i]._count--;
          }
          return new RedBlackTree(this.tree._compare, cstack[0]);
        } else if (cstack.length === 1) {
          return new RedBlackTree(this.tree._compare, null);
        } else {
          for (var i = 0; i < cstack.length; ++i) {
            cstack[i]._count--;
          }
          var parent = cstack[cstack.length - 2];
          fixDoubleBlack(cstack);
          if (parent.left === n) {
            parent.left = null;
          } else {
            parent.right = null;
          }
        }
      }
      return new RedBlackTree(this.tree._compare, cstack[0]);
    };
    Object.defineProperty(iproto, "key", {
      get: function() {
        if (this._stack.length > 0) {
          return this._stack[this._stack.length - 1].key;
        }
        return;
      },
      enumerable: true
    });
    Object.defineProperty(iproto, "value", {
      get: function() {
        if (this._stack.length > 0) {
          return this._stack[this._stack.length - 1].value;
        }
        return;
      },
      enumerable: true
    });
    Object.defineProperty(iproto, "index", {
      get: function() {
        var idx = 0;
        var stack = this._stack;
        if (stack.length === 0) {
          var r = this.tree.root;
          if (r) {
            return r._count;
          }
          return 0;
        } else if (stack[stack.length - 1].left) {
          idx = stack[stack.length - 1].left._count;
        }
        for (var s = stack.length - 2; s >= 0; --s) {
          if (stack[s + 1] === stack[s].right) {
            ++idx;
            if (stack[s].left) {
              idx += stack[s].left._count;
            }
          }
        }
        return idx;
      },
      enumerable: true
    });
    iproto.next = function() {
      var stack = this._stack;
      if (stack.length === 0) {
        return;
      }
      var n = stack[stack.length - 1];
      if (n.right) {
        n = n.right;
        while (n) {
          stack.push(n);
          n = n.left;
        }
      } else {
        stack.pop();
        while (stack.length > 0 && stack[stack.length - 1].right === n) {
          n = stack[stack.length - 1];
          stack.pop();
        }
      }
    };
    Object.defineProperty(iproto, "hasNext", {
      get: function() {
        var stack = this._stack;
        if (stack.length === 0) {
          return false;
        }
        if (stack[stack.length - 1].right) {
          return true;
        }
        for (var s = stack.length - 1; s > 0; --s) {
          if (stack[s - 1].left === stack[s]) {
            return true;
          }
        }
        return false;
      }
    });
    iproto.update = function(value) {
      var stack = this._stack;
      if (stack.length === 0) {
        throw new Error("Can't update empty node!");
      }
      var cstack = new Array(stack.length);
      var n = stack[stack.length - 1];
      cstack[cstack.length - 1] = new RBNode(n._color, n.key, value, n.left, n.right, n._count);
      for (var i = stack.length - 2; i >= 0; --i) {
        n = stack[i];
        if (n.left === stack[i + 1]) {
          cstack[i] = new RBNode(n._color, n.key, n.value, cstack[i + 1], n.right, n._count);
        } else {
          cstack[i] = new RBNode(n._color, n.key, n.value, n.left, cstack[i + 1], n._count);
        }
      }
      return new RedBlackTree(this.tree._compare, cstack[0]);
    };
    iproto.prev = function() {
      var stack = this._stack;
      if (stack.length === 0) {
        return;
      }
      var n = stack[stack.length - 1];
      if (n.left) {
        n = n.left;
        while (n) {
          stack.push(n);
          n = n.right;
        }
      } else {
        stack.pop();
        while (stack.length > 0 && stack[stack.length - 1].left === n) {
          n = stack[stack.length - 1];
          stack.pop();
        }
      }
    };
    Object.defineProperty(iproto, "hasPrev", {
      get: function() {
        var stack = this._stack;
        if (stack.length === 0) {
          return false;
        }
        if (stack[stack.length - 1].left) {
          return true;
        }
        for (var s = stack.length - 1; s > 0; --s) {
          if (stack[s - 1].right === stack[s]) {
            return true;
          }
        }
        return false;
      }
    });
    function defaultCompare(a, b) {
      if (a < b) {
        return -1;
      }
      if (a > b) {
        return 1;
      }
      return 0;
    }
    function createRBTree(compare) {
      return new RedBlackTree(compare || defaultCompare, null);
    }
  }
});

// node_modules/@google-cloud/firestore/build/src/watch.js
var require_watch = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/watch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QueryWatch = exports2.DocumentWatch = exports2.WATCH_IDLE_TIMEOUT_MS = void 0;
    var assert = require_assert();
    var rbtree = require_rbtree();
    var google_gax_1 = require_fallback();
    var backoff_1 = require_backoff();
    var document_1 = require_document();
    var document_change_1 = require_document_change();
    var logger_1 = require_logger();
    var path_1 = require_path3();
    var timestamp_1 = require_timestamp2();
    var types_1 = require_types2();
    var util_1 = require_util5();
    var WATCH_TARGET_ID = 1;
    exports2.WATCH_IDLE_TIMEOUT_MS = 120 * 1e3;
    var REMOVED = {};
    var ChangeType = {
      added: "added",
      modified: "modified",
      removed: "removed"
    };
    var DOCUMENT_WATCH_COMPARATOR = (doc1, doc2) => {
      assert(doc1 === doc2, "Document watches only support one document.");
      return 0;
    };
    var EMPTY_FUNCTION = () => {
    };
    var Watch = class {
      constructor(firestore, _converter = (0, types_1.defaultConverter)()) {
        this._converter = _converter;
        this.isActive = true;
        this.currentStream = null;
        this.resumeToken = void 0;
        this.docMap = /* @__PURE__ */ new Map();
        this.changeMap = /* @__PURE__ */ new Map();
        this.current = false;
        this.hasPushed = false;
        this.firestore = firestore;
        this.backoff = new backoff_1.ExponentialBackoff();
        this.requestTag = (0, util_1.requestTag)();
        this.onNext = EMPTY_FUNCTION;
        this.onError = EMPTY_FUNCTION;
      }
      onSnapshot(onNext, onError) {
        assert(this.onNext === EMPTY_FUNCTION, "onNext should not already be defined.");
        assert(this.onError === EMPTY_FUNCTION, "onError should not already be defined.");
        assert(this.docTree === void 0, "docTree should not already be defined.");
        this.onNext = onNext;
        this.onError = onError;
        this.docTree = rbtree(this.getComparator());
        this.initStream();
        const unsubscribe = () => {
          (0, logger_1.logger)("Watch.onSnapshot", this.requestTag, "Unsubscribe called");
          this.onNext = () => {
          };
          this.onError = () => {
          };
          this.shutdown();
        };
        this.firestore.registerListener();
        return unsubscribe;
      }
      currentSize() {
        const changes = this.extractCurrentChanges(timestamp_1.Timestamp.now());
        return this.docMap.size + changes.adds.length - changes.deletes.length;
      }
      extractCurrentChanges(readTime) {
        const deletes = [];
        const adds = [];
        const updates = [];
        this.changeMap.forEach((value, name) => {
          if (value === REMOVED) {
            if (this.docMap.has(name)) {
              deletes.push(name);
            }
          } else if (this.docMap.has(name)) {
            value.readTime = readTime;
            updates.push(value.build());
          } else {
            value.readTime = readTime;
            adds.push(value.build());
          }
        });
        return { deletes, adds, updates };
      }
      resetDocs() {
        (0, logger_1.logger)("Watch.resetDocs", this.requestTag, "Resetting documents");
        this.changeMap.clear();
        this.resumeToken = void 0;
        this.docTree.forEach((snapshot) => {
          this.changeMap.set(snapshot.ref.path, REMOVED);
        });
        this.current = false;
      }
      closeStream(err) {
        if (this.isActive) {
          (0, logger_1.logger)("Watch.closeStream", this.requestTag, "Invoking onError: ", err);
          this.onError(err);
        }
        this.shutdown();
      }
      maybeReopenStream(err) {
        if (this.isActive && !this.isPermanentWatchError(err)) {
          (0, logger_1.logger)("Watch.maybeReopenStream", this.requestTag, "Stream ended, re-opening after retryable error:", err);
          this.changeMap.clear();
          if (this.isResourceExhaustedError(err)) {
            this.backoff.resetToMax();
          }
          this.initStream();
        } else {
          this.closeStream(err);
        }
      }
      resetIdleTimeout() {
        if (this.idleTimeoutHandle) {
          clearTimeout(this.idleTimeoutHandle);
        }
        this.idleTimeoutHandle = (0, backoff_1.delayExecution)(() => {
          var _a;
          (0, logger_1.logger)("Watch.resetIdleTimeout", this.requestTag, "Resetting stream after idle timeout");
          (_a = this.currentStream) === null || _a === void 0 ? void 0 : _a.end();
          this.currentStream = null;
          const error = new google_gax_1.GoogleError("Watch stream idle timeout");
          error.code = google_gax_1.Status.UNKNOWN;
          this.maybeReopenStream(error);
        }, exports2.WATCH_IDLE_TIMEOUT_MS);
      }
      resetStream() {
        (0, logger_1.logger)("Watch.resetStream", this.requestTag, "Restarting stream");
        if (this.currentStream) {
          this.currentStream.end();
          this.currentStream = null;
        }
        this.initStream();
      }
      initStream() {
        this.backoff.backoffAndWait().then(async () => {
          if (!this.isActive) {
            (0, logger_1.logger)("Watch.initStream", this.requestTag, "Not initializing inactive stream");
            return;
          }
          await this.firestore.initializeIfNeeded(this.requestTag);
          const request = {};
          request.database = this.firestore.formattedName;
          request.addTarget = this.getTarget(this.resumeToken);
          return this.firestore.requestStream(
            "listen",
            true,
            request,
            this.requestTag
          ).then((backendStream) => {
            if (!this.isActive) {
              (0, logger_1.logger)("Watch.initStream", this.requestTag, "Closing inactive stream");
              backendStream.emit("end");
              return;
            }
            (0, logger_1.logger)("Watch.initStream", this.requestTag, "Opened new stream");
            this.currentStream = backendStream;
            this.resetIdleTimeout();
            this.currentStream.on("data", (proto) => {
              this.resetIdleTimeout();
              this.onData(proto);
            }).on("error", (err) => {
              if (this.currentStream === backendStream) {
                this.currentStream = null;
                this.maybeReopenStream(err);
              }
            }).on("end", () => {
              if (this.currentStream === backendStream) {
                this.currentStream = null;
                const err = new google_gax_1.GoogleError("Stream ended unexpectedly");
                err.code = google_gax_1.Status.UNKNOWN;
                this.maybeReopenStream(err);
              }
            });
            this.currentStream.resume();
          });
        }).catch((err) => {
          this.closeStream(err);
        });
      }
      onData(proto) {
        if (proto.targetChange) {
          (0, logger_1.logger)("Watch.onData", this.requestTag, "Processing target change");
          const change = proto.targetChange;
          const noTargetIds = !change.targetIds || change.targetIds.length === 0;
          if (change.targetChangeType === "NO_CHANGE") {
            if (noTargetIds && change.readTime && this.current) {
              this.pushSnapshot(timestamp_1.Timestamp.fromProto(change.readTime), change.resumeToken);
            }
          } else if (change.targetChangeType === "ADD") {
            if (WATCH_TARGET_ID !== change.targetIds[0]) {
              this.closeStream(Error("Unexpected target ID sent by server"));
            }
          } else if (change.targetChangeType === "REMOVE") {
            let code = google_gax_1.Status.INTERNAL;
            let message = "internal error";
            if (change.cause) {
              code = change.cause.code;
              message = change.cause.message;
            }
            this.closeStream(new Error("Error " + code + ": " + message));
          } else if (change.targetChangeType === "RESET") {
            this.resetDocs();
          } else if (change.targetChangeType === "CURRENT") {
            this.current = true;
          } else {
            this.closeStream(new Error("Unknown target change type: " + JSON.stringify(change)));
          }
          if (change.resumeToken && this.affectsTarget(change.targetIds, WATCH_TARGET_ID)) {
            this.backoff.reset();
          }
        } else if (proto.documentChange) {
          (0, logger_1.logger)("Watch.onData", this.requestTag, "Processing change event");
          const targetIds = proto.documentChange.targetIds || [];
          const removedTargetIds = proto.documentChange.removedTargetIds || [];
          let changed = false;
          let removed = false;
          for (let i = 0; i < targetIds.length; i++) {
            if (targetIds[i] === WATCH_TARGET_ID) {
              changed = true;
            }
          }
          for (let i = 0; i < removedTargetIds.length; i++) {
            if (removedTargetIds[i] === WATCH_TARGET_ID) {
              removed = true;
            }
          }
          const document = proto.documentChange.document;
          const name = document.name;
          const relativeName = path_1.QualifiedResourcePath.fromSlashSeparatedString(name).relativeName;
          if (changed) {
            (0, logger_1.logger)("Watch.onData", this.requestTag, "Received document change");
            const ref = this.firestore.doc(relativeName);
            const snapshot = new document_1.DocumentSnapshotBuilder(ref.withConverter(this._converter));
            snapshot.fieldsProto = document.fields || {};
            snapshot.createTime = timestamp_1.Timestamp.fromProto(document.createTime);
            snapshot.updateTime = timestamp_1.Timestamp.fromProto(document.updateTime);
            this.changeMap.set(relativeName, snapshot);
          } else if (removed) {
            (0, logger_1.logger)("Watch.onData", this.requestTag, "Received document remove");
            this.changeMap.set(relativeName, REMOVED);
          }
        } else if (proto.documentDelete || proto.documentRemove) {
          (0, logger_1.logger)("Watch.onData", this.requestTag, "Processing remove event");
          const name = (proto.documentDelete || proto.documentRemove).document;
          const relativeName = path_1.QualifiedResourcePath.fromSlashSeparatedString(name).relativeName;
          this.changeMap.set(relativeName, REMOVED);
        } else if (proto.filter) {
          (0, logger_1.logger)("Watch.onData", this.requestTag, "Processing filter update");
          if (proto.filter.count !== this.currentSize()) {
            this.resetDocs();
            this.resetStream();
          }
        } else {
          this.closeStream(new Error("Unknown listen response type: " + JSON.stringify(proto)));
        }
      }
      affectsTarget(targetIds, currentId) {
        if (targetIds === void 0 || targetIds.length === 0) {
          return true;
        }
        for (const targetId of targetIds) {
          if (targetId === currentId) {
            return true;
          }
        }
        return false;
      }
      pushSnapshot(readTime, nextResumeToken) {
        const appliedChanges = this.computeSnapshot(readTime);
        if (!this.hasPushed || appliedChanges.length > 0) {
          (0, logger_1.logger)("Watch.pushSnapshot", this.requestTag, "Sending snapshot with %d changes and %d documents", String(appliedChanges.length), this.docTree.length);
          const currentTree = this.docTree;
          this.onNext(readTime, currentTree.length, () => currentTree.keys, () => appliedChanges);
          this.hasPushed = true;
        }
        this.changeMap.clear();
        this.resumeToken = nextResumeToken;
      }
      deleteDoc(name) {
        assert(this.docMap.has(name), "Document to delete does not exist");
        const oldDocument = this.docMap.get(name);
        const existing = this.docTree.find(oldDocument);
        const oldIndex = existing.index;
        this.docTree = existing.remove();
        this.docMap.delete(name);
        return new document_change_1.DocumentChange(ChangeType.removed, oldDocument, oldIndex, -1);
      }
      addDoc(newDocument) {
        const name = newDocument.ref.path;
        assert(!this.docMap.has(name), "Document to add already exists");
        this.docTree = this.docTree.insert(newDocument, null);
        const newIndex = this.docTree.find(newDocument).index;
        this.docMap.set(name, newDocument);
        return new document_change_1.DocumentChange(ChangeType.added, newDocument, -1, newIndex);
      }
      modifyDoc(newDocument) {
        const name = newDocument.ref.path;
        assert(this.docMap.has(name), "Document to modify does not exist");
        const oldDocument = this.docMap.get(name);
        if (!oldDocument.updateTime.isEqual(newDocument.updateTime)) {
          const removeChange = this.deleteDoc(name);
          const addChange = this.addDoc(newDocument);
          return new document_change_1.DocumentChange(ChangeType.modified, newDocument, removeChange.oldIndex, addChange.newIndex);
        }
        return null;
      }
      computeSnapshot(readTime) {
        const changeSet = this.extractCurrentChanges(readTime);
        const appliedChanges = [];
        changeSet.deletes.sort((name1, name2) => {
          return this.getComparator()(this.docMap.get(name1), this.docMap.get(name2));
        });
        changeSet.deletes.forEach((name) => {
          const change = this.deleteDoc(name);
          appliedChanges.push(change);
        });
        changeSet.adds.sort(this.getComparator());
        changeSet.adds.forEach((snapshot) => {
          const change = this.addDoc(snapshot);
          appliedChanges.push(change);
        });
        changeSet.updates.sort(this.getComparator());
        changeSet.updates.forEach((snapshot) => {
          const change = this.modifyDoc(snapshot);
          if (change) {
            appliedChanges.push(change);
          }
        });
        assert(this.docTree.length === this.docMap.size, "The update document tree and document map should have the same number of entries.");
        return appliedChanges;
      }
      isPermanentWatchError(error) {
        if (error.code === void 0) {
          (0, logger_1.logger)("Watch.isPermanentError", this.requestTag, "Unable to determine error code: ", error);
          return false;
        }
        switch (error.code) {
          case google_gax_1.Status.ABORTED:
          case google_gax_1.Status.CANCELLED:
          case google_gax_1.Status.UNKNOWN:
          case google_gax_1.Status.DEADLINE_EXCEEDED:
          case google_gax_1.Status.RESOURCE_EXHAUSTED:
          case google_gax_1.Status.INTERNAL:
          case google_gax_1.Status.UNAVAILABLE:
          case google_gax_1.Status.UNAUTHENTICATED:
            return false;
          default:
            return true;
        }
      }
      isResourceExhaustedError(error) {
        return error.code === google_gax_1.Status.RESOURCE_EXHAUSTED;
      }
      shutdown() {
        var _a;
        if (this.isActive) {
          this.isActive = false;
          if (this.idleTimeoutHandle) {
            clearTimeout(this.idleTimeoutHandle);
            this.idleTimeoutHandle = void 0;
          }
          this.firestore.unregisterListener();
        }
        (_a = this.currentStream) === null || _a === void 0 ? void 0 : _a.end();
        this.currentStream = null;
      }
    };
    var DocumentWatch = class extends Watch {
      constructor(firestore, ref) {
        super(firestore, ref._converter);
        this.ref = ref;
      }
      getComparator() {
        return DOCUMENT_WATCH_COMPARATOR;
      }
      getTarget(resumeToken) {
        const formattedName = this.ref.formattedName;
        return {
          documents: {
            documents: [formattedName]
          },
          targetId: WATCH_TARGET_ID,
          resumeToken
        };
      }
    };
    exports2.DocumentWatch = DocumentWatch;
    var QueryWatch = class extends Watch {
      constructor(firestore, query, converter) {
        super(firestore, converter);
        this.query = query;
        this.comparator = query.comparator();
      }
      getComparator() {
        return this.query.comparator();
      }
      getTarget(resumeToken) {
        const query = this.query.toProto();
        return { query, targetId: WATCH_TARGET_ID, resumeToken };
      }
    };
    exports2.QueryWatch = QueryWatch;
  }
});

// node_modules/@google-cloud/firestore/build/src/reference.js
var require_reference = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/reference.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateDocumentReference = exports2.validateQueryOperator = exports2.validateQueryOrder = exports2.AggregateQuerySnapshot = exports2.AggregateQuery = exports2.CollectionReference = exports2.Query = exports2.QueryOptions = exports2.QuerySnapshot = exports2.FieldOrder = exports2.DocumentReference = void 0;
    var stream_1 = require_stream();
    var deepEqual = require_fast_deep_equal();
    var document_1 = require_document();
    var document_change_1 = require_document_change();
    var logger_1 = require_logger();
    var order_1 = require_order();
    var path_1 = require_path3();
    var serializer_1 = require_serializer();
    var timestamp_1 = require_timestamp2();
    var types_1 = require_types2();
    var util_1 = require_util5();
    var validate_1 = require_validate();
    var write_batch_1 = require_write_batch();
    var directionOperators = {
      asc: "ASCENDING",
      desc: "DESCENDING"
    };
    var comparisonOperators = {
      "<": "LESS_THAN",
      "<=": "LESS_THAN_OR_EQUAL",
      "==": "EQUAL",
      "!=": "NOT_EQUAL",
      ">": "GREATER_THAN",
      ">=": "GREATER_THAN_OR_EQUAL",
      "array-contains": "ARRAY_CONTAINS",
      in: "IN",
      "not-in": "NOT_IN",
      "array-contains-any": "ARRAY_CONTAINS_ANY"
    };
    var DocumentReference2 = class {
      constructor(_firestore, _path, _converter = (0, types_1.defaultConverter)()) {
        this._firestore = _firestore;
        this._path = _path;
        this._converter = _converter;
      }
      get formattedName() {
        const projectId = this.firestore.projectId;
        return this._path.toQualifiedResourcePath(projectId).formattedName;
      }
      get firestore() {
        return this._firestore;
      }
      get path() {
        return this._path.relativeName;
      }
      get id() {
        return this._path.id;
      }
      get _resourcePath() {
        return this._path;
      }
      get parent() {
        return new CollectionReference2(this._firestore, this._path.parent(), this._converter);
      }
      get() {
        return this._firestore.getAll(this).then(([result]) => result);
      }
      collection(collectionPath) {
        (0, path_1.validateResourcePath)("collectionPath", collectionPath);
        const path = this._path.append(collectionPath);
        if (!path.isCollection) {
          throw new Error(`Value for argument "collectionPath" must point to a collection, but was "${collectionPath}". Your path does not contain an odd number of components.`);
        }
        return new CollectionReference2(this._firestore, path);
      }
      listCollections() {
        const tag = (0, util_1.requestTag)();
        return this.firestore.initializeIfNeeded(tag).then(() => {
          const request = {
            parent: this.formattedName,
            pageSize: Math.pow(2, 16) - 1
          };
          return this._firestore.request("listCollectionIds", request, tag).then((collectionIds) => {
            const collections = [];
            collectionIds.sort();
            for (const collectionId of collectionIds) {
              collections.push(this.collection(collectionId));
            }
            return collections;
          });
        });
      }
      create(data) {
        const writeBatch = new write_batch_1.WriteBatch(this._firestore);
        return writeBatch.create(this, data).commit().then(([writeResult]) => writeResult);
      }
      delete(precondition) {
        const writeBatch = new write_batch_1.WriteBatch(this._firestore);
        return writeBatch.delete(this, precondition).commit().then(([writeResult]) => writeResult);
      }
      set(data, options) {
        let writeBatch = new write_batch_1.WriteBatch(this._firestore);
        if (options) {
          writeBatch = writeBatch.set(this, data, options);
        } else {
          writeBatch = writeBatch.set(this, data);
        }
        return writeBatch.commit().then(([writeResult]) => writeResult);
      }
      update(dataOrField, ...preconditionOrValues) {
        (0, validate_1.validateMinNumberOfArguments)("DocumentReference.update", arguments, 1);
        const writeBatch = new write_batch_1.WriteBatch(this._firestore);
        return writeBatch.update(this, dataOrField, ...preconditionOrValues).commit().then(([writeResult]) => writeResult);
      }
      onSnapshot(onNext, onError) {
        (0, validate_1.validateFunction)("onNext", onNext);
        (0, validate_1.validateFunction)("onError", onError, { optional: true });
        const watch = new (require_watch()).DocumentWatch(this.firestore, this);
        return watch.onSnapshot((readTime, size, docs) => {
          for (const document2 of docs()) {
            if (document2.ref.path === this.path) {
              onNext(document2);
              return;
            }
          }
          const ref = new DocumentReference2(this._firestore, this._path, this._converter);
          const document = new document_1.DocumentSnapshotBuilder(ref);
          document.readTime = readTime;
          onNext(document.build());
        }, onError || console.error);
      }
      isEqual(other) {
        return this === other || other instanceof DocumentReference2 && this._firestore === other._firestore && this._path.isEqual(other._path) && this._converter === other._converter;
      }
      toProto() {
        return { referenceValue: this.formattedName };
      }
      withConverter(converter) {
        return new DocumentReference2(this.firestore, this._path, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());
      }
    };
    exports2.DocumentReference = DocumentReference2;
    var FieldOrder = class {
      constructor(field, direction = "ASCENDING") {
        this.field = field;
        this.direction = direction;
      }
      toProto() {
        return {
          field: {
            fieldPath: this.field.formattedName
          },
          direction: this.direction
        };
      }
    };
    exports2.FieldOrder = FieldOrder;
    var FieldFilter = class {
      constructor(serializer, field, op, value) {
        this.serializer = serializer;
        this.field = field;
        this.op = op;
        this.value = value;
      }
      isInequalityFilter() {
        switch (this.op) {
          case "GREATER_THAN":
          case "GREATER_THAN_OR_EQUAL":
          case "LESS_THAN":
          case "LESS_THAN_OR_EQUAL":
            return true;
          default:
            return false;
        }
      }
      toProto() {
        if (typeof this.value === "number" && isNaN(this.value)) {
          return {
            unaryFilter: {
              field: {
                fieldPath: this.field.formattedName
              },
              op: this.op === "EQUAL" ? "IS_NAN" : "IS_NOT_NAN"
            }
          };
        }
        if (this.value === null) {
          return {
            unaryFilter: {
              field: {
                fieldPath: this.field.formattedName
              },
              op: this.op === "EQUAL" ? "IS_NULL" : "IS_NOT_NULL"
            }
          };
        }
        return {
          fieldFilter: {
            field: {
              fieldPath: this.field.formattedName
            },
            op: this.op,
            value: this.serializer.encodeValue(this.value)
          }
        };
      }
      isEqual(other) {
        return this.field.isEqual(other.field) && this.op === other.op && deepEqual(this.value, other.value);
      }
    };
    var QuerySnapshot2 = class {
      constructor(_query, _readTime, _size, docs, changes) {
        this._query = _query;
        this._readTime = _readTime;
        this._size = _size;
        this._materializedDocs = null;
        this._materializedChanges = null;
        this._docs = null;
        this._changes = null;
        this._docs = docs;
        this._changes = changes;
      }
      get query() {
        return this._query;
      }
      get docs() {
        if (this._materializedDocs) {
          return this._materializedDocs;
        }
        this._materializedDocs = this._docs();
        this._docs = null;
        return this._materializedDocs;
      }
      get empty() {
        return this._size === 0;
      }
      get size() {
        return this._size;
      }
      get readTime() {
        return this._readTime;
      }
      docChanges() {
        if (this._materializedChanges) {
          return this._materializedChanges;
        }
        this._materializedChanges = this._changes();
        this._changes = null;
        return this._materializedChanges;
      }
      forEach(callback, thisArg) {
        (0, validate_1.validateFunction)("callback", callback);
        for (const doc of this.docs) {
          callback.call(thisArg, doc);
        }
      }
      isEqual(other) {
        if (this === other) {
          return true;
        }
        if (!(other instanceof QuerySnapshot2)) {
          return false;
        }
        if (this._size !== other._size) {
          return false;
        }
        if (!this._query.isEqual(other._query)) {
          return false;
        }
        if (this._materializedDocs && !this._materializedChanges) {
          return isArrayEqual(this.docs, other.docs) && isArrayEqual(this.docChanges(), other.docChanges());
        }
        return isArrayEqual(this.docChanges(), other.docChanges()) && isArrayEqual(this.docs, other.docs);
      }
    };
    exports2.QuerySnapshot = QuerySnapshot2;
    var LimitType;
    (function(LimitType2) {
      LimitType2[LimitType2["First"] = 0] = "First";
      LimitType2[LimitType2["Last"] = 1] = "Last";
    })(LimitType || (LimitType = {}));
    var QueryOptions = class {
      constructor(parentPath, collectionId, converter, allDescendants, fieldFilters, fieldOrders, startAt, endAt, limit, limitType, offset, projection, kindless = false, requireConsistency = true) {
        this.parentPath = parentPath;
        this.collectionId = collectionId;
        this.converter = converter;
        this.allDescendants = allDescendants;
        this.fieldFilters = fieldFilters;
        this.fieldOrders = fieldOrders;
        this.startAt = startAt;
        this.endAt = endAt;
        this.limit = limit;
        this.limitType = limitType;
        this.offset = offset;
        this.projection = projection;
        this.kindless = kindless;
        this.requireConsistency = requireConsistency;
      }
      static forCollectionGroupQuery(collectionId, converter = (0, types_1.defaultConverter)()) {
        return new QueryOptions(
          path_1.ResourcePath.EMPTY,
          collectionId,
          converter,
          true,
          [],
          []
        );
      }
      static forCollectionQuery(collectionRef, converter = (0, types_1.defaultConverter)()) {
        return new QueryOptions(
          collectionRef.parent(),
          collectionRef.id,
          converter,
          false,
          [],
          []
        );
      }
      static forKindlessAllDescendants(parent, id, requireConsistency = true) {
        let options = new QueryOptions(
          parent,
          id,
          (0, types_1.defaultConverter)(),
          true,
          [],
          []
        );
        options = options.with({
          kindless: true,
          requireConsistency
        });
        return options;
      }
      with(settings) {
        return new QueryOptions(coalesce(settings.parentPath, this.parentPath), coalesce(settings.collectionId, this.collectionId), this.converter, coalesce(settings.allDescendants, this.allDescendants), coalesce(settings.fieldFilters, this.fieldFilters), coalesce(settings.fieldOrders, this.fieldOrders), coalesce(settings.startAt, this.startAt), coalesce(settings.endAt, this.endAt), coalesce(settings.limit, this.limit), coalesce(settings.limitType, this.limitType), coalesce(settings.offset, this.offset), coalesce(settings.projection, this.projection), coalesce(settings.kindless, this.kindless), coalesce(settings.requireConsistency, this.requireConsistency));
      }
      withConverter(converter) {
        return new QueryOptions(this.parentPath, this.collectionId, converter, this.allDescendants, this.fieldFilters, this.fieldOrders, this.startAt, this.endAt, this.limit, this.limitType, this.offset, this.projection);
      }
      hasFieldOrders() {
        return this.fieldOrders.length > 0;
      }
      isEqual(other) {
        if (this === other) {
          return true;
        }
        return other instanceof QueryOptions && this.parentPath.isEqual(other.parentPath) && this.fieldFiltersEqual(other.fieldFilters) && this.collectionId === other.collectionId && this.converter === other.converter && this.allDescendants === other.allDescendants && this.limit === other.limit && this.offset === other.offset && deepEqual(this.fieldOrders, other.fieldOrders) && deepEqual(this.startAt, other.startAt) && deepEqual(this.endAt, other.endAt) && deepEqual(this.projection, other.projection) && this.kindless === other.kindless && this.requireConsistency === other.requireConsistency;
      }
      fieldFiltersEqual(other) {
        if (this.fieldFilters.length !== other.length) {
          return false;
        }
        for (let i = 0; i < other.length; i++) {
          if (!this.fieldFilters[i].isEqual(other[i])) {
            return false;
          }
        }
        return true;
      }
    };
    exports2.QueryOptions = QueryOptions;
    var Query2 = class {
      constructor(_firestore, _queryOptions) {
        this._firestore = _firestore;
        this._queryOptions = _queryOptions;
        this._serializer = new serializer_1.Serializer(_firestore);
        this._allowUndefined = !!this._firestore._settings.ignoreUndefinedProperties;
      }
      static _extractFieldValues(documentSnapshot, fieldOrders) {
        const fieldValues = [];
        for (const fieldOrder of fieldOrders) {
          if (path_1.FieldPath.documentId().isEqual(fieldOrder.field)) {
            fieldValues.push(documentSnapshot.ref);
          } else {
            const fieldValue = documentSnapshot.get(fieldOrder.field);
            if (fieldValue === void 0) {
              throw new Error(`Field "${fieldOrder.field}" is missing in the provided DocumentSnapshot. Please provide a document that contains values for all specified orderBy() and where() constraints.`);
            } else {
              fieldValues.push(fieldValue);
            }
          }
        }
        return fieldValues;
      }
      get firestore() {
        return this._firestore;
      }
      where(fieldPath, opStr, value) {
        (0, path_1.validateFieldPath)("fieldPath", fieldPath);
        opStr = validateQueryOperator("opStr", opStr, value);
        validateQueryValue("value", value, this._allowUndefined);
        if (this._queryOptions.startAt || this._queryOptions.endAt) {
          throw new Error("Cannot specify a where() filter after calling startAt(), startAfter(), endBefore() or endAt().");
        }
        const path = path_1.FieldPath.fromArgument(fieldPath);
        if (path_1.FieldPath.documentId().isEqual(path)) {
          if (opStr === "array-contains" || opStr === "array-contains-any") {
            throw new Error(`Invalid Query. You can't perform '${opStr}' queries on FieldPath.documentId().`);
          }
          if (opStr === "in" || opStr === "not-in") {
            if (!Array.isArray(value) || value.length === 0) {
              throw new Error(`Invalid Query. A non-empty array is required for '${opStr}' filters.`);
            }
            value = value.map((el) => this.validateReference(el));
          } else {
            value = this.validateReference(value);
          }
        }
        const fieldFilter = new FieldFilter(this._serializer, path, comparisonOperators[opStr], value);
        const options = this._queryOptions.with({
          fieldFilters: this._queryOptions.fieldFilters.concat(fieldFilter)
        });
        return new Query2(this._firestore, options);
      }
      select(...fieldPaths) {
        const fields = [];
        if (fieldPaths.length === 0) {
          fields.push({ fieldPath: path_1.FieldPath.documentId().formattedName });
        } else {
          for (let i = 0; i < fieldPaths.length; ++i) {
            (0, path_1.validateFieldPath)(i, fieldPaths[i]);
            fields.push({
              fieldPath: path_1.FieldPath.fromArgument(fieldPaths[i]).formattedName
            });
          }
        }
        const options = this._queryOptions.with({
          projection: { fields }
        });
        return new Query2(this._firestore, options);
      }
      orderBy(fieldPath, directionStr) {
        (0, path_1.validateFieldPath)("fieldPath", fieldPath);
        directionStr = validateQueryOrder("directionStr", directionStr);
        if (this._queryOptions.startAt || this._queryOptions.endAt) {
          throw new Error("Cannot specify an orderBy() constraint after calling startAt(), startAfter(), endBefore() or endAt().");
        }
        const newOrder = new FieldOrder(path_1.FieldPath.fromArgument(fieldPath), directionOperators[directionStr || "asc"]);
        const options = this._queryOptions.with({
          fieldOrders: this._queryOptions.fieldOrders.concat(newOrder)
        });
        return new Query2(this._firestore, options);
      }
      limit(limit) {
        (0, validate_1.validateInteger)("limit", limit);
        const options = this._queryOptions.with({
          limit,
          limitType: LimitType.First
        });
        return new Query2(this._firestore, options);
      }
      limitToLast(limit) {
        (0, validate_1.validateInteger)("limitToLast", limit);
        const options = this._queryOptions.with({ limit, limitType: LimitType.Last });
        return new Query2(this._firestore, options);
      }
      offset(offset) {
        (0, validate_1.validateInteger)("offset", offset);
        const options = this._queryOptions.with({ offset });
        return new Query2(this._firestore, options);
      }
      count() {
        return new AggregateQuery(this, { count: {} });
      }
      isEqual(other) {
        if (this === other) {
          return true;
        }
        return other instanceof Query2 && this._queryOptions.isEqual(other._queryOptions);
      }
      createImplicitOrderBy(cursorValuesOrDocumentSnapshot) {
        if (cursorValuesOrDocumentSnapshot.length !== 1 || !(cursorValuesOrDocumentSnapshot[0] instanceof document_1.DocumentSnapshot || cursorValuesOrDocumentSnapshot[0] instanceof DocumentReference2)) {
          return this._queryOptions.fieldOrders;
        }
        const fieldOrders = this._queryOptions.fieldOrders.slice();
        if (fieldOrders.length === 0) {
          for (const fieldFilter of this._queryOptions.fieldFilters) {
            if (fieldFilter.isInequalityFilter()) {
              fieldOrders.push(new FieldOrder(fieldFilter.field));
              break;
            }
          }
        }
        const hasDocumentId = !!fieldOrders.find((fieldOrder) => path_1.FieldPath.documentId().isEqual(fieldOrder.field));
        if (!hasDocumentId) {
          const lastDirection = fieldOrders.length === 0 ? directionOperators.ASC : fieldOrders[fieldOrders.length - 1].direction;
          fieldOrders.push(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));
        }
        return fieldOrders;
      }
      createCursor(fieldOrders, cursorValuesOrDocumentSnapshot, before) {
        let fieldValues;
        if (cursorValuesOrDocumentSnapshot.length === 1 && cursorValuesOrDocumentSnapshot[0] instanceof document_1.DocumentSnapshot) {
          fieldValues = Query2._extractFieldValues(cursorValuesOrDocumentSnapshot[0], fieldOrders);
        } else {
          fieldValues = cursorValuesOrDocumentSnapshot;
        }
        if (fieldValues.length > fieldOrders.length) {
          throw new Error("Too many cursor values specified. The specified values must match the orderBy() constraints of the query.");
        }
        const options = { values: [], before };
        for (let i = 0; i < fieldValues.length; ++i) {
          let fieldValue = fieldValues[i];
          if (path_1.FieldPath.documentId().isEqual(fieldOrders[i].field)) {
            fieldValue = this.validateReference(fieldValue);
          }
          validateQueryValue(i, fieldValue, this._allowUndefined);
          options.values.push(this._serializer.encodeValue(fieldValue));
        }
        return options;
      }
      validateReference(val) {
        const basePath = this._queryOptions.allDescendants ? this._queryOptions.parentPath : this._queryOptions.parentPath.append(this._queryOptions.collectionId);
        let reference;
        if (typeof val === "string") {
          const path = basePath.append(val);
          if (this._queryOptions.allDescendants) {
            if (!path.isDocument) {
              throw new Error(`When querying a collection group and ordering by FieldPath.documentId(), the corresponding value must result in a valid document path, but '${val}' is not because it contains an odd number of segments.`);
            }
          } else if (val.indexOf("/") !== -1) {
            throw new Error(`When querying a collection and ordering by FieldPath.documentId(), the corresponding value must be a plain document ID, but '${val}' contains a slash.`);
          }
          reference = new DocumentReference2(this._firestore, basePath.append(val), this._queryOptions.converter);
        } else if (val instanceof DocumentReference2) {
          reference = val;
          if (!basePath.isPrefixOf(reference._path)) {
            throw new Error(`"${reference.path}" is not part of the query result set and cannot be used as a query boundary.`);
          }
        } else {
          throw new Error(`The corresponding value for FieldPath.documentId() must be a string or a DocumentReference, but was "${val}".`);
        }
        if (!this._queryOptions.allDescendants && reference._path.parent().compareTo(basePath) !== 0) {
          throw new Error(`Only a direct child can be used as a query boundary. Found: "${reference.path}".`);
        }
        return reference;
      }
      startAt(...fieldValuesOrDocumentSnapshot) {
        (0, validate_1.validateMinNumberOfArguments)("Query.startAt", fieldValuesOrDocumentSnapshot, 1);
        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);
        const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);
        const options = this._queryOptions.with({ fieldOrders, startAt });
        return new Query2(this._firestore, options);
      }
      startAfter(...fieldValuesOrDocumentSnapshot) {
        (0, validate_1.validateMinNumberOfArguments)("Query.startAfter", fieldValuesOrDocumentSnapshot, 1);
        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);
        const startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);
        const options = this._queryOptions.with({ fieldOrders, startAt });
        return new Query2(this._firestore, options);
      }
      endBefore(...fieldValuesOrDocumentSnapshot) {
        (0, validate_1.validateMinNumberOfArguments)("Query.endBefore", fieldValuesOrDocumentSnapshot, 1);
        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);
        const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);
        const options = this._queryOptions.with({ fieldOrders, endAt });
        return new Query2(this._firestore, options);
      }
      endAt(...fieldValuesOrDocumentSnapshot) {
        (0, validate_1.validateMinNumberOfArguments)("Query.endAt", fieldValuesOrDocumentSnapshot, 1);
        const fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);
        const endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);
        const options = this._queryOptions.with({ fieldOrders, endAt });
        return new Query2(this._firestore, options);
      }
      get() {
        return this._get();
      }
      _get(transactionId) {
        const docs = [];
        const stack = Error().stack;
        return new Promise((resolve, reject) => {
          let readTime;
          this._stream(transactionId).on("error", (err) => {
            reject((0, util_1.wrapError)(err, stack));
          }).on("data", (result) => {
            readTime = result.readTime;
            if (result.document) {
              docs.push(result.document);
            }
          }).on("end", () => {
            if (this._queryOptions.limitType === LimitType.Last) {
              docs.reverse();
            }
            resolve(new QuerySnapshot2(this, readTime, docs.length, () => docs, () => {
              const changes = [];
              for (let i = 0; i < docs.length; ++i) {
                changes.push(new document_change_1.DocumentChange("added", docs[i], -1, i));
              }
              return changes;
            }));
          });
        });
      }
      stream() {
        if (this._queryOptions.limitType === LimitType.Last) {
          throw new Error("Query results for queries that include limitToLast() constraints cannot be streamed. Use Query.get() instead.");
        }
        const responseStream = this._stream();
        const transform = new stream_1.Transform({
          objectMode: true,
          transform(chunk, encoding, callback) {
            callback(void 0, chunk.document);
          }
        });
        responseStream.pipe(transform);
        responseStream.on("error", (e) => transform.destroy(e));
        return transform;
      }
      toCursor(cursor) {
        if (cursor) {
          return cursor.before ? { before: true, values: cursor.values } : { values: cursor.values };
        }
        return void 0;
      }
      toProto(transactionIdOrReadTime) {
        const projectId = this.firestore.projectId;
        const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId);
        const structuredQuery = this.toStructuredQuery();
        if (this._queryOptions.limitType === LimitType.Last) {
          if (!this._queryOptions.hasFieldOrders()) {
            throw new Error("limitToLast() queries require specifying at least one orderBy() clause.");
          }
          structuredQuery.orderBy = this._queryOptions.fieldOrders.map((order) => {
            const dir = order.direction === "DESCENDING" ? "ASCENDING" : "DESCENDING";
            return new FieldOrder(order.field, dir).toProto();
          });
          structuredQuery.startAt = this._queryOptions.endAt ? this.toCursor({
            values: this._queryOptions.endAt.values,
            before: !this._queryOptions.endAt.before
          }) : void 0;
          structuredQuery.endAt = this._queryOptions.startAt ? this.toCursor({
            values: this._queryOptions.startAt.values,
            before: !this._queryOptions.startAt.before
          }) : void 0;
        }
        const runQueryRequest = {
          parent: parentPath.formattedName,
          structuredQuery
        };
        if (transactionIdOrReadTime instanceof Uint8Array) {
          runQueryRequest.transaction = transactionIdOrReadTime;
        } else if (transactionIdOrReadTime instanceof timestamp_1.Timestamp) {
          runQueryRequest.readTime = transactionIdOrReadTime.toProto().timestampValue;
        }
        return runQueryRequest;
      }
      _toBundledQuery() {
        const projectId = this.firestore.projectId;
        const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId);
        const structuredQuery = this.toStructuredQuery();
        const bundledQuery = {
          parent: parentPath.formattedName,
          structuredQuery
        };
        if (this._queryOptions.limitType === LimitType.First) {
          bundledQuery.limitType = "FIRST";
        } else if (this._queryOptions.limitType === LimitType.Last) {
          bundledQuery.limitType = "LAST";
        }
        return bundledQuery;
      }
      toStructuredQuery() {
        const structuredQuery = {
          from: [{}]
        };
        if (this._queryOptions.allDescendants) {
          structuredQuery.from[0].allDescendants = true;
        }
        if (!this._queryOptions.kindless) {
          structuredQuery.from[0].collectionId = this._queryOptions.collectionId;
        }
        if (this._queryOptions.fieldFilters.length === 1) {
          structuredQuery.where = this._queryOptions.fieldFilters[0].toProto();
        } else if (this._queryOptions.fieldFilters.length > 1) {
          const filters = [];
          for (const fieldFilter of this._queryOptions.fieldFilters) {
            filters.push(fieldFilter.toProto());
          }
          structuredQuery.where = {
            compositeFilter: {
              op: "AND",
              filters
            }
          };
        }
        if (this._queryOptions.hasFieldOrders()) {
          structuredQuery.orderBy = this._queryOptions.fieldOrders.map((o) => o.toProto());
        }
        structuredQuery.startAt = this.toCursor(this._queryOptions.startAt);
        structuredQuery.endAt = this.toCursor(this._queryOptions.endAt);
        if (this._queryOptions.limit) {
          structuredQuery.limit = { value: this._queryOptions.limit };
        }
        structuredQuery.offset = this._queryOptions.offset;
        structuredQuery.select = this._queryOptions.projection;
        return structuredQuery;
      }
      _stream(transactionId) {
        const tag = (0, util_1.requestTag)();
        let lastReceivedDocument = null;
        let backendStream;
        const stream = new stream_1.Transform({
          objectMode: true,
          transform: (proto, enc, callback) => {
            const readTime = timestamp_1.Timestamp.fromProto(proto.readTime);
            if (proto.document) {
              const document = this.firestore.snapshot_(proto.document, proto.readTime);
              const finalDoc = new document_1.DocumentSnapshotBuilder(document.ref.withConverter(this._queryOptions.converter));
              finalDoc.fieldsProto = document._fieldsProto;
              finalDoc.readTime = document.readTime;
              finalDoc.createTime = document.createTime;
              finalDoc.updateTime = document.updateTime;
              lastReceivedDocument = finalDoc.build();
              callback(void 0, { document: lastReceivedDocument, readTime });
              if (proto.done) {
                (0, logger_1.logger)("Query._stream", tag, "Trigger Logical Termination.");
                backendStream.unpipe(stream);
                backendStream.resume();
                backendStream.end();
                stream.end();
              }
            } else {
              callback(void 0, { readTime });
            }
          }
        });
        this.firestore.initializeIfNeeded(tag).then(async () => {
          let request = this.toProto(transactionId);
          let streamActive;
          do {
            streamActive = new util_1.Deferred();
            backendStream = await this._firestore.requestStream(
              "runQuery",
              false,
              request,
              tag
            );
            backendStream.on("error", (err) => {
              backendStream.unpipe(stream);
              if (!transactionId && !(0, util_1.isPermanentRpcError)(err, "runQuery")) {
                (0, logger_1.logger)("Query._stream", tag, "Query failed with retryable stream error:", err);
                if (lastReceivedDocument) {
                  if (this._queryOptions.requireConsistency) {
                    request = this.startAfter(lastReceivedDocument).toProto(lastReceivedDocument.readTime);
                  } else {
                    request = this.startAfter(lastReceivedDocument).toProto();
                  }
                }
                streamActive.resolve(true);
              } else {
                (0, logger_1.logger)("Query._stream", tag, "Query failed with stream error:", err);
                stream.destroy(err);
                streamActive.resolve(false);
              }
            });
            backendStream.on("end", () => {
              streamActive.resolve(false);
            });
            backendStream.resume();
            backendStream.pipe(stream);
          } while (await streamActive.promise);
        }).catch((e) => stream.destroy(e));
        return stream;
      }
      onSnapshot(onNext, onError) {
        (0, validate_1.validateFunction)("onNext", onNext);
        (0, validate_1.validateFunction)("onError", onError, { optional: true });
        const watch = new (require_watch()).QueryWatch(this.firestore, this, this._queryOptions.converter);
        return watch.onSnapshot((readTime, size, docs, changes) => {
          onNext(new QuerySnapshot2(this, readTime, size, docs, changes));
        }, onError || console.error);
      }
      comparator() {
        return (doc1, doc2) => {
          const lastDirection = this._queryOptions.hasFieldOrders() ? this._queryOptions.fieldOrders[this._queryOptions.fieldOrders.length - 1].direction : "ASCENDING";
          const orderBys = this._queryOptions.fieldOrders.concat(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));
          for (const orderBy of orderBys) {
            let comp;
            if (path_1.FieldPath.documentId().isEqual(orderBy.field)) {
              comp = doc1.ref._path.compareTo(doc2.ref._path);
            } else {
              const v12 = doc1.protoField(orderBy.field);
              const v2 = doc2.protoField(orderBy.field);
              if (v12 === void 0 || v2 === void 0) {
                throw new Error("Trying to compare documents on fields that don't exist. Please include the fields you are ordering on in your select() call.");
              }
              comp = (0, order_1.compare)(v12, v2);
            }
            if (comp !== 0) {
              const direction = orderBy.direction === "ASCENDING" ? 1 : -1;
              return direction * comp;
            }
          }
          return 0;
        };
      }
      withConverter(converter) {
        return new Query2(this.firestore, this._queryOptions.withConverter(converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)()));
      }
    };
    exports2.Query = Query2;
    var CollectionReference2 = class extends Query2 {
      constructor(firestore, path, converter) {
        super(firestore, QueryOptions.forCollectionQuery(path, converter));
      }
      get _resourcePath() {
        return this._queryOptions.parentPath.append(this._queryOptions.collectionId);
      }
      get id() {
        return this._queryOptions.collectionId;
      }
      get parent() {
        if (this._queryOptions.parentPath.isDocument) {
          return new DocumentReference2(this.firestore, this._queryOptions.parentPath);
        }
        return null;
      }
      get path() {
        return this._resourcePath.relativeName;
      }
      listDocuments() {
        const tag = (0, util_1.requestTag)();
        return this.firestore.initializeIfNeeded(tag).then(() => {
          const parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(this.firestore.projectId);
          const request = {
            parent: parentPath.formattedName,
            collectionId: this.id,
            showMissing: true,
            pageSize: Math.pow(2, 16) - 1,
            mask: { fieldPaths: [] }
          };
          return this.firestore.request("listDocuments", request, tag).then((documents) => {
            return documents.map((doc) => {
              const path = path_1.QualifiedResourcePath.fromSlashSeparatedString(doc.name);
              return this.doc(path.id);
            });
          });
        });
      }
      doc(documentPath) {
        if (arguments.length === 0) {
          documentPath = (0, util_1.autoId)();
        } else {
          (0, path_1.validateResourcePath)("documentPath", documentPath);
        }
        const path = this._resourcePath.append(documentPath);
        if (!path.isDocument) {
          throw new Error(`Value for argument "documentPath" must point to a document, but was "${documentPath}". Your path does not contain an even number of components.`);
        }
        return new DocumentReference2(this.firestore, path, this._queryOptions.converter);
      }
      add(data) {
        const firestoreData = this._queryOptions.converter.toFirestore(data);
        (0, write_batch_1.validateDocumentData)(
          "data",
          firestoreData,
          false,
          this._allowUndefined
        );
        const documentRef = this.doc();
        return documentRef.create(data).then(() => documentRef);
      }
      isEqual(other) {
        return this === other || other instanceof CollectionReference2 && super.isEqual(other);
      }
      withConverter(converter) {
        return new CollectionReference2(this.firestore, this._resourcePath, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());
      }
    };
    exports2.CollectionReference = CollectionReference2;
    var AggregateQuery = class {
      constructor(_query, _aggregates) {
        this._query = _query;
        this._aggregates = _aggregates;
      }
      get query() {
        return this._query;
      }
      get() {
        return this._get();
      }
      _get(transactionId) {
        const stack = Error().stack;
        return new Promise((resolve, reject) => {
          const stream = this._stream(transactionId);
          stream.on("error", (err) => {
            reject((0, util_1.wrapError)(err, stack));
          });
          stream.once("data", (result) => {
            stream.destroy();
            resolve(result);
          });
          stream.on("end", () => {
            reject("No AggregateQuery results");
          });
        });
      }
      _stream(transactionId) {
        const tag = (0, util_1.requestTag)();
        const firestore = this._query.firestore;
        const stream = new stream_1.Transform({
          objectMode: true,
          transform: (proto, enc, callback) => {
            if (proto.result) {
              const readTime = timestamp_1.Timestamp.fromProto(proto.readTime);
              const data = this.decodeResult(proto.result);
              callback(void 0, new AggregateQuerySnapshot(this, readTime, data));
            } else {
              callback(Error("RunAggregationQueryResponse is missing result"));
            }
          }
        });
        firestore.initializeIfNeeded(tag).then(async () => {
          const request = this.toProto(transactionId);
          let streamActive;
          do {
            streamActive = new util_1.Deferred();
            const backendStream = await firestore.requestStream(
              "runAggregationQuery",
              false,
              request,
              tag
            );
            stream.on("close", () => {
              backendStream.resume();
              backendStream.end();
            });
            backendStream.on("error", (err) => {
              backendStream.unpipe(stream);
              if (!transactionId && !(0, util_1.isPermanentRpcError)(err, "runAggregationQuery")) {
                (0, logger_1.logger)("AggregateQuery._stream", tag, "AggregateQuery failed with retryable stream error:", err);
                streamActive.resolve(true);
              } else {
                (0, logger_1.logger)("AggregateQuery._stream", tag, "AggregateQuery failed with stream error:", err);
                stream.destroy(err);
                streamActive.resolve(false);
              }
            });
            backendStream.resume();
            backendStream.pipe(stream);
          } while (await streamActive.promise);
        }).catch((e) => stream.destroy(e));
        return stream;
      }
      decodeResult(proto) {
        const data = {};
        const fields = proto.aggregateFields;
        if (fields) {
          const serializer = this._query.firestore._serializer;
          for (const prop of Object.keys(fields)) {
            if (this._aggregates[prop] === void 0) {
              throw new Error(`Unexpected alias [${prop}] in result aggregate result`);
            }
            data[prop] = serializer.decodeValue(fields[prop]);
          }
        }
        return data;
      }
      toProto(transactionId) {
        const queryProto = this._query.toProto();
        const runQueryRequest = {
          parent: queryProto.parent,
          structuredAggregationQuery: {
            structuredQuery: queryProto.structuredQuery,
            aggregations: [
              {
                alias: "count",
                count: {}
              }
            ]
          }
        };
        if (transactionId instanceof Uint8Array) {
          runQueryRequest.transaction = transactionId;
        }
        return runQueryRequest;
      }
      isEqual(other) {
        if (this === other) {
          return true;
        }
        if (!(other instanceof AggregateQuery)) {
          return false;
        }
        if (!this.query.isEqual(other.query)) {
          return false;
        }
        return deepEqual(this._aggregates, other._aggregates);
      }
    };
    exports2.AggregateQuery = AggregateQuery;
    var AggregateQuerySnapshot = class {
      constructor(_query, _readTime, _data) {
        this._query = _query;
        this._readTime = _readTime;
        this._data = _data;
      }
      get query() {
        return this._query;
      }
      get readTime() {
        return this._readTime;
      }
      data() {
        return this._data;
      }
      isEqual(other) {
        if (this === other) {
          return true;
        }
        if (!(other instanceof AggregateQuerySnapshot)) {
          return false;
        }
        if (!this.query.isEqual(other.query)) {
          return false;
        }
        return deepEqual(this._data, other._data);
      }
    };
    exports2.AggregateQuerySnapshot = AggregateQuerySnapshot;
    function validateQueryOrder(arg, op) {
      op = typeof op === "string" ? op.toLowerCase() : op;
      (0, validate_1.validateEnumValue)(arg, op, Object.keys(directionOperators), { optional: true });
      return op;
    }
    exports2.validateQueryOrder = validateQueryOrder;
    function validateQueryOperator(arg, op, fieldValue) {
      if (op === "=") {
        op = "==";
      }
      (0, validate_1.validateEnumValue)(arg, op, Object.keys(comparisonOperators));
      if (typeof fieldValue === "number" && isNaN(fieldValue) && op !== "==" && op !== "!=") {
        throw new Error("Invalid query. You can only perform '==' and '!=' comparisons on NaN.");
      }
      if (fieldValue === null && op !== "==" && op !== "!=") {
        throw new Error("Invalid query. You can only perform '==' and '!=' comparisons on Null.");
      }
      return op;
    }
    exports2.validateQueryOperator = validateQueryOperator;
    function validateDocumentReference(arg, value) {
      if (!(value instanceof DocumentReference2)) {
        throw new Error((0, validate_1.invalidArgumentMessage)(arg, "DocumentReference"));
      }
      return value;
    }
    exports2.validateDocumentReference = validateDocumentReference;
    function validateQueryValue(arg, value, allowUndefined) {
      (0, serializer_1.validateUserInput)(arg, value, "query constraint", {
        allowDeletes: "none",
        allowTransforms: false,
        allowUndefined
      });
    }
    function isArrayEqual(left, right) {
      if (left.length !== right.length) {
        return false;
      }
      for (let i = 0; i < left.length; ++i) {
        if (!left[i].isEqual(right[i])) {
          return false;
        }
      }
      return true;
    }
    function coalesce(...values) {
      return values.find((value) => value !== void 0);
    }
  }
});

// node_modules/@google-cloud/firestore/build/src/document.js
var require_document = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/document.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Precondition = exports2.DocumentTransform = exports2.DocumentMask = exports2.QueryDocumentSnapshot = exports2.DocumentSnapshot = exports2.DocumentSnapshotBuilder = void 0;
    var deepEqual = require_fast_deep_equal();
    var assert = require_assert();
    var field_value_1 = require_field_value();
    var path_1 = require_path3();
    var reference_1 = require_reference();
    var types_1 = require_types2();
    var util_1 = require_util5();
    var DocumentSnapshotBuilder = class {
      constructor(ref) {
        this.ref = ref;
      }
      build() {
        assert(this.fieldsProto !== void 0 === (this.createTime !== void 0), "Create time should be set iff document exists.");
        assert(this.fieldsProto !== void 0 === (this.updateTime !== void 0), "Update time should be set iff document exists.");
        return this.fieldsProto ? new QueryDocumentSnapshot2(this.ref, this.fieldsProto, this.readTime, this.createTime, this.updateTime) : new DocumentSnapshot2(this.ref, void 0, this.readTime);
      }
    };
    exports2.DocumentSnapshotBuilder = DocumentSnapshotBuilder;
    var DocumentSnapshot2 = class {
      constructor(ref, _fieldsProto, readTime, createTime, updateTime) {
        this._fieldsProto = _fieldsProto;
        this._ref = ref;
        this._serializer = ref.firestore._serializer;
        this._readTime = readTime;
        this._createTime = createTime;
        this._updateTime = updateTime;
      }
      static fromObject(ref, obj) {
        const serializer = ref.firestore._serializer;
        return new DocumentSnapshot2(ref, serializer.encodeFields(obj));
      }
      static fromUpdateMap(ref, data) {
        const serializer = ref.firestore._serializer;
        function merge(target, value, path, pos) {
          const key = path[pos];
          const isLast = pos === path.length - 1;
          if (target[key] === void 0) {
            if (isLast) {
              if (value instanceof field_value_1.FieldTransform) {
                return !(0, util_1.isEmpty)(target) ? target : null;
              }
              const leafNode = serializer.encodeValue(value);
              if (leafNode) {
                target[key] = leafNode;
              }
              return target;
            } else {
              const childNode = {
                mapValue: {
                  fields: {}
                }
              };
              const nestedValue = merge(childNode.mapValue.fields, value, path, pos + 1);
              if (nestedValue) {
                childNode.mapValue.fields = nestedValue;
                target[key] = childNode;
                return target;
              } else {
                return !(0, util_1.isEmpty)(target) ? target : null;
              }
            }
          } else {
            assert(!isLast, "Can't merge current value into a nested object");
            target[key].mapValue.fields = merge(target[key].mapValue.fields, value, path, pos + 1);
            return target;
          }
        }
        const res = {};
        for (const [key, value] of data) {
          const path = key.toArray();
          merge(res, value, path, 0);
        }
        return new DocumentSnapshot2(ref, res);
      }
      get exists() {
        return this._fieldsProto !== void 0;
      }
      get ref() {
        return this._ref;
      }
      get id() {
        return this._ref.id;
      }
      get createTime() {
        return this._createTime;
      }
      get updateTime() {
        return this._updateTime;
      }
      get readTime() {
        if (this._readTime === void 0) {
          throw new Error("Called 'readTime' on a local document");
        }
        return this._readTime;
      }
      data() {
        const fields = this._fieldsProto;
        if (fields === void 0) {
          return void 0;
        }
        if (this.ref._converter !== (0, types_1.defaultConverter)()) {
          const untypedReference = new reference_1.DocumentReference(this.ref.firestore, this.ref._path);
          return this.ref._converter.fromFirestore(new QueryDocumentSnapshot2(untypedReference, this._fieldsProto, this.readTime, this.createTime, this.updateTime));
        } else {
          const obj = {};
          for (const prop of Object.keys(fields)) {
            obj[prop] = this._serializer.decodeValue(fields[prop]);
          }
          return obj;
        }
      }
      get(field) {
        (0, path_1.validateFieldPath)("field", field);
        const protoField = this.protoField(field);
        if (protoField === void 0) {
          return void 0;
        }
        return this._serializer.decodeValue(protoField);
      }
      protoField(field) {
        let fields = this._fieldsProto;
        if (fields === void 0) {
          return void 0;
        }
        const components = path_1.FieldPath.fromArgument(field).toArray();
        while (components.length > 1) {
          fields = fields[components.shift()];
          if (!fields || !fields.mapValue) {
            return void 0;
          }
          fields = fields.mapValue.fields;
        }
        return fields[components[0]];
      }
      toWriteProto() {
        return {
          update: {
            name: this._ref.formattedName,
            fields: this._fieldsProto
          }
        };
      }
      toDocumentProto() {
        var _a, _b;
        return {
          name: this._ref.formattedName,
          createTime: (_a = this.createTime) === null || _a === void 0 ? void 0 : _a.toProto().timestampValue,
          updateTime: (_b = this.updateTime) === null || _b === void 0 ? void 0 : _b.toProto().timestampValue,
          fields: this._fieldsProto
        };
      }
      isEqual(other) {
        return this === other || other instanceof DocumentSnapshot2 && this._ref.isEqual(other._ref) && deepEqual(this._fieldsProto, other._fieldsProto);
      }
    };
    exports2.DocumentSnapshot = DocumentSnapshot2;
    var QueryDocumentSnapshot2 = class extends DocumentSnapshot2 {
      get createTime() {
        return super.createTime;
      }
      get updateTime() {
        return super.updateTime;
      }
      data() {
        const data = super.data();
        if (!data) {
          throw new Error("The data in a QueryDocumentSnapshot should always exist.");
        }
        return data;
      }
    };
    exports2.QueryDocumentSnapshot = QueryDocumentSnapshot2;
    var DocumentMask = class {
      constructor(fieldPaths) {
        this._sortedPaths = fieldPaths;
        this._sortedPaths.sort((a, b) => a.compareTo(b));
      }
      static fromUpdateMap(data) {
        const fieldPaths = [];
        data.forEach((value, key) => {
          if (!(value instanceof field_value_1.FieldTransform) || value.includeInDocumentMask) {
            fieldPaths.push(path_1.FieldPath.fromArgument(key));
          }
        });
        return new DocumentMask(fieldPaths);
      }
      static fromFieldMask(fieldMask) {
        const fieldPaths = [];
        for (const fieldPath of fieldMask) {
          fieldPaths.push(path_1.FieldPath.fromArgument(fieldPath));
        }
        return new DocumentMask(fieldPaths);
      }
      static fromObject(data) {
        const fieldPaths = [];
        function extractFieldPaths(currentData, currentPath) {
          let isEmpty = true;
          for (const key of Object.keys(currentData)) {
            isEmpty = false;
            const childSegment = new path_1.FieldPath(key);
            const childPath = currentPath ? currentPath.append(childSegment) : childSegment;
            const value = currentData[key];
            if (value instanceof field_value_1.FieldTransform) {
              if (value.includeInDocumentMask) {
                fieldPaths.push(childPath);
              }
            } else if ((0, util_1.isPlainObject)(value)) {
              extractFieldPaths(value, childPath);
            } else if (value !== void 0) {
              fieldPaths.push(childPath);
            }
          }
          if (currentPath && isEmpty) {
            fieldPaths.push(currentPath);
          }
        }
        extractFieldPaths(data);
        return new DocumentMask(fieldPaths);
      }
      get isEmpty() {
        return this._sortedPaths.length === 0;
      }
      static removeFromSortedArray(input, values) {
        for (let i = 0; i < input.length; ) {
          let removed = false;
          for (const fieldPath of values) {
            if (input[i].isEqual(fieldPath)) {
              input.splice(i, 1);
              removed = true;
              break;
            }
          }
          if (!removed) {
            ++i;
          }
        }
      }
      removeFields(fieldPaths) {
        DocumentMask.removeFromSortedArray(this._sortedPaths, fieldPaths);
      }
      contains(fieldPath) {
        for (const sortedPath of this._sortedPaths) {
          const cmp = sortedPath.compareTo(fieldPath);
          if (cmp === 0) {
            return true;
          } else if (cmp > 0) {
            return false;
          }
        }
        return false;
      }
      applyTo(data) {
        const applyDocumentMask = (data2) => {
          const remainingPaths = this._sortedPaths.slice(0);
          const processObject = (currentData, currentPath) => {
            let result2 = null;
            Object.keys(currentData).forEach((key) => {
              const childPath = currentPath ? currentPath.append(key) : new path_1.FieldPath(key);
              if (this.contains(childPath)) {
                DocumentMask.removeFromSortedArray(remainingPaths, [childPath]);
                result2 = result2 || {};
                result2[key] = currentData[key];
              } else if ((0, util_1.isObject)(currentData[key])) {
                const childObject = processObject(currentData[key], childPath);
                if (childObject) {
                  result2 = result2 || {};
                  result2[key] = childObject;
                }
              }
            });
            return result2;
          };
          const filteredData = processObject(data2) || {};
          return {
            filteredData,
            remainingPaths
          };
        };
        const result = applyDocumentMask(data);
        if (result.remainingPaths.length !== 0) {
          throw new Error(`Input data is missing for field "${result.remainingPaths[0]}".`);
        }
        return result.filteredData;
      }
      toProto() {
        if (this.isEmpty) {
          return {};
        }
        const encodedPaths = [];
        for (const fieldPath of this._sortedPaths) {
          encodedPaths.push(fieldPath.formattedName);
        }
        return {
          fieldPaths: encodedPaths
        };
      }
    };
    exports2.DocumentMask = DocumentMask;
    var DocumentTransform = class {
      constructor(ref, transforms) {
        this.ref = ref;
        this.transforms = transforms;
      }
      static fromObject(ref, obj) {
        const updateMap = /* @__PURE__ */ new Map();
        for (const prop of Object.keys(obj)) {
          updateMap.set(new path_1.FieldPath(prop), obj[prop]);
        }
        return DocumentTransform.fromUpdateMap(ref, updateMap);
      }
      static fromUpdateMap(ref, data) {
        const transforms = /* @__PURE__ */ new Map();
        function encode_(val, path, allowTransforms) {
          if (val instanceof field_value_1.FieldTransform && val.includeInDocumentTransform) {
            if (allowTransforms) {
              transforms.set(path, val);
            } else {
              throw new Error(`${val.methodName}() is not supported inside of array values.`);
            }
          } else if (Array.isArray(val)) {
            for (let i = 0; i < val.length; ++i) {
              encode_(val[i], path.append(String(i)), false);
            }
          } else if ((0, util_1.isPlainObject)(val)) {
            for (const prop of Object.keys(val)) {
              encode_(val[prop], path.append(new path_1.FieldPath(prop)), allowTransforms);
            }
          }
        }
        data.forEach((value, key) => {
          encode_(value, path_1.FieldPath.fromArgument(key), true);
        });
        return new DocumentTransform(ref, transforms);
      }
      get isEmpty() {
        return this.transforms.size === 0;
      }
      get fields() {
        return Array.from(this.transforms.keys());
      }
      validate() {
        const allowUndefined = !!this.ref.firestore._settings.ignoreUndefinedProperties;
        this.transforms.forEach((transform) => transform.validate(allowUndefined));
      }
      toProto(serializer) {
        return Array.from(this.transforms, ([path, transform]) => transform.toProto(serializer, path));
      }
    };
    exports2.DocumentTransform = DocumentTransform;
    var Precondition = class {
      constructor(options) {
        if (options !== void 0) {
          this._exists = options.exists;
          this._lastUpdateTime = options.lastUpdateTime;
        }
      }
      toProto() {
        if (this.isEmpty) {
          return null;
        }
        const proto = {};
        if (this._lastUpdateTime !== void 0) {
          proto.updateTime = this._lastUpdateTime.toProto().timestampValue;
        } else {
          proto.exists = this._exists;
        }
        return proto;
      }
      get isEmpty() {
        return this._exists === void 0 && !this._lastUpdateTime;
      }
    };
    exports2.Precondition = Precondition;
  }
});

// node_modules/@google-cloud/firestore/build/src/write-batch.js
var require_write_batch = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/write-batch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateFieldValue = exports2.validateDocumentData = exports2.validateSetOptions = exports2.WriteBatch = exports2.WriteResult = void 0;
    var document_1 = require_document();
    var logger_1 = require_logger();
    var path_1 = require_path3();
    var reference_1 = require_reference();
    var serializer_1 = require_serializer();
    var timestamp_1 = require_timestamp2();
    var util_1 = require_util5();
    var validate_1 = require_validate();
    var WriteResult2 = class {
      constructor(_writeTime) {
        this._writeTime = _writeTime;
      }
      get writeTime() {
        return this._writeTime;
      }
      isEqual(other) {
        return this === other || other instanceof WriteResult2 && this._writeTime.isEqual(other._writeTime);
      }
    };
    exports2.WriteResult = WriteResult2;
    var WriteBatch2 = class {
      constructor(firestore) {
        this._ops = [];
        this._committed = false;
        this._firestore = firestore;
        this._serializer = new serializer_1.Serializer(firestore);
        this._allowUndefined = !!firestore._settings.ignoreUndefinedProperties;
      }
      get _opCount() {
        return this._ops.length;
      }
      get isEmpty() {
        return this._ops.length === 0;
      }
      verifyNotCommitted() {
        if (this._committed) {
          throw new Error("Cannot modify a WriteBatch that has been committed.");
        }
      }
      create(documentRef, data) {
        const ref = (0, reference_1.validateDocumentReference)("documentRef", documentRef);
        const firestoreData = ref._converter.toFirestore(data);
        validateDocumentData(
          "data",
          firestoreData,
          false,
          this._allowUndefined
        );
        this.verifyNotCommitted();
        const transform = document_1.DocumentTransform.fromObject(ref, firestoreData);
        transform.validate();
        const precondition = new document_1.Precondition({ exists: false });
        const op = () => {
          const document = document_1.DocumentSnapshot.fromObject(ref, firestoreData);
          const write = document.toWriteProto();
          if (!transform.isEmpty) {
            write.updateTransforms = transform.toProto(this._serializer);
          }
          write.currentDocument = precondition.toProto();
          return write;
        };
        this._ops.push({ docPath: documentRef.path, op });
        return this;
      }
      delete(documentRef, precondition) {
        const ref = (0, reference_1.validateDocumentReference)("documentRef", documentRef);
        validateDeletePrecondition("precondition", precondition, { optional: true });
        this.verifyNotCommitted();
        const conditions = new document_1.Precondition(precondition);
        const op = () => {
          const write = { delete: ref.formattedName };
          if (!conditions.isEmpty) {
            write.currentDocument = conditions.toProto();
          }
          return write;
        };
        this._ops.push({ docPath: documentRef.path, op });
        return this;
      }
      set(documentRef, data, options) {
        validateSetOptions("options", options, { optional: true });
        const mergeLeaves = options && "merge" in options && options.merge;
        const mergePaths = options && "mergeFields" in options;
        const ref = (0, reference_1.validateDocumentReference)("documentRef", documentRef);
        let firestoreData;
        if (mergeLeaves || mergePaths) {
          firestoreData = ref._converter.toFirestore(data, options);
        } else {
          firestoreData = ref._converter.toFirestore(data);
        }
        validateDocumentData(
          "data",
          firestoreData,
          !!(mergePaths || mergeLeaves),
          this._allowUndefined
        );
        this.verifyNotCommitted();
        let documentMask;
        if (mergePaths) {
          documentMask = document_1.DocumentMask.fromFieldMask(options.mergeFields);
          firestoreData = documentMask.applyTo(firestoreData);
        }
        const transform = document_1.DocumentTransform.fromObject(documentRef, firestoreData);
        transform.validate();
        const op = () => {
          const document = document_1.DocumentSnapshot.fromObject(documentRef, firestoreData);
          if (mergePaths) {
            documentMask.removeFields(transform.fields);
          } else if (mergeLeaves) {
            documentMask = document_1.DocumentMask.fromObject(firestoreData);
          }
          const write = document.toWriteProto();
          if (!transform.isEmpty) {
            write.updateTransforms = transform.toProto(this._serializer);
          }
          if (mergePaths || mergeLeaves) {
            write.updateMask = documentMask.toProto();
          }
          return write;
        };
        this._ops.push({ docPath: documentRef.path, op });
        return this;
      }
      update(documentRef, dataOrField, ...preconditionOrValues) {
        (0, validate_1.validateMinNumberOfArguments)("WriteBatch.update", arguments, 2);
        (0, reference_1.validateDocumentReference)("documentRef", documentRef);
        this.verifyNotCommitted();
        const updateMap = /* @__PURE__ */ new Map();
        let precondition = new document_1.Precondition({ exists: true });
        const argumentError = "Update() requires either a single JavaScript object or an alternating list of field/value pairs that can be followed by an optional precondition.";
        const usesVarargs = typeof dataOrField === "string" || dataOrField instanceof path_1.FieldPath;
        if (usesVarargs) {
          const argumentOffset = 1;
          const fieldOrValues = [dataOrField, ...preconditionOrValues];
          try {
            for (let i = 0; i < fieldOrValues.length; i += 2) {
              if (i === fieldOrValues.length - 1) {
                const maybePrecondition = fieldOrValues[i];
                validateUpdatePrecondition(i + argumentOffset, maybePrecondition);
                precondition = new document_1.Precondition(maybePrecondition);
              } else {
                const maybeFieldPath = fieldOrValues[i];
                (0, path_1.validateFieldPath)(i + argumentOffset, maybeFieldPath);
                (0, validate_1.validateMinNumberOfArguments)("update", fieldOrValues, i + 1);
                const fieldPath = path_1.FieldPath.fromArgument(maybeFieldPath);
                validateFieldValue(i + argumentOffset, fieldOrValues[i + 1], this._allowUndefined, fieldPath);
                updateMap.set(fieldPath, fieldOrValues[i + 1]);
              }
            }
          } catch (err) {
            (0, logger_1.logger)("WriteBatch.update", null, "Varargs validation failed:", err);
            throw new Error(`${argumentError} ${err.message}`);
          }
        } else {
          try {
            validateUpdateMap("dataOrField", dataOrField, this._allowUndefined);
            (0, validate_1.validateMaxNumberOfArguments)("update", arguments, 3);
            Object.entries(dataOrField).forEach(([key, value]) => {
              if (value !== void 0) {
                (0, path_1.validateFieldPath)(key, key);
                updateMap.set(path_1.FieldPath.fromArgument(key), value);
              }
            });
            if (preconditionOrValues.length > 0) {
              validateUpdatePrecondition("preconditionOrValues", preconditionOrValues[0]);
              precondition = new document_1.Precondition(preconditionOrValues[0]);
            }
          } catch (err) {
            (0, logger_1.logger)("WriteBatch.update", null, "Non-varargs validation failed:", err);
            throw new Error(`${argumentError} ${err.message}`);
          }
        }
        validateNoConflictingFields("dataOrField", updateMap);
        const transform = document_1.DocumentTransform.fromUpdateMap(documentRef, updateMap);
        transform.validate();
        const documentMask = document_1.DocumentMask.fromUpdateMap(updateMap);
        const op = () => {
          const document = document_1.DocumentSnapshot.fromUpdateMap(documentRef, updateMap);
          const write = document.toWriteProto();
          write.updateMask = documentMask.toProto();
          if (!transform.isEmpty) {
            write.updateTransforms = transform.toProto(this._serializer);
          }
          write.currentDocument = precondition.toProto();
          return write;
        };
        this._ops.push({ docPath: documentRef.path, op });
        return this;
      }
      commit() {
        const stack = Error().stack;
        const retryCodes = [10, ...(0, util_1.getRetryCodes)("commit")];
        return this._commit({ retryCodes }).then((response) => {
          return (response.writeResults || []).map((writeResult) => new WriteResult2(timestamp_1.Timestamp.fromProto(writeResult.updateTime || response.commitTime)));
        }).catch((err) => {
          throw (0, util_1.wrapError)(err, stack);
        });
      }
      async _commit(commitOptions) {
        var _a;
        this._committed = true;
        const tag = (_a = commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.requestTag) !== null && _a !== void 0 ? _a : (0, util_1.requestTag)();
        await this._firestore.initializeIfNeeded(tag);
        const request = {
          database: this._firestore.formattedName,
          writes: this._ops.map((op) => op.op())
        };
        if (commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.transactionId) {
          request.transaction = commitOptions.transactionId;
        }
        (0, logger_1.logger)("WriteBatch.commit", tag, "Sending %d writes", request.writes.length);
        return this._firestore.request((commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.methodName) || "commit", request, tag, commitOptions === null || commitOptions === void 0 ? void 0 : commitOptions.retryCodes);
      }
      _reset() {
        this._ops.splice(0);
        this._committed = false;
      }
    };
    exports2.WriteBatch = WriteBatch2;
    function validatePrecondition(arg, value, allowExists) {
      if (typeof value !== "object" || value === null) {
        throw new Error("Input is not an object.");
      }
      const precondition = value;
      let conditions = 0;
      if (precondition.exists !== void 0) {
        ++conditions;
        if (!allowExists) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "precondition")} "exists" is not an allowed precondition.`);
        }
        if (typeof precondition.exists !== "boolean") {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "precondition")} "exists" is not a boolean.'`);
        }
      }
      if (precondition.lastUpdateTime !== void 0) {
        ++conditions;
        if (!(precondition.lastUpdateTime instanceof timestamp_1.Timestamp)) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "precondition")} "lastUpdateTime" is not a Firestore Timestamp.`);
        }
      }
      if (conditions > 1) {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "precondition")} Input specifies more than one precondition.`);
      }
    }
    function validateUpdatePrecondition(arg, value, options) {
      if (!(0, validate_1.validateOptional)(value, options)) {
        validatePrecondition(arg, value, false);
      }
    }
    function validateDeletePrecondition(arg, value, options) {
      if (!(0, validate_1.validateOptional)(value, options)) {
        validatePrecondition(arg, value, true);
      }
    }
    function validateSetOptions(arg, value, options) {
      if (!(0, validate_1.validateOptional)(value, options)) {
        if (!(0, util_1.isObject)(value)) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "set() options argument")} Input is not an object.`);
        }
        const setOptions = value;
        if ("mergeFields" in setOptions) {
          for (let i = 0; i < setOptions.mergeFields.length; ++i) {
            try {
              (0, path_1.validateFieldPath)(i, setOptions.mergeFields[i]);
            } catch (err) {
              throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "set() options argument")} "mergeFields" is not valid: ${err.message}`);
            }
          }
        }
        if ("merge" in setOptions && "mergeFields" in setOptions) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "set() options argument")} You cannot specify both "merge" and "mergeFields".`);
        }
      }
    }
    exports2.validateSetOptions = validateSetOptions;
    function validateDocumentData(arg, obj, allowDeletes, allowUndefined) {
      if (!(0, util_1.isPlainObject)(obj)) {
        throw new Error((0, validate_1.customObjectMessage)(arg, obj));
      }
      (0, serializer_1.validateUserInput)(arg, obj, "Firestore document", {
        allowDeletes: allowDeletes ? "all" : "none",
        allowTransforms: true,
        allowUndefined
      });
    }
    exports2.validateDocumentData = validateDocumentData;
    function validateFieldValue(arg, val, allowUndefined, path) {
      (0, serializer_1.validateUserInput)(arg, val, "Firestore value", { allowDeletes: "root", allowTransforms: true, allowUndefined }, path);
    }
    exports2.validateFieldValue = validateFieldValue;
    function validateNoConflictingFields(arg, data) {
      const fields = [];
      data.forEach((value, key) => {
        fields.push(key);
      });
      fields.sort((left, right) => left.compareTo(right));
      for (let i = 1; i < fields.length; ++i) {
        if (fields[i - 1].isPrefixOf(fields[i])) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "update map")} Field "${fields[i - 1]}" was specified multiple times.`);
        }
      }
    }
    function validateUpdateMap(arg, obj, allowUndefined) {
      if (!(0, util_1.isPlainObject)(obj)) {
        throw new Error((0, validate_1.customObjectMessage)(arg, obj));
      }
      if (Object.keys(obj).length === 0) {
        throw new Error("At least one field must be updated.");
      }
      validateFieldValue(arg, obj, allowUndefined);
    }
  }
});

// node_modules/@google-cloud/firestore/build/src/bulk-writer.js
var require_bulk_writer = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/bulk-writer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BulkWriter = exports2.BulkWriterError = exports2.DEFAULT_JITTER_FACTOR = exports2.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = exports2.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = exports2.RETRY_MAX_BATCH_SIZE = void 0;
    var assert = require_assert();
    var backoff_1 = require_backoff();
    var rate_limiter_1 = require_rate_limiter();
    var timestamp_1 = require_timestamp2();
    var util_1 = require_util5();
    var write_batch_1 = require_write_batch();
    var validate_1 = require_validate();
    var logger_1 = require_logger();
    var MAX_BATCH_SIZE = 20;
    exports2.RETRY_MAX_BATCH_SIZE = 10;
    exports2.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT = 500;
    exports2.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT = 1e4;
    exports2.DEFAULT_JITTER_FACTOR = 0.3;
    var RATE_LIMITER_MULTIPLIER = 1.5;
    var RATE_LIMITER_MULTIPLIER_MILLIS = 5 * 60 * 1e3;
    var DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT = 500;
    var BulkWriterOperation = class {
      constructor(ref, type, sendFn, errorFn, successFn) {
        this.ref = ref;
        this.type = type;
        this.sendFn = sendFn;
        this.errorFn = errorFn;
        this.successFn = successFn;
        this.deferred = new util_1.Deferred();
        this.failedAttempts = 0;
        this._backoffDuration = 0;
        this._flushed = false;
      }
      get promise() {
        return this.deferred.promise;
      }
      get backoffDuration() {
        return this._backoffDuration;
      }
      markFlushed() {
        this._flushed = true;
      }
      get flushed() {
        return this._flushed;
      }
      onError(error) {
        ++this.failedAttempts;
        try {
          const bulkWriterError = new BulkWriterError(error.code, error.message, this.ref, this.type, this.failedAttempts);
          const shouldRetry = this.errorFn(bulkWriterError);
          (0, logger_1.logger)("BulkWriter.errorFn", null, "Ran error callback on error code:", error.code, ", shouldRetry:", shouldRetry, " for document:", this.ref.path);
          if (shouldRetry) {
            this.lastStatus = error.code;
            this.updateBackoffDuration();
            this.sendFn(this);
          } else {
            this.deferred.reject(bulkWriterError);
          }
        } catch (userCallbackError) {
          this.deferred.reject(userCallbackError);
        }
      }
      updateBackoffDuration() {
        if (this.lastStatus === 8) {
          this._backoffDuration = backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS;
        } else if (this._backoffDuration === 0) {
          this._backoffDuration = backoff_1.DEFAULT_BACKOFF_INITIAL_DELAY_MS;
        } else {
          this._backoffDuration *= backoff_1.DEFAULT_BACKOFF_FACTOR;
        }
      }
      onSuccess(result) {
        try {
          this.successFn(this.ref, result);
          this.deferred.resolve(result);
        } catch (userCallbackError) {
          this.deferred.reject(userCallbackError);
        }
      }
    };
    var BulkCommitBatch = class extends write_batch_1.WriteBatch {
      constructor(firestore, maxBatchSize) {
        super(firestore);
        this.docPaths = /* @__PURE__ */ new Set();
        this.pendingOps = [];
        this._maxBatchSize = maxBatchSize;
      }
      get maxBatchSize() {
        return this._maxBatchSize;
      }
      setMaxBatchSize(size) {
        assert(this.pendingOps.length <= size, "New batch size cannot be less than the number of enqueued writes");
        this._maxBatchSize = size;
      }
      has(documentRef) {
        return this.docPaths.has(documentRef.path);
      }
      async bulkCommit(options = {}) {
        var _a;
        const tag = (_a = options === null || options === void 0 ? void 0 : options.requestTag) !== null && _a !== void 0 ? _a : (0, util_1.requestTag)();
        const stack = Error().stack;
        let response;
        try {
          (0, logger_1.logger)("BulkCommitBatch.bulkCommit", tag, `Sending next batch with ${this._opCount} writes`);
          const retryCodes = (0, util_1.getRetryCodes)("batchWrite");
          response = await this._commit({ retryCodes, methodName: "batchWrite", requestTag: tag });
        } catch (err) {
          const ops = Array.from({ length: this.pendingOps.length });
          response = {
            writeResults: ops.map(() => {
              return {};
            }),
            status: ops.map(() => err)
          };
        }
        for (let i = 0; i < (response.writeResults || []).length; ++i) {
          const DELETE_TIMESTAMP_SENTINEL = timestamp_1.Timestamp.fromMillis(0);
          const status = (response.status || [])[i];
          if (status.code === 0) {
            const updateTime = timestamp_1.Timestamp.fromProto(response.writeResults[i].updateTime || DELETE_TIMESTAMP_SENTINEL);
            this.pendingOps[i].onSuccess(new write_batch_1.WriteResult(updateTime));
          } else {
            const error = new (require_fallback()).GoogleError(status.message || void 0);
            error.code = status.code;
            this.pendingOps[i].onError((0, util_1.wrapError)(error, stack));
          }
        }
      }
      processLastOperation(op) {
        assert(!this.docPaths.has(op.ref.path), "Batch should not contain writes to the same document");
        this.docPaths.add(op.ref.path);
        this.pendingOps.push(op);
      }
    };
    var BufferedOperation = class {
      constructor(operation, sendFn) {
        this.operation = operation;
        this.sendFn = sendFn;
      }
    };
    var BulkWriterError = class extends Error {
      constructor(code, message, documentRef, operationType, failedAttempts) {
        super(message);
        this.code = code;
        this.message = message;
        this.documentRef = documentRef;
        this.operationType = operationType;
        this.failedAttempts = failedAttempts;
      }
    };
    exports2.BulkWriterError = BulkWriterError;
    var BulkWriter2 = class {
      constructor(firestore, options) {
        var _a, _b;
        this.firestore = firestore;
        this._maxBatchSize = MAX_BATCH_SIZE;
        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);
        this._lastOp = Promise.resolve();
        this._closing = false;
        this._pendingOpsCount = 0;
        this._bufferedOperations = [];
        this._errorHandlerSet = false;
        this._maxPendingOpCount = DEFAULT_MAXIMUM_PENDING_OPERATIONS_COUNT;
        this._successFn = () => {
        };
        this._errorFn = (error) => {
          const isRetryableDeleteError = error.operationType === "delete" && error.code === 13;
          const retryCodes = (0, util_1.getRetryCodes)("batchWrite");
          return (retryCodes.includes(error.code) || isRetryableDeleteError) && error.failedAttempts < backoff_1.MAX_RETRY_ATTEMPTS;
        };
        this.firestore._incrementBulkWritersCount();
        validateBulkWriterOptions(options);
        if ((options === null || options === void 0 ? void 0 : options.throttling) === false) {
          this._rateLimiter = new rate_limiter_1.RateLimiter(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
        } else {
          let startingRate = exports2.DEFAULT_INITIAL_OPS_PER_SECOND_LIMIT;
          let maxRate = exports2.DEFAULT_MAXIMUM_OPS_PER_SECOND_LIMIT;
          if (typeof (options === null || options === void 0 ? void 0 : options.throttling) !== "boolean") {
            if (((_a = options === null || options === void 0 ? void 0 : options.throttling) === null || _a === void 0 ? void 0 : _a.maxOpsPerSecond) !== void 0) {
              maxRate = options.throttling.maxOpsPerSecond;
            }
            if (((_b = options === null || options === void 0 ? void 0 : options.throttling) === null || _b === void 0 ? void 0 : _b.initialOpsPerSecond) !== void 0) {
              startingRate = options.throttling.initialOpsPerSecond;
            }
            if (maxRate < startingRate) {
              startingRate = maxRate;
            }
            if (startingRate < this._maxBatchSize) {
              this._maxBatchSize = startingRate;
            }
          }
          this._rateLimiter = new rate_limiter_1.RateLimiter(startingRate, RATE_LIMITER_MULTIPLIER, RATE_LIMITER_MULTIPLIER_MILLIS, maxRate);
        }
      }
      _getBufferedOperationsCount() {
        return this._bufferedOperations.length;
      }
      _setMaxBatchSize(size) {
        assert(this._bulkCommitBatch.pendingOps.length === 0, "BulkCommitBatch should be empty");
        this._maxBatchSize = size;
        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, size);
      }
      _setMaxPendingOpCount(newMax) {
        this._maxPendingOpCount = newMax;
      }
      create(documentRef, data) {
        this._verifyNotClosed();
        return this._enqueue(documentRef, "create", (bulkCommitBatch) => bulkCommitBatch.create(documentRef, data));
      }
      delete(documentRef, precondition) {
        this._verifyNotClosed();
        return this._enqueue(documentRef, "delete", (bulkCommitBatch) => bulkCommitBatch.delete(documentRef, precondition));
      }
      set(documentRef, data, options) {
        this._verifyNotClosed();
        return this._enqueue(documentRef, "set", (bulkCommitBatch) => {
          if (options) {
            return bulkCommitBatch.set(documentRef, data, options);
          } else {
            return bulkCommitBatch.set(documentRef, data);
          }
        });
      }
      update(documentRef, dataOrField, ...preconditionOrValues) {
        this._verifyNotClosed();
        return this._enqueue(documentRef, "update", (bulkCommitBatch) => bulkCommitBatch.update(documentRef, dataOrField, ...preconditionOrValues));
      }
      onWriteResult(successCallback) {
        this._successFn = successCallback;
      }
      onWriteError(shouldRetryCallback) {
        this._errorHandlerSet = true;
        this._errorFn = shouldRetryCallback;
      }
      flush() {
        this._verifyNotClosed();
        this._scheduleCurrentBatch(true);
        if (this._bufferedOperations.length > 0) {
          this._bufferedOperations[this._bufferedOperations.length - 1].operation.markFlushed();
        }
        return this._lastOp;
      }
      close() {
        this._verifyNotClosed();
        this.firestore._decrementBulkWritersCount();
        const flushPromise = this.flush();
        this._closing = true;
        return flushPromise;
      }
      _verifyNotClosed() {
        if (this._closing) {
          throw new Error("BulkWriter has already been closed.");
        }
      }
      _scheduleCurrentBatch(flush = false) {
        if (this._bulkCommitBatch._opCount === 0)
          return;
        const pendingBatch = this._bulkCommitBatch;
        this._bulkCommitBatch = new BulkCommitBatch(this.firestore, this._maxBatchSize);
        const highestBackoffDuration = pendingBatch.pendingOps.reduce((prev, cur) => prev.backoffDuration > cur.backoffDuration ? prev : cur).backoffDuration;
        const backoffMsWithJitter = BulkWriter2._applyJitter(highestBackoffDuration);
        const delayedExecution = new util_1.Deferred();
        if (backoffMsWithJitter > 0) {
          (0, backoff_1.delayExecution)(() => delayedExecution.resolve(), backoffMsWithJitter);
        } else {
          delayedExecution.resolve();
        }
        delayedExecution.promise.then(() => this._sendBatch(pendingBatch, flush));
      }
      async _sendBatch(batch, flush = false) {
        const tag = (0, util_1.requestTag)();
        const underRateLimit = this._rateLimiter.tryMakeRequest(batch._opCount);
        if (underRateLimit) {
          await batch.bulkCommit({ requestTag: tag });
          if (flush)
            this._scheduleCurrentBatch(flush);
        } else {
          const delayMs = this._rateLimiter.getNextRequestDelayMs(batch._opCount);
          (0, logger_1.logger)("BulkWriter._sendBatch", tag, `Backing off for ${delayMs} seconds`);
          (0, backoff_1.delayExecution)(() => this._sendBatch(batch, flush), delayMs);
        }
      }
      static _applyJitter(backoffMs) {
        if (backoffMs === 0)
          return 0;
        const jitter = exports2.DEFAULT_JITTER_FACTOR * (Math.random() * 2 - 1);
        return Math.min(backoff_1.DEFAULT_BACKOFF_MAX_DELAY_MS, backoffMs + jitter * backoffMs);
      }
      _enqueue(ref, type, enqueueOnBatchCallback) {
        const bulkWriterOp = new BulkWriterOperation(ref, type, this._sendFn.bind(this, enqueueOnBatchCallback), this._errorFn.bind(this), this._successFn.bind(this));
        const userPromise = bulkWriterOp.promise.catch((err) => {
          if (!this._errorHandlerSet) {
            throw err;
          } else {
            return bulkWriterOp.promise;
          }
        });
        this._lastOp = this._lastOp.then(() => (0, util_1.silencePromise)(userPromise));
        if (this._pendingOpsCount < this._maxPendingOpCount) {
          this._pendingOpsCount++;
          this._sendFn(enqueueOnBatchCallback, bulkWriterOp);
        } else {
          this._bufferedOperations.push(new BufferedOperation(bulkWriterOp, () => {
            this._pendingOpsCount++;
            this._sendFn(enqueueOnBatchCallback, bulkWriterOp);
          }));
        }
        return userPromise.then((res) => {
          this._pendingOpsCount--;
          this._processBufferedOps();
          return res;
        }).catch((err) => {
          this._pendingOpsCount--;
          this._processBufferedOps();
          throw err;
        });
      }
      _processBufferedOps() {
        if (this._pendingOpsCount < this._maxPendingOpCount && this._bufferedOperations.length > 0) {
          const nextOp = this._bufferedOperations.shift();
          nextOp.sendFn();
        }
      }
      _sendFn(enqueueOnBatchCallback, op) {
        if (op.backoffDuration > 0) {
          if (this._bulkCommitBatch.pendingOps.length >= exports2.RETRY_MAX_BATCH_SIZE) {
            this._scheduleCurrentBatch(false);
          }
          this._bulkCommitBatch.setMaxBatchSize(exports2.RETRY_MAX_BATCH_SIZE);
        }
        if (this._bulkCommitBatch.has(op.ref)) {
          this._scheduleCurrentBatch();
        }
        enqueueOnBatchCallback(this._bulkCommitBatch);
        this._bulkCommitBatch.processLastOperation(op);
        if (this._bulkCommitBatch._opCount === this._bulkCommitBatch.maxBatchSize) {
          this._scheduleCurrentBatch();
        } else if (op.flushed) {
          this._scheduleCurrentBatch(true);
        }
      }
    };
    exports2.BulkWriter = BulkWriter2;
    function validateBulkWriterOptions(value) {
      if ((0, validate_1.validateOptional)(value, { optional: true })) {
        return;
      }
      const argName = "options";
      if (!(0, util_1.isObject)(value)) {
        throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, "bulkWriter() options argument")} Input is not an object.`);
      }
      const options = value;
      if (options.throttling === void 0 || typeof options.throttling === "boolean") {
        return;
      }
      if (options.throttling.initialOpsPerSecond !== void 0) {
        (0, validate_1.validateInteger)("initialOpsPerSecond", options.throttling.initialOpsPerSecond, {
          minValue: 1
        });
      }
      if (options.throttling.maxOpsPerSecond !== void 0) {
        (0, validate_1.validateInteger)("maxOpsPerSecond", options.throttling.maxOpsPerSecond, {
          minValue: 1
        });
        if (options.throttling.initialOpsPerSecond !== void 0 && options.throttling.initialOpsPerSecond > options.throttling.maxOpsPerSecond) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(argName, "bulkWriter() options argument")} "maxOpsPerSecond" cannot be less than "initialOpsPerSecond".`);
        }
      }
    }
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/util/longbits.js
var require_longbits2 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    module2.exports = LongBits;
    var util = require_minimal3();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash) {
      if (hash === zeroHash)
        return zero;
      return new LongBits(
        (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
        (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/util/minimal.js
var require_minimal3 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits2();
    util.isNode = Boolean(typeof globalThis !== "undefined" && globalThis && globalThis.process && globalThis.process.versions && globalThis.process.versions.node);
    util.global = util.isNode && globalThis || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : [];
    util.emptyObject = Object.freeze ? Object.freeze({}) : {};
    util.isInteger = Number.isInteger || function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject(value) {
      return value && typeof value === "object";
    };
    util.isset = util.isSet = function isSet(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : null;
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = util.global.dcodeIO && util.global.dcodeIO.Long || util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash, unsigned) {
      var bits = util.LongBits.fromHash(hash);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      CustomError.prototype = Object.create(Error.prototype, {
        constructor: {
          value: CustomError,
          writable: true,
          enumerable: false,
          configurable: true
        },
        name: {
          get() {
            return name;
          },
          set: void 0,
          enumerable: false,
          configurable: true
        },
        toString: {
          value() {
            return this.name + ": " + this.message;
          },
          writable: true,
          enumerable: false,
          configurable: true
        }
      });
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/writer.js
var require_writer2 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    module2.exports = Writer;
    var util = require_minimal3();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer2 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer2();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal3();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i = 0; i < val.length; )
            buf[pos++] = val[i++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/reader.js
var require_reader2 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    module2.exports = Reader;
    var util = require_minimal3();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util.Long ? "toLong" : "toNumber";
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer2 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader2();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal3();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/rpc/service.js
var require_service3 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var util = require_minimal3();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err, response) {
            if (err) {
              self2.emit("error", err, method);
              return callback(err);
            }
            if (response === null) {
              self2.end(true);
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err2) {
                self2.emit("error", err2, method);
                return callback(err2);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err) {
        self2.emit("error", err, method);
        setTimeout(function() {
          callback(err);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/rpc.js
var require_rpc2 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service3();
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/roots.js
var require_roots2 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/src/index-minimal.js
var require_index_minimal2 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer2();
    protobuf.BufferWriter = require_writer_buffer2();
    protobuf.Reader = require_reader2();
    protobuf.BufferReader = require_reader_buffer2();
    protobuf.util = require_minimal3();
    protobuf.rpc = require_rpc2();
    protobuf.roots = require_roots2();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// node_modules/@google-cloud/firestore/node_modules/protobufjs/minimal.js
var require_minimal4 = __commonJS({
  "node_modules/@google-cloud/firestore/node_modules/protobufjs/minimal.js"(exports2, module2) {
    "use strict";
    module2.exports = require_index_minimal2();
  }
});

// node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.js
var require_firestore_v1_proto_api = __commonJS({
  "node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.js"(exports2, module2) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd)
        define(["protobufjs/minimal"], factory);
      else if (typeof __require === "function" && typeof module2 === "object" && module2 && module2.exports)
        module2.exports = factory(require_minimal4());
    })(exports2, function($protobuf) {
      "use strict";
      var $util = $protobuf.util;
      var $root = $protobuf.roots.firestore_v1 || ($protobuf.roots.firestore_v1 = {});
      $root.firestore = function() {
        var firestore = {};
        firestore.BundledQuery = function() {
          function BundledQuery(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          BundledQuery.prototype.parent = "";
          BundledQuery.prototype.structuredQuery = null;
          BundledQuery.prototype.limitType = 0;
          var $oneOfFields;
          Object.defineProperty(BundledQuery.prototype, "queryType", {
            get: $util.oneOfGetter($oneOfFields = ["structuredQuery"]),
            set: $util.oneOfSetter($oneOfFields)
          });
          BundledQuery.fromObject = function fromObject(object) {
            if (object instanceof $root.firestore.BundledQuery)
              return object;
            var message = new $root.firestore.BundledQuery();
            if (object.parent != null)
              message.parent = String(object.parent);
            if (object.structuredQuery != null) {
              if (typeof object.structuredQuery !== "object")
                throw TypeError(".firestore.BundledQuery.structuredQuery: object expected");
              message.structuredQuery = $root.google.firestore.v1.StructuredQuery.fromObject(object.structuredQuery);
            }
            switch (object.limitType) {
              default:
                if (typeof object.limitType === "number") {
                  message.limitType = object.limitType;
                  break;
                }
                break;
              case "FIRST":
              case 0:
                message.limitType = 0;
                break;
              case "LAST":
              case 1:
                message.limitType = 1;
                break;
            }
            return message;
          };
          BundledQuery.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults) {
              object.parent = "";
              object.limitType = options.enums === String ? "FIRST" : 0;
            }
            if (message.parent != null && message.hasOwnProperty("parent"))
              object.parent = message.parent;
            if (message.structuredQuery != null && message.hasOwnProperty("structuredQuery")) {
              object.structuredQuery = $root.google.firestore.v1.StructuredQuery.toObject(message.structuredQuery, options);
              if (options.oneofs)
                object.queryType = "structuredQuery";
            }
            if (message.limitType != null && message.hasOwnProperty("limitType"))
              object.limitType = options.enums === String ? $root.firestore.BundledQuery.LimitType[message.limitType] === void 0 ? message.limitType : $root.firestore.BundledQuery.LimitType[message.limitType] : message.limitType;
            return object;
          };
          BundledQuery.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          BundledQuery.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/firestore.BundledQuery";
          };
          BundledQuery.LimitType = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "FIRST"] = "FIRST";
            values[valuesById[1] = "LAST"] = "LAST";
            return values;
          }();
          return BundledQuery;
        }();
        firestore.NamedQuery = function() {
          function NamedQuery(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          NamedQuery.prototype.name = "";
          NamedQuery.prototype.bundledQuery = null;
          NamedQuery.prototype.readTime = null;
          NamedQuery.fromObject = function fromObject(object) {
            if (object instanceof $root.firestore.NamedQuery)
              return object;
            var message = new $root.firestore.NamedQuery();
            if (object.name != null)
              message.name = String(object.name);
            if (object.bundledQuery != null) {
              if (typeof object.bundledQuery !== "object")
                throw TypeError(".firestore.NamedQuery.bundledQuery: object expected");
              message.bundledQuery = $root.firestore.BundledQuery.fromObject(object.bundledQuery);
            }
            if (object.readTime != null) {
              if (typeof object.readTime !== "object")
                throw TypeError(".firestore.NamedQuery.readTime: object expected");
              message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
            }
            return message;
          };
          NamedQuery.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults) {
              object.name = "";
              object.bundledQuery = null;
              object.readTime = null;
            }
            if (message.name != null && message.hasOwnProperty("name"))
              object.name = message.name;
            if (message.bundledQuery != null && message.hasOwnProperty("bundledQuery"))
              object.bundledQuery = $root.firestore.BundledQuery.toObject(message.bundledQuery, options);
            if (message.readTime != null && message.hasOwnProperty("readTime"))
              object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
            return object;
          };
          NamedQuery.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          NamedQuery.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/firestore.NamedQuery";
          };
          return NamedQuery;
        }();
        firestore.BundledDocumentMetadata = function() {
          function BundledDocumentMetadata(properties) {
            this.queries = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          BundledDocumentMetadata.prototype.name = "";
          BundledDocumentMetadata.prototype.readTime = null;
          BundledDocumentMetadata.prototype.exists = false;
          BundledDocumentMetadata.prototype.queries = $util.emptyArray;
          BundledDocumentMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.firestore.BundledDocumentMetadata)
              return object;
            var message = new $root.firestore.BundledDocumentMetadata();
            if (object.name != null)
              message.name = String(object.name);
            if (object.readTime != null) {
              if (typeof object.readTime !== "object")
                throw TypeError(".firestore.BundledDocumentMetadata.readTime: object expected");
              message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
            }
            if (object.exists != null)
              message.exists = Boolean(object.exists);
            if (object.queries) {
              if (!Array.isArray(object.queries))
                throw TypeError(".firestore.BundledDocumentMetadata.queries: array expected");
              message.queries = [];
              for (var i = 0; i < object.queries.length; ++i)
                message.queries[i] = String(object.queries[i]);
            }
            return message;
          };
          BundledDocumentMetadata.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults)
              object.queries = [];
            if (options.defaults) {
              object.name = "";
              object.readTime = null;
              object.exists = false;
            }
            if (message.name != null && message.hasOwnProperty("name"))
              object.name = message.name;
            if (message.readTime != null && message.hasOwnProperty("readTime"))
              object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
            if (message.exists != null && message.hasOwnProperty("exists"))
              object.exists = message.exists;
            if (message.queries && message.queries.length) {
              object.queries = [];
              for (var j = 0; j < message.queries.length; ++j)
                object.queries[j] = message.queries[j];
            }
            return object;
          };
          BundledDocumentMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          BundledDocumentMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/firestore.BundledDocumentMetadata";
          };
          return BundledDocumentMetadata;
        }();
        firestore.BundleMetadata = function() {
          function BundleMetadata(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          BundleMetadata.prototype.id = "";
          BundleMetadata.prototype.createTime = null;
          BundleMetadata.prototype.version = 0;
          BundleMetadata.prototype.totalDocuments = 0;
          BundleMetadata.prototype.totalBytes = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
          BundleMetadata.fromObject = function fromObject(object) {
            if (object instanceof $root.firestore.BundleMetadata)
              return object;
            var message = new $root.firestore.BundleMetadata();
            if (object.id != null)
              message.id = String(object.id);
            if (object.createTime != null) {
              if (typeof object.createTime !== "object")
                throw TypeError(".firestore.BundleMetadata.createTime: object expected");
              message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
            }
            if (object.version != null)
              message.version = object.version >>> 0;
            if (object.totalDocuments != null)
              message.totalDocuments = object.totalDocuments >>> 0;
            if (object.totalBytes != null) {
              if ($util.Long)
                (message.totalBytes = $util.Long.fromValue(object.totalBytes)).unsigned = true;
              else if (typeof object.totalBytes === "string")
                message.totalBytes = parseInt(object.totalBytes, 10);
              else if (typeof object.totalBytes === "number")
                message.totalBytes = object.totalBytes;
              else if (typeof object.totalBytes === "object")
                message.totalBytes = new $util.LongBits(object.totalBytes.low >>> 0, object.totalBytes.high >>> 0).toNumber(true);
            }
            return message;
          };
          BundleMetadata.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults) {
              object.id = "";
              object.createTime = null;
              object.version = 0;
              object.totalDocuments = 0;
              if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.totalBytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
              } else
                object.totalBytes = options.longs === String ? "0" : 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
              object.id = message.id;
            if (message.createTime != null && message.hasOwnProperty("createTime"))
              object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
            if (message.version != null && message.hasOwnProperty("version"))
              object.version = message.version;
            if (message.totalDocuments != null && message.hasOwnProperty("totalDocuments"))
              object.totalDocuments = message.totalDocuments;
            if (message.totalBytes != null && message.hasOwnProperty("totalBytes"))
              if (typeof message.totalBytes === "number")
                object.totalBytes = options.longs === String ? String(message.totalBytes) : message.totalBytes;
              else
                object.totalBytes = options.longs === String ? $util.Long.prototype.toString.call(message.totalBytes) : options.longs === Number ? new $util.LongBits(message.totalBytes.low >>> 0, message.totalBytes.high >>> 0).toNumber(true) : message.totalBytes;
            return object;
          };
          BundleMetadata.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          BundleMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/firestore.BundleMetadata";
          };
          return BundleMetadata;
        }();
        firestore.BundleElement = function() {
          function BundleElement(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          BundleElement.prototype.metadata = null;
          BundleElement.prototype.namedQuery = null;
          BundleElement.prototype.documentMetadata = null;
          BundleElement.prototype.document = null;
          var $oneOfFields;
          Object.defineProperty(BundleElement.prototype, "elementType", {
            get: $util.oneOfGetter($oneOfFields = ["metadata", "namedQuery", "documentMetadata", "document"]),
            set: $util.oneOfSetter($oneOfFields)
          });
          BundleElement.fromObject = function fromObject(object) {
            if (object instanceof $root.firestore.BundleElement)
              return object;
            var message = new $root.firestore.BundleElement();
            if (object.metadata != null) {
              if (typeof object.metadata !== "object")
                throw TypeError(".firestore.BundleElement.metadata: object expected");
              message.metadata = $root.firestore.BundleMetadata.fromObject(object.metadata);
            }
            if (object.namedQuery != null) {
              if (typeof object.namedQuery !== "object")
                throw TypeError(".firestore.BundleElement.namedQuery: object expected");
              message.namedQuery = $root.firestore.NamedQuery.fromObject(object.namedQuery);
            }
            if (object.documentMetadata != null) {
              if (typeof object.documentMetadata !== "object")
                throw TypeError(".firestore.BundleElement.documentMetadata: object expected");
              message.documentMetadata = $root.firestore.BundledDocumentMetadata.fromObject(object.documentMetadata);
            }
            if (object.document != null) {
              if (typeof object.document !== "object")
                throw TypeError(".firestore.BundleElement.document: object expected");
              message.document = $root.google.firestore.v1.Document.fromObject(object.document);
            }
            return message;
          };
          BundleElement.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (message.metadata != null && message.hasOwnProperty("metadata")) {
              object.metadata = $root.firestore.BundleMetadata.toObject(message.metadata, options);
              if (options.oneofs)
                object.elementType = "metadata";
            }
            if (message.namedQuery != null && message.hasOwnProperty("namedQuery")) {
              object.namedQuery = $root.firestore.NamedQuery.toObject(message.namedQuery, options);
              if (options.oneofs)
                object.elementType = "namedQuery";
            }
            if (message.documentMetadata != null && message.hasOwnProperty("documentMetadata")) {
              object.documentMetadata = $root.firestore.BundledDocumentMetadata.toObject(message.documentMetadata, options);
              if (options.oneofs)
                object.elementType = "documentMetadata";
            }
            if (message.document != null && message.hasOwnProperty("document")) {
              object.document = $root.google.firestore.v1.Document.toObject(message.document, options);
              if (options.oneofs)
                object.elementType = "document";
            }
            return object;
          };
          BundleElement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          BundleElement.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/firestore.BundleElement";
          };
          return BundleElement;
        }();
        return firestore;
      }();
      $root.google = function() {
        var google = {};
        google.protobuf = function() {
          var protobuf = {};
          protobuf.Timestamp = function() {
            function Timestamp2(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Timestamp2.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            Timestamp2.prototype.nanos = 0;
            Timestamp2.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Timestamp)
                return object;
              var message = new $root.google.protobuf.Timestamp();
              if (object.seconds != null) {
                if ($util.Long)
                  (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                else if (typeof object.seconds === "string")
                  message.seconds = parseInt(object.seconds, 10);
                else if (typeof object.seconds === "number")
                  message.seconds = object.seconds;
                else if (typeof object.seconds === "object")
                  message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
              }
              if (object.nanos != null)
                message.nanos = object.nanos | 0;
              return message;
            };
            Timestamp2.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.seconds = options.longs === String ? "0" : 0;
                object.nanos = 0;
              }
              if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (typeof message.seconds === "number")
                  object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                else
                  object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
              if (message.nanos != null && message.hasOwnProperty("nanos"))
                object.nanos = message.nanos;
              return object;
            };
            Timestamp2.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Timestamp2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Timestamp";
            };
            return Timestamp2;
          }();
          protobuf.Struct = function() {
            function Struct(properties) {
              this.fields = {};
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Struct.prototype.fields = $util.emptyObject;
            Struct.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Struct)
                return object;
              var message = new $root.google.protobuf.Struct();
              if (object.fields) {
                if (typeof object.fields !== "object")
                  throw TypeError(".google.protobuf.Struct.fields: object expected");
                message.fields = {};
                for (var keys = Object.keys(object.fields), i = 0; i < keys.length; ++i) {
                  if (typeof object.fields[keys[i]] !== "object")
                    throw TypeError(".google.protobuf.Struct.fields: object expected");
                  message.fields[keys[i]] = $root.google.protobuf.Value.fromObject(object.fields[keys[i]]);
                }
              }
              return message;
            };
            Struct.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.objects || options.defaults)
                object.fields = {};
              var keys2;
              if (message.fields && (keys2 = Object.keys(message.fields)).length) {
                object.fields = {};
                for (var j = 0; j < keys2.length; ++j)
                  object.fields[keys2[j]] = $root.google.protobuf.Value.toObject(message.fields[keys2[j]], options);
              }
              return object;
            };
            Struct.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Struct.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Struct";
            };
            return Struct;
          }();
          protobuf.Value = function() {
            function Value(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Value.prototype.nullValue = null;
            Value.prototype.numberValue = null;
            Value.prototype.stringValue = null;
            Value.prototype.boolValue = null;
            Value.prototype.structValue = null;
            Value.prototype.listValue = null;
            var $oneOfFields;
            Object.defineProperty(Value.prototype, "kind", {
              get: $util.oneOfGetter($oneOfFields = ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            Value.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Value)
                return object;
              var message = new $root.google.protobuf.Value();
              switch (object.nullValue) {
                default:
                  if (typeof object.nullValue === "number") {
                    message.nullValue = object.nullValue;
                    break;
                  }
                  break;
                case "NULL_VALUE":
                case 0:
                  message.nullValue = 0;
                  break;
              }
              if (object.numberValue != null)
                message.numberValue = Number(object.numberValue);
              if (object.stringValue != null)
                message.stringValue = String(object.stringValue);
              if (object.boolValue != null)
                message.boolValue = Boolean(object.boolValue);
              if (object.structValue != null) {
                if (typeof object.structValue !== "object")
                  throw TypeError(".google.protobuf.Value.structValue: object expected");
                message.structValue = $root.google.protobuf.Struct.fromObject(object.structValue);
              }
              if (object.listValue != null) {
                if (typeof object.listValue !== "object")
                  throw TypeError(".google.protobuf.Value.listValue: object expected");
                message.listValue = $root.google.protobuf.ListValue.fromObject(object.listValue);
              }
              return message;
            };
            Value.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                object.nullValue = options.enums === String ? $root.google.protobuf.NullValue[message.nullValue] === void 0 ? message.nullValue : $root.google.protobuf.NullValue[message.nullValue] : message.nullValue;
                if (options.oneofs)
                  object.kind = "nullValue";
              }
              if (message.numberValue != null && message.hasOwnProperty("numberValue")) {
                object.numberValue = options.json && !isFinite(message.numberValue) ? String(message.numberValue) : message.numberValue;
                if (options.oneofs)
                  object.kind = "numberValue";
              }
              if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                object.stringValue = message.stringValue;
                if (options.oneofs)
                  object.kind = "stringValue";
              }
              if (message.boolValue != null && message.hasOwnProperty("boolValue")) {
                object.boolValue = message.boolValue;
                if (options.oneofs)
                  object.kind = "boolValue";
              }
              if (message.structValue != null && message.hasOwnProperty("structValue")) {
                object.structValue = $root.google.protobuf.Struct.toObject(message.structValue, options);
                if (options.oneofs)
                  object.kind = "structValue";
              }
              if (message.listValue != null && message.hasOwnProperty("listValue")) {
                object.listValue = $root.google.protobuf.ListValue.toObject(message.listValue, options);
                if (options.oneofs)
                  object.kind = "listValue";
              }
              return object;
            };
            Value.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Value";
            };
            return Value;
          }();
          protobuf.NullValue = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NULL_VALUE"] = "NULL_VALUE";
            return values;
          }();
          protobuf.ListValue = function() {
            function ListValue(properties) {
              this.values = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ListValue.prototype.values = $util.emptyArray;
            ListValue.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ListValue)
                return object;
              var message = new $root.google.protobuf.ListValue();
              if (object.values) {
                if (!Array.isArray(object.values))
                  throw TypeError(".google.protobuf.ListValue.values: array expected");
                message.values = [];
                for (var i = 0; i < object.values.length; ++i) {
                  if (typeof object.values[i] !== "object")
                    throw TypeError(".google.protobuf.ListValue.values: object expected");
                  message.values[i] = $root.google.protobuf.Value.fromObject(object.values[i]);
                }
              }
              return message;
            };
            ListValue.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.values = [];
              if (message.values && message.values.length) {
                object.values = [];
                for (var j = 0; j < message.values.length; ++j)
                  object.values[j] = $root.google.protobuf.Value.toObject(message.values[j], options);
              }
              return object;
            };
            ListValue.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ListValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ListValue";
            };
            return ListValue;
          }();
          protobuf.Empty = function() {
            function Empty(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Empty.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Empty)
                return object;
              return new $root.google.protobuf.Empty();
            };
            Empty.toObject = function toObject() {
              return {};
            };
            Empty.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Empty";
            };
            return Empty;
          }();
          protobuf.DoubleValue = function() {
            function DoubleValue(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DoubleValue.prototype.value = 0;
            DoubleValue.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.DoubleValue)
                return object;
              var message = new $root.google.protobuf.DoubleValue();
              if (object.value != null)
                message.value = Number(object.value);
              return message;
            };
            DoubleValue.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.value = 0;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
              return object;
            };
            DoubleValue.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DoubleValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.DoubleValue";
            };
            return DoubleValue;
          }();
          protobuf.FloatValue = function() {
            function FloatValue(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FloatValue.prototype.value = 0;
            FloatValue.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FloatValue)
                return object;
              var message = new $root.google.protobuf.FloatValue();
              if (object.value != null)
                message.value = Number(object.value);
              return message;
            };
            FloatValue.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.value = 0;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
              return object;
            };
            FloatValue.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FloatValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FloatValue";
            };
            return FloatValue;
          }();
          protobuf.Int64Value = function() {
            function Int64Value(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            Int64Value.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Int64Value)
                return object;
              var message = new $root.google.protobuf.Int64Value();
              if (object.value != null) {
                if ($util.Long)
                  (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                else if (typeof object.value === "string")
                  message.value = parseInt(object.value, 10);
                else if (typeof object.value === "number")
                  message.value = object.value;
                else if (typeof object.value === "object")
                  message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
              }
              return message;
            };
            Int64Value.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.value = options.longs === String ? "0" : 0;
              if (message.value != null && message.hasOwnProperty("value"))
                if (typeof message.value === "number")
                  object.value = options.longs === String ? String(message.value) : message.value;
                else
                  object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
              return object;
            };
            Int64Value.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Int64Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Int64Value";
            };
            return Int64Value;
          }();
          protobuf.UInt64Value = function() {
            function UInt64Value(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
            UInt64Value.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.UInt64Value)
                return object;
              var message = new $root.google.protobuf.UInt64Value();
              if (object.value != null) {
                if ($util.Long)
                  (message.value = $util.Long.fromValue(object.value)).unsigned = true;
                else if (typeof object.value === "string")
                  message.value = parseInt(object.value, 10);
                else if (typeof object.value === "number")
                  message.value = object.value;
                else if (typeof object.value === "object")
                  message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber(true);
              }
              return message;
            };
            UInt64Value.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                if ($util.Long) {
                  var long = new $util.Long(0, 0, true);
                  object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.value = options.longs === String ? "0" : 0;
              if (message.value != null && message.hasOwnProperty("value"))
                if (typeof message.value === "number")
                  object.value = options.longs === String ? String(message.value) : message.value;
                else
                  object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber(true) : message.value;
              return object;
            };
            UInt64Value.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            UInt64Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.UInt64Value";
            };
            return UInt64Value;
          }();
          protobuf.Int32Value = function() {
            function Int32Value(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Int32Value.prototype.value = 0;
            Int32Value.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Int32Value)
                return object;
              var message = new $root.google.protobuf.Int32Value();
              if (object.value != null)
                message.value = object.value | 0;
              return message;
            };
            Int32Value.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.value = 0;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
              return object;
            };
            Int32Value.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Int32Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Int32Value";
            };
            return Int32Value;
          }();
          protobuf.UInt32Value = function() {
            function UInt32Value(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            UInt32Value.prototype.value = 0;
            UInt32Value.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.UInt32Value)
                return object;
              var message = new $root.google.protobuf.UInt32Value();
              if (object.value != null)
                message.value = object.value >>> 0;
              return message;
            };
            UInt32Value.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.value = 0;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
              return object;
            };
            UInt32Value.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            UInt32Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.UInt32Value";
            };
            return UInt32Value;
          }();
          protobuf.BoolValue = function() {
            function BoolValue(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            BoolValue.prototype.value = false;
            BoolValue.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.BoolValue)
                return object;
              var message = new $root.google.protobuf.BoolValue();
              if (object.value != null)
                message.value = Boolean(object.value);
              return message;
            };
            BoolValue.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.value = false;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
              return object;
            };
            BoolValue.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            BoolValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.BoolValue";
            };
            return BoolValue;
          }();
          protobuf.StringValue = function() {
            function StringValue(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            StringValue.prototype.value = "";
            StringValue.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.StringValue)
                return object;
              var message = new $root.google.protobuf.StringValue();
              if (object.value != null)
                message.value = String(object.value);
              return message;
            };
            StringValue.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.value = "";
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = message.value;
              return object;
            };
            StringValue.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            StringValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.StringValue";
            };
            return StringValue;
          }();
          protobuf.BytesValue = function() {
            function BytesValue(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            BytesValue.prototype.value = $util.newBuffer([]);
            BytesValue.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.BytesValue)
                return object;
              var message = new $root.google.protobuf.BytesValue();
              if (object.value != null) {
                if (typeof object.value === "string")
                  $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length >= 0)
                  message.value = object.value;
              }
              return message;
            };
            BytesValue.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                if (options.bytes === String)
                  object.value = "";
                else {
                  object.value = [];
                  if (options.bytes !== Array)
                    object.value = $util.newBuffer(object.value);
                }
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
              return object;
            };
            BytesValue.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            BytesValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.BytesValue";
            };
            return BytesValue;
          }();
          protobuf.Any = function() {
            function Any(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Any.prototype.type_url = "";
            Any.prototype.value = $util.newBuffer([]);
            Any.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Any)
                return object;
              var message = new $root.google.protobuf.Any();
              if (object.type_url != null)
                message.type_url = String(object.type_url);
              if (object.value != null) {
                if (typeof object.value === "string")
                  $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length >= 0)
                  message.value = object.value;
              }
              return message;
            };
            Any.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.type_url = "";
                if (options.bytes === String)
                  object.value = "";
                else {
                  object.value = [];
                  if (options.bytes !== Array)
                    object.value = $util.newBuffer(object.value);
                }
              }
              if (message.type_url != null && message.hasOwnProperty("type_url"))
                object.type_url = message.type_url;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
              return object;
            };
            Any.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Any";
            };
            return Any;
          }();
          protobuf.FileDescriptorSet = function() {
            function FileDescriptorSet(properties) {
              this.file = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorSet.prototype.file = $util.emptyArray;
            FileDescriptorSet.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorSet)
                return object;
              var message = new $root.google.protobuf.FileDescriptorSet();
              if (object.file) {
                if (!Array.isArray(object.file))
                  throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                message.file = [];
                for (var i = 0; i < object.file.length; ++i) {
                  if (typeof object.file[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                  message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                }
              }
              return message;
            };
            FileDescriptorSet.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.file = [];
              if (message.file && message.file.length) {
                object.file = [];
                for (var j = 0; j < message.file.length; ++j)
                  object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
              }
              return object;
            };
            FileDescriptorSet.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
            };
            return FileDescriptorSet;
          }();
          protobuf.FileDescriptorProto = function() {
            function FileDescriptorProto(properties) {
              this.dependency = [];
              this.publicDependency = [];
              this.weakDependency = [];
              this.messageType = [];
              this.enumType = [];
              this.service = [];
              this.extension = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorProto.prototype.name = "";
            FileDescriptorProto.prototype["package"] = "";
            FileDescriptorProto.prototype.dependency = $util.emptyArray;
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
            FileDescriptorProto.prototype.messageType = $util.emptyArray;
            FileDescriptorProto.prototype.enumType = $util.emptyArray;
            FileDescriptorProto.prototype.service = $util.emptyArray;
            FileDescriptorProto.prototype.extension = $util.emptyArray;
            FileDescriptorProto.prototype.options = null;
            FileDescriptorProto.prototype.sourceCodeInfo = null;
            FileDescriptorProto.prototype.syntax = "";
            FileDescriptorProto.prototype.edition = "";
            FileDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FileDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object["package"] != null)
                message["package"] = String(object["package"]);
              if (object.dependency) {
                if (!Array.isArray(object.dependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                message.dependency = [];
                for (var i = 0; i < object.dependency.length; ++i)
                  message.dependency[i] = String(object.dependency[i]);
              }
              if (object.publicDependency) {
                if (!Array.isArray(object.publicDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                message.publicDependency = [];
                for (var i = 0; i < object.publicDependency.length; ++i)
                  message.publicDependency[i] = object.publicDependency[i] | 0;
              }
              if (object.weakDependency) {
                if (!Array.isArray(object.weakDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                message.weakDependency = [];
                for (var i = 0; i < object.weakDependency.length; ++i)
                  message.weakDependency[i] = object.weakDependency[i] | 0;
              }
              if (object.messageType) {
                if (!Array.isArray(object.messageType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                message.messageType = [];
                for (var i = 0; i < object.messageType.length; ++i) {
                  if (typeof object.messageType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                  message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.service) {
                if (!Array.isArray(object.service))
                  throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                message.service = [];
                for (var i = 0; i < object.service.length; ++i) {
                  if (typeof object.service[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                  message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
              }
              if (object.sourceCodeInfo != null) {
                if (typeof object.sourceCodeInfo !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
              }
              if (object.syntax != null)
                message.syntax = String(object.syntax);
              if (object.edition != null)
                message.edition = String(object.edition);
              return message;
            };
            FileDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.dependency = [];
                object.messageType = [];
                object.enumType = [];
                object.service = [];
                object.extension = [];
                object.publicDependency = [];
                object.weakDependency = [];
              }
              if (options.defaults) {
                object.name = "";
                object["package"] = "";
                object.options = null;
                object.sourceCodeInfo = null;
                object.syntax = "";
                object.edition = "";
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message["package"] != null && message.hasOwnProperty("package"))
                object["package"] = message["package"];
              if (message.dependency && message.dependency.length) {
                object.dependency = [];
                for (var j = 0; j < message.dependency.length; ++j)
                  object.dependency[j] = message.dependency[j];
              }
              if (message.messageType && message.messageType.length) {
                object.messageType = [];
                for (var j = 0; j < message.messageType.length; ++j)
                  object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.service && message.service.length) {
                object.service = [];
                for (var j = 0; j < message.service.length; ++j)
                  object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
              if (message.publicDependency && message.publicDependency.length) {
                object.publicDependency = [];
                for (var j = 0; j < message.publicDependency.length; ++j)
                  object.publicDependency[j] = message.publicDependency[j];
              }
              if (message.weakDependency && message.weakDependency.length) {
                object.weakDependency = [];
                for (var j = 0; j < message.weakDependency.length; ++j)
                  object.weakDependency[j] = message.weakDependency[j];
              }
              if (message.syntax != null && message.hasOwnProperty("syntax"))
                object.syntax = message.syntax;
              if (message.edition != null && message.hasOwnProperty("edition"))
                object.edition = message.edition;
              return object;
            };
            FileDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
            };
            return FileDescriptorProto;
          }();
          protobuf.DescriptorProto = function() {
            function DescriptorProto(properties) {
              this.field = [];
              this.extension = [];
              this.nestedType = [];
              this.enumType = [];
              this.extensionRange = [];
              this.oneofDecl = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DescriptorProto.prototype.name = "";
            DescriptorProto.prototype.field = $util.emptyArray;
            DescriptorProto.prototype.extension = $util.emptyArray;
            DescriptorProto.prototype.nestedType = $util.emptyArray;
            DescriptorProto.prototype.enumType = $util.emptyArray;
            DescriptorProto.prototype.extensionRange = $util.emptyArray;
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;
            DescriptorProto.prototype.options = null;
            DescriptorProto.prototype.reservedRange = $util.emptyArray;
            DescriptorProto.prototype.reservedName = $util.emptyArray;
            DescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.DescriptorProto)
                return object;
              var message = new $root.google.protobuf.DescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.field) {
                if (!Array.isArray(object.field))
                  throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                message.field = [];
                for (var i = 0; i < object.field.length; ++i) {
                  if (typeof object.field[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                  message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.nestedType) {
                if (!Array.isArray(object.nestedType))
                  throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                message.nestedType = [];
                for (var i = 0; i < object.nestedType.length; ++i) {
                  if (typeof object.nestedType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                  message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.extensionRange) {
                if (!Array.isArray(object.extensionRange))
                  throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                message.extensionRange = [];
                for (var i = 0; i < object.extensionRange.length; ++i) {
                  if (typeof object.extensionRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                  message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                }
              }
              if (object.oneofDecl) {
                if (!Array.isArray(object.oneofDecl))
                  throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                message.oneofDecl = [];
                for (var i = 0; i < object.oneofDecl.length; ++i) {
                  if (typeof object.oneofDecl[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                  message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            DescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.field = [];
                object.nestedType = [];
                object.enumType = [];
                object.extensionRange = [];
                object.extension = [];
                object.oneofDecl = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.field && message.field.length) {
                object.field = [];
                for (var j = 0; j < message.field.length; ++j)
                  object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
              }
              if (message.nestedType && message.nestedType.length) {
                object.nestedType = [];
                for (var j = 0; j < message.nestedType.length; ++j)
                  object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.extensionRange && message.extensionRange.length) {
                object.extensionRange = [];
                for (var j = 0; j < message.extensionRange.length; ++j)
                  object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
              if (message.oneofDecl && message.oneofDecl.length) {
                object.oneofDecl = [];
                for (var j = 0; j < message.oneofDecl.length; ++j)
                  object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
              }
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            DescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.DescriptorProto";
            };
            DescriptorProto.ExtensionRange = function() {
              function ExtensionRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ExtensionRange.prototype.start = 0;
              ExtensionRange.prototype.end = 0;
              ExtensionRange.prototype.options = null;
              ExtensionRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                if (object.options != null) {
                  if (typeof object.options !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                  message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                }
                return message;
              };
              ExtensionRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                  object.options = null;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                if (message.options != null && message.hasOwnProperty("options"))
                  object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                return object;
              };
              ExtensionRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
              };
              return ExtensionRange;
            }();
            DescriptorProto.ReservedRange = function() {
              function ReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ReservedRange.prototype.start = 0;
              ReservedRange.prototype.end = 0;
              ReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              ReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              ReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
              };
              return ReservedRange;
            }();
            return DescriptorProto;
          }();
          protobuf.ExtensionRangeOptions = function() {
            function ExtensionRangeOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
            ExtensionRangeOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                return object;
              var message = new $root.google.protobuf.ExtensionRangeOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            ExtensionRangeOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
            };
            return ExtensionRangeOptions;
          }();
          protobuf.FieldDescriptorProto = function() {
            function FieldDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldDescriptorProto.prototype.name = "";
            FieldDescriptorProto.prototype.number = 0;
            FieldDescriptorProto.prototype.label = 1;
            FieldDescriptorProto.prototype.type = 1;
            FieldDescriptorProto.prototype.typeName = "";
            FieldDescriptorProto.prototype.extendee = "";
            FieldDescriptorProto.prototype.defaultValue = "";
            FieldDescriptorProto.prototype.oneofIndex = 0;
            FieldDescriptorProto.prototype.jsonName = "";
            FieldDescriptorProto.prototype.options = null;
            FieldDescriptorProto.prototype.proto3Optional = false;
            FieldDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FieldDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              switch (object.label) {
                default:
                  if (typeof object.label === "number") {
                    message.label = object.label;
                    break;
                  }
                  break;
                case "LABEL_OPTIONAL":
                case 1:
                  message.label = 1;
                  break;
                case "LABEL_REQUIRED":
                case 2:
                  message.label = 2;
                  break;
                case "LABEL_REPEATED":
                case 3:
                  message.label = 3;
                  break;
              }
              switch (object.type) {
                default:
                  if (typeof object.type === "number") {
                    message.type = object.type;
                    break;
                  }
                  break;
                case "TYPE_DOUBLE":
                case 1:
                  message.type = 1;
                  break;
                case "TYPE_FLOAT":
                case 2:
                  message.type = 2;
                  break;
                case "TYPE_INT64":
                case 3:
                  message.type = 3;
                  break;
                case "TYPE_UINT64":
                case 4:
                  message.type = 4;
                  break;
                case "TYPE_INT32":
                case 5:
                  message.type = 5;
                  break;
                case "TYPE_FIXED64":
                case 6:
                  message.type = 6;
                  break;
                case "TYPE_FIXED32":
                case 7:
                  message.type = 7;
                  break;
                case "TYPE_BOOL":
                case 8:
                  message.type = 8;
                  break;
                case "TYPE_STRING":
                case 9:
                  message.type = 9;
                  break;
                case "TYPE_GROUP":
                case 10:
                  message.type = 10;
                  break;
                case "TYPE_MESSAGE":
                case 11:
                  message.type = 11;
                  break;
                case "TYPE_BYTES":
                case 12:
                  message.type = 12;
                  break;
                case "TYPE_UINT32":
                case 13:
                  message.type = 13;
                  break;
                case "TYPE_ENUM":
                case 14:
                  message.type = 14;
                  break;
                case "TYPE_SFIXED32":
                case 15:
                  message.type = 15;
                  break;
                case "TYPE_SFIXED64":
                case 16:
                  message.type = 16;
                  break;
                case "TYPE_SINT32":
                case 17:
                  message.type = 17;
                  break;
                case "TYPE_SINT64":
                case 18:
                  message.type = 18;
                  break;
              }
              if (object.typeName != null)
                message.typeName = String(object.typeName);
              if (object.extendee != null)
                message.extendee = String(object.extendee);
              if (object.defaultValue != null)
                message.defaultValue = String(object.defaultValue);
              if (object.oneofIndex != null)
                message.oneofIndex = object.oneofIndex | 0;
              if (object.jsonName != null)
                message.jsonName = String(object.jsonName);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
              }
              if (object.proto3Optional != null)
                message.proto3Optional = Boolean(object.proto3Optional);
              return message;
            };
            FieldDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.extendee = "";
                object.number = 0;
                object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                object.typeName = "";
                object.defaultValue = "";
                object.options = null;
                object.oneofIndex = 0;
                object.jsonName = "";
                object.proto3Optional = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.extendee != null && message.hasOwnProperty("extendee"))
                object.extendee = message.extendee;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.label != null && message.hasOwnProperty("label"))
                object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === void 0 ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === void 0 ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
              if (message.typeName != null && message.hasOwnProperty("typeName"))
                object.typeName = message.typeName;
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                object.defaultValue = message.defaultValue;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                object.oneofIndex = message.oneofIndex;
              if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                object.jsonName = message.jsonName;
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                object.proto3Optional = message.proto3Optional;
              return object;
            };
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
            };
            FieldDescriptorProto.Type = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "TYPE_DOUBLE"] = "TYPE_DOUBLE";
              values[valuesById[2] = "TYPE_FLOAT"] = "TYPE_FLOAT";
              values[valuesById[3] = "TYPE_INT64"] = "TYPE_INT64";
              values[valuesById[4] = "TYPE_UINT64"] = "TYPE_UINT64";
              values[valuesById[5] = "TYPE_INT32"] = "TYPE_INT32";
              values[valuesById[6] = "TYPE_FIXED64"] = "TYPE_FIXED64";
              values[valuesById[7] = "TYPE_FIXED32"] = "TYPE_FIXED32";
              values[valuesById[8] = "TYPE_BOOL"] = "TYPE_BOOL";
              values[valuesById[9] = "TYPE_STRING"] = "TYPE_STRING";
              values[valuesById[10] = "TYPE_GROUP"] = "TYPE_GROUP";
              values[valuesById[11] = "TYPE_MESSAGE"] = "TYPE_MESSAGE";
              values[valuesById[12] = "TYPE_BYTES"] = "TYPE_BYTES";
              values[valuesById[13] = "TYPE_UINT32"] = "TYPE_UINT32";
              values[valuesById[14] = "TYPE_ENUM"] = "TYPE_ENUM";
              values[valuesById[15] = "TYPE_SFIXED32"] = "TYPE_SFIXED32";
              values[valuesById[16] = "TYPE_SFIXED64"] = "TYPE_SFIXED64";
              values[valuesById[17] = "TYPE_SINT32"] = "TYPE_SINT32";
              values[valuesById[18] = "TYPE_SINT64"] = "TYPE_SINT64";
              return values;
            }();
            FieldDescriptorProto.Label = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "LABEL_OPTIONAL"] = "LABEL_OPTIONAL";
              values[valuesById[2] = "LABEL_REQUIRED"] = "LABEL_REQUIRED";
              values[valuesById[3] = "LABEL_REPEATED"] = "LABEL_REPEATED";
              return values;
            }();
            return FieldDescriptorProto;
          }();
          protobuf.OneofDescriptorProto = function() {
            function OneofDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofDescriptorProto.prototype.name = "";
            OneofDescriptorProto.prototype.options = null;
            OneofDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                return object;
              var message = new $root.google.protobuf.OneofDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
              }
              return message;
            };
            OneofDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
              return object;
            };
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
            };
            return OneofDescriptorProto;
          }();
          protobuf.EnumDescriptorProto = function() {
            function EnumDescriptorProto(properties) {
              this.value = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumDescriptorProto.prototype.name = "";
            EnumDescriptorProto.prototype.value = $util.emptyArray;
            EnumDescriptorProto.prototype.options = null;
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
            EnumDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.value) {
                if (!Array.isArray(object.value))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                message.value = [];
                for (var i = 0; i < object.value.length; ++i) {
                  if (typeof object.value[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                  message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            EnumDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.value = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.value && message.value.length) {
                object.value = [];
                for (var j = 0; j < message.value.length; ++j)
                  object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
            };
            EnumDescriptorProto.EnumReservedRange = function() {
              function EnumReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              EnumReservedRange.prototype.start = 0;
              EnumReservedRange.prototype.end = 0;
              EnumReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                  return object;
                var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              EnumReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              EnumReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
              };
              return EnumReservedRange;
            }();
            return EnumDescriptorProto;
          }();
          protobuf.EnumValueDescriptorProto = function() {
            function EnumValueDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueDescriptorProto.prototype.name = "";
            EnumValueDescriptorProto.prototype.number = 0;
            EnumValueDescriptorProto.prototype.options = null;
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumValueDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
              }
              return message;
            };
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.number = 0;
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
              return object;
            };
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
            };
            return EnumValueDescriptorProto;
          }();
          protobuf.ServiceDescriptorProto = function() {
            function ServiceDescriptorProto(properties) {
              this.method = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceDescriptorProto.prototype.name = "";
            ServiceDescriptorProto.prototype.method = $util.emptyArray;
            ServiceDescriptorProto.prototype.options = null;
            ServiceDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                return object;
              var message = new $root.google.protobuf.ServiceDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.method) {
                if (!Array.isArray(object.method))
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                message.method = [];
                for (var i = 0; i < object.method.length; ++i) {
                  if (typeof object.method[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                  message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
              }
              return message;
            };
            ServiceDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.method = [];
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.method && message.method.length) {
                object.method = [];
                for (var j = 0; j < message.method.length; ++j)
                  object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
              return object;
            };
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
            };
            return ServiceDescriptorProto;
          }();
          protobuf.MethodDescriptorProto = function() {
            function MethodDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodDescriptorProto.prototype.name = "";
            MethodDescriptorProto.prototype.inputType = "";
            MethodDescriptorProto.prototype.outputType = "";
            MethodDescriptorProto.prototype.options = null;
            MethodDescriptorProto.prototype.clientStreaming = false;
            MethodDescriptorProto.prototype.serverStreaming = false;
            MethodDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                return object;
              var message = new $root.google.protobuf.MethodDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.inputType != null)
                message.inputType = String(object.inputType);
              if (object.outputType != null)
                message.outputType = String(object.outputType);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
              }
              if (object.clientStreaming != null)
                message.clientStreaming = Boolean(object.clientStreaming);
              if (object.serverStreaming != null)
                message.serverStreaming = Boolean(object.serverStreaming);
              return message;
            };
            MethodDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.inputType = "";
                object.outputType = "";
                object.options = null;
                object.clientStreaming = false;
                object.serverStreaming = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.inputType != null && message.hasOwnProperty("inputType"))
                object.inputType = message.inputType;
              if (message.outputType != null && message.hasOwnProperty("outputType"))
                object.outputType = message.outputType;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                object.clientStreaming = message.clientStreaming;
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                object.serverStreaming = message.serverStreaming;
              return object;
            };
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
            };
            return MethodDescriptorProto;
          }();
          protobuf.FileOptions = function() {
            function FileOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.resourceDefinition"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileOptions.prototype.javaPackage = "";
            FileOptions.prototype.javaOuterClassname = "";
            FileOptions.prototype.javaMultipleFiles = false;
            FileOptions.prototype.javaGenerateEqualsAndHash = false;
            FileOptions.prototype.javaStringCheckUtf8 = false;
            FileOptions.prototype.optimizeFor = 1;
            FileOptions.prototype.goPackage = "";
            FileOptions.prototype.ccGenericServices = false;
            FileOptions.prototype.javaGenericServices = false;
            FileOptions.prototype.pyGenericServices = false;
            FileOptions.prototype.phpGenericServices = false;
            FileOptions.prototype.deprecated = false;
            FileOptions.prototype.ccEnableArenas = true;
            FileOptions.prototype.objcClassPrefix = "";
            FileOptions.prototype.csharpNamespace = "";
            FileOptions.prototype.swiftPrefix = "";
            FileOptions.prototype.phpClassPrefix = "";
            FileOptions.prototype.phpNamespace = "";
            FileOptions.prototype.phpMetadataNamespace = "";
            FileOptions.prototype.rubyPackage = "";
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;
            FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
            FileOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileOptions)
                return object;
              var message = new $root.google.protobuf.FileOptions();
              if (object.javaPackage != null)
                message.javaPackage = String(object.javaPackage);
              if (object.javaOuterClassname != null)
                message.javaOuterClassname = String(object.javaOuterClassname);
              if (object.javaMultipleFiles != null)
                message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
              if (object.javaGenerateEqualsAndHash != null)
                message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
              if (object.javaStringCheckUtf8 != null)
                message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
              switch (object.optimizeFor) {
                default:
                  if (typeof object.optimizeFor === "number") {
                    message.optimizeFor = object.optimizeFor;
                    break;
                  }
                  break;
                case "SPEED":
                case 1:
                  message.optimizeFor = 1;
                  break;
                case "CODE_SIZE":
                case 2:
                  message.optimizeFor = 2;
                  break;
                case "LITE_RUNTIME":
                case 3:
                  message.optimizeFor = 3;
                  break;
              }
              if (object.goPackage != null)
                message.goPackage = String(object.goPackage);
              if (object.ccGenericServices != null)
                message.ccGenericServices = Boolean(object.ccGenericServices);
              if (object.javaGenericServices != null)
                message.javaGenericServices = Boolean(object.javaGenericServices);
              if (object.pyGenericServices != null)
                message.pyGenericServices = Boolean(object.pyGenericServices);
              if (object.phpGenericServices != null)
                message.phpGenericServices = Boolean(object.phpGenericServices);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.ccEnableArenas != null)
                message.ccEnableArenas = Boolean(object.ccEnableArenas);
              if (object.objcClassPrefix != null)
                message.objcClassPrefix = String(object.objcClassPrefix);
              if (object.csharpNamespace != null)
                message.csharpNamespace = String(object.csharpNamespace);
              if (object.swiftPrefix != null)
                message.swiftPrefix = String(object.swiftPrefix);
              if (object.phpClassPrefix != null)
                message.phpClassPrefix = String(object.phpClassPrefix);
              if (object.phpNamespace != null)
                message.phpNamespace = String(object.phpNamespace);
              if (object.phpMetadataNamespace != null)
                message.phpMetadataNamespace = String(object.phpMetadataNamespace);
              if (object.rubyPackage != null)
                message.rubyPackage = String(object.rubyPackage);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.resourceDefinition"]) {
                if (!Array.isArray(object[".google.api.resourceDefinition"]))
                  throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                message[".google.api.resourceDefinition"] = [];
                for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                  if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                  message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                }
              }
              return message;
            };
            FileOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.resourceDefinition"] = [];
              }
              if (options.defaults) {
                object.javaPackage = "";
                object.javaOuterClassname = "";
                object.optimizeFor = options.enums === String ? "SPEED" : 1;
                object.javaMultipleFiles = false;
                object.goPackage = "";
                object.ccGenericServices = false;
                object.javaGenericServices = false;
                object.pyGenericServices = false;
                object.javaGenerateEqualsAndHash = false;
                object.deprecated = false;
                object.javaStringCheckUtf8 = false;
                object.ccEnableArenas = true;
                object.objcClassPrefix = "";
                object.csharpNamespace = "";
                object.swiftPrefix = "";
                object.phpClassPrefix = "";
                object.phpNamespace = "";
                object.phpGenericServices = false;
                object.phpMetadataNamespace = "";
                object.rubyPackage = "";
              }
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                object.javaPackage = message.javaPackage;
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                object.javaOuterClassname = message.javaOuterClassname;
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === void 0 ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                object.javaMultipleFiles = message.javaMultipleFiles;
              if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                object.goPackage = message.goPackage;
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                object.ccGenericServices = message.ccGenericServices;
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                object.javaGenericServices = message.javaGenericServices;
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                object.pyGenericServices = message.pyGenericServices;
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                object.ccEnableArenas = message.ccEnableArenas;
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                object.objcClassPrefix = message.objcClassPrefix;
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                object.csharpNamespace = message.csharpNamespace;
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                object.swiftPrefix = message.swiftPrefix;
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                object.phpClassPrefix = message.phpClassPrefix;
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                object.phpNamespace = message.phpNamespace;
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                object.phpGenericServices = message.phpGenericServices;
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                object.phpMetadataNamespace = message.phpMetadataNamespace;
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                object.rubyPackage = message.rubyPackage;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                object[".google.api.resourceDefinition"] = [];
                for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                  object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
              }
              return object;
            };
            FileOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FileOptions";
            };
            FileOptions.OptimizeMode = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "SPEED"] = "SPEED";
              values[valuesById[2] = "CODE_SIZE"] = "CODE_SIZE";
              values[valuesById[3] = "LITE_RUNTIME"] = "LITE_RUNTIME";
              return values;
            }();
            return FileOptions;
          }();
          protobuf.MessageOptions = function() {
            function MessageOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MessageOptions.prototype.messageSetWireFormat = false;
            MessageOptions.prototype.noStandardDescriptorAccessor = false;
            MessageOptions.prototype.deprecated = false;
            MessageOptions.prototype.mapEntry = false;
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
            MessageOptions.prototype[".google.api.resource"] = null;
            MessageOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MessageOptions)
                return object;
              var message = new $root.google.protobuf.MessageOptions();
              if (object.messageSetWireFormat != null)
                message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
              if (object.noStandardDescriptorAccessor != null)
                message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.mapEntry != null)
                message.mapEntry = Boolean(object.mapEntry);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.resource"] != null) {
                if (typeof object[".google.api.resource"] !== "object")
                  throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
              }
              return message;
            };
            MessageOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.messageSetWireFormat = false;
                object.noStandardDescriptorAccessor = false;
                object.deprecated = false;
                object.mapEntry = false;
                object[".google.api.resource"] = null;
              }
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                object.messageSetWireFormat = message.messageSetWireFormat;
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                object.mapEntry = message.mapEntry;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
              return object;
            };
            MessageOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.MessageOptions";
            };
            return MessageOptions;
          }();
          protobuf.FieldOptions = function() {
            function FieldOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.fieldBehavior"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldOptions.prototype.ctype = 0;
            FieldOptions.prototype.packed = false;
            FieldOptions.prototype.jstype = 0;
            FieldOptions.prototype.lazy = false;
            FieldOptions.prototype.unverifiedLazy = false;
            FieldOptions.prototype.deprecated = false;
            FieldOptions.prototype.weak = false;
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
            FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
            FieldOptions.prototype[".google.api.resourceReference"] = null;
            FieldOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldOptions)
                return object;
              var message = new $root.google.protobuf.FieldOptions();
              switch (object.ctype) {
                default:
                  if (typeof object.ctype === "number") {
                    message.ctype = object.ctype;
                    break;
                  }
                  break;
                case "STRING":
                case 0:
                  message.ctype = 0;
                  break;
                case "CORD":
                case 1:
                  message.ctype = 1;
                  break;
                case "STRING_PIECE":
                case 2:
                  message.ctype = 2;
                  break;
              }
              if (object.packed != null)
                message.packed = Boolean(object.packed);
              switch (object.jstype) {
                default:
                  if (typeof object.jstype === "number") {
                    message.jstype = object.jstype;
                    break;
                  }
                  break;
                case "JS_NORMAL":
                case 0:
                  message.jstype = 0;
                  break;
                case "JS_STRING":
                case 1:
                  message.jstype = 1;
                  break;
                case "JS_NUMBER":
                case 2:
                  message.jstype = 2;
                  break;
              }
              if (object.lazy != null)
                message.lazy = Boolean(object.lazy);
              if (object.unverifiedLazy != null)
                message.unverifiedLazy = Boolean(object.unverifiedLazy);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.weak != null)
                message.weak = Boolean(object.weak);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.fieldBehavior"]) {
                if (!Array.isArray(object[".google.api.fieldBehavior"]))
                  throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                message[".google.api.fieldBehavior"] = [];
                for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                  switch (object[".google.api.fieldBehavior"][i]) {
                    default:
                      if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                        message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                        break;
                      }
                    case "FIELD_BEHAVIOR_UNSPECIFIED":
                    case 0:
                      message[".google.api.fieldBehavior"][i] = 0;
                      break;
                    case "OPTIONAL":
                    case 1:
                      message[".google.api.fieldBehavior"][i] = 1;
                      break;
                    case "REQUIRED":
                    case 2:
                      message[".google.api.fieldBehavior"][i] = 2;
                      break;
                    case "OUTPUT_ONLY":
                    case 3:
                      message[".google.api.fieldBehavior"][i] = 3;
                      break;
                    case "INPUT_ONLY":
                    case 4:
                      message[".google.api.fieldBehavior"][i] = 4;
                      break;
                    case "IMMUTABLE":
                    case 5:
                      message[".google.api.fieldBehavior"][i] = 5;
                      break;
                    case "UNORDERED_LIST":
                    case 6:
                      message[".google.api.fieldBehavior"][i] = 6;
                      break;
                    case "NON_EMPTY_DEFAULT":
                    case 7:
                      message[".google.api.fieldBehavior"][i] = 7;
                      break;
                  }
              }
              if (object[".google.api.resourceReference"] != null) {
                if (typeof object[".google.api.resourceReference"] !== "object")
                  throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
              }
              return message;
            };
            FieldOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.fieldBehavior"] = [];
              }
              if (options.defaults) {
                object.ctype = options.enums === String ? "STRING" : 0;
                object.packed = false;
                object.deprecated = false;
                object.lazy = false;
                object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                object.weak = false;
                object.unverifiedLazy = false;
                object[".google.api.resourceReference"] = null;
              }
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === void 0 ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
              if (message.packed != null && message.hasOwnProperty("packed"))
                object.packed = message.packed;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.lazy != null && message.hasOwnProperty("lazy"))
                object.lazy = message.lazy;
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === void 0 ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
              if (message.weak != null && message.hasOwnProperty("weak"))
                object.weak = message.weak;
              if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                object.unverifiedLazy = message.unverifiedLazy;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                object[".google.api.fieldBehavior"] = [];
                for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                  object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === void 0 ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
              }
              if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
              return object;
            };
            FieldOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FieldOptions";
            };
            FieldOptions.CType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "STRING"] = "STRING";
              values[valuesById[1] = "CORD"] = "CORD";
              values[valuesById[2] = "STRING_PIECE"] = "STRING_PIECE";
              return values;
            }();
            FieldOptions.JSType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "JS_NORMAL"] = "JS_NORMAL";
              values[valuesById[1] = "JS_STRING"] = "JS_STRING";
              values[valuesById[2] = "JS_NUMBER"] = "JS_NUMBER";
              return values;
            }();
            return FieldOptions;
          }();
          protobuf.OneofOptions = function() {
            function OneofOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
            OneofOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofOptions)
                return object;
              var message = new $root.google.protobuf.OneofOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            OneofOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            OneofOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.OneofOptions";
            };
            return OneofOptions;
          }();
          protobuf.EnumOptions = function() {
            function EnumOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumOptions.prototype.allowAlias = false;
            EnumOptions.prototype.deprecated = false;
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumOptions)
                return object;
              var message = new $root.google.protobuf.EnumOptions();
              if (object.allowAlias != null)
                message.allowAlias = Boolean(object.allowAlias);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.allowAlias = false;
                object.deprecated = false;
              }
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                object.allowAlias = message.allowAlias;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumOptions";
            };
            return EnumOptions;
          }();
          protobuf.EnumValueOptions = function() {
            function EnumValueOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueOptions.prototype.deprecated = false;
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumValueOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueOptions)
                return object;
              var message = new $root.google.protobuf.EnumValueOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumValueOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults)
                object.deprecated = false;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumValueOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
            };
            return EnumValueOptions;
          }();
          protobuf.ServiceOptions = function() {
            function ServiceOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceOptions.prototype.deprecated = false;
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
            ServiceOptions.prototype[".google.api.defaultHost"] = "";
            ServiceOptions.prototype[".google.api.oauthScopes"] = "";
            ServiceOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceOptions)
                return object;
              var message = new $root.google.protobuf.ServiceOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.defaultHost"] != null)
                message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
              if (object[".google.api.oauthScopes"] != null)
                message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
              return message;
            };
            ServiceOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.deprecated = false;
                object[".google.api.defaultHost"] = "";
                object[".google.api.oauthScopes"] = "";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
              return object;
            };
            ServiceOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ServiceOptions";
            };
            return ServiceOptions;
          }();
          protobuf.MethodOptions = function() {
            function MethodOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.methodSignature"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodOptions.prototype.deprecated = false;
            MethodOptions.prototype.idempotencyLevel = 0;
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
            MethodOptions.prototype[".google.api.http"] = null;
            MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
            MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
            MethodOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodOptions)
                return object;
              var message = new $root.google.protobuf.MethodOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              switch (object.idempotencyLevel) {
                default:
                  if (typeof object.idempotencyLevel === "number") {
                    message.idempotencyLevel = object.idempotencyLevel;
                    break;
                  }
                  break;
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                  message.idempotencyLevel = 0;
                  break;
                case "NO_SIDE_EFFECTS":
                case 1:
                  message.idempotencyLevel = 1;
                  break;
                case "IDEMPOTENT":
                case 2:
                  message.idempotencyLevel = 2;
                  break;
              }
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.http"] != null) {
                if (typeof object[".google.api.http"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
              }
              if (object[".google.api.methodSignature"]) {
                if (!Array.isArray(object[".google.api.methodSignature"]))
                  throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                message[".google.api.methodSignature"] = [];
                for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                  message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
              }
              if (object[".google.longrunning.operationInfo"] != null) {
                if (typeof object[".google.longrunning.operationInfo"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
              }
              return message;
            };
            MethodOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.methodSignature"] = [];
              }
              if (options.defaults) {
                object.deprecated = false;
                object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                object[".google.longrunning.operationInfo"] = null;
                object[".google.api.http"] = null;
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === void 0 ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
              if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                object[".google.api.methodSignature"] = [];
                for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                  object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
              return object;
            };
            MethodOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.MethodOptions";
            };
            MethodOptions.IdempotencyLevel = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = "IDEMPOTENCY_UNKNOWN";
              values[valuesById[1] = "NO_SIDE_EFFECTS"] = "NO_SIDE_EFFECTS";
              values[valuesById[2] = "IDEMPOTENT"] = "IDEMPOTENT";
              return values;
            }();
            return MethodOptions;
          }();
          protobuf.UninterpretedOption = function() {
            function UninterpretedOption(properties) {
              this.name = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            UninterpretedOption.prototype.name = $util.emptyArray;
            UninterpretedOption.prototype.identifierValue = "";
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            UninterpretedOption.prototype.doubleValue = 0;
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
            UninterpretedOption.prototype.aggregateValue = "";
            UninterpretedOption.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.UninterpretedOption)
                return object;
              var message = new $root.google.protobuf.UninterpretedOption();
              if (object.name) {
                if (!Array.isArray(object.name))
                  throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                message.name = [];
                for (var i = 0; i < object.name.length; ++i) {
                  if (typeof object.name[i] !== "object")
                    throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                  message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                }
              }
              if (object.identifierValue != null)
                message.identifierValue = String(object.identifierValue);
              if (object.positiveIntValue != null) {
                if ($util.Long)
                  (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                else if (typeof object.positiveIntValue === "string")
                  message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                else if (typeof object.positiveIntValue === "number")
                  message.positiveIntValue = object.positiveIntValue;
                else if (typeof object.positiveIntValue === "object")
                  message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
              }
              if (object.negativeIntValue != null) {
                if ($util.Long)
                  (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                else if (typeof object.negativeIntValue === "string")
                  message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                else if (typeof object.negativeIntValue === "number")
                  message.negativeIntValue = object.negativeIntValue;
                else if (typeof object.negativeIntValue === "object")
                  message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
              }
              if (object.doubleValue != null)
                message.doubleValue = Number(object.doubleValue);
              if (object.stringValue != null) {
                if (typeof object.stringValue === "string")
                  $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                else if (object.stringValue.length >= 0)
                  message.stringValue = object.stringValue;
              }
              if (object.aggregateValue != null)
                message.aggregateValue = String(object.aggregateValue);
              return message;
            };
            UninterpretedOption.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.name = [];
              if (options.defaults) {
                object.identifierValue = "";
                if ($util.Long) {
                  var long = new $util.Long(0, 0, true);
                  object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.positiveIntValue = options.longs === String ? "0" : 0;
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.negativeIntValue = options.longs === String ? "0" : 0;
                object.doubleValue = 0;
                if (options.bytes === String)
                  object.stringValue = "";
                else {
                  object.stringValue = [];
                  if (options.bytes !== Array)
                    object.stringValue = $util.newBuffer(object.stringValue);
                }
                object.aggregateValue = "";
              }
              if (message.name && message.name.length) {
                object.name = [];
                for (var j = 0; j < message.name.length; ++j)
                  object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                object.identifierValue = message.identifierValue;
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                if (typeof message.positiveIntValue === "number")
                  object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                else
                  object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                if (typeof message.negativeIntValue === "number")
                  object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                else
                  object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
              if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                object.aggregateValue = message.aggregateValue;
              return object;
            };
            UninterpretedOption.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
            };
            UninterpretedOption.NamePart = function() {
              function NamePart(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              NamePart.prototype.namePart = "";
              NamePart.prototype.isExtension = false;
              NamePart.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                  return object;
                var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                if (object.namePart != null)
                  message.namePart = String(object.namePart);
                if (object.isExtension != null)
                  message.isExtension = Boolean(object.isExtension);
                return message;
              };
              NamePart.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.namePart = "";
                  object.isExtension = false;
                }
                if (message.namePart != null && message.hasOwnProperty("namePart"))
                  object.namePart = message.namePart;
                if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                  object.isExtension = message.isExtension;
                return object;
              };
              NamePart.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
              };
              return NamePart;
            }();
            return UninterpretedOption;
          }();
          protobuf.SourceCodeInfo = function() {
            function SourceCodeInfo(properties) {
              this.location = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            SourceCodeInfo.prototype.location = $util.emptyArray;
            SourceCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.SourceCodeInfo)
                return object;
              var message = new $root.google.protobuf.SourceCodeInfo();
              if (object.location) {
                if (!Array.isArray(object.location))
                  throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                message.location = [];
                for (var i = 0; i < object.location.length; ++i) {
                  if (typeof object.location[i] !== "object")
                    throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                  message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                }
              }
              return message;
            };
            SourceCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.location = [];
              if (message.location && message.location.length) {
                object.location = [];
                for (var j = 0; j < message.location.length; ++j)
                  object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
              }
              return object;
            };
            SourceCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
            };
            SourceCodeInfo.Location = function() {
              function Location(properties) {
                this.path = [];
                this.span = [];
                this.leadingDetachedComments = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Location.prototype.path = $util.emptyArray;
              Location.prototype.span = $util.emptyArray;
              Location.prototype.leadingComments = "";
              Location.prototype.trailingComments = "";
              Location.prototype.leadingDetachedComments = $util.emptyArray;
              Location.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                  return object;
                var message = new $root.google.protobuf.SourceCodeInfo.Location();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.span) {
                  if (!Array.isArray(object.span))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                  message.span = [];
                  for (var i = 0; i < object.span.length; ++i)
                    message.span[i] = object.span[i] | 0;
                }
                if (object.leadingComments != null)
                  message.leadingComments = String(object.leadingComments);
                if (object.trailingComments != null)
                  message.trailingComments = String(object.trailingComments);
                if (object.leadingDetachedComments) {
                  if (!Array.isArray(object.leadingDetachedComments))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                  message.leadingDetachedComments = [];
                  for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                    message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                }
                return message;
              };
              Location.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.path = [];
                  object.span = [];
                  object.leadingDetachedComments = [];
                }
                if (options.defaults) {
                  object.leadingComments = "";
                  object.trailingComments = "";
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.span && message.span.length) {
                  object.span = [];
                  for (var j = 0; j < message.span.length; ++j)
                    object.span[j] = message.span[j];
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                  object.leadingComments = message.leadingComments;
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                  object.trailingComments = message.trailingComments;
                if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                  object.leadingDetachedComments = [];
                  for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                    object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                }
                return object;
              };
              Location.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
              };
              return Location;
            }();
            return SourceCodeInfo;
          }();
          protobuf.GeneratedCodeInfo = function() {
            function GeneratedCodeInfo(properties) {
              this.annotation = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
            GeneratedCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                return object;
              var message = new $root.google.protobuf.GeneratedCodeInfo();
              if (object.annotation) {
                if (!Array.isArray(object.annotation))
                  throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                message.annotation = [];
                for (var i = 0; i < object.annotation.length; ++i) {
                  if (typeof object.annotation[i] !== "object")
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                  message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                }
              }
              return message;
            };
            GeneratedCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.annotation = [];
              if (message.annotation && message.annotation.length) {
                object.annotation = [];
                for (var j = 0; j < message.annotation.length; ++j)
                  object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
              }
              return object;
            };
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
            };
            GeneratedCodeInfo.Annotation = function() {
              function Annotation(properties) {
                this.path = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Annotation.prototype.path = $util.emptyArray;
              Annotation.prototype.sourceFile = "";
              Annotation.prototype.begin = 0;
              Annotation.prototype.end = 0;
              Annotation.prototype.semantic = 0;
              Annotation.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                  return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.sourceFile != null)
                  message.sourceFile = String(object.sourceFile);
                if (object.begin != null)
                  message.begin = object.begin | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                switch (object.semantic) {
                  default:
                    if (typeof object.semantic === "number") {
                      message.semantic = object.semantic;
                      break;
                    }
                    break;
                  case "NONE":
                  case 0:
                    message.semantic = 0;
                    break;
                  case "SET":
                  case 1:
                    message.semantic = 1;
                    break;
                  case "ALIAS":
                  case 2:
                    message.semantic = 2;
                    break;
                }
                return message;
              };
              Annotation.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.path = [];
                if (options.defaults) {
                  object.sourceFile = "";
                  object.begin = 0;
                  object.end = 0;
                  object.semantic = options.enums === String ? "NONE" : 0;
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                  object.sourceFile = message.sourceFile;
                if (message.begin != null && message.hasOwnProperty("begin"))
                  object.begin = message.begin;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                if (message.semantic != null && message.hasOwnProperty("semantic"))
                  object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === void 0 ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                return object;
              };
              Annotation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
              };
              Annotation.Semantic = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NONE"] = "NONE";
                values[valuesById[1] = "SET"] = "SET";
                values[valuesById[2] = "ALIAS"] = "ALIAS";
                return values;
              }();
              return Annotation;
            }();
            return GeneratedCodeInfo;
          }();
          protobuf.FieldMask = function() {
            function FieldMask(properties) {
              this.paths = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldMask.prototype.paths = $util.emptyArray;
            FieldMask.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldMask)
                return object;
              var message = new $root.google.protobuf.FieldMask();
              if (object.paths) {
                if (!Array.isArray(object.paths))
                  throw TypeError(".google.protobuf.FieldMask.paths: array expected");
                message.paths = [];
                for (var i = 0; i < object.paths.length; ++i)
                  message.paths[i] = String(object.paths[i]);
              }
              return message;
            };
            FieldMask.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.paths = [];
              if (message.paths && message.paths.length) {
                object.paths = [];
                for (var j = 0; j < message.paths.length; ++j)
                  object.paths[j] = message.paths[j];
              }
              return object;
            };
            FieldMask.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldMask.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FieldMask";
            };
            return FieldMask;
          }();
          protobuf.Duration = function() {
            function Duration(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            Duration.prototype.nanos = 0;
            Duration.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Duration)
                return object;
              var message = new $root.google.protobuf.Duration();
              if (object.seconds != null) {
                if ($util.Long)
                  (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                else if (typeof object.seconds === "string")
                  message.seconds = parseInt(object.seconds, 10);
                else if (typeof object.seconds === "number")
                  message.seconds = object.seconds;
                else if (typeof object.seconds === "object")
                  message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
              }
              if (object.nanos != null)
                message.nanos = object.nanos | 0;
              return message;
            };
            Duration.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.seconds = options.longs === String ? "0" : 0;
                object.nanos = 0;
              }
              if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (typeof message.seconds === "number")
                  object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                else
                  object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
              if (message.nanos != null && message.hasOwnProperty("nanos"))
                object.nanos = message.nanos;
              return object;
            };
            Duration.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Duration";
            };
            return Duration;
          }();
          return protobuf;
        }();
        google.firestore = function() {
          var firestore = {};
          firestore.v1 = function() {
            var v12 = {};
            v12.AggregationResult = function() {
              function AggregationResult(properties) {
                this.aggregateFields = {};
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              AggregationResult.prototype.aggregateFields = $util.emptyObject;
              AggregationResult.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.AggregationResult)
                  return object;
                var message = new $root.google.firestore.v1.AggregationResult();
                if (object.aggregateFields) {
                  if (typeof object.aggregateFields !== "object")
                    throw TypeError(".google.firestore.v1.AggregationResult.aggregateFields: object expected");
                  message.aggregateFields = {};
                  for (var keys = Object.keys(object.aggregateFields), i = 0; i < keys.length; ++i) {
                    if (typeof object.aggregateFields[keys[i]] !== "object")
                      throw TypeError(".google.firestore.v1.AggregationResult.aggregateFields: object expected");
                    message.aggregateFields[keys[i]] = $root.google.firestore.v1.Value.fromObject(object.aggregateFields[keys[i]]);
                  }
                }
                return message;
              };
              AggregationResult.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.objects || options.defaults)
                  object.aggregateFields = {};
                var keys2;
                if (message.aggregateFields && (keys2 = Object.keys(message.aggregateFields)).length) {
                  object.aggregateFields = {};
                  for (var j = 0; j < keys2.length; ++j)
                    object.aggregateFields[keys2[j]] = $root.google.firestore.v1.Value.toObject(message.aggregateFields[keys2[j]], options);
                }
                return object;
              };
              AggregationResult.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              AggregationResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.AggregationResult";
              };
              return AggregationResult;
            }();
            v12.DocumentMask = function() {
              function DocumentMask(properties) {
                this.fieldPaths = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              DocumentMask.prototype.fieldPaths = $util.emptyArray;
              DocumentMask.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.DocumentMask)
                  return object;
                var message = new $root.google.firestore.v1.DocumentMask();
                if (object.fieldPaths) {
                  if (!Array.isArray(object.fieldPaths))
                    throw TypeError(".google.firestore.v1.DocumentMask.fieldPaths: array expected");
                  message.fieldPaths = [];
                  for (var i = 0; i < object.fieldPaths.length; ++i)
                    message.fieldPaths[i] = String(object.fieldPaths[i]);
                }
                return message;
              };
              DocumentMask.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.fieldPaths = [];
                if (message.fieldPaths && message.fieldPaths.length) {
                  object.fieldPaths = [];
                  for (var j = 0; j < message.fieldPaths.length; ++j)
                    object.fieldPaths[j] = message.fieldPaths[j];
                }
                return object;
              };
              DocumentMask.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              DocumentMask.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.DocumentMask";
              };
              return DocumentMask;
            }();
            v12.Precondition = function() {
              function Precondition(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Precondition.prototype.exists = null;
              Precondition.prototype.updateTime = null;
              var $oneOfFields;
              Object.defineProperty(Precondition.prototype, "conditionType", {
                get: $util.oneOfGetter($oneOfFields = ["exists", "updateTime"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              Precondition.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.Precondition)
                  return object;
                var message = new $root.google.firestore.v1.Precondition();
                if (object.exists != null)
                  message.exists = Boolean(object.exists);
                if (object.updateTime != null) {
                  if (typeof object.updateTime !== "object")
                    throw TypeError(".google.firestore.v1.Precondition.updateTime: object expected");
                  message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                }
                return message;
              };
              Precondition.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (message.exists != null && message.hasOwnProperty("exists")) {
                  object.exists = message.exists;
                  if (options.oneofs)
                    object.conditionType = "exists";
                }
                if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                  object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                  if (options.oneofs)
                    object.conditionType = "updateTime";
                }
                return object;
              };
              Precondition.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Precondition.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.Precondition";
              };
              return Precondition;
            }();
            v12.TransactionOptions = function() {
              function TransactionOptions(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              TransactionOptions.prototype.readOnly = null;
              TransactionOptions.prototype.readWrite = null;
              var $oneOfFields;
              Object.defineProperty(TransactionOptions.prototype, "mode", {
                get: $util.oneOfGetter($oneOfFields = ["readOnly", "readWrite"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              TransactionOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.TransactionOptions)
                  return object;
                var message = new $root.google.firestore.v1.TransactionOptions();
                if (object.readOnly != null) {
                  if (typeof object.readOnly !== "object")
                    throw TypeError(".google.firestore.v1.TransactionOptions.readOnly: object expected");
                  message.readOnly = $root.google.firestore.v1.TransactionOptions.ReadOnly.fromObject(object.readOnly);
                }
                if (object.readWrite != null) {
                  if (typeof object.readWrite !== "object")
                    throw TypeError(".google.firestore.v1.TransactionOptions.readWrite: object expected");
                  message.readWrite = $root.google.firestore.v1.TransactionOptions.ReadWrite.fromObject(object.readWrite);
                }
                return message;
              };
              TransactionOptions.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (message.readOnly != null && message.hasOwnProperty("readOnly")) {
                  object.readOnly = $root.google.firestore.v1.TransactionOptions.ReadOnly.toObject(message.readOnly, options);
                  if (options.oneofs)
                    object.mode = "readOnly";
                }
                if (message.readWrite != null && message.hasOwnProperty("readWrite")) {
                  object.readWrite = $root.google.firestore.v1.TransactionOptions.ReadWrite.toObject(message.readWrite, options);
                  if (options.oneofs)
                    object.mode = "readWrite";
                }
                return object;
              };
              TransactionOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              TransactionOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.TransactionOptions";
              };
              TransactionOptions.ReadWrite = function() {
                function ReadWrite(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ReadWrite.prototype.retryTransaction = $util.newBuffer([]);
                ReadWrite.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.TransactionOptions.ReadWrite)
                    return object;
                  var message = new $root.google.firestore.v1.TransactionOptions.ReadWrite();
                  if (object.retryTransaction != null) {
                    if (typeof object.retryTransaction === "string")
                      $util.base64.decode(object.retryTransaction, message.retryTransaction = $util.newBuffer($util.base64.length(object.retryTransaction)), 0);
                    else if (object.retryTransaction.length >= 0)
                      message.retryTransaction = object.retryTransaction;
                  }
                  return message;
                };
                ReadWrite.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    if (options.bytes === String)
                      object.retryTransaction = "";
                    else {
                      object.retryTransaction = [];
                      if (options.bytes !== Array)
                        object.retryTransaction = $util.newBuffer(object.retryTransaction);
                    }
                  if (message.retryTransaction != null && message.hasOwnProperty("retryTransaction"))
                    object.retryTransaction = options.bytes === String ? $util.base64.encode(message.retryTransaction, 0, message.retryTransaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.retryTransaction) : message.retryTransaction;
                  return object;
                };
                ReadWrite.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ReadWrite.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.TransactionOptions.ReadWrite";
                };
                return ReadWrite;
              }();
              TransactionOptions.ReadOnly = function() {
                function ReadOnly(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ReadOnly.prototype.readTime = null;
                var $oneOfFields2;
                Object.defineProperty(ReadOnly.prototype, "consistencySelector", {
                  get: $util.oneOfGetter($oneOfFields2 = ["readTime"]),
                  set: $util.oneOfSetter($oneOfFields2)
                });
                ReadOnly.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.TransactionOptions.ReadOnly)
                    return object;
                  var message = new $root.google.firestore.v1.TransactionOptions.ReadOnly();
                  if (object.readTime != null) {
                    if (typeof object.readTime !== "object")
                      throw TypeError(".google.firestore.v1.TransactionOptions.ReadOnly.readTime: object expected");
                    message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                  }
                  return message;
                };
                ReadOnly.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.readTime != null && message.hasOwnProperty("readTime")) {
                    object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                    if (options.oneofs)
                      object.consistencySelector = "readTime";
                  }
                  return object;
                };
                ReadOnly.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ReadOnly.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.TransactionOptions.ReadOnly";
                };
                return ReadOnly;
              }();
              return TransactionOptions;
            }();
            v12.Document = function() {
              function Document(properties) {
                this.fields = {};
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Document.prototype.name = "";
              Document.prototype.fields = $util.emptyObject;
              Document.prototype.createTime = null;
              Document.prototype.updateTime = null;
              Document.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.Document)
                  return object;
                var message = new $root.google.firestore.v1.Document();
                if (object.name != null)
                  message.name = String(object.name);
                if (object.fields) {
                  if (typeof object.fields !== "object")
                    throw TypeError(".google.firestore.v1.Document.fields: object expected");
                  message.fields = {};
                  for (var keys = Object.keys(object.fields), i = 0; i < keys.length; ++i) {
                    if (typeof object.fields[keys[i]] !== "object")
                      throw TypeError(".google.firestore.v1.Document.fields: object expected");
                    message.fields[keys[i]] = $root.google.firestore.v1.Value.fromObject(object.fields[keys[i]]);
                  }
                }
                if (object.createTime != null) {
                  if (typeof object.createTime !== "object")
                    throw TypeError(".google.firestore.v1.Document.createTime: object expected");
                  message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                }
                if (object.updateTime != null) {
                  if (typeof object.updateTime !== "object")
                    throw TypeError(".google.firestore.v1.Document.updateTime: object expected");
                  message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                }
                return message;
              };
              Document.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.objects || options.defaults)
                  object.fields = {};
                if (options.defaults) {
                  object.name = "";
                  object.createTime = null;
                  object.updateTime = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                  object.name = message.name;
                var keys2;
                if (message.fields && (keys2 = Object.keys(message.fields)).length) {
                  object.fields = {};
                  for (var j = 0; j < keys2.length; ++j)
                    object.fields[keys2[j]] = $root.google.firestore.v1.Value.toObject(message.fields[keys2[j]], options);
                }
                if (message.createTime != null && message.hasOwnProperty("createTime"))
                  object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                  object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                return object;
              };
              Document.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Document.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.Document";
              };
              return Document;
            }();
            v12.Value = function() {
              function Value(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Value.prototype.nullValue = null;
              Value.prototype.booleanValue = null;
              Value.prototype.integerValue = null;
              Value.prototype.doubleValue = null;
              Value.prototype.timestampValue = null;
              Value.prototype.stringValue = null;
              Value.prototype.bytesValue = null;
              Value.prototype.referenceValue = null;
              Value.prototype.geoPointValue = null;
              Value.prototype.arrayValue = null;
              Value.prototype.mapValue = null;
              var $oneOfFields;
              Object.defineProperty(Value.prototype, "valueType", {
                get: $util.oneOfGetter($oneOfFields = ["nullValue", "booleanValue", "integerValue", "doubleValue", "timestampValue", "stringValue", "bytesValue", "referenceValue", "geoPointValue", "arrayValue", "mapValue"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              Value.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.Value)
                  return object;
                var message = new $root.google.firestore.v1.Value();
                switch (object.nullValue) {
                  default:
                    if (typeof object.nullValue === "number") {
                      message.nullValue = object.nullValue;
                      break;
                    }
                    break;
                  case "NULL_VALUE":
                  case 0:
                    message.nullValue = 0;
                    break;
                }
                if (object.booleanValue != null)
                  message.booleanValue = Boolean(object.booleanValue);
                if (object.integerValue != null) {
                  if ($util.Long)
                    (message.integerValue = $util.Long.fromValue(object.integerValue)).unsigned = false;
                  else if (typeof object.integerValue === "string")
                    message.integerValue = parseInt(object.integerValue, 10);
                  else if (typeof object.integerValue === "number")
                    message.integerValue = object.integerValue;
                  else if (typeof object.integerValue === "object")
                    message.integerValue = new $util.LongBits(object.integerValue.low >>> 0, object.integerValue.high >>> 0).toNumber();
                }
                if (object.doubleValue != null)
                  message.doubleValue = Number(object.doubleValue);
                if (object.timestampValue != null) {
                  if (typeof object.timestampValue !== "object")
                    throw TypeError(".google.firestore.v1.Value.timestampValue: object expected");
                  message.timestampValue = $root.google.protobuf.Timestamp.fromObject(object.timestampValue);
                }
                if (object.stringValue != null)
                  message.stringValue = String(object.stringValue);
                if (object.bytesValue != null) {
                  if (typeof object.bytesValue === "string")
                    $util.base64.decode(object.bytesValue, message.bytesValue = $util.newBuffer($util.base64.length(object.bytesValue)), 0);
                  else if (object.bytesValue.length >= 0)
                    message.bytesValue = object.bytesValue;
                }
                if (object.referenceValue != null)
                  message.referenceValue = String(object.referenceValue);
                if (object.geoPointValue != null) {
                  if (typeof object.geoPointValue !== "object")
                    throw TypeError(".google.firestore.v1.Value.geoPointValue: object expected");
                  message.geoPointValue = $root.google.type.LatLng.fromObject(object.geoPointValue);
                }
                if (object.arrayValue != null) {
                  if (typeof object.arrayValue !== "object")
                    throw TypeError(".google.firestore.v1.Value.arrayValue: object expected");
                  message.arrayValue = $root.google.firestore.v1.ArrayValue.fromObject(object.arrayValue);
                }
                if (object.mapValue != null) {
                  if (typeof object.mapValue !== "object")
                    throw TypeError(".google.firestore.v1.Value.mapValue: object expected");
                  message.mapValue = $root.google.firestore.v1.MapValue.fromObject(object.mapValue);
                }
                return message;
              };
              Value.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (message.booleanValue != null && message.hasOwnProperty("booleanValue")) {
                  object.booleanValue = message.booleanValue;
                  if (options.oneofs)
                    object.valueType = "booleanValue";
                }
                if (message.integerValue != null && message.hasOwnProperty("integerValue")) {
                  if (typeof message.integerValue === "number")
                    object.integerValue = options.longs === String ? String(message.integerValue) : message.integerValue;
                  else
                    object.integerValue = options.longs === String ? $util.Long.prototype.toString.call(message.integerValue) : options.longs === Number ? new $util.LongBits(message.integerValue.low >>> 0, message.integerValue.high >>> 0).toNumber() : message.integerValue;
                  if (options.oneofs)
                    object.valueType = "integerValue";
                }
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                  object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                  if (options.oneofs)
                    object.valueType = "doubleValue";
                }
                if (message.referenceValue != null && message.hasOwnProperty("referenceValue")) {
                  object.referenceValue = message.referenceValue;
                  if (options.oneofs)
                    object.valueType = "referenceValue";
                }
                if (message.mapValue != null && message.hasOwnProperty("mapValue")) {
                  object.mapValue = $root.google.firestore.v1.MapValue.toObject(message.mapValue, options);
                  if (options.oneofs)
                    object.valueType = "mapValue";
                }
                if (message.geoPointValue != null && message.hasOwnProperty("geoPointValue")) {
                  object.geoPointValue = $root.google.type.LatLng.toObject(message.geoPointValue, options);
                  if (options.oneofs)
                    object.valueType = "geoPointValue";
                }
                if (message.arrayValue != null && message.hasOwnProperty("arrayValue")) {
                  object.arrayValue = $root.google.firestore.v1.ArrayValue.toObject(message.arrayValue, options);
                  if (options.oneofs)
                    object.valueType = "arrayValue";
                }
                if (message.timestampValue != null && message.hasOwnProperty("timestampValue")) {
                  object.timestampValue = $root.google.protobuf.Timestamp.toObject(message.timestampValue, options);
                  if (options.oneofs)
                    object.valueType = "timestampValue";
                }
                if (message.nullValue != null && message.hasOwnProperty("nullValue")) {
                  object.nullValue = options.enums === String ? $root.google.protobuf.NullValue[message.nullValue] === void 0 ? message.nullValue : $root.google.protobuf.NullValue[message.nullValue] : message.nullValue;
                  if (options.oneofs)
                    object.valueType = "nullValue";
                }
                if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                  object.stringValue = message.stringValue;
                  if (options.oneofs)
                    object.valueType = "stringValue";
                }
                if (message.bytesValue != null && message.hasOwnProperty("bytesValue")) {
                  object.bytesValue = options.bytes === String ? $util.base64.encode(message.bytesValue, 0, message.bytesValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytesValue) : message.bytesValue;
                  if (options.oneofs)
                    object.valueType = "bytesValue";
                }
                return object;
              };
              Value.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Value.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.Value";
              };
              return Value;
            }();
            v12.ArrayValue = function() {
              function ArrayValue(properties) {
                this.values = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ArrayValue.prototype.values = $util.emptyArray;
              ArrayValue.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.ArrayValue)
                  return object;
                var message = new $root.google.firestore.v1.ArrayValue();
                if (object.values) {
                  if (!Array.isArray(object.values))
                    throw TypeError(".google.firestore.v1.ArrayValue.values: array expected");
                  message.values = [];
                  for (var i = 0; i < object.values.length; ++i) {
                    if (typeof object.values[i] !== "object")
                      throw TypeError(".google.firestore.v1.ArrayValue.values: object expected");
                    message.values[i] = $root.google.firestore.v1.Value.fromObject(object.values[i]);
                  }
                }
                return message;
              };
              ArrayValue.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.values = [];
                if (message.values && message.values.length) {
                  object.values = [];
                  for (var j = 0; j < message.values.length; ++j)
                    object.values[j] = $root.google.firestore.v1.Value.toObject(message.values[j], options);
                }
                return object;
              };
              ArrayValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ArrayValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.ArrayValue";
              };
              return ArrayValue;
            }();
            v12.MapValue = function() {
              function MapValue(properties) {
                this.fields = {};
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              MapValue.prototype.fields = $util.emptyObject;
              MapValue.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.MapValue)
                  return object;
                var message = new $root.google.firestore.v1.MapValue();
                if (object.fields) {
                  if (typeof object.fields !== "object")
                    throw TypeError(".google.firestore.v1.MapValue.fields: object expected");
                  message.fields = {};
                  for (var keys = Object.keys(object.fields), i = 0; i < keys.length; ++i) {
                    if (typeof object.fields[keys[i]] !== "object")
                      throw TypeError(".google.firestore.v1.MapValue.fields: object expected");
                    message.fields[keys[i]] = $root.google.firestore.v1.Value.fromObject(object.fields[keys[i]]);
                  }
                }
                return message;
              };
              MapValue.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.objects || options.defaults)
                  object.fields = {};
                var keys2;
                if (message.fields && (keys2 = Object.keys(message.fields)).length) {
                  object.fields = {};
                  for (var j = 0; j < keys2.length; ++j)
                    object.fields[keys2[j]] = $root.google.firestore.v1.Value.toObject(message.fields[keys2[j]], options);
                }
                return object;
              };
              MapValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              MapValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.MapValue";
              };
              return MapValue;
            }();
            v12.Firestore = function() {
              function Firestore2(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
              }
              (Firestore2.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Firestore2;
              Object.defineProperty(Firestore2.prototype.getDocument = function getDocument(request, callback) {
                return this.rpcCall(getDocument, $root.google.firestore.v1.GetDocumentRequest, $root.google.firestore.v1.Document, request, callback);
              }, "name", { value: "GetDocument" });
              Object.defineProperty(Firestore2.prototype.listDocuments = function listDocuments(request, callback) {
                return this.rpcCall(listDocuments, $root.google.firestore.v1.ListDocumentsRequest, $root.google.firestore.v1.ListDocumentsResponse, request, callback);
              }, "name", { value: "ListDocuments" });
              Object.defineProperty(Firestore2.prototype.updateDocument = function updateDocument(request, callback) {
                return this.rpcCall(updateDocument, $root.google.firestore.v1.UpdateDocumentRequest, $root.google.firestore.v1.Document, request, callback);
              }, "name", { value: "UpdateDocument" });
              Object.defineProperty(Firestore2.prototype.deleteDocument = function deleteDocument(request, callback) {
                return this.rpcCall(deleteDocument, $root.google.firestore.v1.DeleteDocumentRequest, $root.google.protobuf.Empty, request, callback);
              }, "name", { value: "DeleteDocument" });
              Object.defineProperty(Firestore2.prototype.batchGetDocuments = function batchGetDocuments(request, callback) {
                return this.rpcCall(batchGetDocuments, $root.google.firestore.v1.BatchGetDocumentsRequest, $root.google.firestore.v1.BatchGetDocumentsResponse, request, callback);
              }, "name", { value: "BatchGetDocuments" });
              Object.defineProperty(Firestore2.prototype.beginTransaction = function beginTransaction(request, callback) {
                return this.rpcCall(beginTransaction, $root.google.firestore.v1.BeginTransactionRequest, $root.google.firestore.v1.BeginTransactionResponse, request, callback);
              }, "name", { value: "BeginTransaction" });
              Object.defineProperty(Firestore2.prototype.commit = function commit(request, callback) {
                return this.rpcCall(commit, $root.google.firestore.v1.CommitRequest, $root.google.firestore.v1.CommitResponse, request, callback);
              }, "name", { value: "Commit" });
              Object.defineProperty(Firestore2.prototype.rollback = function rollback(request, callback) {
                return this.rpcCall(rollback, $root.google.firestore.v1.RollbackRequest, $root.google.protobuf.Empty, request, callback);
              }, "name", { value: "Rollback" });
              Object.defineProperty(Firestore2.prototype.runQuery = function runQuery(request, callback) {
                return this.rpcCall(runQuery, $root.google.firestore.v1.RunQueryRequest, $root.google.firestore.v1.RunQueryResponse, request, callback);
              }, "name", { value: "RunQuery" });
              Object.defineProperty(Firestore2.prototype.runAggregationQuery = function runAggregationQuery(request, callback) {
                return this.rpcCall(runAggregationQuery, $root.google.firestore.v1.RunAggregationQueryRequest, $root.google.firestore.v1.RunAggregationQueryResponse, request, callback);
              }, "name", { value: "RunAggregationQuery" });
              Object.defineProperty(Firestore2.prototype.partitionQuery = function partitionQuery(request, callback) {
                return this.rpcCall(partitionQuery, $root.google.firestore.v1.PartitionQueryRequest, $root.google.firestore.v1.PartitionQueryResponse, request, callback);
              }, "name", { value: "PartitionQuery" });
              Object.defineProperty(Firestore2.prototype.write = function write(request, callback) {
                return this.rpcCall(write, $root.google.firestore.v1.WriteRequest, $root.google.firestore.v1.WriteResponse, request, callback);
              }, "name", { value: "Write" });
              Object.defineProperty(Firestore2.prototype.listen = function listen(request, callback) {
                return this.rpcCall(listen, $root.google.firestore.v1.ListenRequest, $root.google.firestore.v1.ListenResponse, request, callback);
              }, "name", { value: "Listen" });
              Object.defineProperty(Firestore2.prototype.listCollectionIds = function listCollectionIds(request, callback) {
                return this.rpcCall(listCollectionIds, $root.google.firestore.v1.ListCollectionIdsRequest, $root.google.firestore.v1.ListCollectionIdsResponse, request, callback);
              }, "name", { value: "ListCollectionIds" });
              Object.defineProperty(Firestore2.prototype.batchWrite = function batchWrite(request, callback) {
                return this.rpcCall(batchWrite, $root.google.firestore.v1.BatchWriteRequest, $root.google.firestore.v1.BatchWriteResponse, request, callback);
              }, "name", { value: "BatchWrite" });
              Object.defineProperty(Firestore2.prototype.createDocument = function createDocument(request, callback) {
                return this.rpcCall(createDocument, $root.google.firestore.v1.CreateDocumentRequest, $root.google.firestore.v1.Document, request, callback);
              }, "name", { value: "CreateDocument" });
              return Firestore2;
            }();
            v12.GetDocumentRequest = function() {
              function GetDocumentRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              GetDocumentRequest.prototype.name = "";
              GetDocumentRequest.prototype.mask = null;
              GetDocumentRequest.prototype.transaction = null;
              GetDocumentRequest.prototype.readTime = null;
              var $oneOfFields;
              Object.defineProperty(GetDocumentRequest.prototype, "consistencySelector", {
                get: $util.oneOfGetter($oneOfFields = ["transaction", "readTime"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              GetDocumentRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.GetDocumentRequest)
                  return object;
                var message = new $root.google.firestore.v1.GetDocumentRequest();
                if (object.name != null)
                  message.name = String(object.name);
                if (object.mask != null) {
                  if (typeof object.mask !== "object")
                    throw TypeError(".google.firestore.v1.GetDocumentRequest.mask: object expected");
                  message.mask = $root.google.firestore.v1.DocumentMask.fromObject(object.mask);
                }
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.GetDocumentRequest.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              GetDocumentRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.name = "";
                  object.mask = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                  object.name = message.name;
                if (message.mask != null && message.hasOwnProperty("mask"))
                  object.mask = $root.google.firestore.v1.DocumentMask.toObject(message.mask, options);
                if (message.transaction != null && message.hasOwnProperty("transaction")) {
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                  if (options.oneofs)
                    object.consistencySelector = "transaction";
                }
                if (message.readTime != null && message.hasOwnProperty("readTime")) {
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                  if (options.oneofs)
                    object.consistencySelector = "readTime";
                }
                return object;
              };
              GetDocumentRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              GetDocumentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.GetDocumentRequest";
              };
              return GetDocumentRequest;
            }();
            v12.ListDocumentsRequest = function() {
              function ListDocumentsRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ListDocumentsRequest.prototype.parent = "";
              ListDocumentsRequest.prototype.collectionId = "";
              ListDocumentsRequest.prototype.pageSize = 0;
              ListDocumentsRequest.prototype.pageToken = "";
              ListDocumentsRequest.prototype.orderBy = "";
              ListDocumentsRequest.prototype.mask = null;
              ListDocumentsRequest.prototype.transaction = null;
              ListDocumentsRequest.prototype.readTime = null;
              ListDocumentsRequest.prototype.showMissing = false;
              var $oneOfFields;
              Object.defineProperty(ListDocumentsRequest.prototype, "consistencySelector", {
                get: $util.oneOfGetter($oneOfFields = ["transaction", "readTime"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              ListDocumentsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.ListDocumentsRequest)
                  return object;
                var message = new $root.google.firestore.v1.ListDocumentsRequest();
                if (object.parent != null)
                  message.parent = String(object.parent);
                if (object.collectionId != null)
                  message.collectionId = String(object.collectionId);
                if (object.pageSize != null)
                  message.pageSize = object.pageSize | 0;
                if (object.pageToken != null)
                  message.pageToken = String(object.pageToken);
                if (object.orderBy != null)
                  message.orderBy = String(object.orderBy);
                if (object.mask != null) {
                  if (typeof object.mask !== "object")
                    throw TypeError(".google.firestore.v1.ListDocumentsRequest.mask: object expected");
                  message.mask = $root.google.firestore.v1.DocumentMask.fromObject(object.mask);
                }
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.ListDocumentsRequest.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                if (object.showMissing != null)
                  message.showMissing = Boolean(object.showMissing);
                return message;
              };
              ListDocumentsRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.parent = "";
                  object.collectionId = "";
                  object.pageSize = 0;
                  object.pageToken = "";
                  object.orderBy = "";
                  object.mask = null;
                  object.showMissing = false;
                }
                if (message.parent != null && message.hasOwnProperty("parent"))
                  object.parent = message.parent;
                if (message.collectionId != null && message.hasOwnProperty("collectionId"))
                  object.collectionId = message.collectionId;
                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                  object.pageSize = message.pageSize;
                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                  object.pageToken = message.pageToken;
                if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                  object.orderBy = message.orderBy;
                if (message.mask != null && message.hasOwnProperty("mask"))
                  object.mask = $root.google.firestore.v1.DocumentMask.toObject(message.mask, options);
                if (message.transaction != null && message.hasOwnProperty("transaction")) {
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                  if (options.oneofs)
                    object.consistencySelector = "transaction";
                }
                if (message.readTime != null && message.hasOwnProperty("readTime")) {
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                  if (options.oneofs)
                    object.consistencySelector = "readTime";
                }
                if (message.showMissing != null && message.hasOwnProperty("showMissing"))
                  object.showMissing = message.showMissing;
                return object;
              };
              ListDocumentsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ListDocumentsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.ListDocumentsRequest";
              };
              return ListDocumentsRequest;
            }();
            v12.ListDocumentsResponse = function() {
              function ListDocumentsResponse(properties) {
                this.documents = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ListDocumentsResponse.prototype.documents = $util.emptyArray;
              ListDocumentsResponse.prototype.nextPageToken = "";
              ListDocumentsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.ListDocumentsResponse)
                  return object;
                var message = new $root.google.firestore.v1.ListDocumentsResponse();
                if (object.documents) {
                  if (!Array.isArray(object.documents))
                    throw TypeError(".google.firestore.v1.ListDocumentsResponse.documents: array expected");
                  message.documents = [];
                  for (var i = 0; i < object.documents.length; ++i) {
                    if (typeof object.documents[i] !== "object")
                      throw TypeError(".google.firestore.v1.ListDocumentsResponse.documents: object expected");
                    message.documents[i] = $root.google.firestore.v1.Document.fromObject(object.documents[i]);
                  }
                }
                if (object.nextPageToken != null)
                  message.nextPageToken = String(object.nextPageToken);
                return message;
              };
              ListDocumentsResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.documents = [];
                if (options.defaults)
                  object.nextPageToken = "";
                if (message.documents && message.documents.length) {
                  object.documents = [];
                  for (var j = 0; j < message.documents.length; ++j)
                    object.documents[j] = $root.google.firestore.v1.Document.toObject(message.documents[j], options);
                }
                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                  object.nextPageToken = message.nextPageToken;
                return object;
              };
              ListDocumentsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ListDocumentsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.ListDocumentsResponse";
              };
              return ListDocumentsResponse;
            }();
            v12.CreateDocumentRequest = function() {
              function CreateDocumentRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              CreateDocumentRequest.prototype.parent = "";
              CreateDocumentRequest.prototype.collectionId = "";
              CreateDocumentRequest.prototype.documentId = "";
              CreateDocumentRequest.prototype.document = null;
              CreateDocumentRequest.prototype.mask = null;
              CreateDocumentRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.CreateDocumentRequest)
                  return object;
                var message = new $root.google.firestore.v1.CreateDocumentRequest();
                if (object.parent != null)
                  message.parent = String(object.parent);
                if (object.collectionId != null)
                  message.collectionId = String(object.collectionId);
                if (object.documentId != null)
                  message.documentId = String(object.documentId);
                if (object.document != null) {
                  if (typeof object.document !== "object")
                    throw TypeError(".google.firestore.v1.CreateDocumentRequest.document: object expected");
                  message.document = $root.google.firestore.v1.Document.fromObject(object.document);
                }
                if (object.mask != null) {
                  if (typeof object.mask !== "object")
                    throw TypeError(".google.firestore.v1.CreateDocumentRequest.mask: object expected");
                  message.mask = $root.google.firestore.v1.DocumentMask.fromObject(object.mask);
                }
                return message;
              };
              CreateDocumentRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.parent = "";
                  object.collectionId = "";
                  object.documentId = "";
                  object.document = null;
                  object.mask = null;
                }
                if (message.parent != null && message.hasOwnProperty("parent"))
                  object.parent = message.parent;
                if (message.collectionId != null && message.hasOwnProperty("collectionId"))
                  object.collectionId = message.collectionId;
                if (message.documentId != null && message.hasOwnProperty("documentId"))
                  object.documentId = message.documentId;
                if (message.document != null && message.hasOwnProperty("document"))
                  object.document = $root.google.firestore.v1.Document.toObject(message.document, options);
                if (message.mask != null && message.hasOwnProperty("mask"))
                  object.mask = $root.google.firestore.v1.DocumentMask.toObject(message.mask, options);
                return object;
              };
              CreateDocumentRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              CreateDocumentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.CreateDocumentRequest";
              };
              return CreateDocumentRequest;
            }();
            v12.UpdateDocumentRequest = function() {
              function UpdateDocumentRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              UpdateDocumentRequest.prototype.document = null;
              UpdateDocumentRequest.prototype.updateMask = null;
              UpdateDocumentRequest.prototype.mask = null;
              UpdateDocumentRequest.prototype.currentDocument = null;
              UpdateDocumentRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.UpdateDocumentRequest)
                  return object;
                var message = new $root.google.firestore.v1.UpdateDocumentRequest();
                if (object.document != null) {
                  if (typeof object.document !== "object")
                    throw TypeError(".google.firestore.v1.UpdateDocumentRequest.document: object expected");
                  message.document = $root.google.firestore.v1.Document.fromObject(object.document);
                }
                if (object.updateMask != null) {
                  if (typeof object.updateMask !== "object")
                    throw TypeError(".google.firestore.v1.UpdateDocumentRequest.updateMask: object expected");
                  message.updateMask = $root.google.firestore.v1.DocumentMask.fromObject(object.updateMask);
                }
                if (object.mask != null) {
                  if (typeof object.mask !== "object")
                    throw TypeError(".google.firestore.v1.UpdateDocumentRequest.mask: object expected");
                  message.mask = $root.google.firestore.v1.DocumentMask.fromObject(object.mask);
                }
                if (object.currentDocument != null) {
                  if (typeof object.currentDocument !== "object")
                    throw TypeError(".google.firestore.v1.UpdateDocumentRequest.currentDocument: object expected");
                  message.currentDocument = $root.google.firestore.v1.Precondition.fromObject(object.currentDocument);
                }
                return message;
              };
              UpdateDocumentRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.document = null;
                  object.updateMask = null;
                  object.mask = null;
                  object.currentDocument = null;
                }
                if (message.document != null && message.hasOwnProperty("document"))
                  object.document = $root.google.firestore.v1.Document.toObject(message.document, options);
                if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                  object.updateMask = $root.google.firestore.v1.DocumentMask.toObject(message.updateMask, options);
                if (message.mask != null && message.hasOwnProperty("mask"))
                  object.mask = $root.google.firestore.v1.DocumentMask.toObject(message.mask, options);
                if (message.currentDocument != null && message.hasOwnProperty("currentDocument"))
                  object.currentDocument = $root.google.firestore.v1.Precondition.toObject(message.currentDocument, options);
                return object;
              };
              UpdateDocumentRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              UpdateDocumentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.UpdateDocumentRequest";
              };
              return UpdateDocumentRequest;
            }();
            v12.DeleteDocumentRequest = function() {
              function DeleteDocumentRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              DeleteDocumentRequest.prototype.name = "";
              DeleteDocumentRequest.prototype.currentDocument = null;
              DeleteDocumentRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.DeleteDocumentRequest)
                  return object;
                var message = new $root.google.firestore.v1.DeleteDocumentRequest();
                if (object.name != null)
                  message.name = String(object.name);
                if (object.currentDocument != null) {
                  if (typeof object.currentDocument !== "object")
                    throw TypeError(".google.firestore.v1.DeleteDocumentRequest.currentDocument: object expected");
                  message.currentDocument = $root.google.firestore.v1.Precondition.fromObject(object.currentDocument);
                }
                return message;
              };
              DeleteDocumentRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.name = "";
                  object.currentDocument = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                  object.name = message.name;
                if (message.currentDocument != null && message.hasOwnProperty("currentDocument"))
                  object.currentDocument = $root.google.firestore.v1.Precondition.toObject(message.currentDocument, options);
                return object;
              };
              DeleteDocumentRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              DeleteDocumentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.DeleteDocumentRequest";
              };
              return DeleteDocumentRequest;
            }();
            v12.BatchGetDocumentsRequest = function() {
              function BatchGetDocumentsRequest(properties) {
                this.documents = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              BatchGetDocumentsRequest.prototype.database = "";
              BatchGetDocumentsRequest.prototype.documents = $util.emptyArray;
              BatchGetDocumentsRequest.prototype.mask = null;
              BatchGetDocumentsRequest.prototype.transaction = null;
              BatchGetDocumentsRequest.prototype.newTransaction = null;
              BatchGetDocumentsRequest.prototype.readTime = null;
              var $oneOfFields;
              Object.defineProperty(BatchGetDocumentsRequest.prototype, "consistencySelector", {
                get: $util.oneOfGetter($oneOfFields = ["transaction", "newTransaction", "readTime"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              BatchGetDocumentsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.BatchGetDocumentsRequest)
                  return object;
                var message = new $root.google.firestore.v1.BatchGetDocumentsRequest();
                if (object.database != null)
                  message.database = String(object.database);
                if (object.documents) {
                  if (!Array.isArray(object.documents))
                    throw TypeError(".google.firestore.v1.BatchGetDocumentsRequest.documents: array expected");
                  message.documents = [];
                  for (var i = 0; i < object.documents.length; ++i)
                    message.documents[i] = String(object.documents[i]);
                }
                if (object.mask != null) {
                  if (typeof object.mask !== "object")
                    throw TypeError(".google.firestore.v1.BatchGetDocumentsRequest.mask: object expected");
                  message.mask = $root.google.firestore.v1.DocumentMask.fromObject(object.mask);
                }
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                if (object.newTransaction != null) {
                  if (typeof object.newTransaction !== "object")
                    throw TypeError(".google.firestore.v1.BatchGetDocumentsRequest.newTransaction: object expected");
                  message.newTransaction = $root.google.firestore.v1.TransactionOptions.fromObject(object.newTransaction);
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.BatchGetDocumentsRequest.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              BatchGetDocumentsRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.documents = [];
                if (options.defaults) {
                  object.database = "";
                  object.mask = null;
                }
                if (message.database != null && message.hasOwnProperty("database"))
                  object.database = message.database;
                if (message.documents && message.documents.length) {
                  object.documents = [];
                  for (var j = 0; j < message.documents.length; ++j)
                    object.documents[j] = message.documents[j];
                }
                if (message.mask != null && message.hasOwnProperty("mask"))
                  object.mask = $root.google.firestore.v1.DocumentMask.toObject(message.mask, options);
                if (message.transaction != null && message.hasOwnProperty("transaction")) {
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                  if (options.oneofs)
                    object.consistencySelector = "transaction";
                }
                if (message.newTransaction != null && message.hasOwnProperty("newTransaction")) {
                  object.newTransaction = $root.google.firestore.v1.TransactionOptions.toObject(message.newTransaction, options);
                  if (options.oneofs)
                    object.consistencySelector = "newTransaction";
                }
                if (message.readTime != null && message.hasOwnProperty("readTime")) {
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                  if (options.oneofs)
                    object.consistencySelector = "readTime";
                }
                return object;
              };
              BatchGetDocumentsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              BatchGetDocumentsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.BatchGetDocumentsRequest";
              };
              return BatchGetDocumentsRequest;
            }();
            v12.BatchGetDocumentsResponse = function() {
              function BatchGetDocumentsResponse(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              BatchGetDocumentsResponse.prototype.found = null;
              BatchGetDocumentsResponse.prototype.missing = null;
              BatchGetDocumentsResponse.prototype.transaction = $util.newBuffer([]);
              BatchGetDocumentsResponse.prototype.readTime = null;
              var $oneOfFields;
              Object.defineProperty(BatchGetDocumentsResponse.prototype, "result", {
                get: $util.oneOfGetter($oneOfFields = ["found", "missing"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              BatchGetDocumentsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.BatchGetDocumentsResponse)
                  return object;
                var message = new $root.google.firestore.v1.BatchGetDocumentsResponse();
                if (object.found != null) {
                  if (typeof object.found !== "object")
                    throw TypeError(".google.firestore.v1.BatchGetDocumentsResponse.found: object expected");
                  message.found = $root.google.firestore.v1.Document.fromObject(object.found);
                }
                if (object.missing != null)
                  message.missing = String(object.missing);
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.BatchGetDocumentsResponse.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              BatchGetDocumentsResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  if (options.bytes === String)
                    object.transaction = "";
                  else {
                    object.transaction = [];
                    if (options.bytes !== Array)
                      object.transaction = $util.newBuffer(object.transaction);
                  }
                  object.readTime = null;
                }
                if (message.found != null && message.hasOwnProperty("found")) {
                  object.found = $root.google.firestore.v1.Document.toObject(message.found, options);
                  if (options.oneofs)
                    object.result = "found";
                }
                if (message.missing != null && message.hasOwnProperty("missing")) {
                  object.missing = message.missing;
                  if (options.oneofs)
                    object.result = "missing";
                }
                if (message.transaction != null && message.hasOwnProperty("transaction"))
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                if (message.readTime != null && message.hasOwnProperty("readTime"))
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                return object;
              };
              BatchGetDocumentsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              BatchGetDocumentsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.BatchGetDocumentsResponse";
              };
              return BatchGetDocumentsResponse;
            }();
            v12.BeginTransactionRequest = function() {
              function BeginTransactionRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              BeginTransactionRequest.prototype.database = "";
              BeginTransactionRequest.prototype.options = null;
              BeginTransactionRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.BeginTransactionRequest)
                  return object;
                var message = new $root.google.firestore.v1.BeginTransactionRequest();
                if (object.database != null)
                  message.database = String(object.database);
                if (object.options != null) {
                  if (typeof object.options !== "object")
                    throw TypeError(".google.firestore.v1.BeginTransactionRequest.options: object expected");
                  message.options = $root.google.firestore.v1.TransactionOptions.fromObject(object.options);
                }
                return message;
              };
              BeginTransactionRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.database = "";
                  object.options = null;
                }
                if (message.database != null && message.hasOwnProperty("database"))
                  object.database = message.database;
                if (message.options != null && message.hasOwnProperty("options"))
                  object.options = $root.google.firestore.v1.TransactionOptions.toObject(message.options, options);
                return object;
              };
              BeginTransactionRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              BeginTransactionRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.BeginTransactionRequest";
              };
              return BeginTransactionRequest;
            }();
            v12.BeginTransactionResponse = function() {
              function BeginTransactionResponse(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              BeginTransactionResponse.prototype.transaction = $util.newBuffer([]);
              BeginTransactionResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.BeginTransactionResponse)
                  return object;
                var message = new $root.google.firestore.v1.BeginTransactionResponse();
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                return message;
              };
              BeginTransactionResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults)
                  if (options.bytes === String)
                    object.transaction = "";
                  else {
                    object.transaction = [];
                    if (options.bytes !== Array)
                      object.transaction = $util.newBuffer(object.transaction);
                  }
                if (message.transaction != null && message.hasOwnProperty("transaction"))
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                return object;
              };
              BeginTransactionResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              BeginTransactionResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.BeginTransactionResponse";
              };
              return BeginTransactionResponse;
            }();
            v12.CommitRequest = function() {
              function CommitRequest(properties) {
                this.writes = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              CommitRequest.prototype.database = "";
              CommitRequest.prototype.writes = $util.emptyArray;
              CommitRequest.prototype.transaction = $util.newBuffer([]);
              CommitRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.CommitRequest)
                  return object;
                var message = new $root.google.firestore.v1.CommitRequest();
                if (object.database != null)
                  message.database = String(object.database);
                if (object.writes) {
                  if (!Array.isArray(object.writes))
                    throw TypeError(".google.firestore.v1.CommitRequest.writes: array expected");
                  message.writes = [];
                  for (var i = 0; i < object.writes.length; ++i) {
                    if (typeof object.writes[i] !== "object")
                      throw TypeError(".google.firestore.v1.CommitRequest.writes: object expected");
                    message.writes[i] = $root.google.firestore.v1.Write.fromObject(object.writes[i]);
                  }
                }
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                return message;
              };
              CommitRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.writes = [];
                if (options.defaults) {
                  object.database = "";
                  if (options.bytes === String)
                    object.transaction = "";
                  else {
                    object.transaction = [];
                    if (options.bytes !== Array)
                      object.transaction = $util.newBuffer(object.transaction);
                  }
                }
                if (message.database != null && message.hasOwnProperty("database"))
                  object.database = message.database;
                if (message.writes && message.writes.length) {
                  object.writes = [];
                  for (var j = 0; j < message.writes.length; ++j)
                    object.writes[j] = $root.google.firestore.v1.Write.toObject(message.writes[j], options);
                }
                if (message.transaction != null && message.hasOwnProperty("transaction"))
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                return object;
              };
              CommitRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              CommitRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.CommitRequest";
              };
              return CommitRequest;
            }();
            v12.CommitResponse = function() {
              function CommitResponse(properties) {
                this.writeResults = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              CommitResponse.prototype.writeResults = $util.emptyArray;
              CommitResponse.prototype.commitTime = null;
              CommitResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.CommitResponse)
                  return object;
                var message = new $root.google.firestore.v1.CommitResponse();
                if (object.writeResults) {
                  if (!Array.isArray(object.writeResults))
                    throw TypeError(".google.firestore.v1.CommitResponse.writeResults: array expected");
                  message.writeResults = [];
                  for (var i = 0; i < object.writeResults.length; ++i) {
                    if (typeof object.writeResults[i] !== "object")
                      throw TypeError(".google.firestore.v1.CommitResponse.writeResults: object expected");
                    message.writeResults[i] = $root.google.firestore.v1.WriteResult.fromObject(object.writeResults[i]);
                  }
                }
                if (object.commitTime != null) {
                  if (typeof object.commitTime !== "object")
                    throw TypeError(".google.firestore.v1.CommitResponse.commitTime: object expected");
                  message.commitTime = $root.google.protobuf.Timestamp.fromObject(object.commitTime);
                }
                return message;
              };
              CommitResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.writeResults = [];
                if (options.defaults)
                  object.commitTime = null;
                if (message.writeResults && message.writeResults.length) {
                  object.writeResults = [];
                  for (var j = 0; j < message.writeResults.length; ++j)
                    object.writeResults[j] = $root.google.firestore.v1.WriteResult.toObject(message.writeResults[j], options);
                }
                if (message.commitTime != null && message.hasOwnProperty("commitTime"))
                  object.commitTime = $root.google.protobuf.Timestamp.toObject(message.commitTime, options);
                return object;
              };
              CommitResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              CommitResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.CommitResponse";
              };
              return CommitResponse;
            }();
            v12.RollbackRequest = function() {
              function RollbackRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              RollbackRequest.prototype.database = "";
              RollbackRequest.prototype.transaction = $util.newBuffer([]);
              RollbackRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.RollbackRequest)
                  return object;
                var message = new $root.google.firestore.v1.RollbackRequest();
                if (object.database != null)
                  message.database = String(object.database);
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                return message;
              };
              RollbackRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.database = "";
                  if (options.bytes === String)
                    object.transaction = "";
                  else {
                    object.transaction = [];
                    if (options.bytes !== Array)
                      object.transaction = $util.newBuffer(object.transaction);
                  }
                }
                if (message.database != null && message.hasOwnProperty("database"))
                  object.database = message.database;
                if (message.transaction != null && message.hasOwnProperty("transaction"))
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                return object;
              };
              RollbackRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              RollbackRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.RollbackRequest";
              };
              return RollbackRequest;
            }();
            v12.RunQueryRequest = function() {
              function RunQueryRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              RunQueryRequest.prototype.parent = "";
              RunQueryRequest.prototype.structuredQuery = null;
              RunQueryRequest.prototype.transaction = null;
              RunQueryRequest.prototype.newTransaction = null;
              RunQueryRequest.prototype.readTime = null;
              var $oneOfFields;
              Object.defineProperty(RunQueryRequest.prototype, "queryType", {
                get: $util.oneOfGetter($oneOfFields = ["structuredQuery"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              Object.defineProperty(RunQueryRequest.prototype, "consistencySelector", {
                get: $util.oneOfGetter($oneOfFields = ["transaction", "newTransaction", "readTime"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              RunQueryRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.RunQueryRequest)
                  return object;
                var message = new $root.google.firestore.v1.RunQueryRequest();
                if (object.parent != null)
                  message.parent = String(object.parent);
                if (object.structuredQuery != null) {
                  if (typeof object.structuredQuery !== "object")
                    throw TypeError(".google.firestore.v1.RunQueryRequest.structuredQuery: object expected");
                  message.structuredQuery = $root.google.firestore.v1.StructuredQuery.fromObject(object.structuredQuery);
                }
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                if (object.newTransaction != null) {
                  if (typeof object.newTransaction !== "object")
                    throw TypeError(".google.firestore.v1.RunQueryRequest.newTransaction: object expected");
                  message.newTransaction = $root.google.firestore.v1.TransactionOptions.fromObject(object.newTransaction);
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.RunQueryRequest.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              RunQueryRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults)
                  object.parent = "";
                if (message.parent != null && message.hasOwnProperty("parent"))
                  object.parent = message.parent;
                if (message.structuredQuery != null && message.hasOwnProperty("structuredQuery")) {
                  object.structuredQuery = $root.google.firestore.v1.StructuredQuery.toObject(message.structuredQuery, options);
                  if (options.oneofs)
                    object.queryType = "structuredQuery";
                }
                if (message.transaction != null && message.hasOwnProperty("transaction")) {
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                  if (options.oneofs)
                    object.consistencySelector = "transaction";
                }
                if (message.newTransaction != null && message.hasOwnProperty("newTransaction")) {
                  object.newTransaction = $root.google.firestore.v1.TransactionOptions.toObject(message.newTransaction, options);
                  if (options.oneofs)
                    object.consistencySelector = "newTransaction";
                }
                if (message.readTime != null && message.hasOwnProperty("readTime")) {
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                  if (options.oneofs)
                    object.consistencySelector = "readTime";
                }
                return object;
              };
              RunQueryRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              RunQueryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.RunQueryRequest";
              };
              return RunQueryRequest;
            }();
            v12.RunQueryResponse = function() {
              function RunQueryResponse(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              RunQueryResponse.prototype.transaction = $util.newBuffer([]);
              RunQueryResponse.prototype.document = null;
              RunQueryResponse.prototype.readTime = null;
              RunQueryResponse.prototype.skippedResults = 0;
              RunQueryResponse.prototype.done = null;
              var $oneOfFields;
              Object.defineProperty(RunQueryResponse.prototype, "continuationSelector", {
                get: $util.oneOfGetter($oneOfFields = ["done"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              RunQueryResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.RunQueryResponse)
                  return object;
                var message = new $root.google.firestore.v1.RunQueryResponse();
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                if (object.document != null) {
                  if (typeof object.document !== "object")
                    throw TypeError(".google.firestore.v1.RunQueryResponse.document: object expected");
                  message.document = $root.google.firestore.v1.Document.fromObject(object.document);
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.RunQueryResponse.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                if (object.skippedResults != null)
                  message.skippedResults = object.skippedResults | 0;
                if (object.done != null)
                  message.done = Boolean(object.done);
                return message;
              };
              RunQueryResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.document = null;
                  if (options.bytes === String)
                    object.transaction = "";
                  else {
                    object.transaction = [];
                    if (options.bytes !== Array)
                      object.transaction = $util.newBuffer(object.transaction);
                  }
                  object.readTime = null;
                  object.skippedResults = 0;
                }
                if (message.document != null && message.hasOwnProperty("document"))
                  object.document = $root.google.firestore.v1.Document.toObject(message.document, options);
                if (message.transaction != null && message.hasOwnProperty("transaction"))
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                if (message.readTime != null && message.hasOwnProperty("readTime"))
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                if (message.skippedResults != null && message.hasOwnProperty("skippedResults"))
                  object.skippedResults = message.skippedResults;
                if (message.done != null && message.hasOwnProperty("done")) {
                  object.done = message.done;
                  if (options.oneofs)
                    object.continuationSelector = "done";
                }
                return object;
              };
              RunQueryResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              RunQueryResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.RunQueryResponse";
              };
              return RunQueryResponse;
            }();
            v12.RunAggregationQueryRequest = function() {
              function RunAggregationQueryRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              RunAggregationQueryRequest.prototype.parent = "";
              RunAggregationQueryRequest.prototype.structuredAggregationQuery = null;
              RunAggregationQueryRequest.prototype.transaction = null;
              RunAggregationQueryRequest.prototype.newTransaction = null;
              RunAggregationQueryRequest.prototype.readTime = null;
              var $oneOfFields;
              Object.defineProperty(RunAggregationQueryRequest.prototype, "queryType", {
                get: $util.oneOfGetter($oneOfFields = ["structuredAggregationQuery"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              Object.defineProperty(RunAggregationQueryRequest.prototype, "consistencySelector", {
                get: $util.oneOfGetter($oneOfFields = ["transaction", "newTransaction", "readTime"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              RunAggregationQueryRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.RunAggregationQueryRequest)
                  return object;
                var message = new $root.google.firestore.v1.RunAggregationQueryRequest();
                if (object.parent != null)
                  message.parent = String(object.parent);
                if (object.structuredAggregationQuery != null) {
                  if (typeof object.structuredAggregationQuery !== "object")
                    throw TypeError(".google.firestore.v1.RunAggregationQueryRequest.structuredAggregationQuery: object expected");
                  message.structuredAggregationQuery = $root.google.firestore.v1.StructuredAggregationQuery.fromObject(object.structuredAggregationQuery);
                }
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                if (object.newTransaction != null) {
                  if (typeof object.newTransaction !== "object")
                    throw TypeError(".google.firestore.v1.RunAggregationQueryRequest.newTransaction: object expected");
                  message.newTransaction = $root.google.firestore.v1.TransactionOptions.fromObject(object.newTransaction);
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.RunAggregationQueryRequest.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              RunAggregationQueryRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults)
                  object.parent = "";
                if (message.parent != null && message.hasOwnProperty("parent"))
                  object.parent = message.parent;
                if (message.structuredAggregationQuery != null && message.hasOwnProperty("structuredAggregationQuery")) {
                  object.structuredAggregationQuery = $root.google.firestore.v1.StructuredAggregationQuery.toObject(message.structuredAggregationQuery, options);
                  if (options.oneofs)
                    object.queryType = "structuredAggregationQuery";
                }
                if (message.transaction != null && message.hasOwnProperty("transaction")) {
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                  if (options.oneofs)
                    object.consistencySelector = "transaction";
                }
                if (message.newTransaction != null && message.hasOwnProperty("newTransaction")) {
                  object.newTransaction = $root.google.firestore.v1.TransactionOptions.toObject(message.newTransaction, options);
                  if (options.oneofs)
                    object.consistencySelector = "newTransaction";
                }
                if (message.readTime != null && message.hasOwnProperty("readTime")) {
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                  if (options.oneofs)
                    object.consistencySelector = "readTime";
                }
                return object;
              };
              RunAggregationQueryRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              RunAggregationQueryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.RunAggregationQueryRequest";
              };
              return RunAggregationQueryRequest;
            }();
            v12.RunAggregationQueryResponse = function() {
              function RunAggregationQueryResponse(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              RunAggregationQueryResponse.prototype.result = null;
              RunAggregationQueryResponse.prototype.transaction = $util.newBuffer([]);
              RunAggregationQueryResponse.prototype.readTime = null;
              RunAggregationQueryResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.RunAggregationQueryResponse)
                  return object;
                var message = new $root.google.firestore.v1.RunAggregationQueryResponse();
                if (object.result != null) {
                  if (typeof object.result !== "object")
                    throw TypeError(".google.firestore.v1.RunAggregationQueryResponse.result: object expected");
                  message.result = $root.google.firestore.v1.AggregationResult.fromObject(object.result);
                }
                if (object.transaction != null) {
                  if (typeof object.transaction === "string")
                    $util.base64.decode(object.transaction, message.transaction = $util.newBuffer($util.base64.length(object.transaction)), 0);
                  else if (object.transaction.length >= 0)
                    message.transaction = object.transaction;
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.RunAggregationQueryResponse.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              RunAggregationQueryResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.result = null;
                  if (options.bytes === String)
                    object.transaction = "";
                  else {
                    object.transaction = [];
                    if (options.bytes !== Array)
                      object.transaction = $util.newBuffer(object.transaction);
                  }
                  object.readTime = null;
                }
                if (message.result != null && message.hasOwnProperty("result"))
                  object.result = $root.google.firestore.v1.AggregationResult.toObject(message.result, options);
                if (message.transaction != null && message.hasOwnProperty("transaction"))
                  object.transaction = options.bytes === String ? $util.base64.encode(message.transaction, 0, message.transaction.length) : options.bytes === Array ? Array.prototype.slice.call(message.transaction) : message.transaction;
                if (message.readTime != null && message.hasOwnProperty("readTime"))
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                return object;
              };
              RunAggregationQueryResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              RunAggregationQueryResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.RunAggregationQueryResponse";
              };
              return RunAggregationQueryResponse;
            }();
            v12.PartitionQueryRequest = function() {
              function PartitionQueryRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              PartitionQueryRequest.prototype.parent = "";
              PartitionQueryRequest.prototype.structuredQuery = null;
              PartitionQueryRequest.prototype.partitionCount = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              PartitionQueryRequest.prototype.pageToken = "";
              PartitionQueryRequest.prototype.pageSize = 0;
              PartitionQueryRequest.prototype.readTime = null;
              var $oneOfFields;
              Object.defineProperty(PartitionQueryRequest.prototype, "queryType", {
                get: $util.oneOfGetter($oneOfFields = ["structuredQuery"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              Object.defineProperty(PartitionQueryRequest.prototype, "consistencySelector", {
                get: $util.oneOfGetter($oneOfFields = ["readTime"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              PartitionQueryRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.PartitionQueryRequest)
                  return object;
                var message = new $root.google.firestore.v1.PartitionQueryRequest();
                if (object.parent != null)
                  message.parent = String(object.parent);
                if (object.structuredQuery != null) {
                  if (typeof object.structuredQuery !== "object")
                    throw TypeError(".google.firestore.v1.PartitionQueryRequest.structuredQuery: object expected");
                  message.structuredQuery = $root.google.firestore.v1.StructuredQuery.fromObject(object.structuredQuery);
                }
                if (object.partitionCount != null) {
                  if ($util.Long)
                    (message.partitionCount = $util.Long.fromValue(object.partitionCount)).unsigned = false;
                  else if (typeof object.partitionCount === "string")
                    message.partitionCount = parseInt(object.partitionCount, 10);
                  else if (typeof object.partitionCount === "number")
                    message.partitionCount = object.partitionCount;
                  else if (typeof object.partitionCount === "object")
                    message.partitionCount = new $util.LongBits(object.partitionCount.low >>> 0, object.partitionCount.high >>> 0).toNumber();
                }
                if (object.pageToken != null)
                  message.pageToken = String(object.pageToken);
                if (object.pageSize != null)
                  message.pageSize = object.pageSize | 0;
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.PartitionQueryRequest.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              PartitionQueryRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.parent = "";
                  if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.partitionCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                  } else
                    object.partitionCount = options.longs === String ? "0" : 0;
                  object.pageToken = "";
                  object.pageSize = 0;
                }
                if (message.parent != null && message.hasOwnProperty("parent"))
                  object.parent = message.parent;
                if (message.structuredQuery != null && message.hasOwnProperty("structuredQuery")) {
                  object.structuredQuery = $root.google.firestore.v1.StructuredQuery.toObject(message.structuredQuery, options);
                  if (options.oneofs)
                    object.queryType = "structuredQuery";
                }
                if (message.partitionCount != null && message.hasOwnProperty("partitionCount"))
                  if (typeof message.partitionCount === "number")
                    object.partitionCount = options.longs === String ? String(message.partitionCount) : message.partitionCount;
                  else
                    object.partitionCount = options.longs === String ? $util.Long.prototype.toString.call(message.partitionCount) : options.longs === Number ? new $util.LongBits(message.partitionCount.low >>> 0, message.partitionCount.high >>> 0).toNumber() : message.partitionCount;
                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                  object.pageToken = message.pageToken;
                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                  object.pageSize = message.pageSize;
                if (message.readTime != null && message.hasOwnProperty("readTime")) {
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                  if (options.oneofs)
                    object.consistencySelector = "readTime";
                }
                return object;
              };
              PartitionQueryRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              PartitionQueryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.PartitionQueryRequest";
              };
              return PartitionQueryRequest;
            }();
            v12.PartitionQueryResponse = function() {
              function PartitionQueryResponse(properties) {
                this.partitions = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              PartitionQueryResponse.prototype.partitions = $util.emptyArray;
              PartitionQueryResponse.prototype.nextPageToken = "";
              PartitionQueryResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.PartitionQueryResponse)
                  return object;
                var message = new $root.google.firestore.v1.PartitionQueryResponse();
                if (object.partitions) {
                  if (!Array.isArray(object.partitions))
                    throw TypeError(".google.firestore.v1.PartitionQueryResponse.partitions: array expected");
                  message.partitions = [];
                  for (var i = 0; i < object.partitions.length; ++i) {
                    if (typeof object.partitions[i] !== "object")
                      throw TypeError(".google.firestore.v1.PartitionQueryResponse.partitions: object expected");
                    message.partitions[i] = $root.google.firestore.v1.Cursor.fromObject(object.partitions[i]);
                  }
                }
                if (object.nextPageToken != null)
                  message.nextPageToken = String(object.nextPageToken);
                return message;
              };
              PartitionQueryResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.partitions = [];
                if (options.defaults)
                  object.nextPageToken = "";
                if (message.partitions && message.partitions.length) {
                  object.partitions = [];
                  for (var j = 0; j < message.partitions.length; ++j)
                    object.partitions[j] = $root.google.firestore.v1.Cursor.toObject(message.partitions[j], options);
                }
                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                  object.nextPageToken = message.nextPageToken;
                return object;
              };
              PartitionQueryResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              PartitionQueryResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.PartitionQueryResponse";
              };
              return PartitionQueryResponse;
            }();
            v12.WriteRequest = function() {
              function WriteRequest(properties) {
                this.writes = [];
                this.labels = {};
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              WriteRequest.prototype.database = "";
              WriteRequest.prototype.streamId = "";
              WriteRequest.prototype.writes = $util.emptyArray;
              WriteRequest.prototype.streamToken = $util.newBuffer([]);
              WriteRequest.prototype.labels = $util.emptyObject;
              WriteRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.WriteRequest)
                  return object;
                var message = new $root.google.firestore.v1.WriteRequest();
                if (object.database != null)
                  message.database = String(object.database);
                if (object.streamId != null)
                  message.streamId = String(object.streamId);
                if (object.writes) {
                  if (!Array.isArray(object.writes))
                    throw TypeError(".google.firestore.v1.WriteRequest.writes: array expected");
                  message.writes = [];
                  for (var i = 0; i < object.writes.length; ++i) {
                    if (typeof object.writes[i] !== "object")
                      throw TypeError(".google.firestore.v1.WriteRequest.writes: object expected");
                    message.writes[i] = $root.google.firestore.v1.Write.fromObject(object.writes[i]);
                  }
                }
                if (object.streamToken != null) {
                  if (typeof object.streamToken === "string")
                    $util.base64.decode(object.streamToken, message.streamToken = $util.newBuffer($util.base64.length(object.streamToken)), 0);
                  else if (object.streamToken.length >= 0)
                    message.streamToken = object.streamToken;
                }
                if (object.labels) {
                  if (typeof object.labels !== "object")
                    throw TypeError(".google.firestore.v1.WriteRequest.labels: object expected");
                  message.labels = {};
                  for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                }
                return message;
              };
              WriteRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.writes = [];
                if (options.objects || options.defaults)
                  object.labels = {};
                if (options.defaults) {
                  object.database = "";
                  object.streamId = "";
                  if (options.bytes === String)
                    object.streamToken = "";
                  else {
                    object.streamToken = [];
                    if (options.bytes !== Array)
                      object.streamToken = $util.newBuffer(object.streamToken);
                  }
                }
                if (message.database != null && message.hasOwnProperty("database"))
                  object.database = message.database;
                if (message.streamId != null && message.hasOwnProperty("streamId"))
                  object.streamId = message.streamId;
                if (message.writes && message.writes.length) {
                  object.writes = [];
                  for (var j = 0; j < message.writes.length; ++j)
                    object.writes[j] = $root.google.firestore.v1.Write.toObject(message.writes[j], options);
                }
                if (message.streamToken != null && message.hasOwnProperty("streamToken"))
                  object.streamToken = options.bytes === String ? $util.base64.encode(message.streamToken, 0, message.streamToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.streamToken) : message.streamToken;
                var keys2;
                if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                  object.labels = {};
                  for (var j = 0; j < keys2.length; ++j)
                    object.labels[keys2[j]] = message.labels[keys2[j]];
                }
                return object;
              };
              WriteRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              WriteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.WriteRequest";
              };
              return WriteRequest;
            }();
            v12.WriteResponse = function() {
              function WriteResponse(properties) {
                this.writeResults = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              WriteResponse.prototype.streamId = "";
              WriteResponse.prototype.streamToken = $util.newBuffer([]);
              WriteResponse.prototype.writeResults = $util.emptyArray;
              WriteResponse.prototype.commitTime = null;
              WriteResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.WriteResponse)
                  return object;
                var message = new $root.google.firestore.v1.WriteResponse();
                if (object.streamId != null)
                  message.streamId = String(object.streamId);
                if (object.streamToken != null) {
                  if (typeof object.streamToken === "string")
                    $util.base64.decode(object.streamToken, message.streamToken = $util.newBuffer($util.base64.length(object.streamToken)), 0);
                  else if (object.streamToken.length >= 0)
                    message.streamToken = object.streamToken;
                }
                if (object.writeResults) {
                  if (!Array.isArray(object.writeResults))
                    throw TypeError(".google.firestore.v1.WriteResponse.writeResults: array expected");
                  message.writeResults = [];
                  for (var i = 0; i < object.writeResults.length; ++i) {
                    if (typeof object.writeResults[i] !== "object")
                      throw TypeError(".google.firestore.v1.WriteResponse.writeResults: object expected");
                    message.writeResults[i] = $root.google.firestore.v1.WriteResult.fromObject(object.writeResults[i]);
                  }
                }
                if (object.commitTime != null) {
                  if (typeof object.commitTime !== "object")
                    throw TypeError(".google.firestore.v1.WriteResponse.commitTime: object expected");
                  message.commitTime = $root.google.protobuf.Timestamp.fromObject(object.commitTime);
                }
                return message;
              };
              WriteResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.writeResults = [];
                if (options.defaults) {
                  object.streamId = "";
                  if (options.bytes === String)
                    object.streamToken = "";
                  else {
                    object.streamToken = [];
                    if (options.bytes !== Array)
                      object.streamToken = $util.newBuffer(object.streamToken);
                  }
                  object.commitTime = null;
                }
                if (message.streamId != null && message.hasOwnProperty("streamId"))
                  object.streamId = message.streamId;
                if (message.streamToken != null && message.hasOwnProperty("streamToken"))
                  object.streamToken = options.bytes === String ? $util.base64.encode(message.streamToken, 0, message.streamToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.streamToken) : message.streamToken;
                if (message.writeResults && message.writeResults.length) {
                  object.writeResults = [];
                  for (var j = 0; j < message.writeResults.length; ++j)
                    object.writeResults[j] = $root.google.firestore.v1.WriteResult.toObject(message.writeResults[j], options);
                }
                if (message.commitTime != null && message.hasOwnProperty("commitTime"))
                  object.commitTime = $root.google.protobuf.Timestamp.toObject(message.commitTime, options);
                return object;
              };
              WriteResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              WriteResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.WriteResponse";
              };
              return WriteResponse;
            }();
            v12.ListenRequest = function() {
              function ListenRequest(properties) {
                this.labels = {};
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ListenRequest.prototype.database = "";
              ListenRequest.prototype.addTarget = null;
              ListenRequest.prototype.removeTarget = null;
              ListenRequest.prototype.labels = $util.emptyObject;
              var $oneOfFields;
              Object.defineProperty(ListenRequest.prototype, "targetChange", {
                get: $util.oneOfGetter($oneOfFields = ["addTarget", "removeTarget"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              ListenRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.ListenRequest)
                  return object;
                var message = new $root.google.firestore.v1.ListenRequest();
                if (object.database != null)
                  message.database = String(object.database);
                if (object.addTarget != null) {
                  if (typeof object.addTarget !== "object")
                    throw TypeError(".google.firestore.v1.ListenRequest.addTarget: object expected");
                  message.addTarget = $root.google.firestore.v1.Target.fromObject(object.addTarget);
                }
                if (object.removeTarget != null)
                  message.removeTarget = object.removeTarget | 0;
                if (object.labels) {
                  if (typeof object.labels !== "object")
                    throw TypeError(".google.firestore.v1.ListenRequest.labels: object expected");
                  message.labels = {};
                  for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                }
                return message;
              };
              ListenRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.objects || options.defaults)
                  object.labels = {};
                if (options.defaults)
                  object.database = "";
                if (message.database != null && message.hasOwnProperty("database"))
                  object.database = message.database;
                if (message.addTarget != null && message.hasOwnProperty("addTarget")) {
                  object.addTarget = $root.google.firestore.v1.Target.toObject(message.addTarget, options);
                  if (options.oneofs)
                    object.targetChange = "addTarget";
                }
                if (message.removeTarget != null && message.hasOwnProperty("removeTarget")) {
                  object.removeTarget = message.removeTarget;
                  if (options.oneofs)
                    object.targetChange = "removeTarget";
                }
                var keys2;
                if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                  object.labels = {};
                  for (var j = 0; j < keys2.length; ++j)
                    object.labels[keys2[j]] = message.labels[keys2[j]];
                }
                return object;
              };
              ListenRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ListenRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.ListenRequest";
              };
              return ListenRequest;
            }();
            v12.ListenResponse = function() {
              function ListenResponse(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ListenResponse.prototype.targetChange = null;
              ListenResponse.prototype.documentChange = null;
              ListenResponse.prototype.documentDelete = null;
              ListenResponse.prototype.documentRemove = null;
              ListenResponse.prototype.filter = null;
              var $oneOfFields;
              Object.defineProperty(ListenResponse.prototype, "responseType", {
                get: $util.oneOfGetter($oneOfFields = ["targetChange", "documentChange", "documentDelete", "documentRemove", "filter"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              ListenResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.ListenResponse)
                  return object;
                var message = new $root.google.firestore.v1.ListenResponse();
                if (object.targetChange != null) {
                  if (typeof object.targetChange !== "object")
                    throw TypeError(".google.firestore.v1.ListenResponse.targetChange: object expected");
                  message.targetChange = $root.google.firestore.v1.TargetChange.fromObject(object.targetChange);
                }
                if (object.documentChange != null) {
                  if (typeof object.documentChange !== "object")
                    throw TypeError(".google.firestore.v1.ListenResponse.documentChange: object expected");
                  message.documentChange = $root.google.firestore.v1.DocumentChange.fromObject(object.documentChange);
                }
                if (object.documentDelete != null) {
                  if (typeof object.documentDelete !== "object")
                    throw TypeError(".google.firestore.v1.ListenResponse.documentDelete: object expected");
                  message.documentDelete = $root.google.firestore.v1.DocumentDelete.fromObject(object.documentDelete);
                }
                if (object.documentRemove != null) {
                  if (typeof object.documentRemove !== "object")
                    throw TypeError(".google.firestore.v1.ListenResponse.documentRemove: object expected");
                  message.documentRemove = $root.google.firestore.v1.DocumentRemove.fromObject(object.documentRemove);
                }
                if (object.filter != null) {
                  if (typeof object.filter !== "object")
                    throw TypeError(".google.firestore.v1.ListenResponse.filter: object expected");
                  message.filter = $root.google.firestore.v1.ExistenceFilter.fromObject(object.filter);
                }
                return message;
              };
              ListenResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (message.targetChange != null && message.hasOwnProperty("targetChange")) {
                  object.targetChange = $root.google.firestore.v1.TargetChange.toObject(message.targetChange, options);
                  if (options.oneofs)
                    object.responseType = "targetChange";
                }
                if (message.documentChange != null && message.hasOwnProperty("documentChange")) {
                  object.documentChange = $root.google.firestore.v1.DocumentChange.toObject(message.documentChange, options);
                  if (options.oneofs)
                    object.responseType = "documentChange";
                }
                if (message.documentDelete != null && message.hasOwnProperty("documentDelete")) {
                  object.documentDelete = $root.google.firestore.v1.DocumentDelete.toObject(message.documentDelete, options);
                  if (options.oneofs)
                    object.responseType = "documentDelete";
                }
                if (message.filter != null && message.hasOwnProperty("filter")) {
                  object.filter = $root.google.firestore.v1.ExistenceFilter.toObject(message.filter, options);
                  if (options.oneofs)
                    object.responseType = "filter";
                }
                if (message.documentRemove != null && message.hasOwnProperty("documentRemove")) {
                  object.documentRemove = $root.google.firestore.v1.DocumentRemove.toObject(message.documentRemove, options);
                  if (options.oneofs)
                    object.responseType = "documentRemove";
                }
                return object;
              };
              ListenResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ListenResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.ListenResponse";
              };
              return ListenResponse;
            }();
            v12.Target = function() {
              function Target(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Target.prototype.query = null;
              Target.prototype.documents = null;
              Target.prototype.resumeToken = null;
              Target.prototype.readTime = null;
              Target.prototype.targetId = 0;
              Target.prototype.once = false;
              var $oneOfFields;
              Object.defineProperty(Target.prototype, "targetType", {
                get: $util.oneOfGetter($oneOfFields = ["query", "documents"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              Object.defineProperty(Target.prototype, "resumeType", {
                get: $util.oneOfGetter($oneOfFields = ["resumeToken", "readTime"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              Target.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.Target)
                  return object;
                var message = new $root.google.firestore.v1.Target();
                if (object.query != null) {
                  if (typeof object.query !== "object")
                    throw TypeError(".google.firestore.v1.Target.query: object expected");
                  message.query = $root.google.firestore.v1.Target.QueryTarget.fromObject(object.query);
                }
                if (object.documents != null) {
                  if (typeof object.documents !== "object")
                    throw TypeError(".google.firestore.v1.Target.documents: object expected");
                  message.documents = $root.google.firestore.v1.Target.DocumentsTarget.fromObject(object.documents);
                }
                if (object.resumeToken != null) {
                  if (typeof object.resumeToken === "string")
                    $util.base64.decode(object.resumeToken, message.resumeToken = $util.newBuffer($util.base64.length(object.resumeToken)), 0);
                  else if (object.resumeToken.length >= 0)
                    message.resumeToken = object.resumeToken;
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.Target.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                if (object.targetId != null)
                  message.targetId = object.targetId | 0;
                if (object.once != null)
                  message.once = Boolean(object.once);
                return message;
              };
              Target.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.targetId = 0;
                  object.once = false;
                }
                if (message.query != null && message.hasOwnProperty("query")) {
                  object.query = $root.google.firestore.v1.Target.QueryTarget.toObject(message.query, options);
                  if (options.oneofs)
                    object.targetType = "query";
                }
                if (message.documents != null && message.hasOwnProperty("documents")) {
                  object.documents = $root.google.firestore.v1.Target.DocumentsTarget.toObject(message.documents, options);
                  if (options.oneofs)
                    object.targetType = "documents";
                }
                if (message.resumeToken != null && message.hasOwnProperty("resumeToken")) {
                  object.resumeToken = options.bytes === String ? $util.base64.encode(message.resumeToken, 0, message.resumeToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.resumeToken) : message.resumeToken;
                  if (options.oneofs)
                    object.resumeType = "resumeToken";
                }
                if (message.targetId != null && message.hasOwnProperty("targetId"))
                  object.targetId = message.targetId;
                if (message.once != null && message.hasOwnProperty("once"))
                  object.once = message.once;
                if (message.readTime != null && message.hasOwnProperty("readTime")) {
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                  if (options.oneofs)
                    object.resumeType = "readTime";
                }
                return object;
              };
              Target.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Target.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.Target";
              };
              Target.DocumentsTarget = function() {
                function DocumentsTarget(properties) {
                  this.documents = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DocumentsTarget.prototype.documents = $util.emptyArray;
                DocumentsTarget.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.Target.DocumentsTarget)
                    return object;
                  var message = new $root.google.firestore.v1.Target.DocumentsTarget();
                  if (object.documents) {
                    if (!Array.isArray(object.documents))
                      throw TypeError(".google.firestore.v1.Target.DocumentsTarget.documents: array expected");
                    message.documents = [];
                    for (var i = 0; i < object.documents.length; ++i)
                      message.documents[i] = String(object.documents[i]);
                  }
                  return message;
                };
                DocumentsTarget.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.documents = [];
                  if (message.documents && message.documents.length) {
                    object.documents = [];
                    for (var j = 0; j < message.documents.length; ++j)
                      object.documents[j] = message.documents[j];
                  }
                  return object;
                };
                DocumentsTarget.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DocumentsTarget.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.Target.DocumentsTarget";
                };
                return DocumentsTarget;
              }();
              Target.QueryTarget = function() {
                function QueryTarget(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                QueryTarget.prototype.parent = "";
                QueryTarget.prototype.structuredQuery = null;
                var $oneOfFields2;
                Object.defineProperty(QueryTarget.prototype, "queryType", {
                  get: $util.oneOfGetter($oneOfFields2 = ["structuredQuery"]),
                  set: $util.oneOfSetter($oneOfFields2)
                });
                QueryTarget.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.Target.QueryTarget)
                    return object;
                  var message = new $root.google.firestore.v1.Target.QueryTarget();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.structuredQuery != null) {
                    if (typeof object.structuredQuery !== "object")
                      throw TypeError(".google.firestore.v1.Target.QueryTarget.structuredQuery: object expected");
                    message.structuredQuery = $root.google.firestore.v1.StructuredQuery.fromObject(object.structuredQuery);
                  }
                  return message;
                };
                QueryTarget.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.parent = "";
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.structuredQuery != null && message.hasOwnProperty("structuredQuery")) {
                    object.structuredQuery = $root.google.firestore.v1.StructuredQuery.toObject(message.structuredQuery, options);
                    if (options.oneofs)
                      object.queryType = "structuredQuery";
                  }
                  return object;
                };
                QueryTarget.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                QueryTarget.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.Target.QueryTarget";
                };
                return QueryTarget;
              }();
              return Target;
            }();
            v12.TargetChange = function() {
              function TargetChange(properties) {
                this.targetIds = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              TargetChange.prototype.targetChangeType = 0;
              TargetChange.prototype.targetIds = $util.emptyArray;
              TargetChange.prototype.cause = null;
              TargetChange.prototype.resumeToken = $util.newBuffer([]);
              TargetChange.prototype.readTime = null;
              TargetChange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.TargetChange)
                  return object;
                var message = new $root.google.firestore.v1.TargetChange();
                switch (object.targetChangeType) {
                  default:
                    if (typeof object.targetChangeType === "number") {
                      message.targetChangeType = object.targetChangeType;
                      break;
                    }
                    break;
                  case "NO_CHANGE":
                  case 0:
                    message.targetChangeType = 0;
                    break;
                  case "ADD":
                  case 1:
                    message.targetChangeType = 1;
                    break;
                  case "REMOVE":
                  case 2:
                    message.targetChangeType = 2;
                    break;
                  case "CURRENT":
                  case 3:
                    message.targetChangeType = 3;
                    break;
                  case "RESET":
                  case 4:
                    message.targetChangeType = 4;
                    break;
                }
                if (object.targetIds) {
                  if (!Array.isArray(object.targetIds))
                    throw TypeError(".google.firestore.v1.TargetChange.targetIds: array expected");
                  message.targetIds = [];
                  for (var i = 0; i < object.targetIds.length; ++i)
                    message.targetIds[i] = object.targetIds[i] | 0;
                }
                if (object.cause != null) {
                  if (typeof object.cause !== "object")
                    throw TypeError(".google.firestore.v1.TargetChange.cause: object expected");
                  message.cause = $root.google.rpc.Status.fromObject(object.cause);
                }
                if (object.resumeToken != null) {
                  if (typeof object.resumeToken === "string")
                    $util.base64.decode(object.resumeToken, message.resumeToken = $util.newBuffer($util.base64.length(object.resumeToken)), 0);
                  else if (object.resumeToken.length >= 0)
                    message.resumeToken = object.resumeToken;
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.TargetChange.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              TargetChange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.targetIds = [];
                if (options.defaults) {
                  object.targetChangeType = options.enums === String ? "NO_CHANGE" : 0;
                  object.cause = null;
                  if (options.bytes === String)
                    object.resumeToken = "";
                  else {
                    object.resumeToken = [];
                    if (options.bytes !== Array)
                      object.resumeToken = $util.newBuffer(object.resumeToken);
                  }
                  object.readTime = null;
                }
                if (message.targetChangeType != null && message.hasOwnProperty("targetChangeType"))
                  object.targetChangeType = options.enums === String ? $root.google.firestore.v1.TargetChange.TargetChangeType[message.targetChangeType] === void 0 ? message.targetChangeType : $root.google.firestore.v1.TargetChange.TargetChangeType[message.targetChangeType] : message.targetChangeType;
                if (message.targetIds && message.targetIds.length) {
                  object.targetIds = [];
                  for (var j = 0; j < message.targetIds.length; ++j)
                    object.targetIds[j] = message.targetIds[j];
                }
                if (message.cause != null && message.hasOwnProperty("cause"))
                  object.cause = $root.google.rpc.Status.toObject(message.cause, options);
                if (message.resumeToken != null && message.hasOwnProperty("resumeToken"))
                  object.resumeToken = options.bytes === String ? $util.base64.encode(message.resumeToken, 0, message.resumeToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.resumeToken) : message.resumeToken;
                if (message.readTime != null && message.hasOwnProperty("readTime"))
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                return object;
              };
              TargetChange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              TargetChange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.TargetChange";
              };
              TargetChange.TargetChangeType = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NO_CHANGE"] = "NO_CHANGE";
                values[valuesById[1] = "ADD"] = "ADD";
                values[valuesById[2] = "REMOVE"] = "REMOVE";
                values[valuesById[3] = "CURRENT"] = "CURRENT";
                values[valuesById[4] = "RESET"] = "RESET";
                return values;
              }();
              return TargetChange;
            }();
            v12.ListCollectionIdsRequest = function() {
              function ListCollectionIdsRequest(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ListCollectionIdsRequest.prototype.parent = "";
              ListCollectionIdsRequest.prototype.pageSize = 0;
              ListCollectionIdsRequest.prototype.pageToken = "";
              ListCollectionIdsRequest.prototype.readTime = null;
              var $oneOfFields;
              Object.defineProperty(ListCollectionIdsRequest.prototype, "consistencySelector", {
                get: $util.oneOfGetter($oneOfFields = ["readTime"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              ListCollectionIdsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.ListCollectionIdsRequest)
                  return object;
                var message = new $root.google.firestore.v1.ListCollectionIdsRequest();
                if (object.parent != null)
                  message.parent = String(object.parent);
                if (object.pageSize != null)
                  message.pageSize = object.pageSize | 0;
                if (object.pageToken != null)
                  message.pageToken = String(object.pageToken);
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.ListCollectionIdsRequest.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              ListCollectionIdsRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.parent = "";
                  object.pageSize = 0;
                  object.pageToken = "";
                }
                if (message.parent != null && message.hasOwnProperty("parent"))
                  object.parent = message.parent;
                if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                  object.pageSize = message.pageSize;
                if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                  object.pageToken = message.pageToken;
                if (message.readTime != null && message.hasOwnProperty("readTime")) {
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                  if (options.oneofs)
                    object.consistencySelector = "readTime";
                }
                return object;
              };
              ListCollectionIdsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ListCollectionIdsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.ListCollectionIdsRequest";
              };
              return ListCollectionIdsRequest;
            }();
            v12.ListCollectionIdsResponse = function() {
              function ListCollectionIdsResponse(properties) {
                this.collectionIds = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ListCollectionIdsResponse.prototype.collectionIds = $util.emptyArray;
              ListCollectionIdsResponse.prototype.nextPageToken = "";
              ListCollectionIdsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.ListCollectionIdsResponse)
                  return object;
                var message = new $root.google.firestore.v1.ListCollectionIdsResponse();
                if (object.collectionIds) {
                  if (!Array.isArray(object.collectionIds))
                    throw TypeError(".google.firestore.v1.ListCollectionIdsResponse.collectionIds: array expected");
                  message.collectionIds = [];
                  for (var i = 0; i < object.collectionIds.length; ++i)
                    message.collectionIds[i] = String(object.collectionIds[i]);
                }
                if (object.nextPageToken != null)
                  message.nextPageToken = String(object.nextPageToken);
                return message;
              };
              ListCollectionIdsResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.collectionIds = [];
                if (options.defaults)
                  object.nextPageToken = "";
                if (message.collectionIds && message.collectionIds.length) {
                  object.collectionIds = [];
                  for (var j = 0; j < message.collectionIds.length; ++j)
                    object.collectionIds[j] = message.collectionIds[j];
                }
                if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                  object.nextPageToken = message.nextPageToken;
                return object;
              };
              ListCollectionIdsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ListCollectionIdsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.ListCollectionIdsResponse";
              };
              return ListCollectionIdsResponse;
            }();
            v12.BatchWriteRequest = function() {
              function BatchWriteRequest(properties) {
                this.writes = [];
                this.labels = {};
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              BatchWriteRequest.prototype.database = "";
              BatchWriteRequest.prototype.writes = $util.emptyArray;
              BatchWriteRequest.prototype.labels = $util.emptyObject;
              BatchWriteRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.BatchWriteRequest)
                  return object;
                var message = new $root.google.firestore.v1.BatchWriteRequest();
                if (object.database != null)
                  message.database = String(object.database);
                if (object.writes) {
                  if (!Array.isArray(object.writes))
                    throw TypeError(".google.firestore.v1.BatchWriteRequest.writes: array expected");
                  message.writes = [];
                  for (var i = 0; i < object.writes.length; ++i) {
                    if (typeof object.writes[i] !== "object")
                      throw TypeError(".google.firestore.v1.BatchWriteRequest.writes: object expected");
                    message.writes[i] = $root.google.firestore.v1.Write.fromObject(object.writes[i]);
                  }
                }
                if (object.labels) {
                  if (typeof object.labels !== "object")
                    throw TypeError(".google.firestore.v1.BatchWriteRequest.labels: object expected");
                  message.labels = {};
                  for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                }
                return message;
              };
              BatchWriteRequest.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.writes = [];
                if (options.objects || options.defaults)
                  object.labels = {};
                if (options.defaults)
                  object.database = "";
                if (message.database != null && message.hasOwnProperty("database"))
                  object.database = message.database;
                if (message.writes && message.writes.length) {
                  object.writes = [];
                  for (var j = 0; j < message.writes.length; ++j)
                    object.writes[j] = $root.google.firestore.v1.Write.toObject(message.writes[j], options);
                }
                var keys2;
                if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                  object.labels = {};
                  for (var j = 0; j < keys2.length; ++j)
                    object.labels[keys2[j]] = message.labels[keys2[j]];
                }
                return object;
              };
              BatchWriteRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              BatchWriteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.BatchWriteRequest";
              };
              return BatchWriteRequest;
            }();
            v12.BatchWriteResponse = function() {
              function BatchWriteResponse(properties) {
                this.writeResults = [];
                this.status = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              BatchWriteResponse.prototype.writeResults = $util.emptyArray;
              BatchWriteResponse.prototype.status = $util.emptyArray;
              BatchWriteResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.BatchWriteResponse)
                  return object;
                var message = new $root.google.firestore.v1.BatchWriteResponse();
                if (object.writeResults) {
                  if (!Array.isArray(object.writeResults))
                    throw TypeError(".google.firestore.v1.BatchWriteResponse.writeResults: array expected");
                  message.writeResults = [];
                  for (var i = 0; i < object.writeResults.length; ++i) {
                    if (typeof object.writeResults[i] !== "object")
                      throw TypeError(".google.firestore.v1.BatchWriteResponse.writeResults: object expected");
                    message.writeResults[i] = $root.google.firestore.v1.WriteResult.fromObject(object.writeResults[i]);
                  }
                }
                if (object.status) {
                  if (!Array.isArray(object.status))
                    throw TypeError(".google.firestore.v1.BatchWriteResponse.status: array expected");
                  message.status = [];
                  for (var i = 0; i < object.status.length; ++i) {
                    if (typeof object.status[i] !== "object")
                      throw TypeError(".google.firestore.v1.BatchWriteResponse.status: object expected");
                    message.status[i] = $root.google.rpc.Status.fromObject(object.status[i]);
                  }
                }
                return message;
              };
              BatchWriteResponse.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.writeResults = [];
                  object.status = [];
                }
                if (message.writeResults && message.writeResults.length) {
                  object.writeResults = [];
                  for (var j = 0; j < message.writeResults.length; ++j)
                    object.writeResults[j] = $root.google.firestore.v1.WriteResult.toObject(message.writeResults[j], options);
                }
                if (message.status && message.status.length) {
                  object.status = [];
                  for (var j = 0; j < message.status.length; ++j)
                    object.status[j] = $root.google.rpc.Status.toObject(message.status[j], options);
                }
                return object;
              };
              BatchWriteResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              BatchWriteResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.BatchWriteResponse";
              };
              return BatchWriteResponse;
            }();
            v12.StructuredQuery = function() {
              function StructuredQuery(properties) {
                this.from = [];
                this.orderBy = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              StructuredQuery.prototype.select = null;
              StructuredQuery.prototype.from = $util.emptyArray;
              StructuredQuery.prototype.where = null;
              StructuredQuery.prototype.orderBy = $util.emptyArray;
              StructuredQuery.prototype.startAt = null;
              StructuredQuery.prototype.endAt = null;
              StructuredQuery.prototype.offset = 0;
              StructuredQuery.prototype.limit = null;
              StructuredQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.StructuredQuery)
                  return object;
                var message = new $root.google.firestore.v1.StructuredQuery();
                if (object.select != null) {
                  if (typeof object.select !== "object")
                    throw TypeError(".google.firestore.v1.StructuredQuery.select: object expected");
                  message.select = $root.google.firestore.v1.StructuredQuery.Projection.fromObject(object.select);
                }
                if (object.from) {
                  if (!Array.isArray(object.from))
                    throw TypeError(".google.firestore.v1.StructuredQuery.from: array expected");
                  message.from = [];
                  for (var i = 0; i < object.from.length; ++i) {
                    if (typeof object.from[i] !== "object")
                      throw TypeError(".google.firestore.v1.StructuredQuery.from: object expected");
                    message.from[i] = $root.google.firestore.v1.StructuredQuery.CollectionSelector.fromObject(object.from[i]);
                  }
                }
                if (object.where != null) {
                  if (typeof object.where !== "object")
                    throw TypeError(".google.firestore.v1.StructuredQuery.where: object expected");
                  message.where = $root.google.firestore.v1.StructuredQuery.Filter.fromObject(object.where);
                }
                if (object.orderBy) {
                  if (!Array.isArray(object.orderBy))
                    throw TypeError(".google.firestore.v1.StructuredQuery.orderBy: array expected");
                  message.orderBy = [];
                  for (var i = 0; i < object.orderBy.length; ++i) {
                    if (typeof object.orderBy[i] !== "object")
                      throw TypeError(".google.firestore.v1.StructuredQuery.orderBy: object expected");
                    message.orderBy[i] = $root.google.firestore.v1.StructuredQuery.Order.fromObject(object.orderBy[i]);
                  }
                }
                if (object.startAt != null) {
                  if (typeof object.startAt !== "object")
                    throw TypeError(".google.firestore.v1.StructuredQuery.startAt: object expected");
                  message.startAt = $root.google.firestore.v1.Cursor.fromObject(object.startAt);
                }
                if (object.endAt != null) {
                  if (typeof object.endAt !== "object")
                    throw TypeError(".google.firestore.v1.StructuredQuery.endAt: object expected");
                  message.endAt = $root.google.firestore.v1.Cursor.fromObject(object.endAt);
                }
                if (object.offset != null)
                  message.offset = object.offset | 0;
                if (object.limit != null) {
                  if (typeof object.limit !== "object")
                    throw TypeError(".google.firestore.v1.StructuredQuery.limit: object expected");
                  message.limit = $root.google.protobuf.Int32Value.fromObject(object.limit);
                }
                return message;
              };
              StructuredQuery.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.from = [];
                  object.orderBy = [];
                }
                if (options.defaults) {
                  object.select = null;
                  object.where = null;
                  object.limit = null;
                  object.offset = 0;
                  object.startAt = null;
                  object.endAt = null;
                }
                if (message.select != null && message.hasOwnProperty("select"))
                  object.select = $root.google.firestore.v1.StructuredQuery.Projection.toObject(message.select, options);
                if (message.from && message.from.length) {
                  object.from = [];
                  for (var j = 0; j < message.from.length; ++j)
                    object.from[j] = $root.google.firestore.v1.StructuredQuery.CollectionSelector.toObject(message.from[j], options);
                }
                if (message.where != null && message.hasOwnProperty("where"))
                  object.where = $root.google.firestore.v1.StructuredQuery.Filter.toObject(message.where, options);
                if (message.orderBy && message.orderBy.length) {
                  object.orderBy = [];
                  for (var j = 0; j < message.orderBy.length; ++j)
                    object.orderBy[j] = $root.google.firestore.v1.StructuredQuery.Order.toObject(message.orderBy[j], options);
                }
                if (message.limit != null && message.hasOwnProperty("limit"))
                  object.limit = $root.google.protobuf.Int32Value.toObject(message.limit, options);
                if (message.offset != null && message.hasOwnProperty("offset"))
                  object.offset = message.offset;
                if (message.startAt != null && message.hasOwnProperty("startAt"))
                  object.startAt = $root.google.firestore.v1.Cursor.toObject(message.startAt, options);
                if (message.endAt != null && message.hasOwnProperty("endAt"))
                  object.endAt = $root.google.firestore.v1.Cursor.toObject(message.endAt, options);
                return object;
              };
              StructuredQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              StructuredQuery.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.StructuredQuery";
              };
              StructuredQuery.CollectionSelector = function() {
                function CollectionSelector(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                CollectionSelector.prototype.collectionId = "";
                CollectionSelector.prototype.allDescendants = false;
                CollectionSelector.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.StructuredQuery.CollectionSelector)
                    return object;
                  var message = new $root.google.firestore.v1.StructuredQuery.CollectionSelector();
                  if (object.collectionId != null)
                    message.collectionId = String(object.collectionId);
                  if (object.allDescendants != null)
                    message.allDescendants = Boolean(object.allDescendants);
                  return message;
                };
                CollectionSelector.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.collectionId = "";
                    object.allDescendants = false;
                  }
                  if (message.collectionId != null && message.hasOwnProperty("collectionId"))
                    object.collectionId = message.collectionId;
                  if (message.allDescendants != null && message.hasOwnProperty("allDescendants"))
                    object.allDescendants = message.allDescendants;
                  return object;
                };
                CollectionSelector.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                CollectionSelector.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.StructuredQuery.CollectionSelector";
                };
                return CollectionSelector;
              }();
              StructuredQuery.Filter = function() {
                function Filter(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Filter.prototype.compositeFilter = null;
                Filter.prototype.fieldFilter = null;
                Filter.prototype.unaryFilter = null;
                var $oneOfFields;
                Object.defineProperty(Filter.prototype, "filterType", {
                  get: $util.oneOfGetter($oneOfFields = ["compositeFilter", "fieldFilter", "unaryFilter"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                Filter.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.StructuredQuery.Filter)
                    return object;
                  var message = new $root.google.firestore.v1.StructuredQuery.Filter();
                  if (object.compositeFilter != null) {
                    if (typeof object.compositeFilter !== "object")
                      throw TypeError(".google.firestore.v1.StructuredQuery.Filter.compositeFilter: object expected");
                    message.compositeFilter = $root.google.firestore.v1.StructuredQuery.CompositeFilter.fromObject(object.compositeFilter);
                  }
                  if (object.fieldFilter != null) {
                    if (typeof object.fieldFilter !== "object")
                      throw TypeError(".google.firestore.v1.StructuredQuery.Filter.fieldFilter: object expected");
                    message.fieldFilter = $root.google.firestore.v1.StructuredQuery.FieldFilter.fromObject(object.fieldFilter);
                  }
                  if (object.unaryFilter != null) {
                    if (typeof object.unaryFilter !== "object")
                      throw TypeError(".google.firestore.v1.StructuredQuery.Filter.unaryFilter: object expected");
                    message.unaryFilter = $root.google.firestore.v1.StructuredQuery.UnaryFilter.fromObject(object.unaryFilter);
                  }
                  return message;
                };
                Filter.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.compositeFilter != null && message.hasOwnProperty("compositeFilter")) {
                    object.compositeFilter = $root.google.firestore.v1.StructuredQuery.CompositeFilter.toObject(message.compositeFilter, options);
                    if (options.oneofs)
                      object.filterType = "compositeFilter";
                  }
                  if (message.fieldFilter != null && message.hasOwnProperty("fieldFilter")) {
                    object.fieldFilter = $root.google.firestore.v1.StructuredQuery.FieldFilter.toObject(message.fieldFilter, options);
                    if (options.oneofs)
                      object.filterType = "fieldFilter";
                  }
                  if (message.unaryFilter != null && message.hasOwnProperty("unaryFilter")) {
                    object.unaryFilter = $root.google.firestore.v1.StructuredQuery.UnaryFilter.toObject(message.unaryFilter, options);
                    if (options.oneofs)
                      object.filterType = "unaryFilter";
                  }
                  return object;
                };
                Filter.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Filter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.StructuredQuery.Filter";
                };
                return Filter;
              }();
              StructuredQuery.CompositeFilter = function() {
                function CompositeFilter(properties) {
                  this.filters = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                CompositeFilter.prototype.op = 0;
                CompositeFilter.prototype.filters = $util.emptyArray;
                CompositeFilter.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.StructuredQuery.CompositeFilter)
                    return object;
                  var message = new $root.google.firestore.v1.StructuredQuery.CompositeFilter();
                  switch (object.op) {
                    default:
                      if (typeof object.op === "number") {
                        message.op = object.op;
                        break;
                      }
                      break;
                    case "OPERATOR_UNSPECIFIED":
                    case 0:
                      message.op = 0;
                      break;
                    case "AND":
                    case 1:
                      message.op = 1;
                      break;
                  }
                  if (object.filters) {
                    if (!Array.isArray(object.filters))
                      throw TypeError(".google.firestore.v1.StructuredQuery.CompositeFilter.filters: array expected");
                    message.filters = [];
                    for (var i = 0; i < object.filters.length; ++i) {
                      if (typeof object.filters[i] !== "object")
                        throw TypeError(".google.firestore.v1.StructuredQuery.CompositeFilter.filters: object expected");
                      message.filters[i] = $root.google.firestore.v1.StructuredQuery.Filter.fromObject(object.filters[i]);
                    }
                  }
                  return message;
                };
                CompositeFilter.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.filters = [];
                  if (options.defaults)
                    object.op = options.enums === String ? "OPERATOR_UNSPECIFIED" : 0;
                  if (message.op != null && message.hasOwnProperty("op"))
                    object.op = options.enums === String ? $root.google.firestore.v1.StructuredQuery.CompositeFilter.Operator[message.op] === void 0 ? message.op : $root.google.firestore.v1.StructuredQuery.CompositeFilter.Operator[message.op] : message.op;
                  if (message.filters && message.filters.length) {
                    object.filters = [];
                    for (var j = 0; j < message.filters.length; ++j)
                      object.filters[j] = $root.google.firestore.v1.StructuredQuery.Filter.toObject(message.filters[j], options);
                  }
                  return object;
                };
                CompositeFilter.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                CompositeFilter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.StructuredQuery.CompositeFilter";
                };
                CompositeFilter.Operator = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "OPERATOR_UNSPECIFIED"] = "OPERATOR_UNSPECIFIED";
                  values[valuesById[1] = "AND"] = "AND";
                  return values;
                }();
                return CompositeFilter;
              }();
              StructuredQuery.FieldFilter = function() {
                function FieldFilter(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                FieldFilter.prototype.field = null;
                FieldFilter.prototype.op = 0;
                FieldFilter.prototype.value = null;
                FieldFilter.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.StructuredQuery.FieldFilter)
                    return object;
                  var message = new $root.google.firestore.v1.StructuredQuery.FieldFilter();
                  if (object.field != null) {
                    if (typeof object.field !== "object")
                      throw TypeError(".google.firestore.v1.StructuredQuery.FieldFilter.field: object expected");
                    message.field = $root.google.firestore.v1.StructuredQuery.FieldReference.fromObject(object.field);
                  }
                  switch (object.op) {
                    default:
                      if (typeof object.op === "number") {
                        message.op = object.op;
                        break;
                      }
                      break;
                    case "OPERATOR_UNSPECIFIED":
                    case 0:
                      message.op = 0;
                      break;
                    case "LESS_THAN":
                    case 1:
                      message.op = 1;
                      break;
                    case "LESS_THAN_OR_EQUAL":
                    case 2:
                      message.op = 2;
                      break;
                    case "GREATER_THAN":
                    case 3:
                      message.op = 3;
                      break;
                    case "GREATER_THAN_OR_EQUAL":
                    case 4:
                      message.op = 4;
                      break;
                    case "EQUAL":
                    case 5:
                      message.op = 5;
                      break;
                    case "NOT_EQUAL":
                    case 6:
                      message.op = 6;
                      break;
                    case "ARRAY_CONTAINS":
                    case 7:
                      message.op = 7;
                      break;
                    case "IN":
                    case 8:
                      message.op = 8;
                      break;
                    case "ARRAY_CONTAINS_ANY":
                    case 9:
                      message.op = 9;
                      break;
                    case "NOT_IN":
                    case 10:
                      message.op = 10;
                      break;
                  }
                  if (object.value != null) {
                    if (typeof object.value !== "object")
                      throw TypeError(".google.firestore.v1.StructuredQuery.FieldFilter.value: object expected");
                    message.value = $root.google.firestore.v1.Value.fromObject(object.value);
                  }
                  return message;
                };
                FieldFilter.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.field = null;
                    object.op = options.enums === String ? "OPERATOR_UNSPECIFIED" : 0;
                    object.value = null;
                  }
                  if (message.field != null && message.hasOwnProperty("field"))
                    object.field = $root.google.firestore.v1.StructuredQuery.FieldReference.toObject(message.field, options);
                  if (message.op != null && message.hasOwnProperty("op"))
                    object.op = options.enums === String ? $root.google.firestore.v1.StructuredQuery.FieldFilter.Operator[message.op] === void 0 ? message.op : $root.google.firestore.v1.StructuredQuery.FieldFilter.Operator[message.op] : message.op;
                  if (message.value != null && message.hasOwnProperty("value"))
                    object.value = $root.google.firestore.v1.Value.toObject(message.value, options);
                  return object;
                };
                FieldFilter.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                FieldFilter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.StructuredQuery.FieldFilter";
                };
                FieldFilter.Operator = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "OPERATOR_UNSPECIFIED"] = "OPERATOR_UNSPECIFIED";
                  values[valuesById[1] = "LESS_THAN"] = "LESS_THAN";
                  values[valuesById[2] = "LESS_THAN_OR_EQUAL"] = "LESS_THAN_OR_EQUAL";
                  values[valuesById[3] = "GREATER_THAN"] = "GREATER_THAN";
                  values[valuesById[4] = "GREATER_THAN_OR_EQUAL"] = "GREATER_THAN_OR_EQUAL";
                  values[valuesById[5] = "EQUAL"] = "EQUAL";
                  values[valuesById[6] = "NOT_EQUAL"] = "NOT_EQUAL";
                  values[valuesById[7] = "ARRAY_CONTAINS"] = "ARRAY_CONTAINS";
                  values[valuesById[8] = "IN"] = "IN";
                  values[valuesById[9] = "ARRAY_CONTAINS_ANY"] = "ARRAY_CONTAINS_ANY";
                  values[valuesById[10] = "NOT_IN"] = "NOT_IN";
                  return values;
                }();
                return FieldFilter;
              }();
              StructuredQuery.UnaryFilter = function() {
                function UnaryFilter(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                UnaryFilter.prototype.op = 0;
                UnaryFilter.prototype.field = null;
                var $oneOfFields;
                Object.defineProperty(UnaryFilter.prototype, "operandType", {
                  get: $util.oneOfGetter($oneOfFields = ["field"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                UnaryFilter.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.StructuredQuery.UnaryFilter)
                    return object;
                  var message = new $root.google.firestore.v1.StructuredQuery.UnaryFilter();
                  switch (object.op) {
                    default:
                      if (typeof object.op === "number") {
                        message.op = object.op;
                        break;
                      }
                      break;
                    case "OPERATOR_UNSPECIFIED":
                    case 0:
                      message.op = 0;
                      break;
                    case "IS_NAN":
                    case 2:
                      message.op = 2;
                      break;
                    case "IS_NULL":
                    case 3:
                      message.op = 3;
                      break;
                    case "IS_NOT_NAN":
                    case 4:
                      message.op = 4;
                      break;
                    case "IS_NOT_NULL":
                    case 5:
                      message.op = 5;
                      break;
                  }
                  if (object.field != null) {
                    if (typeof object.field !== "object")
                      throw TypeError(".google.firestore.v1.StructuredQuery.UnaryFilter.field: object expected");
                    message.field = $root.google.firestore.v1.StructuredQuery.FieldReference.fromObject(object.field);
                  }
                  return message;
                };
                UnaryFilter.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.op = options.enums === String ? "OPERATOR_UNSPECIFIED" : 0;
                  if (message.op != null && message.hasOwnProperty("op"))
                    object.op = options.enums === String ? $root.google.firestore.v1.StructuredQuery.UnaryFilter.Operator[message.op] === void 0 ? message.op : $root.google.firestore.v1.StructuredQuery.UnaryFilter.Operator[message.op] : message.op;
                  if (message.field != null && message.hasOwnProperty("field")) {
                    object.field = $root.google.firestore.v1.StructuredQuery.FieldReference.toObject(message.field, options);
                    if (options.oneofs)
                      object.operandType = "field";
                  }
                  return object;
                };
                UnaryFilter.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                UnaryFilter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.StructuredQuery.UnaryFilter";
                };
                UnaryFilter.Operator = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "OPERATOR_UNSPECIFIED"] = "OPERATOR_UNSPECIFIED";
                  values[valuesById[2] = "IS_NAN"] = "IS_NAN";
                  values[valuesById[3] = "IS_NULL"] = "IS_NULL";
                  values[valuesById[4] = "IS_NOT_NAN"] = "IS_NOT_NAN";
                  values[valuesById[5] = "IS_NOT_NULL"] = "IS_NOT_NULL";
                  return values;
                }();
                return UnaryFilter;
              }();
              StructuredQuery.Order = function() {
                function Order(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Order.prototype.field = null;
                Order.prototype.direction = 0;
                Order.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.StructuredQuery.Order)
                    return object;
                  var message = new $root.google.firestore.v1.StructuredQuery.Order();
                  if (object.field != null) {
                    if (typeof object.field !== "object")
                      throw TypeError(".google.firestore.v1.StructuredQuery.Order.field: object expected");
                    message.field = $root.google.firestore.v1.StructuredQuery.FieldReference.fromObject(object.field);
                  }
                  switch (object.direction) {
                    default:
                      if (typeof object.direction === "number") {
                        message.direction = object.direction;
                        break;
                      }
                      break;
                    case "DIRECTION_UNSPECIFIED":
                    case 0:
                      message.direction = 0;
                      break;
                    case "ASCENDING":
                    case 1:
                      message.direction = 1;
                      break;
                    case "DESCENDING":
                    case 2:
                      message.direction = 2;
                      break;
                  }
                  return message;
                };
                Order.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.field = null;
                    object.direction = options.enums === String ? "DIRECTION_UNSPECIFIED" : 0;
                  }
                  if (message.field != null && message.hasOwnProperty("field"))
                    object.field = $root.google.firestore.v1.StructuredQuery.FieldReference.toObject(message.field, options);
                  if (message.direction != null && message.hasOwnProperty("direction"))
                    object.direction = options.enums === String ? $root.google.firestore.v1.StructuredQuery.Direction[message.direction] === void 0 ? message.direction : $root.google.firestore.v1.StructuredQuery.Direction[message.direction] : message.direction;
                  return object;
                };
                Order.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Order.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.StructuredQuery.Order";
                };
                return Order;
              }();
              StructuredQuery.Direction = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DIRECTION_UNSPECIFIED"] = "DIRECTION_UNSPECIFIED";
                values[valuesById[1] = "ASCENDING"] = "ASCENDING";
                values[valuesById[2] = "DESCENDING"] = "DESCENDING";
                return values;
              }();
              StructuredQuery.FieldReference = function() {
                function FieldReference(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                FieldReference.prototype.fieldPath = "";
                FieldReference.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.StructuredQuery.FieldReference)
                    return object;
                  var message = new $root.google.firestore.v1.StructuredQuery.FieldReference();
                  if (object.fieldPath != null)
                    message.fieldPath = String(object.fieldPath);
                  return message;
                };
                FieldReference.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.fieldPath = "";
                  if (message.fieldPath != null && message.hasOwnProperty("fieldPath"))
                    object.fieldPath = message.fieldPath;
                  return object;
                };
                FieldReference.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                FieldReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.StructuredQuery.FieldReference";
                };
                return FieldReference;
              }();
              StructuredQuery.Projection = function() {
                function Projection(properties) {
                  this.fields = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Projection.prototype.fields = $util.emptyArray;
                Projection.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.StructuredQuery.Projection)
                    return object;
                  var message = new $root.google.firestore.v1.StructuredQuery.Projection();
                  if (object.fields) {
                    if (!Array.isArray(object.fields))
                      throw TypeError(".google.firestore.v1.StructuredQuery.Projection.fields: array expected");
                    message.fields = [];
                    for (var i = 0; i < object.fields.length; ++i) {
                      if (typeof object.fields[i] !== "object")
                        throw TypeError(".google.firestore.v1.StructuredQuery.Projection.fields: object expected");
                      message.fields[i] = $root.google.firestore.v1.StructuredQuery.FieldReference.fromObject(object.fields[i]);
                    }
                  }
                  return message;
                };
                Projection.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.fields = [];
                  if (message.fields && message.fields.length) {
                    object.fields = [];
                    for (var j = 0; j < message.fields.length; ++j)
                      object.fields[j] = $root.google.firestore.v1.StructuredQuery.FieldReference.toObject(message.fields[j], options);
                  }
                  return object;
                };
                Projection.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Projection.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.StructuredQuery.Projection";
                };
                return Projection;
              }();
              return StructuredQuery;
            }();
            v12.StructuredAggregationQuery = function() {
              function StructuredAggregationQuery(properties) {
                this.aggregations = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              StructuredAggregationQuery.prototype.structuredQuery = null;
              StructuredAggregationQuery.prototype.aggregations = $util.emptyArray;
              var $oneOfFields;
              Object.defineProperty(StructuredAggregationQuery.prototype, "queryType", {
                get: $util.oneOfGetter($oneOfFields = ["structuredQuery"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              StructuredAggregationQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.StructuredAggregationQuery)
                  return object;
                var message = new $root.google.firestore.v1.StructuredAggregationQuery();
                if (object.structuredQuery != null) {
                  if (typeof object.structuredQuery !== "object")
                    throw TypeError(".google.firestore.v1.StructuredAggregationQuery.structuredQuery: object expected");
                  message.structuredQuery = $root.google.firestore.v1.StructuredQuery.fromObject(object.structuredQuery);
                }
                if (object.aggregations) {
                  if (!Array.isArray(object.aggregations))
                    throw TypeError(".google.firestore.v1.StructuredAggregationQuery.aggregations: array expected");
                  message.aggregations = [];
                  for (var i = 0; i < object.aggregations.length; ++i) {
                    if (typeof object.aggregations[i] !== "object")
                      throw TypeError(".google.firestore.v1.StructuredAggregationQuery.aggregations: object expected");
                    message.aggregations[i] = $root.google.firestore.v1.StructuredAggregationQuery.Aggregation.fromObject(object.aggregations[i]);
                  }
                }
                return message;
              };
              StructuredAggregationQuery.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.aggregations = [];
                if (message.structuredQuery != null && message.hasOwnProperty("structuredQuery")) {
                  object.structuredQuery = $root.google.firestore.v1.StructuredQuery.toObject(message.structuredQuery, options);
                  if (options.oneofs)
                    object.queryType = "structuredQuery";
                }
                if (message.aggregations && message.aggregations.length) {
                  object.aggregations = [];
                  for (var j = 0; j < message.aggregations.length; ++j)
                    object.aggregations[j] = $root.google.firestore.v1.StructuredAggregationQuery.Aggregation.toObject(message.aggregations[j], options);
                }
                return object;
              };
              StructuredAggregationQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              StructuredAggregationQuery.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.StructuredAggregationQuery";
              };
              StructuredAggregationQuery.Aggregation = function() {
                function Aggregation(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Aggregation.prototype.count = null;
                Aggregation.prototype.alias = "";
                var $oneOfFields2;
                Object.defineProperty(Aggregation.prototype, "operator", {
                  get: $util.oneOfGetter($oneOfFields2 = ["count"]),
                  set: $util.oneOfSetter($oneOfFields2)
                });
                Aggregation.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.StructuredAggregationQuery.Aggregation)
                    return object;
                  var message = new $root.google.firestore.v1.StructuredAggregationQuery.Aggregation();
                  if (object.count != null) {
                    if (typeof object.count !== "object")
                      throw TypeError(".google.firestore.v1.StructuredAggregationQuery.Aggregation.count: object expected");
                    message.count = $root.google.firestore.v1.StructuredAggregationQuery.Aggregation.Count.fromObject(object.count);
                  }
                  if (object.alias != null)
                    message.alias = String(object.alias);
                  return message;
                };
                Aggregation.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.alias = "";
                  if (message.count != null && message.hasOwnProperty("count")) {
                    object.count = $root.google.firestore.v1.StructuredAggregationQuery.Aggregation.Count.toObject(message.count, options);
                    if (options.oneofs)
                      object.operator = "count";
                  }
                  if (message.alias != null && message.hasOwnProperty("alias"))
                    object.alias = message.alias;
                  return object;
                };
                Aggregation.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Aggregation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.StructuredAggregationQuery.Aggregation";
                };
                Aggregation.Count = function() {
                  function Count(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  Count.prototype.upTo = null;
                  Count.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.firestore.v1.StructuredAggregationQuery.Aggregation.Count)
                      return object;
                    var message = new $root.google.firestore.v1.StructuredAggregationQuery.Aggregation.Count();
                    if (object.upTo != null) {
                      if (typeof object.upTo !== "object")
                        throw TypeError(".google.firestore.v1.StructuredAggregationQuery.Aggregation.Count.upTo: object expected");
                      message.upTo = $root.google.protobuf.Int64Value.fromObject(object.upTo);
                    }
                    return message;
                  };
                  Count.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.defaults)
                      object.upTo = null;
                    if (message.upTo != null && message.hasOwnProperty("upTo"))
                      object.upTo = $root.google.protobuf.Int64Value.toObject(message.upTo, options);
                    return object;
                  };
                  Count.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  Count.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.firestore.v1.StructuredAggregationQuery.Aggregation.Count";
                  };
                  return Count;
                }();
                return Aggregation;
              }();
              return StructuredAggregationQuery;
            }();
            v12.Cursor = function() {
              function Cursor(properties) {
                this.values = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Cursor.prototype.values = $util.emptyArray;
              Cursor.prototype.before = false;
              Cursor.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.Cursor)
                  return object;
                var message = new $root.google.firestore.v1.Cursor();
                if (object.values) {
                  if (!Array.isArray(object.values))
                    throw TypeError(".google.firestore.v1.Cursor.values: array expected");
                  message.values = [];
                  for (var i = 0; i < object.values.length; ++i) {
                    if (typeof object.values[i] !== "object")
                      throw TypeError(".google.firestore.v1.Cursor.values: object expected");
                    message.values[i] = $root.google.firestore.v1.Value.fromObject(object.values[i]);
                  }
                }
                if (object.before != null)
                  message.before = Boolean(object.before);
                return message;
              };
              Cursor.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.values = [];
                if (options.defaults)
                  object.before = false;
                if (message.values && message.values.length) {
                  object.values = [];
                  for (var j = 0; j < message.values.length; ++j)
                    object.values[j] = $root.google.firestore.v1.Value.toObject(message.values[j], options);
                }
                if (message.before != null && message.hasOwnProperty("before"))
                  object.before = message.before;
                return object;
              };
              Cursor.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Cursor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.Cursor";
              };
              return Cursor;
            }();
            v12.Write = function() {
              function Write(properties) {
                this.updateTransforms = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Write.prototype.update = null;
              Write.prototype["delete"] = null;
              Write.prototype.transform = null;
              Write.prototype.updateMask = null;
              Write.prototype.updateTransforms = $util.emptyArray;
              Write.prototype.currentDocument = null;
              var $oneOfFields;
              Object.defineProperty(Write.prototype, "operation", {
                get: $util.oneOfGetter($oneOfFields = ["update", "delete", "transform"]),
                set: $util.oneOfSetter($oneOfFields)
              });
              Write.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.Write)
                  return object;
                var message = new $root.google.firestore.v1.Write();
                if (object.update != null) {
                  if (typeof object.update !== "object")
                    throw TypeError(".google.firestore.v1.Write.update: object expected");
                  message.update = $root.google.firestore.v1.Document.fromObject(object.update);
                }
                if (object["delete"] != null)
                  message["delete"] = String(object["delete"]);
                if (object.transform != null) {
                  if (typeof object.transform !== "object")
                    throw TypeError(".google.firestore.v1.Write.transform: object expected");
                  message.transform = $root.google.firestore.v1.DocumentTransform.fromObject(object.transform);
                }
                if (object.updateMask != null) {
                  if (typeof object.updateMask !== "object")
                    throw TypeError(".google.firestore.v1.Write.updateMask: object expected");
                  message.updateMask = $root.google.firestore.v1.DocumentMask.fromObject(object.updateMask);
                }
                if (object.updateTransforms) {
                  if (!Array.isArray(object.updateTransforms))
                    throw TypeError(".google.firestore.v1.Write.updateTransforms: array expected");
                  message.updateTransforms = [];
                  for (var i = 0; i < object.updateTransforms.length; ++i) {
                    if (typeof object.updateTransforms[i] !== "object")
                      throw TypeError(".google.firestore.v1.Write.updateTransforms: object expected");
                    message.updateTransforms[i] = $root.google.firestore.v1.DocumentTransform.FieldTransform.fromObject(object.updateTransforms[i]);
                  }
                }
                if (object.currentDocument != null) {
                  if (typeof object.currentDocument !== "object")
                    throw TypeError(".google.firestore.v1.Write.currentDocument: object expected");
                  message.currentDocument = $root.google.firestore.v1.Precondition.fromObject(object.currentDocument);
                }
                return message;
              };
              Write.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.updateTransforms = [];
                if (options.defaults) {
                  object.updateMask = null;
                  object.currentDocument = null;
                }
                if (message.update != null && message.hasOwnProperty("update")) {
                  object.update = $root.google.firestore.v1.Document.toObject(message.update, options);
                  if (options.oneofs)
                    object.operation = "update";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                  object["delete"] = message["delete"];
                  if (options.oneofs)
                    object.operation = "delete";
                }
                if (message.updateMask != null && message.hasOwnProperty("updateMask"))
                  object.updateMask = $root.google.firestore.v1.DocumentMask.toObject(message.updateMask, options);
                if (message.currentDocument != null && message.hasOwnProperty("currentDocument"))
                  object.currentDocument = $root.google.firestore.v1.Precondition.toObject(message.currentDocument, options);
                if (message.transform != null && message.hasOwnProperty("transform")) {
                  object.transform = $root.google.firestore.v1.DocumentTransform.toObject(message.transform, options);
                  if (options.oneofs)
                    object.operation = "transform";
                }
                if (message.updateTransforms && message.updateTransforms.length) {
                  object.updateTransforms = [];
                  for (var j = 0; j < message.updateTransforms.length; ++j)
                    object.updateTransforms[j] = $root.google.firestore.v1.DocumentTransform.FieldTransform.toObject(message.updateTransforms[j], options);
                }
                return object;
              };
              Write.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Write.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.Write";
              };
              return Write;
            }();
            v12.DocumentTransform = function() {
              function DocumentTransform(properties) {
                this.fieldTransforms = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              DocumentTransform.prototype.document = "";
              DocumentTransform.prototype.fieldTransforms = $util.emptyArray;
              DocumentTransform.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.DocumentTransform)
                  return object;
                var message = new $root.google.firestore.v1.DocumentTransform();
                if (object.document != null)
                  message.document = String(object.document);
                if (object.fieldTransforms) {
                  if (!Array.isArray(object.fieldTransforms))
                    throw TypeError(".google.firestore.v1.DocumentTransform.fieldTransforms: array expected");
                  message.fieldTransforms = [];
                  for (var i = 0; i < object.fieldTransforms.length; ++i) {
                    if (typeof object.fieldTransforms[i] !== "object")
                      throw TypeError(".google.firestore.v1.DocumentTransform.fieldTransforms: object expected");
                    message.fieldTransforms[i] = $root.google.firestore.v1.DocumentTransform.FieldTransform.fromObject(object.fieldTransforms[i]);
                  }
                }
                return message;
              };
              DocumentTransform.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.fieldTransforms = [];
                if (options.defaults)
                  object.document = "";
                if (message.document != null && message.hasOwnProperty("document"))
                  object.document = message.document;
                if (message.fieldTransforms && message.fieldTransforms.length) {
                  object.fieldTransforms = [];
                  for (var j = 0; j < message.fieldTransforms.length; ++j)
                    object.fieldTransforms[j] = $root.google.firestore.v1.DocumentTransform.FieldTransform.toObject(message.fieldTransforms[j], options);
                }
                return object;
              };
              DocumentTransform.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              DocumentTransform.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.DocumentTransform";
              };
              DocumentTransform.FieldTransform = function() {
                function FieldTransform(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                FieldTransform.prototype.fieldPath = "";
                FieldTransform.prototype.setToServerValue = null;
                FieldTransform.prototype.increment = null;
                FieldTransform.prototype.maximum = null;
                FieldTransform.prototype.minimum = null;
                FieldTransform.prototype.appendMissingElements = null;
                FieldTransform.prototype.removeAllFromArray = null;
                var $oneOfFields;
                Object.defineProperty(FieldTransform.prototype, "transformType", {
                  get: $util.oneOfGetter($oneOfFields = ["setToServerValue", "increment", "maximum", "minimum", "appendMissingElements", "removeAllFromArray"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                FieldTransform.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.firestore.v1.DocumentTransform.FieldTransform)
                    return object;
                  var message = new $root.google.firestore.v1.DocumentTransform.FieldTransform();
                  if (object.fieldPath != null)
                    message.fieldPath = String(object.fieldPath);
                  switch (object.setToServerValue) {
                    default:
                      if (typeof object.setToServerValue === "number") {
                        message.setToServerValue = object.setToServerValue;
                        break;
                      }
                      break;
                    case "SERVER_VALUE_UNSPECIFIED":
                    case 0:
                      message.setToServerValue = 0;
                      break;
                    case "REQUEST_TIME":
                    case 1:
                      message.setToServerValue = 1;
                      break;
                  }
                  if (object.increment != null) {
                    if (typeof object.increment !== "object")
                      throw TypeError(".google.firestore.v1.DocumentTransform.FieldTransform.increment: object expected");
                    message.increment = $root.google.firestore.v1.Value.fromObject(object.increment);
                  }
                  if (object.maximum != null) {
                    if (typeof object.maximum !== "object")
                      throw TypeError(".google.firestore.v1.DocumentTransform.FieldTransform.maximum: object expected");
                    message.maximum = $root.google.firestore.v1.Value.fromObject(object.maximum);
                  }
                  if (object.minimum != null) {
                    if (typeof object.minimum !== "object")
                      throw TypeError(".google.firestore.v1.DocumentTransform.FieldTransform.minimum: object expected");
                    message.minimum = $root.google.firestore.v1.Value.fromObject(object.minimum);
                  }
                  if (object.appendMissingElements != null) {
                    if (typeof object.appendMissingElements !== "object")
                      throw TypeError(".google.firestore.v1.DocumentTransform.FieldTransform.appendMissingElements: object expected");
                    message.appendMissingElements = $root.google.firestore.v1.ArrayValue.fromObject(object.appendMissingElements);
                  }
                  if (object.removeAllFromArray != null) {
                    if (typeof object.removeAllFromArray !== "object")
                      throw TypeError(".google.firestore.v1.DocumentTransform.FieldTransform.removeAllFromArray: object expected");
                    message.removeAllFromArray = $root.google.firestore.v1.ArrayValue.fromObject(object.removeAllFromArray);
                  }
                  return message;
                };
                FieldTransform.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.fieldPath = "";
                  if (message.fieldPath != null && message.hasOwnProperty("fieldPath"))
                    object.fieldPath = message.fieldPath;
                  if (message.setToServerValue != null && message.hasOwnProperty("setToServerValue")) {
                    object.setToServerValue = options.enums === String ? $root.google.firestore.v1.DocumentTransform.FieldTransform.ServerValue[message.setToServerValue] === void 0 ? message.setToServerValue : $root.google.firestore.v1.DocumentTransform.FieldTransform.ServerValue[message.setToServerValue] : message.setToServerValue;
                    if (options.oneofs)
                      object.transformType = "setToServerValue";
                  }
                  if (message.increment != null && message.hasOwnProperty("increment")) {
                    object.increment = $root.google.firestore.v1.Value.toObject(message.increment, options);
                    if (options.oneofs)
                      object.transformType = "increment";
                  }
                  if (message.maximum != null && message.hasOwnProperty("maximum")) {
                    object.maximum = $root.google.firestore.v1.Value.toObject(message.maximum, options);
                    if (options.oneofs)
                      object.transformType = "maximum";
                  }
                  if (message.minimum != null && message.hasOwnProperty("minimum")) {
                    object.minimum = $root.google.firestore.v1.Value.toObject(message.minimum, options);
                    if (options.oneofs)
                      object.transformType = "minimum";
                  }
                  if (message.appendMissingElements != null && message.hasOwnProperty("appendMissingElements")) {
                    object.appendMissingElements = $root.google.firestore.v1.ArrayValue.toObject(message.appendMissingElements, options);
                    if (options.oneofs)
                      object.transformType = "appendMissingElements";
                  }
                  if (message.removeAllFromArray != null && message.hasOwnProperty("removeAllFromArray")) {
                    object.removeAllFromArray = $root.google.firestore.v1.ArrayValue.toObject(message.removeAllFromArray, options);
                    if (options.oneofs)
                      object.transformType = "removeAllFromArray";
                  }
                  return object;
                };
                FieldTransform.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                FieldTransform.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.firestore.v1.DocumentTransform.FieldTransform";
                };
                FieldTransform.ServerValue = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "SERVER_VALUE_UNSPECIFIED"] = "SERVER_VALUE_UNSPECIFIED";
                  values[valuesById[1] = "REQUEST_TIME"] = "REQUEST_TIME";
                  return values;
                }();
                return FieldTransform;
              }();
              return DocumentTransform;
            }();
            v12.WriteResult = function() {
              function WriteResult2(properties) {
                this.transformResults = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              WriteResult2.prototype.updateTime = null;
              WriteResult2.prototype.transformResults = $util.emptyArray;
              WriteResult2.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.WriteResult)
                  return object;
                var message = new $root.google.firestore.v1.WriteResult();
                if (object.updateTime != null) {
                  if (typeof object.updateTime !== "object")
                    throw TypeError(".google.firestore.v1.WriteResult.updateTime: object expected");
                  message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                }
                if (object.transformResults) {
                  if (!Array.isArray(object.transformResults))
                    throw TypeError(".google.firestore.v1.WriteResult.transformResults: array expected");
                  message.transformResults = [];
                  for (var i = 0; i < object.transformResults.length; ++i) {
                    if (typeof object.transformResults[i] !== "object")
                      throw TypeError(".google.firestore.v1.WriteResult.transformResults: object expected");
                    message.transformResults[i] = $root.google.firestore.v1.Value.fromObject(object.transformResults[i]);
                  }
                }
                return message;
              };
              WriteResult2.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.transformResults = [];
                if (options.defaults)
                  object.updateTime = null;
                if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                  object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                if (message.transformResults && message.transformResults.length) {
                  object.transformResults = [];
                  for (var j = 0; j < message.transformResults.length; ++j)
                    object.transformResults[j] = $root.google.firestore.v1.Value.toObject(message.transformResults[j], options);
                }
                return object;
              };
              WriteResult2.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              WriteResult2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.WriteResult";
              };
              return WriteResult2;
            }();
            v12.DocumentChange = function() {
              function DocumentChange(properties) {
                this.targetIds = [];
                this.removedTargetIds = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              DocumentChange.prototype.document = null;
              DocumentChange.prototype.targetIds = $util.emptyArray;
              DocumentChange.prototype.removedTargetIds = $util.emptyArray;
              DocumentChange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.DocumentChange)
                  return object;
                var message = new $root.google.firestore.v1.DocumentChange();
                if (object.document != null) {
                  if (typeof object.document !== "object")
                    throw TypeError(".google.firestore.v1.DocumentChange.document: object expected");
                  message.document = $root.google.firestore.v1.Document.fromObject(object.document);
                }
                if (object.targetIds) {
                  if (!Array.isArray(object.targetIds))
                    throw TypeError(".google.firestore.v1.DocumentChange.targetIds: array expected");
                  message.targetIds = [];
                  for (var i = 0; i < object.targetIds.length; ++i)
                    message.targetIds[i] = object.targetIds[i] | 0;
                }
                if (object.removedTargetIds) {
                  if (!Array.isArray(object.removedTargetIds))
                    throw TypeError(".google.firestore.v1.DocumentChange.removedTargetIds: array expected");
                  message.removedTargetIds = [];
                  for (var i = 0; i < object.removedTargetIds.length; ++i)
                    message.removedTargetIds[i] = object.removedTargetIds[i] | 0;
                }
                return message;
              };
              DocumentChange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.targetIds = [];
                  object.removedTargetIds = [];
                }
                if (options.defaults)
                  object.document = null;
                if (message.document != null && message.hasOwnProperty("document"))
                  object.document = $root.google.firestore.v1.Document.toObject(message.document, options);
                if (message.targetIds && message.targetIds.length) {
                  object.targetIds = [];
                  for (var j = 0; j < message.targetIds.length; ++j)
                    object.targetIds[j] = message.targetIds[j];
                }
                if (message.removedTargetIds && message.removedTargetIds.length) {
                  object.removedTargetIds = [];
                  for (var j = 0; j < message.removedTargetIds.length; ++j)
                    object.removedTargetIds[j] = message.removedTargetIds[j];
                }
                return object;
              };
              DocumentChange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              DocumentChange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.DocumentChange";
              };
              return DocumentChange;
            }();
            v12.DocumentDelete = function() {
              function DocumentDelete(properties) {
                this.removedTargetIds = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              DocumentDelete.prototype.document = "";
              DocumentDelete.prototype.removedTargetIds = $util.emptyArray;
              DocumentDelete.prototype.readTime = null;
              DocumentDelete.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.DocumentDelete)
                  return object;
                var message = new $root.google.firestore.v1.DocumentDelete();
                if (object.document != null)
                  message.document = String(object.document);
                if (object.removedTargetIds) {
                  if (!Array.isArray(object.removedTargetIds))
                    throw TypeError(".google.firestore.v1.DocumentDelete.removedTargetIds: array expected");
                  message.removedTargetIds = [];
                  for (var i = 0; i < object.removedTargetIds.length; ++i)
                    message.removedTargetIds[i] = object.removedTargetIds[i] | 0;
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.DocumentDelete.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              DocumentDelete.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.removedTargetIds = [];
                if (options.defaults) {
                  object.document = "";
                  object.readTime = null;
                }
                if (message.document != null && message.hasOwnProperty("document"))
                  object.document = message.document;
                if (message.readTime != null && message.hasOwnProperty("readTime"))
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                if (message.removedTargetIds && message.removedTargetIds.length) {
                  object.removedTargetIds = [];
                  for (var j = 0; j < message.removedTargetIds.length; ++j)
                    object.removedTargetIds[j] = message.removedTargetIds[j];
                }
                return object;
              };
              DocumentDelete.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              DocumentDelete.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.DocumentDelete";
              };
              return DocumentDelete;
            }();
            v12.DocumentRemove = function() {
              function DocumentRemove(properties) {
                this.removedTargetIds = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              DocumentRemove.prototype.document = "";
              DocumentRemove.prototype.removedTargetIds = $util.emptyArray;
              DocumentRemove.prototype.readTime = null;
              DocumentRemove.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.DocumentRemove)
                  return object;
                var message = new $root.google.firestore.v1.DocumentRemove();
                if (object.document != null)
                  message.document = String(object.document);
                if (object.removedTargetIds) {
                  if (!Array.isArray(object.removedTargetIds))
                    throw TypeError(".google.firestore.v1.DocumentRemove.removedTargetIds: array expected");
                  message.removedTargetIds = [];
                  for (var i = 0; i < object.removedTargetIds.length; ++i)
                    message.removedTargetIds[i] = object.removedTargetIds[i] | 0;
                }
                if (object.readTime != null) {
                  if (typeof object.readTime !== "object")
                    throw TypeError(".google.firestore.v1.DocumentRemove.readTime: object expected");
                  message.readTime = $root.google.protobuf.Timestamp.fromObject(object.readTime);
                }
                return message;
              };
              DocumentRemove.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.removedTargetIds = [];
                if (options.defaults) {
                  object.document = "";
                  object.readTime = null;
                }
                if (message.document != null && message.hasOwnProperty("document"))
                  object.document = message.document;
                if (message.removedTargetIds && message.removedTargetIds.length) {
                  object.removedTargetIds = [];
                  for (var j = 0; j < message.removedTargetIds.length; ++j)
                    object.removedTargetIds[j] = message.removedTargetIds[j];
                }
                if (message.readTime != null && message.hasOwnProperty("readTime"))
                  object.readTime = $root.google.protobuf.Timestamp.toObject(message.readTime, options);
                return object;
              };
              DocumentRemove.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              DocumentRemove.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.DocumentRemove";
              };
              return DocumentRemove;
            }();
            v12.ExistenceFilter = function() {
              function ExistenceFilter(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ExistenceFilter.prototype.targetId = 0;
              ExistenceFilter.prototype.count = 0;
              ExistenceFilter.fromObject = function fromObject(object) {
                if (object instanceof $root.google.firestore.v1.ExistenceFilter)
                  return object;
                var message = new $root.google.firestore.v1.ExistenceFilter();
                if (object.targetId != null)
                  message.targetId = object.targetId | 0;
                if (object.count != null)
                  message.count = object.count | 0;
                return message;
              };
              ExistenceFilter.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.targetId = 0;
                  object.count = 0;
                }
                if (message.targetId != null && message.hasOwnProperty("targetId"))
                  object.targetId = message.targetId;
                if (message.count != null && message.hasOwnProperty("count"))
                  object.count = message.count;
                return object;
              };
              ExistenceFilter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ExistenceFilter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.firestore.v1.ExistenceFilter";
              };
              return ExistenceFilter;
            }();
            return v12;
          }();
          return firestore;
        }();
        google.type = function() {
          var type = {};
          type.LatLng = function() {
            function LatLng(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            LatLng.prototype.latitude = 0;
            LatLng.prototype.longitude = 0;
            LatLng.fromObject = function fromObject(object) {
              if (object instanceof $root.google.type.LatLng)
                return object;
              var message = new $root.google.type.LatLng();
              if (object.latitude != null)
                message.latitude = Number(object.latitude);
              if (object.longitude != null)
                message.longitude = Number(object.longitude);
              return message;
            };
            LatLng.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.latitude = 0;
                object.longitude = 0;
              }
              if (message.latitude != null && message.hasOwnProperty("latitude"))
                object.latitude = options.json && !isFinite(message.latitude) ? String(message.latitude) : message.latitude;
              if (message.longitude != null && message.hasOwnProperty("longitude"))
                object.longitude = options.json && !isFinite(message.longitude) ? String(message.longitude) : message.longitude;
              return object;
            };
            LatLng.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            LatLng.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.type.LatLng";
            };
            return LatLng;
          }();
          return type;
        }();
        google.rpc = function() {
          var rpc = {};
          rpc.Status = function() {
            function Status(properties) {
              this.details = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Status.prototype.code = 0;
            Status.prototype.message = "";
            Status.prototype.details = $util.emptyArray;
            Status.fromObject = function fromObject(object) {
              if (object instanceof $root.google.rpc.Status)
                return object;
              var message = new $root.google.rpc.Status();
              if (object.code != null)
                message.code = object.code | 0;
              if (object.message != null)
                message.message = String(object.message);
              if (object.details) {
                if (!Array.isArray(object.details))
                  throw TypeError(".google.rpc.Status.details: array expected");
                message.details = [];
                for (var i = 0; i < object.details.length; ++i) {
                  if (typeof object.details[i] !== "object")
                    throw TypeError(".google.rpc.Status.details: object expected");
                  message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                }
              }
              return message;
            };
            Status.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.details = [];
              if (options.defaults) {
                object.code = 0;
                object.message = "";
              }
              if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
              if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
              if (message.details && message.details.length) {
                object.details = [];
                for (var j = 0; j < message.details.length; ++j)
                  object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
              }
              return object;
            };
            Status.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.rpc.Status";
            };
            return Status;
          }();
          return rpc;
        }();
        google.api = function() {
          var api = {};
          api.FieldBehavior = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = "FIELD_BEHAVIOR_UNSPECIFIED";
            values[valuesById[1] = "OPTIONAL"] = "OPTIONAL";
            values[valuesById[2] = "REQUIRED"] = "REQUIRED";
            values[valuesById[3] = "OUTPUT_ONLY"] = "OUTPUT_ONLY";
            values[valuesById[4] = "INPUT_ONLY"] = "INPUT_ONLY";
            values[valuesById[5] = "IMMUTABLE"] = "IMMUTABLE";
            values[valuesById[6] = "UNORDERED_LIST"] = "UNORDERED_LIST";
            values[valuesById[7] = "NON_EMPTY_DEFAULT"] = "NON_EMPTY_DEFAULT";
            return values;
          }();
          api.Http = function() {
            function Http(properties) {
              this.rules = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Http.prototype.rules = $util.emptyArray;
            Http.prototype.fullyDecodeReservedExpansion = false;
            Http.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.Http)
                return object;
              var message = new $root.google.api.Http();
              if (object.rules) {
                if (!Array.isArray(object.rules))
                  throw TypeError(".google.api.Http.rules: array expected");
                message.rules = [];
                for (var i = 0; i < object.rules.length; ++i) {
                  if (typeof object.rules[i] !== "object")
                    throw TypeError(".google.api.Http.rules: object expected");
                  message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                }
              }
              if (object.fullyDecodeReservedExpansion != null)
                message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
              return message;
            };
            Http.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.rules = [];
              if (options.defaults)
                object.fullyDecodeReservedExpansion = false;
              if (message.rules && message.rules.length) {
                object.rules = [];
                for (var j = 0; j < message.rules.length; ++j)
                  object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
              return object;
            };
            Http.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.Http";
            };
            return Http;
          }();
          api.HttpRule = function() {
            function HttpRule(properties) {
              this.additionalBindings = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            HttpRule.prototype.selector = "";
            HttpRule.prototype.get = null;
            HttpRule.prototype.put = null;
            HttpRule.prototype.post = null;
            HttpRule.prototype["delete"] = null;
            HttpRule.prototype.patch = null;
            HttpRule.prototype.custom = null;
            HttpRule.prototype.body = "";
            HttpRule.prototype.responseBody = "";
            HttpRule.prototype.additionalBindings = $util.emptyArray;
            var $oneOfFields;
            Object.defineProperty(HttpRule.prototype, "pattern", {
              get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            HttpRule.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.HttpRule)
                return object;
              var message = new $root.google.api.HttpRule();
              if (object.selector != null)
                message.selector = String(object.selector);
              if (object.get != null)
                message.get = String(object.get);
              if (object.put != null)
                message.put = String(object.put);
              if (object.post != null)
                message.post = String(object.post);
              if (object["delete"] != null)
                message["delete"] = String(object["delete"]);
              if (object.patch != null)
                message.patch = String(object.patch);
              if (object.custom != null) {
                if (typeof object.custom !== "object")
                  throw TypeError(".google.api.HttpRule.custom: object expected");
                message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
              }
              if (object.body != null)
                message.body = String(object.body);
              if (object.responseBody != null)
                message.responseBody = String(object.responseBody);
              if (object.additionalBindings) {
                if (!Array.isArray(object.additionalBindings))
                  throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                message.additionalBindings = [];
                for (var i = 0; i < object.additionalBindings.length; ++i) {
                  if (typeof object.additionalBindings[i] !== "object")
                    throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                  message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                }
              }
              return message;
            };
            HttpRule.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.additionalBindings = [];
              if (options.defaults) {
                object.selector = "";
                object.body = "";
                object.responseBody = "";
              }
              if (message.selector != null && message.hasOwnProperty("selector"))
                object.selector = message.selector;
              if (message.get != null && message.hasOwnProperty("get")) {
                object.get = message.get;
                if (options.oneofs)
                  object.pattern = "get";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                object.put = message.put;
                if (options.oneofs)
                  object.pattern = "put";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                object.post = message.post;
                if (options.oneofs)
                  object.pattern = "post";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                object["delete"] = message["delete"];
                if (options.oneofs)
                  object.pattern = "delete";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                object.patch = message.patch;
                if (options.oneofs)
                  object.pattern = "patch";
              }
              if (message.body != null && message.hasOwnProperty("body"))
                object.body = message.body;
              if (message.custom != null && message.hasOwnProperty("custom")) {
                object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                if (options.oneofs)
                  object.pattern = "custom";
              }
              if (message.additionalBindings && message.additionalBindings.length) {
                object.additionalBindings = [];
                for (var j = 0; j < message.additionalBindings.length; ++j)
                  object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                object.responseBody = message.responseBody;
              return object;
            };
            HttpRule.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.HttpRule";
            };
            return HttpRule;
          }();
          api.CustomHttpPattern = function() {
            function CustomHttpPattern(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CustomHttpPattern.prototype.kind = "";
            CustomHttpPattern.prototype.path = "";
            CustomHttpPattern.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CustomHttpPattern)
                return object;
              var message = new $root.google.api.CustomHttpPattern();
              if (object.kind != null)
                message.kind = String(object.kind);
              if (object.path != null)
                message.path = String(object.path);
              return message;
            };
            CustomHttpPattern.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.kind = "";
                object.path = "";
              }
              if (message.kind != null && message.hasOwnProperty("kind"))
                object.kind = message.kind;
              if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
              return object;
            };
            CustomHttpPattern.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.CustomHttpPattern";
            };
            return CustomHttpPattern;
          }();
          api.ResourceDescriptor = function() {
            function ResourceDescriptor(properties) {
              this.pattern = [];
              this.style = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ResourceDescriptor.prototype.type = "";
            ResourceDescriptor.prototype.pattern = $util.emptyArray;
            ResourceDescriptor.prototype.nameField = "";
            ResourceDescriptor.prototype.history = 0;
            ResourceDescriptor.prototype.plural = "";
            ResourceDescriptor.prototype.singular = "";
            ResourceDescriptor.prototype.style = $util.emptyArray;
            ResourceDescriptor.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ResourceDescriptor)
                return object;
              var message = new $root.google.api.ResourceDescriptor();
              if (object.type != null)
                message.type = String(object.type);
              if (object.pattern) {
                if (!Array.isArray(object.pattern))
                  throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                message.pattern = [];
                for (var i = 0; i < object.pattern.length; ++i)
                  message.pattern[i] = String(object.pattern[i]);
              }
              if (object.nameField != null)
                message.nameField = String(object.nameField);
              switch (object.history) {
                default:
                  if (typeof object.history === "number") {
                    message.history = object.history;
                    break;
                  }
                  break;
                case "HISTORY_UNSPECIFIED":
                case 0:
                  message.history = 0;
                  break;
                case "ORIGINALLY_SINGLE_PATTERN":
                case 1:
                  message.history = 1;
                  break;
                case "FUTURE_MULTI_PATTERN":
                case 2:
                  message.history = 2;
                  break;
              }
              if (object.plural != null)
                message.plural = String(object.plural);
              if (object.singular != null)
                message.singular = String(object.singular);
              if (object.style) {
                if (!Array.isArray(object.style))
                  throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                message.style = [];
                for (var i = 0; i < object.style.length; ++i)
                  switch (object.style[i]) {
                    default:
                      if (typeof object.style[i] === "number") {
                        message.style[i] = object.style[i];
                        break;
                      }
                    case "STYLE_UNSPECIFIED":
                    case 0:
                      message.style[i] = 0;
                      break;
                    case "DECLARATIVE_FRIENDLY":
                    case 1:
                      message.style[i] = 1;
                      break;
                  }
              }
              return message;
            };
            ResourceDescriptor.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.pattern = [];
                object.style = [];
              }
              if (options.defaults) {
                object.type = "";
                object.nameField = "";
                object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                object.plural = "";
                object.singular = "";
              }
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
              if (message.pattern && message.pattern.length) {
                object.pattern = [];
                for (var j = 0; j < message.pattern.length; ++j)
                  object.pattern[j] = message.pattern[j];
              }
              if (message.nameField != null && message.hasOwnProperty("nameField"))
                object.nameField = message.nameField;
              if (message.history != null && message.hasOwnProperty("history"))
                object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] === void 0 ? message.history : $root.google.api.ResourceDescriptor.History[message.history] : message.history;
              if (message.plural != null && message.hasOwnProperty("plural"))
                object.plural = message.plural;
              if (message.singular != null && message.hasOwnProperty("singular"))
                object.singular = message.singular;
              if (message.style && message.style.length) {
                object.style = [];
                for (var j = 0; j < message.style.length; ++j)
                  object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] === void 0 ? message.style[j] : $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
              }
              return object;
            };
            ResourceDescriptor.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ResourceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.ResourceDescriptor";
            };
            ResourceDescriptor.History = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "HISTORY_UNSPECIFIED"] = "HISTORY_UNSPECIFIED";
              values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = "ORIGINALLY_SINGLE_PATTERN";
              values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = "FUTURE_MULTI_PATTERN";
              return values;
            }();
            ResourceDescriptor.Style = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "STYLE_UNSPECIFIED"] = "STYLE_UNSPECIFIED";
              values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = "DECLARATIVE_FRIENDLY";
              return values;
            }();
            return ResourceDescriptor;
          }();
          api.ResourceReference = function() {
            function ResourceReference(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ResourceReference.prototype.type = "";
            ResourceReference.prototype.childType = "";
            ResourceReference.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ResourceReference)
                return object;
              var message = new $root.google.api.ResourceReference();
              if (object.type != null)
                message.type = String(object.type);
              if (object.childType != null)
                message.childType = String(object.childType);
              return message;
            };
            ResourceReference.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.type = "";
                object.childType = "";
              }
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
              if (message.childType != null && message.hasOwnProperty("childType"))
                object.childType = message.childType;
              return object;
            };
            ResourceReference.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ResourceReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.ResourceReference";
            };
            return ResourceReference;
          }();
          return api;
        }();
        google.longrunning = function() {
          var longrunning = {};
          longrunning.Operations = function() {
            function Operations(rpcImpl, requestDelimited, responseDelimited) {
              $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }
            (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
            Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
              return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
            }, "name", { value: "ListOperations" });
            Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
              return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
            }, "name", { value: "GetOperation" });
            Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
              return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "DeleteOperation" });
            Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
              return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "CancelOperation" });
            Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
              return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
            }, "name", { value: "WaitOperation" });
            return Operations;
          }();
          longrunning.Operation = function() {
            function Operation(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Operation.prototype.name = "";
            Operation.prototype.metadata = null;
            Operation.prototype.done = false;
            Operation.prototype.error = null;
            Operation.prototype.response = null;
            var $oneOfFields;
            Object.defineProperty(Operation.prototype, "result", {
              get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            Operation.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.Operation)
                return object;
              var message = new $root.google.longrunning.Operation();
              if (object.name != null)
                message.name = String(object.name);
              if (object.metadata != null) {
                if (typeof object.metadata !== "object")
                  throw TypeError(".google.longrunning.Operation.metadata: object expected");
                message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
              }
              if (object.done != null)
                message.done = Boolean(object.done);
              if (object.error != null) {
                if (typeof object.error !== "object")
                  throw TypeError(".google.longrunning.Operation.error: object expected");
                message.error = $root.google.rpc.Status.fromObject(object.error);
              }
              if (object.response != null) {
                if (typeof object.response !== "object")
                  throw TypeError(".google.longrunning.Operation.response: object expected");
                message.response = $root.google.protobuf.Any.fromObject(object.response);
              }
              return message;
            };
            Operation.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.metadata = null;
                object.done = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.metadata != null && message.hasOwnProperty("metadata"))
                object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
              if (message.done != null && message.hasOwnProperty("done"))
                object.done = message.done;
              if (message.error != null && message.hasOwnProperty("error")) {
                object.error = $root.google.rpc.Status.toObject(message.error, options);
                if (options.oneofs)
                  object.result = "error";
              }
              if (message.response != null && message.hasOwnProperty("response")) {
                object.response = $root.google.protobuf.Any.toObject(message.response, options);
                if (options.oneofs)
                  object.result = "response";
              }
              return object;
            };
            Operation.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Operation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.Operation";
            };
            return Operation;
          }();
          longrunning.GetOperationRequest = function() {
            function GetOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GetOperationRequest.prototype.name = "";
            GetOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.GetOperationRequest)
                return object;
              var message = new $root.google.longrunning.GetOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            GetOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            GetOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GetOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.GetOperationRequest";
            };
            return GetOperationRequest;
          }();
          longrunning.ListOperationsRequest = function() {
            function ListOperationsRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ListOperationsRequest.prototype.name = "";
            ListOperationsRequest.prototype.filter = "";
            ListOperationsRequest.prototype.pageSize = 0;
            ListOperationsRequest.prototype.pageToken = "";
            ListOperationsRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.ListOperationsRequest)
                return object;
              var message = new $root.google.longrunning.ListOperationsRequest();
              if (object.name != null)
                message.name = String(object.name);
              if (object.filter != null)
                message.filter = String(object.filter);
              if (object.pageSize != null)
                message.pageSize = object.pageSize | 0;
              if (object.pageToken != null)
                message.pageToken = String(object.pageToken);
              return message;
            };
            ListOperationsRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.filter = "";
                object.pageSize = 0;
                object.pageToken = "";
                object.name = "";
              }
              if (message.filter != null && message.hasOwnProperty("filter"))
                object.filter = message.filter;
              if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                object.pageSize = message.pageSize;
              if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                object.pageToken = message.pageToken;
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            ListOperationsRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ListOperationsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.ListOperationsRequest";
            };
            return ListOperationsRequest;
          }();
          longrunning.ListOperationsResponse = function() {
            function ListOperationsResponse(properties) {
              this.operations = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ListOperationsResponse.prototype.operations = $util.emptyArray;
            ListOperationsResponse.prototype.nextPageToken = "";
            ListOperationsResponse.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.ListOperationsResponse)
                return object;
              var message = new $root.google.longrunning.ListOperationsResponse();
              if (object.operations) {
                if (!Array.isArray(object.operations))
                  throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                message.operations = [];
                for (var i = 0; i < object.operations.length; ++i) {
                  if (typeof object.operations[i] !== "object")
                    throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                  message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                }
              }
              if (object.nextPageToken != null)
                message.nextPageToken = String(object.nextPageToken);
              return message;
            };
            ListOperationsResponse.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.operations = [];
              if (options.defaults)
                object.nextPageToken = "";
              if (message.operations && message.operations.length) {
                object.operations = [];
                for (var j = 0; j < message.operations.length; ++j)
                  object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
              }
              if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                object.nextPageToken = message.nextPageToken;
              return object;
            };
            ListOperationsResponse.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ListOperationsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.ListOperationsResponse";
            };
            return ListOperationsResponse;
          }();
          longrunning.CancelOperationRequest = function() {
            function CancelOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CancelOperationRequest.prototype.name = "";
            CancelOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.CancelOperationRequest)
                return object;
              var message = new $root.google.longrunning.CancelOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            CancelOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            CancelOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CancelOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.CancelOperationRequest";
            };
            return CancelOperationRequest;
          }();
          longrunning.DeleteOperationRequest = function() {
            function DeleteOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DeleteOperationRequest.prototype.name = "";
            DeleteOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                return object;
              var message = new $root.google.longrunning.DeleteOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            DeleteOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            DeleteOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DeleteOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.DeleteOperationRequest";
            };
            return DeleteOperationRequest;
          }();
          longrunning.WaitOperationRequest = function() {
            function WaitOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            WaitOperationRequest.prototype.name = "";
            WaitOperationRequest.prototype.timeout = null;
            WaitOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.WaitOperationRequest)
                return object;
              var message = new $root.google.longrunning.WaitOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              if (object.timeout != null) {
                if (typeof object.timeout !== "object")
                  throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
              }
              return message;
            };
            WaitOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.timeout = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.timeout != null && message.hasOwnProperty("timeout"))
                object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
              return object;
            };
            WaitOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            WaitOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.WaitOperationRequest";
            };
            return WaitOperationRequest;
          }();
          longrunning.OperationInfo = function() {
            function OperationInfo(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OperationInfo.prototype.responseType = "";
            OperationInfo.prototype.metadataType = "";
            OperationInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.OperationInfo)
                return object;
              var message = new $root.google.longrunning.OperationInfo();
              if (object.responseType != null)
                message.responseType = String(object.responseType);
              if (object.metadataType != null)
                message.metadataType = String(object.metadataType);
              return message;
            };
            OperationInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.responseType = "";
                object.metadataType = "";
              }
              if (message.responseType != null && message.hasOwnProperty("responseType"))
                object.responseType = message.responseType;
              if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                object.metadataType = message.metadataType;
              return object;
            };
            OperationInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            OperationInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.OperationInfo";
            };
            return OperationInfo;
          }();
          return longrunning;
        }();
        return google;
      }();
      return $root;
    });
  }
});

// node_modules/@google-cloud/firestore/build/src/bundle.js
var require_bundle = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/bundle.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleBuilder = void 0;
    var document_1 = require_document();
    var reference_1 = require_reference();
    var timestamp_1 = require_timestamp2();
    var validate_1 = require_validate();
    var BUNDLE_VERSION = 1;
    var BundleBuilder2 = class {
      constructor(bundleId) {
        this.bundleId = bundleId;
        this.documents = /* @__PURE__ */ new Map();
        this.namedQueries = /* @__PURE__ */ new Map();
        this.latestReadTime = new timestamp_1.Timestamp(0, 0);
      }
      add(documentOrName, querySnapshot) {
        (0, validate_1.validateMinNumberOfArguments)("BundleBuilder.add", arguments, 1);
        (0, validate_1.validateMaxNumberOfArguments)("BundleBuilder.add", arguments, 2);
        if (arguments.length === 1) {
          validateDocumentSnapshot("documentOrName", documentOrName);
          this.addBundledDocument(documentOrName);
        } else {
          (0, validate_1.validateString)("documentOrName", documentOrName);
          validateQuerySnapshot("querySnapshot", querySnapshot);
          this.addNamedQuery(documentOrName, querySnapshot);
        }
        return this;
      }
      addBundledDocument(snap, queryName) {
        const originalDocument = this.documents.get(snap.ref.path);
        const originalQueries = originalDocument === null || originalDocument === void 0 ? void 0 : originalDocument.metadata.queries;
        if (!originalDocument || timestamp_1.Timestamp.fromProto(originalDocument.metadata.readTime) < snap.readTime) {
          const docProto = snap.toDocumentProto();
          this.documents.set(snap.ref.path, {
            document: snap.exists ? docProto : void 0,
            metadata: {
              name: docProto.name,
              readTime: snap.readTime.toProto().timestampValue,
              exists: snap.exists
            }
          });
        }
        const newDocument = this.documents.get(snap.ref.path);
        newDocument.metadata.queries = originalQueries || [];
        if (queryName) {
          newDocument.metadata.queries.push(queryName);
        }
        if (snap.readTime > this.latestReadTime) {
          this.latestReadTime = snap.readTime;
        }
      }
      addNamedQuery(name, querySnap) {
        if (this.namedQueries.has(name)) {
          throw new Error(`Query name conflict: ${name} has already been added.`);
        }
        this.namedQueries.set(name, {
          name,
          bundledQuery: querySnap.query._toBundledQuery(),
          readTime: querySnap.readTime.toProto().timestampValue
        });
        for (const snap of querySnap.docs) {
          this.addBundledDocument(snap, name);
        }
        if (querySnap.readTime > this.latestReadTime) {
          this.latestReadTime = querySnap.readTime;
        }
      }
      elementToLengthPrefixedBuffer(bundleElement) {
        const message = require_firestore_v1_proto_api().firestore.BundleElement.fromObject(bundleElement).toJSON();
        const buffer = Buffer.from(JSON.stringify(message), "utf-8");
        const lengthBuffer = Buffer.from(buffer.length.toString());
        return Buffer.concat([lengthBuffer, buffer]);
      }
      build() {
        let bundleBuffer = Buffer.alloc(0);
        for (const namedQuery of this.namedQueries.values()) {
          bundleBuffer = Buffer.concat([
            bundleBuffer,
            this.elementToLengthPrefixedBuffer({ namedQuery })
          ]);
        }
        for (const bundledDocument of this.documents.values()) {
          const documentMetadata = bundledDocument.metadata;
          bundleBuffer = Buffer.concat([
            bundleBuffer,
            this.elementToLengthPrefixedBuffer({ documentMetadata })
          ]);
          const document = bundledDocument.document;
          if (document) {
            bundleBuffer = Buffer.concat([
              bundleBuffer,
              this.elementToLengthPrefixedBuffer({ document })
            ]);
          }
        }
        const metadata = {
          id: this.bundleId,
          createTime: this.latestReadTime.toProto().timestampValue,
          version: BUNDLE_VERSION,
          totalDocuments: this.documents.size,
          totalBytes: bundleBuffer.length
        };
        bundleBuffer = Buffer.concat([
          this.elementToLengthPrefixedBuffer({ metadata }),
          bundleBuffer
        ]);
        return bundleBuffer;
      }
    };
    exports2.BundleBuilder = BundleBuilder2;
    function validateDocumentSnapshot(arg, value) {
      if (!(value instanceof document_1.DocumentSnapshot)) {
        throw new Error((0, validate_1.invalidArgumentMessage)(arg, "DocumentSnapshot"));
      }
    }
    function validateQuerySnapshot(arg, value) {
      if (!(value instanceof reference_1.QuerySnapshot)) {
        throw new Error((0, validate_1.invalidArgumentMessage)(arg, "QuerySnapshot"));
      }
    }
  }
});

// node_modules/@google-cloud/firestore/build/src/document-reader.js
var require_document_reader = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/document-reader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DocumentReader = void 0;
    var document_1 = require_document();
    var util_1 = require_util5();
    var logger_1 = require_logger();
    var DocumentReader = class {
      constructor(firestore, allDocuments) {
        this.firestore = firestore;
        this.allDocuments = allDocuments;
        this.outstandingDocuments = /* @__PURE__ */ new Set();
        this.retrievedDocuments = /* @__PURE__ */ new Map();
        for (const docRef of this.allDocuments) {
          this.outstandingDocuments.add(docRef.formattedName);
        }
      }
      async get(requestTag) {
        await this.fetchDocuments(requestTag);
        const orderedDocuments = [];
        for (const docRef of this.allDocuments) {
          const document = this.retrievedDocuments.get(docRef.formattedName);
          if (document !== void 0) {
            const finalDoc = new document_1.DocumentSnapshotBuilder(docRef);
            finalDoc.fieldsProto = document._fieldsProto;
            finalDoc.readTime = document.readTime;
            finalDoc.createTime = document.createTime;
            finalDoc.updateTime = document.updateTime;
            orderedDocuments.push(finalDoc.build());
          } else {
            throw new Error(`Did not receive document for "${docRef.path}".`);
          }
        }
        return orderedDocuments;
      }
      async fetchDocuments(requestTag) {
        if (!this.outstandingDocuments.size) {
          return;
        }
        const request = {
          database: this.firestore.formattedName,
          transaction: this.transactionId,
          documents: Array.from(this.outstandingDocuments)
        };
        if (this.fieldMask) {
          const fieldPaths = this.fieldMask.map((fieldPath) => fieldPath.formattedName);
          request.mask = { fieldPaths };
        }
        let resultCount = 0;
        try {
          const stream = await this.firestore.requestStream(
            "batchGetDocuments",
            false,
            request,
            requestTag
          );
          stream.resume();
          for await (const response of stream) {
            let snapshot;
            if (response.found) {
              (0, logger_1.logger)("DocumentReader.fetchDocuments", requestTag, "Received document: %s", response.found.name);
              snapshot = this.firestore.snapshot_(response.found, response.readTime);
            } else {
              (0, logger_1.logger)("DocumentReader.fetchDocuments", requestTag, "Document missing: %s", response.missing);
              snapshot = this.firestore.snapshot_(response.missing, response.readTime);
            }
            const path = snapshot.ref.formattedName;
            this.outstandingDocuments.delete(path);
            this.retrievedDocuments.set(path, snapshot);
            ++resultCount;
          }
        } catch (error) {
          const shouldRetry = !this.transactionId && resultCount > 0 && error.code !== void 0 && !(0, util_1.isPermanentRpcError)(error, "batchGetDocuments");
          (0, logger_1.logger)("DocumentReader.fetchDocuments", requestTag, "BatchGetDocuments failed with error: %s. Retrying: %s", error, shouldRetry);
          if (shouldRetry) {
            return this.fetchDocuments(requestTag);
          } else {
            throw error;
          }
        } finally {
          (0, logger_1.logger)("DocumentReader.fetchDocuments", requestTag, "Received %d results", resultCount);
        }
      }
    };
    exports2.DocumentReader = DocumentReader;
  }
});

// node_modules/@google-cloud/firestore/build/src/pool.js
var require_pool2 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/pool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClientPool = exports2.CLIENT_TERMINATED_ERROR_MSG = void 0;
    var assert = require_assert();
    var logger_1 = require_logger();
    var util_1 = require_util5();
    exports2.CLIENT_TERMINATED_ERROR_MSG = "The client has already been terminated";
    var ClientPool = class {
      constructor(concurrentOperationLimit, maxIdleClients, clientFactory, clientDestructor = () => Promise.resolve()) {
        this.concurrentOperationLimit = concurrentOperationLimit;
        this.maxIdleClients = maxIdleClients;
        this.clientFactory = clientFactory;
        this.clientDestructor = clientDestructor;
        this.grpcEnabled = false;
        this.activeClients = /* @__PURE__ */ new Map();
        this.failedClients = /* @__PURE__ */ new Set();
        this.terminated = false;
        this.terminateDeferred = new util_1.Deferred();
      }
      acquire(requestTag, requiresGrpc) {
        let selectedClient = null;
        let selectedClientRequestCount = -1;
        for (const [client, metadata] of this.activeClients) {
          if (!this.failedClients.has(client) && metadata.activeRequestCount > selectedClientRequestCount && metadata.activeRequestCount < this.concurrentOperationLimit && (!requiresGrpc || metadata.grpcEnabled)) {
            selectedClient = client;
            selectedClientRequestCount = metadata.activeRequestCount;
          }
        }
        if (selectedClient) {
          (0, logger_1.logger)("ClientPool.acquire", requestTag, "Re-using existing client with %s remaining operations", this.concurrentOperationLimit - selectedClientRequestCount);
        } else {
          (0, logger_1.logger)("ClientPool.acquire", requestTag, "Creating a new client");
          selectedClient = this.clientFactory(requiresGrpc);
          selectedClientRequestCount = 0;
          assert(!this.activeClients.has(selectedClient), "The provided client factory returned an existing instance");
        }
        this.activeClients.set(selectedClient, {
          grpcEnabled: requiresGrpc,
          activeRequestCount: selectedClientRequestCount + 1
        });
        return selectedClient;
      }
      async release(requestTag, client) {
        const metadata = this.activeClients.get(client);
        assert(metadata && metadata.activeRequestCount > 0, "No active requests");
        this.activeClients.set(client, {
          grpcEnabled: metadata.grpcEnabled,
          activeRequestCount: metadata.activeRequestCount - 1
        });
        if (this.terminated && this.opCount === 0) {
          this.terminateDeferred.resolve();
        }
        if (this.shouldGarbageCollectClient(client)) {
          this.activeClients.delete(client);
          this.failedClients.delete(client);
          await this.clientDestructor(client);
          (0, logger_1.logger)("ClientPool.release", requestTag, "Garbage collected 1 client");
        }
      }
      shouldGarbageCollectClient(client) {
        const clientMetadata = this.activeClients.get(client);
        if (clientMetadata.activeRequestCount !== 0) {
          return false;
        }
        if (this.grpcEnabled !== clientMetadata.grpcEnabled) {
          return true;
        }
        if (this.failedClients.has(client)) {
          return true;
        }
        let idleCapacityCount = 0;
        for (const [, metadata] of this.activeClients) {
          idleCapacityCount += this.concurrentOperationLimit - metadata.activeRequestCount;
        }
        return idleCapacityCount > this.maxIdleClients * this.concurrentOperationLimit;
      }
      get size() {
        return this.activeClients.size;
      }
      get opCount() {
        let activeOperationCount = 0;
        this.activeClients.forEach((metadata) => activeOperationCount += metadata.activeRequestCount);
        return activeOperationCount;
      }
      run(requestTag, requiresGrpc, op) {
        if (this.terminated) {
          return Promise.reject(new Error(exports2.CLIENT_TERMINATED_ERROR_MSG));
        }
        const client = this.acquire(requestTag, requiresGrpc);
        return op(client).catch(async (err) => {
          var _a;
          if ((_a = err.message) === null || _a === void 0 ? void 0 : _a.match(/RST_STREAM/)) {
            this.failedClients.add(client);
          }
          await this.release(requestTag, client);
          return Promise.reject(err);
        }).then(async (res) => {
          await this.release(requestTag, client);
          return res;
        });
      }
      async terminate() {
        this.terminated = true;
        if (this.opCount > 0) {
          (0, logger_1.logger)(
            "ClientPool.terminate",
            null,
            "Waiting for %s pending operations to complete before terminating",
            this.opCount
          );
          await this.terminateDeferred.promise;
        }
        for (const [client] of this.activeClients) {
          this.activeClients.delete(client);
          await this.clientDestructor(client);
        }
      }
    };
    exports2.ClientPool = ClientPool;
  }
});

// node_modules/@google-cloud/firestore/build/src/transaction.js
var require_transaction = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/transaction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseGetAllArguments = exports2.Transaction = void 0;
    var backoff_1 = require_backoff();
    var logger_1 = require_logger();
    var path_1 = require_path3();
    var reference_1 = require_reference();
    var util_1 = require_util5();
    var validate_1 = require_validate();
    var document_reader_1 = require_document_reader();
    var READ_AFTER_WRITE_ERROR_MSG = "Firestore transactions require all reads to be executed before all writes.";
    var Transaction2 = class {
      constructor(firestore, requestTag) {
        this._firestore = firestore;
        this._writeBatch = firestore.batch();
        this._requestTag = requestTag;
        this._backoff = new backoff_1.ExponentialBackoff();
      }
      get(refOrQuery) {
        if (!this._writeBatch.isEmpty) {
          throw new Error(READ_AFTER_WRITE_ERROR_MSG);
        }
        if (refOrQuery instanceof reference_1.DocumentReference) {
          const documentReader = new document_reader_1.DocumentReader(this._firestore, [refOrQuery]);
          documentReader.transactionId = this._transactionId;
          return documentReader.get(this._requestTag).then(([res]) => res);
        }
        if (refOrQuery instanceof reference_1.Query) {
          return refOrQuery._get(this._transactionId);
        }
        if (refOrQuery instanceof reference_1.AggregateQuery) {
          return refOrQuery._get(this._transactionId);
        }
        throw new Error('Value for argument "refOrQuery" must be a DocumentReference, Query, or AggregateQuery.');
      }
      getAll(...documentRefsOrReadOptions) {
        if (!this._writeBatch.isEmpty) {
          throw new Error(READ_AFTER_WRITE_ERROR_MSG);
        }
        (0, validate_1.validateMinNumberOfArguments)("Transaction.getAll", documentRefsOrReadOptions, 1);
        const { documents, fieldMask } = parseGetAllArguments(documentRefsOrReadOptions);
        const documentReader = new document_reader_1.DocumentReader(this._firestore, documents);
        documentReader.fieldMask = fieldMask || void 0;
        documentReader.transactionId = this._transactionId;
        return documentReader.get(this._requestTag);
      }
      create(documentRef, data) {
        this._writeBatch.create(documentRef, data);
        return this;
      }
      set(documentRef, data, options) {
        if (options) {
          this._writeBatch.set(documentRef, data, options);
        } else {
          this._writeBatch.set(documentRef, data);
        }
        return this;
      }
      update(documentRef, dataOrField, ...preconditionOrValues) {
        (0, validate_1.validateMinNumberOfArguments)("Transaction.update", arguments, 2);
        this._writeBatch.update(documentRef, dataOrField, ...preconditionOrValues);
        return this;
      }
      delete(documentRef, precondition) {
        this._writeBatch.delete(documentRef, precondition);
        return this;
      }
      begin(readOnly, readTime) {
        var _a;
        const request = {
          database: this._firestore.formattedName
        };
        if (readOnly) {
          request.options = {
            readOnly: {
              readTime: (_a = readTime === null || readTime === void 0 ? void 0 : readTime.toProto()) === null || _a === void 0 ? void 0 : _a.timestampValue
            }
          };
        } else if (this._transactionId) {
          request.options = {
            readWrite: {
              retryTransaction: this._transactionId
            }
          };
        }
        return this._firestore.request("beginTransaction", request, this._requestTag).then((resp) => {
          this._transactionId = resp.transaction;
        });
      }
      commit() {
        return this._writeBatch._commit({
          transactionId: this._transactionId,
          requestTag: this._requestTag
        }).then(() => {
        });
      }
      rollback() {
        const request = {
          database: this._firestore.formattedName,
          transaction: this._transactionId
        };
        return this._firestore.request("rollback", request, this._requestTag);
      }
      async runTransaction(updateFunction, options) {
        let result;
        let lastError = void 0;
        for (let attempt = 0; attempt < options.maxAttempts; ++attempt) {
          try {
            if (lastError) {
              (0, logger_1.logger)("Firestore.runTransaction", this._requestTag, "Retrying transaction after error:", lastError);
              await this.rollback();
            }
            this._writeBatch._reset();
            await this.maybeBackoff(lastError);
            await this.begin(options.readOnly, options.readTime);
            const promise = updateFunction(this);
            if (!(promise instanceof Promise)) {
              throw new Error("You must return a Promise in your transaction()-callback.");
            }
            result = await promise;
            await this.commit();
            return result;
          } catch (err) {
            (0, logger_1.logger)("Firestore.runTransaction", this._requestTag, "Rolling back transaction after callback error:", err);
            lastError = err;
            if (!this._transactionId || !isRetryableTransactionError(err)) {
              break;
            }
          }
        }
        (0, logger_1.logger)("Firestore.runTransaction", this._requestTag, "Transaction not eligible for retry, returning error: %s", lastError);
        await this.rollback();
        return Promise.reject(lastError);
      }
      async maybeBackoff(error) {
        if ((error === null || error === void 0 ? void 0 : error.code) === 8) {
          this._backoff.resetToMax();
        }
        await this._backoff.backoffAndWait();
      }
    };
    exports2.Transaction = Transaction2;
    function parseGetAllArguments(documentRefsOrReadOptions) {
      let documents;
      let readOptions = void 0;
      if (Array.isArray(documentRefsOrReadOptions[0])) {
        throw new Error("getAll() no longer accepts an array as its first argument. Please unpack your array and call getAll() with individual arguments.");
      }
      if (documentRefsOrReadOptions.length > 0 && (0, util_1.isPlainObject)(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {
        readOptions = documentRefsOrReadOptions.pop();
        documents = documentRefsOrReadOptions;
      } else {
        documents = documentRefsOrReadOptions;
      }
      for (let i = 0; i < documents.length; ++i) {
        (0, reference_1.validateDocumentReference)(i, documents[i]);
      }
      validateReadOptions("options", readOptions, { optional: true });
      const fieldMask = readOptions && readOptions.fieldMask ? readOptions.fieldMask.map((fieldPath) => path_1.FieldPath.fromArgument(fieldPath)) : null;
      return { fieldMask, documents };
    }
    exports2.parseGetAllArguments = parseGetAllArguments;
    function validateReadOptions(arg, value, options) {
      if (!(0, validate_1.validateOptional)(value, options)) {
        if (!(0, util_1.isObject)(value)) {
          throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "read option")} Input is not an object.'`);
        }
        const options2 = value;
        if (options2.fieldMask !== void 0) {
          if (!Array.isArray(options2.fieldMask)) {
            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "read option")} "fieldMask" is not an array.`);
          }
          for (let i = 0; i < options2.fieldMask.length; ++i) {
            try {
              (0, path_1.validateFieldPath)(i, options2.fieldMask[i]);
            } catch (err) {
              throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, "read option")} "fieldMask" is not valid: ${err.message}`);
            }
          }
        }
      }
    }
    function isRetryableTransactionError(error) {
      if (error.code !== void 0) {
        switch (error.code) {
          case 10:
          case 1:
          case 2:
          case 4:
          case 13:
          case 14:
          case 16:
          case 8:
            return true;
          case 3:
            return !!error.message.match(/transaction has expired/);
          default:
            return false;
        }
      }
      return false;
    }
  }
});

// node_modules/@google-cloud/firestore/build/src/query-partition.js
var require_query_partition = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/query-partition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QueryPartition = void 0;
    var reference_1 = require_reference();
    var path_1 = require_path3();
    var serializer_1 = require_serializer();
    var QueryPartition2 = class {
      constructor(_firestore, _collectionId, _converter, _startAt, _endBefore) {
        this._firestore = _firestore;
        this._collectionId = _collectionId;
        this._converter = _converter;
        this._startAt = _startAt;
        this._endBefore = _endBefore;
        this._serializer = new serializer_1.Serializer(_firestore);
      }
      get startAt() {
        if (this._startAt && !this._memoizedStartAt) {
          this._memoizedStartAt = this._startAt.map((v) => this._serializer.decodeValue(v));
        }
        return this._memoizedStartAt;
      }
      get endBefore() {
        if (this._endBefore && !this._memoizedEndBefore) {
          this._memoizedEndBefore = this._endBefore.map((v) => this._serializer.decodeValue(v));
        }
        return this._memoizedEndBefore;
      }
      toQuery() {
        let queryOptions = reference_1.QueryOptions.forCollectionGroupQuery(this._collectionId, this._converter);
        queryOptions = queryOptions.with({
          fieldOrders: [new reference_1.FieldOrder(path_1.FieldPath.documentId())]
        });
        if (this._startAt !== void 0) {
          queryOptions = queryOptions.with({
            startAt: { before: true, values: this._startAt }
          });
        }
        if (this._endBefore !== void 0) {
          queryOptions = queryOptions.with({
            endAt: { before: true, values: this._endBefore }
          });
        }
        return new reference_1.Query(this._firestore, queryOptions);
      }
    };
    exports2.QueryPartition = QueryPartition2;
  }
});

// node_modules/@google-cloud/firestore/build/src/collection-group.js
var require_collection_group = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/collection-group.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CollectionGroup = void 0;
    var query_partition_1 = require_query_partition();
    var util_1 = require_util5();
    var logger_1 = require_logger();
    var reference_1 = require_reference();
    var path_1 = require_path3();
    var validate_1 = require_validate();
    var types_1 = require_types2();
    var order_1 = require_order();
    var CollectionGroup2 = class extends reference_1.Query {
      constructor(firestore, collectionId, converter) {
        super(firestore, reference_1.QueryOptions.forCollectionGroupQuery(collectionId, converter));
      }
      async *getPartitions(desiredPartitionCount) {
        var _a;
        (0, validate_1.validateInteger)("desiredPartitionCount", desiredPartitionCount, {
          minValue: 1
        });
        const tag = (0, util_1.requestTag)();
        await this.firestore.initializeIfNeeded(tag);
        const partitions = [];
        if (desiredPartitionCount > 1) {
          const queryWithDefaultOrder = this.orderBy(path_1.FieldPath.documentId());
          const request = queryWithDefaultOrder.toProto();
          request.partitionCount = desiredPartitionCount - 1;
          const stream = await this.firestore.requestStream(
            "partitionQueryStream",
            false,
            request,
            tag
          );
          stream.resume();
          for await (const currentCursor of stream) {
            partitions.push((_a = currentCursor.values) !== null && _a !== void 0 ? _a : []);
          }
        }
        (0, logger_1.logger)("Firestore.getPartitions", tag, "Received %d partitions", partitions.length);
        partitions.sort((l, r) => (0, order_1.compareArrays)(l, r));
        for (let i = 0; i < partitions.length; ++i) {
          yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, i > 0 ? partitions[i - 1] : void 0, partitions[i]);
        }
        yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, partitions.pop(), void 0);
      }
      withConverter(converter) {
        return new CollectionGroup2(this.firestore, this._queryOptions.collectionId, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());
      }
    };
    exports2.CollectionGroup = CollectionGroup2;
  }
});

// node_modules/@google-cloud/firestore/build/src/recursive-delete.js
var require_recursive_delete = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/recursive-delete.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RecursiveDelete = exports2.RECURSIVE_DELETE_MIN_PENDING_OPS = exports2.RECURSIVE_DELETE_MAX_PENDING_OPS = exports2.REFERENCE_NAME_MIN_ID = void 0;
    var assert = require_assert();
    var _1 = require_src9();
    var util_1 = require_util5();
    var reference_1 = require_reference();
    exports2.REFERENCE_NAME_MIN_ID = "__id-9223372036854775808__";
    exports2.RECURSIVE_DELETE_MAX_PENDING_OPS = 5e3;
    exports2.RECURSIVE_DELETE_MIN_PENDING_OPS = 1e3;
    var RecursiveDelete = class {
      constructor(firestore, writer, ref, maxLimit, minLimit) {
        this.firestore = firestore;
        this.writer = writer;
        this.ref = ref;
        this.maxLimit = maxLimit;
        this.minLimit = minLimit;
        this.errorCount = 0;
        this.documentsPending = true;
        this.started = false;
        this.completionDeferred = new util_1.Deferred();
        this.streamInProgress = false;
        this.pendingOpsCount = 0;
        this.errorStack = "";
        this.maxPendingOps = maxLimit;
        this.minPendingOps = minLimit;
      }
      run() {
        assert(!this.started, "RecursiveDelete.run() should only be called once.");
        this.errorStack = Error().stack;
        this.writer._verifyNotClosed();
        this.setupStream();
        return this.completionDeferred.promise;
      }
      setupStream() {
        const stream = this.getAllDescendants(this.ref instanceof _1.CollectionReference ? this.ref : this.ref);
        this.streamInProgress = true;
        let streamedDocsCount = 0;
        stream.on("error", (err) => {
          err.code = 14;
          err.stack = "Failed to fetch children documents: " + err.stack;
          this.lastError = err;
          this.onQueryEnd();
        }).on("data", (snap) => {
          streamedDocsCount++;
          this.lastDocumentSnap = snap;
          this.deleteRef(snap.ref);
        }).on("end", () => {
          this.streamInProgress = false;
          if (streamedDocsCount < this.minPendingOps) {
            this.onQueryEnd();
          } else if (this.pendingOpsCount === 0) {
            this.setupStream();
          }
        });
      }
      getAllDescendants(ref) {
        let parentPath = ref._resourcePath;
        if (ref instanceof _1.CollectionReference) {
          parentPath = parentPath.popLast();
        }
        const collectionId = ref instanceof _1.CollectionReference ? ref.id : ref.parent.id;
        let query = new _1.Query(this.firestore, reference_1.QueryOptions.forKindlessAllDescendants(
          parentPath,
          collectionId,
          false
        ));
        query = query.select(_1.FieldPath.documentId()).limit(this.maxPendingOps);
        if (ref instanceof _1.CollectionReference) {
          const nullChar = String.fromCharCode(0);
          const startAt = collectionId + "/" + exports2.REFERENCE_NAME_MIN_ID;
          const endAt = collectionId + nullChar + "/" + exports2.REFERENCE_NAME_MIN_ID;
          query = query.where(_1.FieldPath.documentId(), ">=", startAt).where(_1.FieldPath.documentId(), "<", endAt);
        }
        if (this.lastDocumentSnap) {
          query = query.startAfter(this.lastDocumentSnap);
        }
        return query.stream();
      }
      onQueryEnd() {
        this.documentsPending = false;
        if (this.ref instanceof _1.DocumentReference) {
          this.writer.delete(this.ref).catch((err) => this.incrementErrorCount(err));
        }
        this.writer.flush().then(async () => {
          var _a;
          if (this.lastError === void 0) {
            this.completionDeferred.resolve();
          } else {
            let error = new (require_fallback()).GoogleError(`${this.errorCount} ${this.errorCount !== 1 ? "deletes" : "delete"} failed. The last delete failed with: `);
            if (this.lastError.code !== void 0) {
              error.code = this.lastError.code;
            }
            error = (0, util_1.wrapError)(error, this.errorStack);
            this.completionDeferred.reject(this.lastError.stack ? (0, util_1.wrapError)(error, (_a = this.lastError.stack) !== null && _a !== void 0 ? _a : "") : error);
          }
        });
      }
      deleteRef(docRef) {
        this.pendingOpsCount++;
        this.writer.delete(docRef).catch((err) => {
          this.incrementErrorCount(err);
        }).then(() => {
          this.pendingOpsCount--;
          if (this.documentsPending && !this.streamInProgress && this.pendingOpsCount < this.minPendingOps) {
            this.setupStream();
          }
        });
      }
      incrementErrorCount(err) {
        this.errorCount++;
        this.lastError = err;
      }
    };
    exports2.RecursiveDelete = RecursiveDelete;
  }
});

// node_modules/@google-cloud/firestore/package.json
var require_package4 = __commonJS({
  "node_modules/@google-cloud/firestore/package.json"(exports2, module2) {
    module2.exports = {
      name: "@google-cloud/firestore",
      description: "Firestore Client Library for Node.js",
      version: "6.4.1",
      license: "Apache-2.0",
      author: "Google Inc.",
      engines: {
        node: ">=12.0.0"
      },
      repository: "googleapis/nodejs-firestore",
      main: "./build/src/index.js",
      types: "./types/firestore.d.ts",
      files: [
        "build/protos",
        "build/src",
        "!build/src/**/*.map",
        "types"
      ],
      keywords: [
        "google apis client",
        "google api client",
        "google apis",
        "google api",
        "google",
        "google cloud platform",
        "google cloud",
        "cloud",
        "firestore"
      ],
      scripts: {
        predocs: "npm run compile",
        docs: "jsdoc -c .jsdoc.js",
        "system-test:rest": "USE_REST_FALLBACK=YES mocha build/system-test --timeout 600000",
        "system-test:grpc": "mocha build/system-test --timeout 600000",
        "system-test": "npm run system-test:grpc && npm run system-test:rest",
        "presystem-test": "npm run compile",
        "samples-test": "npm link && cd samples/ && npm link ../ && npm test && cd ../",
        conformance: "mocha build/conformance",
        preconformance: "npm run compile",
        "test-only": "c8 mocha build/test",
        "pretest-only": "npm run compile",
        test: "npm run test-only && npm run conformance",
        lint: "gts check",
        clean: "gts clean",
        compile: "tsc -p .",
        postcompile: "node scripts/init-directories.js && cp -r dev/protos build && cp dev/src/v1beta1/*.json build/src/v1beta1/ && cp dev/src/v1/*.json build/src/v1/ && cp dev/conformance/test-definition.proto build/conformance && cp dev/conformance/conformance-tests/*.json build/conformance/conformance-tests && minifyProtoJson",
        fix: "gts fix",
        prepare: "npm run compile",
        "docs-test": "linkinator docs",
        "predocs-test": "npm run docs",
        prelint: "cd samples; npm link ../; npm install",
        precompile: "gts clean"
      },
      dependencies: {
        "fast-deep-equal": "^3.1.1",
        "functional-red-black-tree": "^1.0.1",
        "google-gax": "^3.5.1",
        protobufjs: "^7.0.0"
      },
      devDependencies: {
        "@types/assert": "^1.4.0",
        "@types/chai": "^4.2.7",
        "@types/chai-as-promised": "^7.1.2",
        "@types/duplexify": "^3.5.0",
        "@types/extend": "^3.0.0",
        "@types/mocha": "^9.0.0",
        "@types/node": "^16.0.0",
        "@types/sinon": "^10.0.0",
        "@types/through2": "^2.0.34",
        c8: "^7.0.0",
        chai: "^4.1.2",
        "chai-as-promised": "^7.1.1",
        codecov: "^3.6.1",
        duplexify: "^4.0.0",
        extend: "^3.0.2",
        gts: "^3.1.0",
        jsdoc: "^3.6.2",
        "jsdoc-fresh": "^2.0.0",
        "jsdoc-region-tag": "^2.0.0",
        "length-prefixed-json-stream": "^1.0.1",
        linkinator: "^4.0.0",
        mocha: "^9.2.2",
        "protobufjs-cli": "^1.0.0",
        proxyquire: "^2.1.3",
        sinon: "^13.0.0",
        through2: "^4.0.0",
        "ts-node": "^10.0.0",
        typescript: "~4.7.4"
      }
    };
  }
});

// node_modules/@google-cloud/firestore/build/protos/v1beta1.json
var require_v1beta1 = __commonJS({
  "node_modules/@google-cloud/firestore/build/protos/v1beta1.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { protobuf: { options: { go_package: "google.golang.org/protobuf/types/descriptorpb", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { Timestamp: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } }, Struct: { fields: { fields: { keyType: "string", type: "Value", id: 1 } } }, Value: { oneofs: { kind: { oneof: ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"] } }, fields: { nullValue: { type: "NullValue", id: 1 }, numberValue: { type: "double", id: 2 }, stringValue: { type: "string", id: 3 }, boolValue: { type: "bool", id: 4 }, structValue: { type: "Struct", id: 5 }, listValue: { type: "ListValue", id: 6 } } }, NullValue: { values: { NULL_VALUE: 0 } }, ListValue: { fields: { values: { rule: "repeated", type: "Value", id: 1 } } }, Empty: { fields: {} }, DoubleValue: { fields: { value: { type: "double", id: 1 } } }, FloatValue: { fields: { value: { type: "float", id: 1 } } }, Int64Value: { fields: { value: { type: "int64", id: 1 } } }, UInt64Value: { fields: { value: { type: "uint64", id: 1 } } }, Int32Value: { fields: { value: { type: "int32", id: 1 } } }, UInt32Value: { fields: { value: { type: "uint32", id: 1 } } }, BoolValue: { fields: { value: { type: "bool", id: 1 } } }, StringValue: { fields: { value: { type: "string", id: 1 } } }, BytesValue: { fields: { value: { type: "bytes", id: 1 } } }, Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } }, FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 }, edition: { type: "string", id: 13 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4], [5, 5], [6, 6], [8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, unverifiedLazy: { type: "bool", id: 15, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 }, semantic: { type: "Semantic", id: 5 } }, nested: { Semantic: { values: { NONE: 0, SET: 1, ALIAS: 2 } } } } } }, FieldMask: { fields: { paths: { rule: "repeated", type: "string", id: 1 } } } } }, firestore: { nested: { v1beta1: { options: { csharp_namespace: "Google.Cloud.Firestore.V1Beta1", go_package: "google.golang.org/genproto/googleapis/firestore/v1beta1;firestore", java_multiple_files: true, java_outer_classname: "WriteProto", java_package: "com.google.firestore.v1beta1", objc_class_prefix: "GCFS", php_namespace: "Google\\Cloud\\Firestore\\V1beta1", ruby_package: "Google::Cloud::Firestore::V1beta1" }, nested: { DocumentMask: { fields: { fieldPaths: { rule: "repeated", type: "string", id: 1 } } }, Precondition: { oneofs: { conditionType: { oneof: ["exists", "updateTime"] } }, fields: { exists: { type: "bool", id: 1 }, updateTime: { type: "google.protobuf.Timestamp", id: 2 } } }, TransactionOptions: { oneofs: { mode: { oneof: ["readOnly", "readWrite"] } }, fields: { readOnly: { type: "ReadOnly", id: 2 }, readWrite: { type: "ReadWrite", id: 3 } }, nested: { ReadWrite: { fields: { retryTransaction: { type: "bytes", id: 1 } } }, ReadOnly: { oneofs: { consistencySelector: { oneof: ["readTime"] } }, fields: { readTime: { type: "google.protobuf.Timestamp", id: 2 } } } } }, Document: { fields: { name: { type: "string", id: 1 }, fields: { keyType: "string", type: "Value", id: 2 }, createTime: { type: "google.protobuf.Timestamp", id: 3 }, updateTime: { type: "google.protobuf.Timestamp", id: 4 } } }, Value: { oneofs: { valueType: { oneof: ["nullValue", "booleanValue", "integerValue", "doubleValue", "timestampValue", "stringValue", "bytesValue", "referenceValue", "geoPointValue", "arrayValue", "mapValue"] } }, fields: { nullValue: { type: "google.protobuf.NullValue", id: 11 }, booleanValue: { type: "bool", id: 1 }, integerValue: { type: "int64", id: 2 }, doubleValue: { type: "double", id: 3 }, timestampValue: { type: "google.protobuf.Timestamp", id: 10 }, stringValue: { type: "string", id: 17 }, bytesValue: { type: "bytes", id: 18 }, referenceValue: { type: "string", id: 5 }, geoPointValue: { type: "google.type.LatLng", id: 8 }, arrayValue: { type: "ArrayValue", id: 9 }, mapValue: { type: "MapValue", id: 6 } } }, ArrayValue: { fields: { values: { rule: "repeated", type: "Value", id: 1 } } }, MapValue: { fields: { fields: { keyType: "string", type: "Value", id: 1 } } }, Firestore: { options: { "(google.api.default_host)": "firestore.googleapis.com", "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore" }, methods: { GetDocument: { requestType: "GetDocumentRequest", responseType: "Document", options: { "(google.api.http).get": "/v1beta1/{name=projects/*/databases/*/documents/*/**}" }, parsedOptions: [{ "(google.api.http)": { get: "/v1beta1/{name=projects/*/databases/*/documents/*/**}" } }] }, ListDocuments: { requestType: "ListDocumentsRequest", responseType: "ListDocumentsResponse", options: { "(google.api.http).get": "/v1beta1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}" }, parsedOptions: [{ "(google.api.http)": { get: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}" } }] }, UpdateDocument: { requestType: "UpdateDocumentRequest", responseType: "Document", options: { "(google.api.http).patch": "/v1beta1/{document.name=projects/*/databases/*/documents/*/**}", "(google.api.http).body": "document", "(google.api.method_signature)": "document,update_mask" }, parsedOptions: [{ "(google.api.http)": { patch: "/v1beta1/{document.name=projects/*/databases/*/documents/*/**}", body: "document" } }, { "(google.api.method_signature)": "document,update_mask" }] }, DeleteDocument: { requestType: "DeleteDocumentRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).delete": "/v1beta1/{name=projects/*/databases/*/documents/*/**}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { delete: "/v1beta1/{name=projects/*/databases/*/documents/*/**}" } }, { "(google.api.method_signature)": "name" }] }, BatchGetDocuments: { requestType: "BatchGetDocumentsRequest", responseType: "BatchGetDocumentsResponse", responseStream: true, options: { "(google.api.http).post": "/v1beta1/{database=projects/*/databases/*}/documents:batchGet", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{database=projects/*/databases/*}/documents:batchGet", body: "*" } }] }, BeginTransaction: { requestType: "BeginTransactionRequest", responseType: "BeginTransactionResponse", options: { "(google.api.http).post": "/v1beta1/{database=projects/*/databases/*}/documents:beginTransaction", "(google.api.http).body": "*", "(google.api.method_signature)": "database" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{database=projects/*/databases/*}/documents:beginTransaction", body: "*" } }, { "(google.api.method_signature)": "database" }] }, Commit: { requestType: "CommitRequest", responseType: "CommitResponse", options: { "(google.api.http).post": "/v1beta1/{database=projects/*/databases/*}/documents:commit", "(google.api.http).body": "*", "(google.api.method_signature)": "database,writes" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{database=projects/*/databases/*}/documents:commit", body: "*" } }, { "(google.api.method_signature)": "database,writes" }] }, Rollback: { requestType: "RollbackRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).post": "/v1beta1/{database=projects/*/databases/*}/documents:rollback", "(google.api.http).body": "*", "(google.api.method_signature)": "database,transaction" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{database=projects/*/databases/*}/documents:rollback", body: "*" } }, { "(google.api.method_signature)": "database,transaction" }] }, RunQuery: { requestType: "RunQueryRequest", responseType: "RunQueryResponse", responseStream: true, options: { "(google.api.http).post": "/v1beta1/{parent=projects/*/databases/*/documents}:runQuery", "(google.api.http).body": "*", "(google.api.http).additional_bindings.post": "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:runQuery", "(google.api.http).additional_bindings.body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{parent=projects/*/databases/*/documents}:runQuery", body: "*", additional_bindings: { post: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:runQuery", body: "*" } } }] }, PartitionQuery: { requestType: "PartitionQueryRequest", responseType: "PartitionQueryResponse", options: { "(google.api.http).post": "/v1beta1/{parent=projects/*/databases/*/documents}:partitionQuery", "(google.api.http).body": "*", "(google.api.http).additional_bindings.post": "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery", "(google.api.http).additional_bindings.body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{parent=projects/*/databases/*/documents}:partitionQuery", body: "*", additional_bindings: { post: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery", body: "*" } } }] }, Write: { requestType: "WriteRequest", requestStream: true, responseType: "WriteResponse", responseStream: true, options: { "(google.api.http).post": "/v1beta1/{database=projects/*/databases/*}/documents:write", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{database=projects/*/databases/*}/documents:write", body: "*" } }] }, Listen: { requestType: "ListenRequest", requestStream: true, responseType: "ListenResponse", responseStream: true, options: { "(google.api.http).post": "/v1beta1/{database=projects/*/databases/*}/documents:listen", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{database=projects/*/databases/*}/documents:listen", body: "*" } }] }, ListCollectionIds: { requestType: "ListCollectionIdsRequest", responseType: "ListCollectionIdsResponse", options: { "(google.api.http).post": "/v1beta1/{parent=projects/*/databases/*/documents}:listCollectionIds", "(google.api.http).body": "*", "(google.api.http).additional_bindings.post": "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds", "(google.api.http).additional_bindings.body": "*", "(google.api.method_signature)": "parent" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{parent=projects/*/databases/*/documents}:listCollectionIds", body: "*", additional_bindings: { post: "/v1beta1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds", body: "*" } } }, { "(google.api.method_signature)": "parent" }] }, BatchWrite: { requestType: "BatchWriteRequest", responseType: "BatchWriteResponse", options: { "(google.api.http).post": "/v1beta1/{database=projects/*/databases/*}/documents:batchWrite", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{database=projects/*/databases/*}/documents:batchWrite", body: "*" } }] }, CreateDocument: { requestType: "CreateDocumentRequest", responseType: "Document", options: { "(google.api.http).post": "/v1beta1/{parent=projects/*/databases/*/documents/**}/{collection_id}", "(google.api.http).body": "document" }, parsedOptions: [{ "(google.api.http)": { post: "/v1beta1/{parent=projects/*/databases/*/documents/**}/{collection_id}", body: "document" } }] } } }, GetDocumentRequest: { oneofs: { consistencySelector: { oneof: ["transaction", "readTime"] } }, fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, mask: { type: "DocumentMask", id: 2 }, transaction: { type: "bytes", id: 3 }, readTime: { type: "google.protobuf.Timestamp", id: 5 } } }, ListDocumentsRequest: { oneofs: { consistencySelector: { oneof: ["transaction", "readTime"] } }, fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, collectionId: { type: "string", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } }, pageSize: { type: "int32", id: 3 }, pageToken: { type: "string", id: 4 }, orderBy: { type: "string", id: 6 }, mask: { type: "DocumentMask", id: 7 }, transaction: { type: "bytes", id: 8 }, readTime: { type: "google.protobuf.Timestamp", id: 10 }, showMissing: { type: "bool", id: 12 } } }, ListDocumentsResponse: { fields: { documents: { rule: "repeated", type: "Document", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, CreateDocumentRequest: { fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, collectionId: { type: "string", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } }, documentId: { type: "string", id: 3 }, document: { type: "Document", id: 4, options: { "(google.api.field_behavior)": "REQUIRED" } }, mask: { type: "DocumentMask", id: 5 } } }, UpdateDocumentRequest: { fields: { document: { type: "Document", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, updateMask: { type: "DocumentMask", id: 2 }, mask: { type: "DocumentMask", id: 3 }, currentDocument: { type: "Precondition", id: 4 } } }, DeleteDocumentRequest: { fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, currentDocument: { type: "Precondition", id: 2 } } }, BatchGetDocumentsRequest: { oneofs: { consistencySelector: { oneof: ["transaction", "newTransaction", "readTime"] } }, fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, documents: { rule: "repeated", type: "string", id: 2 }, mask: { type: "DocumentMask", id: 3 }, transaction: { type: "bytes", id: 4 }, newTransaction: { type: "TransactionOptions", id: 5 }, readTime: { type: "google.protobuf.Timestamp", id: 7 } } }, BatchGetDocumentsResponse: { oneofs: { result: { oneof: ["found", "missing"] } }, fields: { found: { type: "Document", id: 1 }, missing: { type: "string", id: 2 }, transaction: { type: "bytes", id: 3 }, readTime: { type: "google.protobuf.Timestamp", id: 4 } } }, BeginTransactionRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, options: { type: "TransactionOptions", id: 2 } } }, BeginTransactionResponse: { fields: { transaction: { type: "bytes", id: 1 } } }, CommitRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, writes: { rule: "repeated", type: "Write", id: 2 }, transaction: { type: "bytes", id: 3 } } }, CommitResponse: { fields: { writeResults: { rule: "repeated", type: "WriteResult", id: 1 }, commitTime: { type: "google.protobuf.Timestamp", id: 2 } } }, RollbackRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, transaction: { type: "bytes", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } } } }, RunQueryRequest: { oneofs: { queryType: { oneof: ["structuredQuery"] }, consistencySelector: { oneof: ["transaction", "newTransaction", "readTime"] } }, fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, structuredQuery: { type: "StructuredQuery", id: 2 }, transaction: { type: "bytes", id: 5 }, newTransaction: { type: "TransactionOptions", id: 6 }, readTime: { type: "google.protobuf.Timestamp", id: 7 } } }, RunQueryResponse: { fields: { transaction: { type: "bytes", id: 2 }, document: { type: "Document", id: 1 }, readTime: { type: "google.protobuf.Timestamp", id: 3 }, skippedResults: { type: "int32", id: 4 } } }, PartitionQueryRequest: { oneofs: { queryType: { oneof: ["structuredQuery"] } }, fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, structuredQuery: { type: "StructuredQuery", id: 2 }, partitionCount: { type: "int64", id: 3 }, pageToken: { type: "string", id: 4 }, pageSize: { type: "int32", id: 5 } } }, PartitionQueryResponse: { fields: { partitions: { rule: "repeated", type: "Cursor", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, WriteRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, streamId: { type: "string", id: 2 }, writes: { rule: "repeated", type: "Write", id: 3 }, streamToken: { type: "bytes", id: 4 }, labels: { keyType: "string", type: "string", id: 5 } } }, WriteResponse: { fields: { streamId: { type: "string", id: 1 }, streamToken: { type: "bytes", id: 2 }, writeResults: { rule: "repeated", type: "WriteResult", id: 3 }, commitTime: { type: "google.protobuf.Timestamp", id: 4 } } }, ListenRequest: { oneofs: { targetChange: { oneof: ["addTarget", "removeTarget"] } }, fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, addTarget: { type: "Target", id: 2 }, removeTarget: { type: "int32", id: 3 }, labels: { keyType: "string", type: "string", id: 4 } } }, ListenResponse: { oneofs: { responseType: { oneof: ["targetChange", "documentChange", "documentDelete", "documentRemove", "filter"] } }, fields: { targetChange: { type: "TargetChange", id: 2 }, documentChange: { type: "DocumentChange", id: 3 }, documentDelete: { type: "DocumentDelete", id: 4 }, documentRemove: { type: "DocumentRemove", id: 6 }, filter: { type: "ExistenceFilter", id: 5 } } }, Target: { oneofs: { targetType: { oneof: ["query", "documents"] }, resumeType: { oneof: ["resumeToken", "readTime"] } }, fields: { query: { type: "QueryTarget", id: 2 }, documents: { type: "DocumentsTarget", id: 3 }, resumeToken: { type: "bytes", id: 4 }, readTime: { type: "google.protobuf.Timestamp", id: 11 }, targetId: { type: "int32", id: 5 }, once: { type: "bool", id: 6 } }, nested: { DocumentsTarget: { fields: { documents: { rule: "repeated", type: "string", id: 2 } } }, QueryTarget: { oneofs: { queryType: { oneof: ["structuredQuery"] } }, fields: { parent: { type: "string", id: 1 }, structuredQuery: { type: "StructuredQuery", id: 2 } } } } }, TargetChange: { fields: { targetChangeType: { type: "TargetChangeType", id: 1 }, targetIds: { rule: "repeated", type: "int32", id: 2 }, cause: { type: "google.rpc.Status", id: 3 }, resumeToken: { type: "bytes", id: 4 }, readTime: { type: "google.protobuf.Timestamp", id: 6 } }, nested: { TargetChangeType: { values: { NO_CHANGE: 0, ADD: 1, REMOVE: 2, CURRENT: 3, RESET: 4 } } } }, ListCollectionIdsRequest: { fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, pageSize: { type: "int32", id: 2 }, pageToken: { type: "string", id: 3 } } }, ListCollectionIdsResponse: { fields: { collectionIds: { rule: "repeated", type: "string", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, BatchWriteRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, writes: { rule: "repeated", type: "Write", id: 2 }, labels: { keyType: "string", type: "string", id: 3 } } }, BatchWriteResponse: { fields: { writeResults: { rule: "repeated", type: "WriteResult", id: 1 }, status: { rule: "repeated", type: "google.rpc.Status", id: 2 } } }, StructuredQuery: { fields: { select: { type: "Projection", id: 1 }, from: { rule: "repeated", type: "CollectionSelector", id: 2 }, where: { type: "Filter", id: 3 }, orderBy: { rule: "repeated", type: "Order", id: 4 }, startAt: { type: "Cursor", id: 7 }, endAt: { type: "Cursor", id: 8 }, offset: { type: "int32", id: 6 }, limit: { type: "google.protobuf.Int32Value", id: 5 } }, nested: { CollectionSelector: { fields: { collectionId: { type: "string", id: 2 }, allDescendants: { type: "bool", id: 3 } } }, Filter: { oneofs: { filterType: { oneof: ["compositeFilter", "fieldFilter", "unaryFilter"] } }, fields: { compositeFilter: { type: "CompositeFilter", id: 1 }, fieldFilter: { type: "FieldFilter", id: 2 }, unaryFilter: { type: "UnaryFilter", id: 3 } } }, CompositeFilter: { fields: { op: { type: "Operator", id: 1 }, filters: { rule: "repeated", type: "Filter", id: 2 } }, nested: { Operator: { values: { OPERATOR_UNSPECIFIED: 0, AND: 1 } } } }, FieldFilter: { fields: { field: { type: "FieldReference", id: 1 }, op: { type: "Operator", id: 2 }, value: { type: "Value", id: 3 } }, nested: { Operator: { values: { OPERATOR_UNSPECIFIED: 0, LESS_THAN: 1, LESS_THAN_OR_EQUAL: 2, GREATER_THAN: 3, GREATER_THAN_OR_EQUAL: 4, EQUAL: 5, NOT_EQUAL: 6, ARRAY_CONTAINS: 7, IN: 8, ARRAY_CONTAINS_ANY: 9, NOT_IN: 10 } } } }, UnaryFilter: { oneofs: { operandType: { oneof: ["field"] } }, fields: { op: { type: "Operator", id: 1 }, field: { type: "FieldReference", id: 2 } }, nested: { Operator: { values: { OPERATOR_UNSPECIFIED: 0, IS_NAN: 2, IS_NULL: 3, IS_NOT_NAN: 4, IS_NOT_NULL: 5 } } } }, FieldReference: { fields: { fieldPath: { type: "string", id: 2 } } }, Order: { fields: { field: { type: "FieldReference", id: 1 }, direction: { type: "Direction", id: 2 } } }, Projection: { fields: { fields: { rule: "repeated", type: "FieldReference", id: 2 } } }, Direction: { values: { DIRECTION_UNSPECIFIED: 0, ASCENDING: 1, DESCENDING: 2 } } } }, Cursor: { fields: { values: { rule: "repeated", type: "Value", id: 1 }, before: { type: "bool", id: 2 } } }, Write: { oneofs: { operation: { oneof: ["update", "delete", "transform"] } }, fields: { update: { type: "Document", id: 1 }, delete: { type: "string", id: 2 }, transform: { type: "DocumentTransform", id: 6 }, updateMask: { type: "DocumentMask", id: 3 }, updateTransforms: { rule: "repeated", type: "DocumentTransform.FieldTransform", id: 7 }, currentDocument: { type: "Precondition", id: 4 } } }, DocumentTransform: { fields: { document: { type: "string", id: 1 }, fieldTransforms: { rule: "repeated", type: "FieldTransform", id: 2 } }, nested: { FieldTransform: { oneofs: { transformType: { oneof: ["setToServerValue", "increment", "maximum", "minimum", "appendMissingElements", "removeAllFromArray"] } }, fields: { fieldPath: { type: "string", id: 1 }, setToServerValue: { type: "ServerValue", id: 2 }, increment: { type: "Value", id: 3 }, maximum: { type: "Value", id: 4 }, minimum: { type: "Value", id: 5 }, appendMissingElements: { type: "ArrayValue", id: 6 }, removeAllFromArray: { type: "ArrayValue", id: 7 } }, nested: { ServerValue: { values: { SERVER_VALUE_UNSPECIFIED: 0, REQUEST_TIME: 1 } } } } } }, WriteResult: { fields: { updateTime: { type: "google.protobuf.Timestamp", id: 1 }, transformResults: { rule: "repeated", type: "Value", id: 2 } } }, DocumentChange: { fields: { document: { type: "Document", id: 1 }, targetIds: { rule: "repeated", type: "int32", id: 5 }, removedTargetIds: { rule: "repeated", type: "int32", id: 6 } } }, DocumentDelete: { fields: { document: { type: "string", id: 1 }, removedTargetIds: { rule: "repeated", type: "int32", id: 6 }, readTime: { type: "google.protobuf.Timestamp", id: 4 } } }, DocumentRemove: { fields: { document: { type: "string", id: 1 }, removedTargetIds: { rule: "repeated", type: "int32", id: 2 }, readTime: { type: "google.protobuf.Timestamp", id: 4 } } }, ExistenceFilter: { fields: { targetId: { type: "int32", id: 1 }, count: { type: "int32", id: 2 } } } } } } }, type: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/type/latlng;latlng", java_multiple_files: true, java_outer_classname: "LatLngProto", java_package: "com.google.type", objc_class_prefix: "GTP" }, nested: { LatLng: { fields: { latitude: { type: "double", id: 1 }, longitude: { type: "double", id: 2 } } } } }, rpc: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/rpc/status;status", java_multiple_files: true, java_outer_classname: "StatusProto", java_package: "com.google.rpc", objc_class_prefix: "RPC" }, nested: { Status: { fields: { code: { type: "int32", id: 1 }, message: { type: "string", id: 2 }, details: { rule: "repeated", type: "google.protobuf.Any", id: 3 } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ResourceProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" }, fieldBehavior: { rule: "repeated", type: "google.api.FieldBehavior", id: 1052, extend: "google.protobuf.FieldOptions" }, FieldBehavior: { values: { FIELD_BEHAVIOR_UNSPECIFIED: 0, OPTIONAL: 1, REQUIRED: 2, OUTPUT_ONLY: 3, INPUT_ONLY: 4, IMMUTABLE: 5, UNORDERED_LIST: 6, NON_EMPTY_DEFAULT: 7 } }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, resourceReference: { type: "google.api.ResourceReference", id: 1055, extend: "google.protobuf.FieldOptions" }, resourceDefinition: { rule: "repeated", type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.FileOptions" }, resource: { type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.MessageOptions" }, ResourceDescriptor: { fields: { type: { type: "string", id: 1 }, pattern: { rule: "repeated", type: "string", id: 2 }, nameField: { type: "string", id: 3 }, history: { type: "History", id: 4 }, plural: { type: "string", id: 5 }, singular: { type: "string", id: 6 }, style: { rule: "repeated", type: "Style", id: 10 } }, nested: { History: { values: { HISTORY_UNSPECIFIED: 0, ORIGINALLY_SINGLE_PATTERN: 1, FUTURE_MULTI_PATTERN: 2 } }, Style: { values: { STYLE_UNSPECIFIED: 0, DECLARATIVE_FRIENDLY: 1 } } } }, ResourceReference: { fields: { type: { type: "string", id: 1 }, childType: { type: "string", id: 2 } } } } } } } } };
  }
});

// node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client_config.json
var require_firestore_client_config2 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.firestore.v1beta1.Firestore": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            GetDocument: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            ListDocuments: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            UpdateDocument: {
              timeout_millis: 6e4,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            DeleteDocument: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            BatchGetDocuments: {
              timeout_millis: 3e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            BeginTransaction: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            Commit: {
              timeout_millis: 6e4,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            Rollback: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            RunQuery: {
              timeout_millis: 3e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            PartitionQuery: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            Write: {
              timeout_millis: 864e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            Listen: {
              timeout_millis: 864e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            ListCollectionIds: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            BatchWrite: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            CreateDocument: {
              timeout_millis: 6e4,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js
var require_firestore_client = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FirestoreClient = void 0;
    var stream_1 = require_stream();
    var jsonProtos = require_v1beta1();
    var gapicConfig = require_firestore_client_config2();
    var version = require_package4().version;
    var FirestoreClient = class {
      constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        if (!gaxInstance) {
          gaxInstance = require_fallback();
        }
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        this._opts = opts;
        this.auth = this._gaxGrpc.auth;
        this.auth.useJWTAccessWithScope = true;
        this.auth.defaultServicePath = staticMembers.servicePath;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        } else if (opts.fallback === "rest") {
          clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        this.descriptors.page = {
          listDocuments: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "documents"),
          partitionQuery: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "partitions"),
          listCollectionIds: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "collectionIds")
        };
        this.descriptors.stream = {
          batchGetDocuments: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, opts.fallback === "rest"),
          runQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, opts.fallback === "rest"),
          write: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === "rest"),
          listen: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === "rest")
        };
        this._defaults = this._gaxGrpc.constructSettings("google.firestore.v1beta1.Firestore", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = this._gaxModule.warn;
      }
      initialize() {
        if (this.firestoreStub) {
          return this.firestoreStub;
        }
        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.firestore.v1beta1.Firestore") : this._protos.google.firestore.v1beta1.Firestore, this._opts, this._providedCustomServicePath);
        const firestoreStubMethods = [
          "getDocument",
          "listDocuments",
          "updateDocument",
          "deleteDocument",
          "batchGetDocuments",
          "beginTransaction",
          "commit",
          "rollback",
          "runQuery",
          "partitionQuery",
          "write",
          "listen",
          "listCollectionIds",
          "batchWrite",
          "createDocument"
        ];
        for (const methodName of firestoreStubMethods) {
          const callPromise = this.firestoreStub.then((stub) => (...args) => {
            if (this._terminated) {
              if (methodName in this.descriptors.stream) {
                const stream = new stream_1.PassThrough();
                setImmediate(() => {
                  stream.emit("error", new this._gaxModule.GoogleError("The client has already been closed."));
                });
                return stream;
              }
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.page[methodName] || this.descriptors.stream[methodName] || void 0;
          const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.firestoreStub;
      }
      static get servicePath() {
        return "firestore.googleapis.com";
      }
      static get apiEndpoint() {
        return "firestore.googleapis.com";
      }
      static get port() {
        return 443;
      }
      static get scopes() {
        return [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/datastore"
        ];
      }
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      getDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.getDocument(request, options, callback);
      }
      updateDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          "document.name": (_a = request.document.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.updateDocument(request, options, callback);
      }
      deleteDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.deleteDocument(request, options, callback);
      }
      beginTransaction(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.beginTransaction(request, options, callback);
      }
      commit(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.commit(request, options, callback);
      }
      rollback(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.rollback(request, options, callback);
      }
      batchWrite(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.batchWrite(request, options, callback);
      }
      createDocument(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : "",
          collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ""
        });
        this.initialize();
        return this.innerApiCalls.createDocument(request, options, callback);
      }
      batchGetDocuments(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.batchGetDocuments(request, options);
      }
      runQuery(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.runQuery(request, options);
      }
      write(options) {
        this.initialize();
        return this.innerApiCalls.write(null, options);
      }
      listen(options) {
        this.initialize();
        return this.innerApiCalls.listen(null, options);
      }
      listDocuments(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : "",
          collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ""
        });
        this.initialize();
        return this.innerApiCalls.listDocuments(request, options, callback);
      }
      listDocumentsStream(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : "",
          collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ""
        });
        const defaultCallSettings = this._defaults["listDocuments"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);
      }
      listDocumentsAsync(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : "",
          collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ""
        });
        const defaultCallSettings = this._defaults["listDocuments"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls["listDocuments"], request, callSettings);
      }
      partitionQuery(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.partitionQuery(request, options, callback);
      }
      partitionQueryStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["partitionQuery"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);
      }
      partitionQueryAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["partitionQuery"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls["partitionQuery"], request, callSettings);
      }
      listCollectionIds(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.listCollectionIds(request, options, callback);
      }
      listCollectionIdsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listCollectionIds"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);
      }
      listCollectionIdsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listCollectionIds"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls["listCollectionIds"], request, callSettings);
      }
      close() {
        if (this.firestoreStub && !this._terminated) {
          return this.firestoreStub.then((stub) => {
            this._terminated = true;
            stub.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.FirestoreClient = FirestoreClient;
  }
});

// node_modules/@google-cloud/firestore/build/src/v1beta1/index.js
var require_v1beta12 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/v1beta1/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FirestoreClient = void 0;
    var firestore_client_1 = require_firestore_client();
    Object.defineProperty(exports2, "FirestoreClient", { enumerable: true, get: function() {
      return firestore_client_1.FirestoreClient;
    } });
    var existingExports = module2.exports;
    module2.exports = firestore_client_1.FirestoreClient;
    module2.exports = Object.assign(module2.exports, existingExports);
  }
});

// node_modules/@google-cloud/firestore/build/protos/admin_v1.json
var require_admin_v1 = __commonJS({
  "node_modules/@google-cloud/firestore/build/protos/admin_v1.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { firestore: { nested: { admin: { nested: { v1: { options: { csharp_namespace: "Google.Cloud.Firestore.Admin.V1", go_package: "google.golang.org/genproto/googleapis/firestore/admin/v1;admin", java_multiple_files: true, java_outer_classname: "OperationProto", java_package: "com.google.firestore.admin.v1", objc_class_prefix: "GCFS", php_namespace: "Google\\Cloud\\Firestore\\Admin\\V1", ruby_package: "Google::Cloud::Firestore::Admin::V1", "(google.api.resource_definition).type": "firestore.googleapis.com/CollectionGroup", "(google.api.resource_definition).pattern": "projects/{project}/databases/{database}/collectionGroups/{collection}" }, nested: { Database: { options: { "(google.api.resource).type": "firestore.googleapis.com/Database", "(google.api.resource).pattern": "projects/{project}/databases/{database}", "(google.api.resource).style": "DECLARATIVE_FRIENDLY" }, fields: { name: { type: "string", id: 1 }, locationId: { type: "string", id: 9 }, type: { type: "DatabaseType", id: 10 }, concurrencyMode: { type: "ConcurrencyMode", id: 15 }, etag: { type: "string", id: 99 } }, nested: { DatabaseType: { values: { DATABASE_TYPE_UNSPECIFIED: 0, FIRESTORE_NATIVE: 1, DATASTORE_MODE: 2 } }, ConcurrencyMode: { values: { CONCURRENCY_MODE_UNSPECIFIED: 0, OPTIMISTIC: 1, PESSIMISTIC: 2, OPTIMISTIC_WITH_ENTITY_GROUPS: 3 } } } }, Field: { options: { "(google.api.resource).type": "firestore.googleapis.com/Field", "(google.api.resource).pattern": "projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}" }, fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, indexConfig: { type: "IndexConfig", id: 2 } }, nested: { IndexConfig: { fields: { indexes: { rule: "repeated", type: "Index", id: 1 }, usesAncestorConfig: { type: "bool", id: 2 }, ancestorField: { type: "string", id: 3 }, reverting: { type: "bool", id: 4 } } } } }, FirestoreAdmin: { options: { "(google.api.default_host)": "firestore.googleapis.com", "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore" }, methods: { CreateIndex: { requestType: "CreateIndexRequest", responseType: "google.longrunning.Operation", options: { "(google.api.http).post": "/v1/{parent=projects/*/databases/*/collectionGroups/*}/indexes", "(google.api.http).body": "index", "(google.api.method_signature)": "parent,index", "(google.longrunning.operation_info).response_type": "Index", "(google.longrunning.operation_info).metadata_type": "IndexOperationMetadata" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{parent=projects/*/databases/*/collectionGroups/*}/indexes", body: "index" } }, { "(google.api.method_signature)": "parent,index" }, { "(google.longrunning.operation_info)": { response_type: "Index", metadata_type: "IndexOperationMetadata" } }] }, ListIndexes: { requestType: "ListIndexesRequest", responseType: "ListIndexesResponse", options: { "(google.api.http).get": "/v1/{parent=projects/*/databases/*/collectionGroups/*}/indexes", "(google.api.method_signature)": "parent" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{parent=projects/*/databases/*/collectionGroups/*}/indexes" } }, { "(google.api.method_signature)": "parent" }] }, GetIndex: { requestType: "GetIndexRequest", responseType: "Index", options: { "(google.api.http).get": "/v1/{name=projects/*/databases/*/collectionGroups/*/indexes/*}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=projects/*/databases/*/collectionGroups/*/indexes/*}" } }, { "(google.api.method_signature)": "name" }] }, DeleteIndex: { requestType: "DeleteIndexRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).delete": "/v1/{name=projects/*/databases/*/collectionGroups/*/indexes/*}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { delete: "/v1/{name=projects/*/databases/*/collectionGroups/*/indexes/*}" } }, { "(google.api.method_signature)": "name" }] }, GetField: { requestType: "GetFieldRequest", responseType: "Field", options: { "(google.api.http).get": "/v1/{name=projects/*/databases/*/collectionGroups/*/fields/*}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=projects/*/databases/*/collectionGroups/*/fields/*}" } }, { "(google.api.method_signature)": "name" }] }, UpdateField: { requestType: "UpdateFieldRequest", responseType: "google.longrunning.Operation", options: { "(google.api.http).patch": "/v1/{field.name=projects/*/databases/*/collectionGroups/*/fields/*}", "(google.api.http).body": "field", "(google.api.method_signature)": "field", "(google.longrunning.operation_info).response_type": "Field", "(google.longrunning.operation_info).metadata_type": "FieldOperationMetadata" }, parsedOptions: [{ "(google.api.http)": { patch: "/v1/{field.name=projects/*/databases/*/collectionGroups/*/fields/*}", body: "field" } }, { "(google.api.method_signature)": "field" }, { "(google.longrunning.operation_info)": { response_type: "Field", metadata_type: "FieldOperationMetadata" } }] }, ListFields: { requestType: "ListFieldsRequest", responseType: "ListFieldsResponse", options: { "(google.api.http).get": "/v1/{parent=projects/*/databases/*/collectionGroups/*}/fields", "(google.api.method_signature)": "parent" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{parent=projects/*/databases/*/collectionGroups/*}/fields" } }, { "(google.api.method_signature)": "parent" }] }, ExportDocuments: { requestType: "ExportDocumentsRequest", responseType: "google.longrunning.Operation", options: { "(google.api.http).post": "/v1/{name=projects/*/databases/*}:exportDocuments", "(google.api.http).body": "*", "(google.api.method_signature)": "name", "(google.longrunning.operation_info).response_type": "ExportDocumentsResponse", "(google.longrunning.operation_info).metadata_type": "ExportDocumentsMetadata" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{name=projects/*/databases/*}:exportDocuments", body: "*" } }, { "(google.api.method_signature)": "name" }, { "(google.longrunning.operation_info)": { response_type: "ExportDocumentsResponse", metadata_type: "ExportDocumentsMetadata" } }] }, ImportDocuments: { requestType: "ImportDocumentsRequest", responseType: "google.longrunning.Operation", options: { "(google.api.http).post": "/v1/{name=projects/*/databases/*}:importDocuments", "(google.api.http).body": "*", "(google.api.method_signature)": "name", "(google.longrunning.operation_info).response_type": "google.protobuf.Empty", "(google.longrunning.operation_info).metadata_type": "ImportDocumentsMetadata" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{name=projects/*/databases/*}:importDocuments", body: "*" } }, { "(google.api.method_signature)": "name" }, { "(google.longrunning.operation_info)": { response_type: "google.protobuf.Empty", metadata_type: "ImportDocumentsMetadata" } }] }, GetDatabase: { requestType: "GetDatabaseRequest", responseType: "Database", options: { "(google.api.http).get": "/v1/{name=projects/*/databases/*}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=projects/*/databases/*}" } }, { "(google.api.method_signature)": "name" }] }, ListDatabases: { requestType: "ListDatabasesRequest", responseType: "ListDatabasesResponse", options: { "(google.api.http).get": "/v1/{parent=projects/*}/databases", "(google.api.method_signature)": "parent" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{parent=projects/*}/databases" } }, { "(google.api.method_signature)": "parent" }] }, UpdateDatabase: { requestType: "UpdateDatabaseRequest", responseType: "google.longrunning.Operation", options: { "(google.api.http).patch": "/v1/{database.name=projects/*/databases/*}", "(google.api.http).body": "database", "(google.api.method_signature)": "database,update_mask", "(google.longrunning.operation_info).response_type": "Database", "(google.longrunning.operation_info).metadata_type": "UpdateDatabaseMetadata" }, parsedOptions: [{ "(google.api.http)": { patch: "/v1/{database.name=projects/*/databases/*}", body: "database" } }, { "(google.api.method_signature)": "database,update_mask" }, { "(google.longrunning.operation_info)": { response_type: "Database", metadata_type: "UpdateDatabaseMetadata" } }] } } }, ListDatabasesRequest: { fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).child_type": "firestore.googleapis.com/Database" } } } }, ListDatabasesResponse: { fields: { databases: { rule: "repeated", type: "Database", id: 1 } } }, GetDatabaseRequest: { fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "firestore.googleapis.com/Database" } } } }, UpdateDatabaseRequest: { fields: { database: { type: "Database", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, updateMask: { type: "google.protobuf.FieldMask", id: 2 } } }, UpdateDatabaseMetadata: { fields: {} }, CreateIndexRequest: { fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "firestore.googleapis.com/CollectionGroup" } }, index: { type: "Index", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } } } }, ListIndexesRequest: { fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "firestore.googleapis.com/CollectionGroup" } }, filter: { type: "string", id: 2 }, pageSize: { type: "int32", id: 3 }, pageToken: { type: "string", id: 4 } } }, ListIndexesResponse: { fields: { indexes: { rule: "repeated", type: "Index", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, GetIndexRequest: { fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "firestore.googleapis.com/Index" } } } }, DeleteIndexRequest: { fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "firestore.googleapis.com/Index" } } } }, UpdateFieldRequest: { fields: { field: { type: "Field", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, updateMask: { type: "google.protobuf.FieldMask", id: 2 } } }, GetFieldRequest: { fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "firestore.googleapis.com/Field" } } } }, ListFieldsRequest: { fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "firestore.googleapis.com/CollectionGroup" } }, filter: { type: "string", id: 2 }, pageSize: { type: "int32", id: 3 }, pageToken: { type: "string", id: 4 } } }, ListFieldsResponse: { fields: { fields: { rule: "repeated", type: "Field", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, ExportDocumentsRequest: { fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "firestore.googleapis.com/Database" } }, collectionIds: { rule: "repeated", type: "string", id: 2 }, outputUriPrefix: { type: "string", id: 3 } } }, ImportDocumentsRequest: { fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "firestore.googleapis.com/Database" } }, collectionIds: { rule: "repeated", type: "string", id: 2 }, inputUriPrefix: { type: "string", id: 3 } } }, Index: { options: { "(google.api.resource).type": "firestore.googleapis.com/Index", "(google.api.resource).pattern": "projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}" }, fields: { name: { type: "string", id: 1 }, queryScope: { type: "QueryScope", id: 2 }, fields: { rule: "repeated", type: "IndexField", id: 3 }, state: { type: "State", id: 4 } }, nested: { IndexField: { oneofs: { valueMode: { oneof: ["order", "arrayConfig"] } }, fields: { fieldPath: { type: "string", id: 1 }, order: { type: "Order", id: 2 }, arrayConfig: { type: "ArrayConfig", id: 3 } }, nested: { Order: { values: { ORDER_UNSPECIFIED: 0, ASCENDING: 1, DESCENDING: 2 } }, ArrayConfig: { values: { ARRAY_CONFIG_UNSPECIFIED: 0, CONTAINS: 1 } } } }, QueryScope: { values: { QUERY_SCOPE_UNSPECIFIED: 0, COLLECTION: 1, COLLECTION_GROUP: 2 } }, State: { values: { STATE_UNSPECIFIED: 0, CREATING: 1, READY: 2, NEEDS_REPAIR: 3 } } } }, LocationMetadata: { fields: {} }, IndexOperationMetadata: { fields: { startTime: { type: "google.protobuf.Timestamp", id: 1 }, endTime: { type: "google.protobuf.Timestamp", id: 2 }, index: { type: "string", id: 3 }, state: { type: "OperationState", id: 4 }, progressDocuments: { type: "Progress", id: 5 }, progressBytes: { type: "Progress", id: 6 } } }, FieldOperationMetadata: { fields: { startTime: { type: "google.protobuf.Timestamp", id: 1 }, endTime: { type: "google.protobuf.Timestamp", id: 2 }, field: { type: "string", id: 3 }, indexConfigDeltas: { rule: "repeated", type: "IndexConfigDelta", id: 4 }, state: { type: "OperationState", id: 5 }, progressDocuments: { type: "Progress", id: 6 }, progressBytes: { type: "Progress", id: 7 } }, nested: { IndexConfigDelta: { fields: { changeType: { type: "ChangeType", id: 1 }, index: { type: "Index", id: 2 } }, nested: { ChangeType: { values: { CHANGE_TYPE_UNSPECIFIED: 0, ADD: 1, REMOVE: 2 } } } } } }, ExportDocumentsMetadata: { fields: { startTime: { type: "google.protobuf.Timestamp", id: 1 }, endTime: { type: "google.protobuf.Timestamp", id: 2 }, operationState: { type: "OperationState", id: 3 }, progressDocuments: { type: "Progress", id: 4 }, progressBytes: { type: "Progress", id: 5 }, collectionIds: { rule: "repeated", type: "string", id: 6 }, outputUriPrefix: { type: "string", id: 7 } } }, ImportDocumentsMetadata: { fields: { startTime: { type: "google.protobuf.Timestamp", id: 1 }, endTime: { type: "google.protobuf.Timestamp", id: 2 }, operationState: { type: "OperationState", id: 3 }, progressDocuments: { type: "Progress", id: 4 }, progressBytes: { type: "Progress", id: 5 }, collectionIds: { rule: "repeated", type: "string", id: 6 }, inputUriPrefix: { type: "string", id: 7 } } }, ExportDocumentsResponse: { fields: { outputUriPrefix: { type: "string", id: 1 } } }, OperationState: { values: { OPERATION_STATE_UNSPECIFIED: 0, INITIALIZING: 1, PROCESSING: 2, CANCELLING: 3, FINALIZING: 4, SUCCESSFUL: 5, FAILED: 6, CANCELLED: 7 } }, Progress: { fields: { estimatedWork: { type: "int64", id: 1 }, completedWork: { type: "int64", id: 2 } } } } } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ResourceProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, selector: { type: "string", id: 1 }, body: { type: "string", id: 7 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" }, fieldBehavior: { rule: "repeated", type: "google.api.FieldBehavior", id: 1052, extend: "google.protobuf.FieldOptions" }, FieldBehavior: { values: { FIELD_BEHAVIOR_UNSPECIFIED: 0, OPTIONAL: 1, REQUIRED: 2, OUTPUT_ONLY: 3, INPUT_ONLY: 4, IMMUTABLE: 5, UNORDERED_LIST: 6, NON_EMPTY_DEFAULT: 7 } }, resourceReference: { type: "google.api.ResourceReference", id: 1055, extend: "google.protobuf.FieldOptions" }, resourceDefinition: { rule: "repeated", type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.FileOptions" }, resource: { type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.MessageOptions" }, ResourceDescriptor: { fields: { type: { type: "string", id: 1 }, pattern: { rule: "repeated", type: "string", id: 2 }, nameField: { type: "string", id: 3 }, history: { type: "History", id: 4 }, plural: { type: "string", id: 5 }, singular: { type: "string", id: 6 }, style: { rule: "repeated", type: "Style", id: 10 } }, nested: { History: { values: { HISTORY_UNSPECIFIED: 0, ORIGINALLY_SINGLE_PATTERN: 1, FUTURE_MULTI_PATTERN: 2 } }, Style: { values: { STYLE_UNSPECIFIED: 0, DECLARATIVE_FRIENDLY: 1 } } } }, ResourceReference: { fields: { type: { type: "string", id: 1 }, childType: { type: "string", id: 2 } } } } }, protobuf: { nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5 }, serverStreaming: { type: "bool", id: 6 } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10 }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27 }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16 }, javaGenericServices: { type: "bool", id: 17 }, pyGenericServices: { type: "bool", id: 18 }, deprecated: { type: "bool", id: 23 }, ccEnableArenas: { type: "bool", id: 31 }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1 }, noStandardDescriptorAccessor: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3 }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5 }, deprecated: { type: "bool", id: 3 }, weak: { type: "bool", id: 10 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } }, Empty: { fields: {} }, FieldMask: { fields: { paths: { rule: "repeated", type: "string", id: 1 } } }, Timestamp: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } }, Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } }, Struct: { fields: { fields: { keyType: "string", type: "Value", id: 1 } } }, Value: { oneofs: { kind: { oneof: ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"] } }, fields: { nullValue: { type: "NullValue", id: 1 }, numberValue: { type: "double", id: 2 }, stringValue: { type: "string", id: 3 }, boolValue: { type: "bool", id: 4 }, structValue: { type: "Struct", id: 5 }, listValue: { type: "ListValue", id: 6 } } }, NullValue: { values: { NULL_VALUE: 0 } }, ListValue: { fields: { values: { rule: "repeated", type: "Value", id: 1 } } }, DoubleValue: { fields: { value: { type: "double", id: 1 } } }, FloatValue: { fields: { value: { type: "float", id: 1 } } }, Int64Value: { fields: { value: { type: "int64", id: 1 } } }, UInt64Value: { fields: { value: { type: "uint64", id: 1 } } }, Int32Value: { fields: { value: { type: "int32", id: 1 } } }, UInt32Value: { fields: { value: { type: "uint32", id: 1 } } }, BoolValue: { fields: { value: { type: "bool", id: 1 } } }, StringValue: { fields: { value: { type: "string", id: 1 } } }, BytesValue: { fields: { value: { type: "bytes", id: 1 } } }, Duration: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } } } }, type: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/type/latlng;latlng", java_multiple_files: true, java_outer_classname: "LatLngProto", java_package: "com.google.type", objc_class_prefix: "GTP" }, nested: { LatLng: { fields: { latitude: { type: "double", id: 1 }, longitude: { type: "double", id: 2 } } } } }, rpc: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/rpc/status;status", java_multiple_files: true, java_outer_classname: "StatusProto", java_package: "com.google.rpc", objc_class_prefix: "RPC" }, nested: { Status: { fields: { code: { type: "int32", id: 1 }, message: { type: "string", id: 2 }, details: { rule: "repeated", type: "google.protobuf.Any", id: 3 } } } } }, longrunning: { options: { cc_enable_arenas: true, csharp_namespace: "Google.LongRunning", go_package: "google.golang.org/genproto/googleapis/longrunning;longrunning", java_multiple_files: true, java_outer_classname: "OperationsProto", java_package: "com.google.longrunning", php_namespace: "Google\\LongRunning" }, nested: { operationInfo: { type: "google.longrunning.OperationInfo", id: 1049, extend: "google.protobuf.MethodOptions" }, Operations: { options: { "(google.api.default_host)": "longrunning.googleapis.com" }, methods: { ListOperations: { requestType: "ListOperationsRequest", responseType: "ListOperationsResponse", options: { "(google.api.http).get": "/v1/{name=operations}", "(google.api.method_signature)": "name,filter" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=operations}" } }, { "(google.api.method_signature)": "name,filter" }] }, GetOperation: { requestType: "GetOperationRequest", responseType: "Operation", options: { "(google.api.http).get": "/v1/{name=operations/**}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=operations/**}" } }, { "(google.api.method_signature)": "name" }] }, DeleteOperation: { requestType: "DeleteOperationRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).delete": "/v1/{name=operations/**}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { delete: "/v1/{name=operations/**}" } }, { "(google.api.method_signature)": "name" }] }, CancelOperation: { requestType: "CancelOperationRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).post": "/v1/{name=operations/**}:cancel", "(google.api.http).body": "*", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{name=operations/**}:cancel", body: "*" } }, { "(google.api.method_signature)": "name" }] }, WaitOperation: { requestType: "WaitOperationRequest", responseType: "Operation" } } }, Operation: { oneofs: { result: { oneof: ["error", "response"] } }, fields: { name: { type: "string", id: 1 }, metadata: { type: "google.protobuf.Any", id: 2 }, done: { type: "bool", id: 3 }, error: { type: "google.rpc.Status", id: 4 }, response: { type: "google.protobuf.Any", id: 5 } } }, GetOperationRequest: { fields: { name: { type: "string", id: 1 } } }, ListOperationsRequest: { fields: { name: { type: "string", id: 4 }, filter: { type: "string", id: 1 }, pageSize: { type: "int32", id: 2 }, pageToken: { type: "string", id: 3 } } }, ListOperationsResponse: { fields: { operations: { rule: "repeated", type: "Operation", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, CancelOperationRequest: { fields: { name: { type: "string", id: 1 } } }, DeleteOperationRequest: { fields: { name: { type: "string", id: 1 } } }, WaitOperationRequest: { fields: { name: { type: "string", id: 1 }, timeout: { type: "google.protobuf.Duration", id: 2 } } }, OperationInfo: { fields: { responseType: { type: "string", id: 1 }, metadataType: { type: "string", id: 2 } } } } } } } } };
  }
});

// node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client_config.json
var require_firestore_admin_client_config = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.firestore.admin.v1.FirestoreAdmin": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ],
            deadline_exceeded_internal_unavailable: [
              "DEADLINE_EXCEEDED",
              "INTERNAL",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            CreateIndex: {
              timeout_millis: 6e4,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            ListIndexes: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_internal_unavailable",
              retry_params_name: "default"
            },
            GetIndex: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_internal_unavailable",
              retry_params_name: "default"
            },
            DeleteIndex: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_internal_unavailable",
              retry_params_name: "default"
            },
            GetField: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_internal_unavailable",
              retry_params_name: "default"
            },
            UpdateField: {
              timeout_millis: 6e4,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            ListFields: {
              timeout_millis: 6e4,
              retry_codes_name: "deadline_exceeded_internal_unavailable",
              retry_params_name: "default"
            },
            ExportDocuments: {
              timeout_millis: 6e4,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            ImportDocuments: {
              timeout_millis: 6e4,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            GetDatabase: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            ListDatabases: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            UpdateDatabase: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js
var require_firestore_admin_client = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FirestoreAdminClient = void 0;
    var jsonProtos = require_admin_v1();
    var gapicConfig = require_firestore_admin_client_config();
    var version = require_package4().version;
    var FirestoreAdminClient = class {
      constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        if (!gaxInstance) {
          gaxInstance = require_fallback();
        }
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        this._opts = opts;
        this.auth = this._gaxGrpc.auth;
        this.auth.useJWTAccessWithScope = true;
        this.auth.defaultServicePath = staticMembers.servicePath;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        } else if (opts.fallback === "rest") {
          clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        this.pathTemplates = {
          collectionGroupPathTemplate: new this._gaxModule.PathTemplate("projects/{project}/databases/{database}/collectionGroups/{collection}"),
          databasePathTemplate: new this._gaxModule.PathTemplate("projects/{project}/databases/{database}"),
          fieldPathTemplate: new this._gaxModule.PathTemplate("projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}"),
          indexPathTemplate: new this._gaxModule.PathTemplate("projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}"),
          projectPathTemplate: new this._gaxModule.PathTemplate("projects/{project}")
        };
        this.descriptors.page = {
          listIndexes: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "indexes"),
          listFields: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "fields")
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        const lroOptions = {
          auth: this.auth,
          grpc: "grpc" in this._gaxGrpc ? this._gaxGrpc.grpc : void 0
        };
        if (opts.fallback === "rest") {
          lroOptions.protoJson = protoFilesRoot;
          lroOptions.httpRules = [
            {
              selector: "google.longrunning.Operations.CancelOperation",
              post: "/v1/{name=projects/*/databases/*/operations/*}:cancel",
              body: "*"
            },
            {
              selector: "google.longrunning.Operations.DeleteOperation",
              delete: "/v1/{name=projects/*/databases/*/operations/*}"
            },
            {
              selector: "google.longrunning.Operations.GetOperation",
              get: "/v1/{name=projects/*/databases/*/operations/*}"
            },
            {
              selector: "google.longrunning.Operations.ListOperations",
              get: "/v1/{name=projects/*/databases/*}/operations"
            }
          ];
        }
        this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
        const createIndexResponse = protoFilesRoot.lookup(".google.firestore.admin.v1.Index");
        const createIndexMetadata = protoFilesRoot.lookup(".google.firestore.admin.v1.IndexOperationMetadata");
        const updateFieldResponse = protoFilesRoot.lookup(".google.firestore.admin.v1.Field");
        const updateFieldMetadata = protoFilesRoot.lookup(".google.firestore.admin.v1.FieldOperationMetadata");
        const exportDocumentsResponse = protoFilesRoot.lookup(".google.firestore.admin.v1.ExportDocumentsResponse");
        const exportDocumentsMetadata = protoFilesRoot.lookup(".google.firestore.admin.v1.ExportDocumentsMetadata");
        const importDocumentsResponse = protoFilesRoot.lookup(".google.protobuf.Empty");
        const importDocumentsMetadata = protoFilesRoot.lookup(".google.firestore.admin.v1.ImportDocumentsMetadata");
        const updateDatabaseResponse = protoFilesRoot.lookup(".google.firestore.admin.v1.Database");
        const updateDatabaseMetadata = protoFilesRoot.lookup(".google.firestore.admin.v1.UpdateDatabaseMetadata");
        this.descriptors.longrunning = {
          createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),
          updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),
          exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),
          importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata)),
          updateDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDatabaseResponse.decode.bind(updateDatabaseResponse), updateDatabaseMetadata.decode.bind(updateDatabaseMetadata))
        };
        this._defaults = this._gaxGrpc.constructSettings("google.firestore.admin.v1.FirestoreAdmin", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = this._gaxModule.warn;
      }
      initialize() {
        if (this.firestoreAdminStub) {
          return this.firestoreAdminStub;
        }
        this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.firestore.admin.v1.FirestoreAdmin") : this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts, this._providedCustomServicePath);
        const firestoreAdminStubMethods = [
          "createIndex",
          "listIndexes",
          "getIndex",
          "deleteIndex",
          "getField",
          "updateField",
          "listFields",
          "exportDocuments",
          "importDocuments",
          "getDatabase",
          "listDatabases",
          "updateDatabase"
        ];
        for (const methodName of firestoreAdminStubMethods) {
          const callPromise = this.firestoreAdminStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.page[methodName] || this.descriptors.longrunning[methodName] || void 0;
          const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.firestoreAdminStub;
      }
      static get servicePath() {
        return "firestore.googleapis.com";
      }
      static get apiEndpoint() {
        return "firestore.googleapis.com";
      }
      static get port() {
        return 443;
      }
      static get scopes() {
        return [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/datastore"
        ];
      }
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      getIndex(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.getIndex(request, options, callback);
      }
      deleteIndex(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.deleteIndex(request, options, callback);
      }
      getField(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.getField(request, options, callback);
      }
      getDatabase(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.getDatabase(request, options, callback);
      }
      listDatabases(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.listDatabases(request, options, callback);
      }
      createIndex(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.createIndex(request, options, callback);
      }
      async checkCreateIndexProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createIndex, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      updateField(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          "field.name": (_a = request.field.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.updateField(request, options, callback);
      }
      async checkUpdateFieldProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateField, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      exportDocuments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.exportDocuments(request, options, callback);
      }
      async checkExportDocumentsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportDocuments, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      importDocuments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.importDocuments(request, options, callback);
      }
      async checkImportDocumentsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importDocuments, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      updateDatabase(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          "database.name": (_a = request.database.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.updateDatabase(request, options, callback);
      }
      async checkUpdateDatabaseProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDatabase, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      listIndexes(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.listIndexes(request, options, callback);
      }
      listIndexesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listIndexes"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);
      }
      listIndexesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listIndexes"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls["listIndexes"], request, callSettings);
      }
      listFields(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.listFields(request, options, callback);
      }
      listFieldsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listFields"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);
      }
      listFieldsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listFields"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls["listFields"], request, callSettings);
      }
      getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
      }
      listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
      }
      getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
      }
      listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
      }
      cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
      }
      deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
      }
      collectionGroupPath(project, database, collection) {
        return this.pathTemplates.collectionGroupPathTemplate.render({
          project,
          database,
          collection
        });
      }
      matchProjectFromCollectionGroupName(collectionGroupName) {
        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;
      }
      matchDatabaseFromCollectionGroupName(collectionGroupName) {
        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;
      }
      matchCollectionFromCollectionGroupName(collectionGroupName) {
        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;
      }
      databasePath(project, database) {
        return this.pathTemplates.databasePathTemplate.render({
          project,
          database
        });
      }
      matchProjectFromDatabaseName(databaseName) {
        return this.pathTemplates.databasePathTemplate.match(databaseName).project;
      }
      matchDatabaseFromDatabaseName(databaseName) {
        return this.pathTemplates.databasePathTemplate.match(databaseName).database;
      }
      fieldPath(project, database, collection, field) {
        return this.pathTemplates.fieldPathTemplate.render({
          project,
          database,
          collection,
          field
        });
      }
      matchProjectFromFieldName(fieldName) {
        return this.pathTemplates.fieldPathTemplate.match(fieldName).project;
      }
      matchDatabaseFromFieldName(fieldName) {
        return this.pathTemplates.fieldPathTemplate.match(fieldName).database;
      }
      matchCollectionFromFieldName(fieldName) {
        return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;
      }
      matchFieldFromFieldName(fieldName) {
        return this.pathTemplates.fieldPathTemplate.match(fieldName).field;
      }
      indexPath(project, database, collection, index) {
        return this.pathTemplates.indexPathTemplate.render({
          project,
          database,
          collection,
          index
        });
      }
      matchProjectFromIndexName(indexName) {
        return this.pathTemplates.indexPathTemplate.match(indexName).project;
      }
      matchDatabaseFromIndexName(indexName) {
        return this.pathTemplates.indexPathTemplate.match(indexName).database;
      }
      matchCollectionFromIndexName(indexName) {
        return this.pathTemplates.indexPathTemplate.match(indexName).collection;
      }
      matchIndexFromIndexName(indexName) {
        return this.pathTemplates.indexPathTemplate.match(indexName).index;
      }
      projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
          project
        });
      }
      matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
      }
      close() {
        if (this.firestoreAdminStub && !this._terminated) {
          return this.firestoreAdminStub.then((stub) => {
            this._terminated = true;
            stub.close();
            this.locationsClient.close();
            this.operationsClient.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.FirestoreAdminClient = FirestoreAdminClient;
  }
});

// node_modules/@google-cloud/firestore/build/protos/v1.json
var require_v1 = __commonJS({
  "node_modules/@google-cloud/firestore/build/protos/v1.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { protobuf: { options: { go_package: "google.golang.org/protobuf/types/descriptorpb", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { Timestamp: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } }, Struct: { fields: { fields: { keyType: "string", type: "Value", id: 1 } } }, Value: { oneofs: { kind: { oneof: ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"] } }, fields: { nullValue: { type: "NullValue", id: 1 }, numberValue: { type: "double", id: 2 }, stringValue: { type: "string", id: 3 }, boolValue: { type: "bool", id: 4 }, structValue: { type: "Struct", id: 5 }, listValue: { type: "ListValue", id: 6 } } }, NullValue: { values: { NULL_VALUE: 0 } }, ListValue: { fields: { values: { rule: "repeated", type: "Value", id: 1 } } }, Empty: { fields: {} }, DoubleValue: { fields: { value: { type: "double", id: 1 } } }, FloatValue: { fields: { value: { type: "float", id: 1 } } }, Int64Value: { fields: { value: { type: "int64", id: 1 } } }, UInt64Value: { fields: { value: { type: "uint64", id: 1 } } }, Int32Value: { fields: { value: { type: "int32", id: 1 } } }, UInt32Value: { fields: { value: { type: "uint32", id: 1 } } }, BoolValue: { fields: { value: { type: "bool", id: 1 } } }, StringValue: { fields: { value: { type: "string", id: 1 } } }, BytesValue: { fields: { value: { type: "bytes", id: 1 } } }, Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } }, FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 }, edition: { type: "string", id: 13 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4], [5, 5], [6, 6], [8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, unverifiedLazy: { type: "bool", id: 15, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 }, semantic: { type: "Semantic", id: 5 } }, nested: { Semantic: { values: { NONE: 0, SET: 1, ALIAS: 2 } } } } } }, FieldMask: { fields: { paths: { rule: "repeated", type: "string", id: 1 } } } } }, firestore: { nested: { v1: { options: { csharp_namespace: "Google.Cloud.Firestore.V1", go_package: "google.golang.org/genproto/googleapis/firestore/v1;firestore", java_multiple_files: true, java_outer_classname: "WriteProto", java_package: "com.google.firestore.v1", objc_class_prefix: "GCFS", php_namespace: "Google\\Cloud\\Firestore\\V1", ruby_package: "Google::Cloud::Firestore::V1" }, nested: { AggregationResult: { fields: { aggregateFields: { keyType: "string", type: "Value", id: 2 } } }, DocumentMask: { fields: { fieldPaths: { rule: "repeated", type: "string", id: 1 } } }, Precondition: { oneofs: { conditionType: { oneof: ["exists", "updateTime"] } }, fields: { exists: { type: "bool", id: 1 }, updateTime: { type: "google.protobuf.Timestamp", id: 2 } } }, TransactionOptions: { oneofs: { mode: { oneof: ["readOnly", "readWrite"] } }, fields: { readOnly: { type: "ReadOnly", id: 2 }, readWrite: { type: "ReadWrite", id: 3 } }, nested: { ReadWrite: { fields: { retryTransaction: { type: "bytes", id: 1 } } }, ReadOnly: { oneofs: { consistencySelector: { oneof: ["readTime"] } }, fields: { readTime: { type: "google.protobuf.Timestamp", id: 2 } } } } }, Document: { fields: { name: { type: "string", id: 1 }, fields: { keyType: "string", type: "Value", id: 2 }, createTime: { type: "google.protobuf.Timestamp", id: 3 }, updateTime: { type: "google.protobuf.Timestamp", id: 4 } } }, Value: { oneofs: { valueType: { oneof: ["nullValue", "booleanValue", "integerValue", "doubleValue", "timestampValue", "stringValue", "bytesValue", "referenceValue", "geoPointValue", "arrayValue", "mapValue"] } }, fields: { nullValue: { type: "google.protobuf.NullValue", id: 11 }, booleanValue: { type: "bool", id: 1 }, integerValue: { type: "int64", id: 2 }, doubleValue: { type: "double", id: 3 }, timestampValue: { type: "google.protobuf.Timestamp", id: 10 }, stringValue: { type: "string", id: 17 }, bytesValue: { type: "bytes", id: 18 }, referenceValue: { type: "string", id: 5 }, geoPointValue: { type: "google.type.LatLng", id: 8 }, arrayValue: { type: "ArrayValue", id: 9 }, mapValue: { type: "MapValue", id: 6 } } }, ArrayValue: { fields: { values: { rule: "repeated", type: "Value", id: 1 } } }, MapValue: { fields: { fields: { keyType: "string", type: "Value", id: 1 } } }, Firestore: { options: { "(google.api.default_host)": "firestore.googleapis.com", "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore" }, methods: { GetDocument: { requestType: "GetDocumentRequest", responseType: "Document", options: { "(google.api.http).get": "/v1/{name=projects/*/databases/*/documents/*/**}" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=projects/*/databases/*/documents/*/**}" } }] }, ListDocuments: { requestType: "ListDocumentsRequest", responseType: "ListDocumentsResponse", options: { "(google.api.http).get": "/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}", "(google.api.http).additional_bindings.get": "/v1/{parent=projects/*/databases/*/documents}/{collection_id}" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}", additional_bindings: { get: "/v1/{parent=projects/*/databases/*/documents}/{collection_id}" } } }] }, UpdateDocument: { requestType: "UpdateDocumentRequest", responseType: "Document", options: { "(google.api.http).patch": "/v1/{document.name=projects/*/databases/*/documents/*/**}", "(google.api.http).body": "document", "(google.api.method_signature)": "document,update_mask" }, parsedOptions: [{ "(google.api.http)": { patch: "/v1/{document.name=projects/*/databases/*/documents/*/**}", body: "document" } }, { "(google.api.method_signature)": "document,update_mask" }] }, DeleteDocument: { requestType: "DeleteDocumentRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).delete": "/v1/{name=projects/*/databases/*/documents/*/**}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { delete: "/v1/{name=projects/*/databases/*/documents/*/**}" } }, { "(google.api.method_signature)": "name" }] }, BatchGetDocuments: { requestType: "BatchGetDocumentsRequest", responseType: "BatchGetDocumentsResponse", responseStream: true, options: { "(google.api.http).post": "/v1/{database=projects/*/databases/*}/documents:batchGet", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{database=projects/*/databases/*}/documents:batchGet", body: "*" } }] }, BeginTransaction: { requestType: "BeginTransactionRequest", responseType: "BeginTransactionResponse", options: { "(google.api.http).post": "/v1/{database=projects/*/databases/*}/documents:beginTransaction", "(google.api.http).body": "*", "(google.api.method_signature)": "database" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{database=projects/*/databases/*}/documents:beginTransaction", body: "*" } }, { "(google.api.method_signature)": "database" }] }, Commit: { requestType: "CommitRequest", responseType: "CommitResponse", options: { "(google.api.http).post": "/v1/{database=projects/*/databases/*}/documents:commit", "(google.api.http).body": "*", "(google.api.method_signature)": "database,writes" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{database=projects/*/databases/*}/documents:commit", body: "*" } }, { "(google.api.method_signature)": "database,writes" }] }, Rollback: { requestType: "RollbackRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).post": "/v1/{database=projects/*/databases/*}/documents:rollback", "(google.api.http).body": "*", "(google.api.method_signature)": "database,transaction" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{database=projects/*/databases/*}/documents:rollback", body: "*" } }, { "(google.api.method_signature)": "database,transaction" }] }, RunQuery: { requestType: "RunQueryRequest", responseType: "RunQueryResponse", responseStream: true, options: { "(google.api.http).post": "/v1/{parent=projects/*/databases/*/documents}:runQuery", "(google.api.http).body": "*", "(google.api.http).additional_bindings.post": "/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery", "(google.api.http).additional_bindings.body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{parent=projects/*/databases/*/documents}:runQuery", body: "*", additional_bindings: { post: "/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery", body: "*" } } }] }, RunAggregationQuery: { requestType: "RunAggregationQueryRequest", responseType: "RunAggregationQueryResponse", responseStream: true, options: { "(google.api.http).post": "/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery", "(google.api.http).body": "*", "(google.api.http).additional_bindings.post": "/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery", "(google.api.http).additional_bindings.body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery", body: "*", additional_bindings: { post: "/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery", body: "*" } } }] }, PartitionQuery: { requestType: "PartitionQueryRequest", responseType: "PartitionQueryResponse", options: { "(google.api.http).post": "/v1/{parent=projects/*/databases/*/documents}:partitionQuery", "(google.api.http).body": "*", "(google.api.http).additional_bindings.post": "/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery", "(google.api.http).additional_bindings.body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{parent=projects/*/databases/*/documents}:partitionQuery", body: "*", additional_bindings: { post: "/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery", body: "*" } } }] }, Write: { requestType: "WriteRequest", requestStream: true, responseType: "WriteResponse", responseStream: true, options: { "(google.api.http).post": "/v1/{database=projects/*/databases/*}/documents:write", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{database=projects/*/databases/*}/documents:write", body: "*" } }] }, Listen: { requestType: "ListenRequest", requestStream: true, responseType: "ListenResponse", responseStream: true, options: { "(google.api.http).post": "/v1/{database=projects/*/databases/*}/documents:listen", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{database=projects/*/databases/*}/documents:listen", body: "*" } }] }, ListCollectionIds: { requestType: "ListCollectionIdsRequest", responseType: "ListCollectionIdsResponse", options: { "(google.api.http).post": "/v1/{parent=projects/*/databases/*/documents}:listCollectionIds", "(google.api.http).body": "*", "(google.api.http).additional_bindings.post": "/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds", "(google.api.http).additional_bindings.body": "*", "(google.api.method_signature)": "parent" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{parent=projects/*/databases/*/documents}:listCollectionIds", body: "*", additional_bindings: { post: "/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds", body: "*" } } }, { "(google.api.method_signature)": "parent" }] }, BatchWrite: { requestType: "BatchWriteRequest", responseType: "BatchWriteResponse", options: { "(google.api.http).post": "/v1/{database=projects/*/databases/*}/documents:batchWrite", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{database=projects/*/databases/*}/documents:batchWrite", body: "*" } }] }, CreateDocument: { requestType: "CreateDocumentRequest", responseType: "Document", options: { "(google.api.http).post": "/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}", "(google.api.http).body": "document" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}", body: "document" } }] } } }, GetDocumentRequest: { oneofs: { consistencySelector: { oneof: ["transaction", "readTime"] } }, fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, mask: { type: "DocumentMask", id: 2 }, transaction: { type: "bytes", id: 3 }, readTime: { type: "google.protobuf.Timestamp", id: 5 } } }, ListDocumentsRequest: { oneofs: { consistencySelector: { oneof: ["transaction", "readTime"] } }, fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, collectionId: { type: "string", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } }, pageSize: { type: "int32", id: 3 }, pageToken: { type: "string", id: 4 }, orderBy: { type: "string", id: 6 }, mask: { type: "DocumentMask", id: 7 }, transaction: { type: "bytes", id: 8 }, readTime: { type: "google.protobuf.Timestamp", id: 10 }, showMissing: { type: "bool", id: 12 } } }, ListDocumentsResponse: { fields: { documents: { rule: "repeated", type: "Document", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, CreateDocumentRequest: { fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, collectionId: { type: "string", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } }, documentId: { type: "string", id: 3 }, document: { type: "Document", id: 4, options: { "(google.api.field_behavior)": "REQUIRED" } }, mask: { type: "DocumentMask", id: 5 } } }, UpdateDocumentRequest: { fields: { document: { type: "Document", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, updateMask: { type: "DocumentMask", id: 2 }, mask: { type: "DocumentMask", id: 3 }, currentDocument: { type: "Precondition", id: 4 } } }, DeleteDocumentRequest: { fields: { name: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, currentDocument: { type: "Precondition", id: 2 } } }, BatchGetDocumentsRequest: { oneofs: { consistencySelector: { oneof: ["transaction", "newTransaction", "readTime"] } }, fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, documents: { rule: "repeated", type: "string", id: 2 }, mask: { type: "DocumentMask", id: 3 }, transaction: { type: "bytes", id: 4 }, newTransaction: { type: "TransactionOptions", id: 5 }, readTime: { type: "google.protobuf.Timestamp", id: 7 } } }, BatchGetDocumentsResponse: { oneofs: { result: { oneof: ["found", "missing"] } }, fields: { found: { type: "Document", id: 1 }, missing: { type: "string", id: 2 }, transaction: { type: "bytes", id: 3 }, readTime: { type: "google.protobuf.Timestamp", id: 4 } } }, BeginTransactionRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, options: { type: "TransactionOptions", id: 2 } } }, BeginTransactionResponse: { fields: { transaction: { type: "bytes", id: 1 } } }, CommitRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, writes: { rule: "repeated", type: "Write", id: 2 }, transaction: { type: "bytes", id: 3 } } }, CommitResponse: { fields: { writeResults: { rule: "repeated", type: "WriteResult", id: 1 }, commitTime: { type: "google.protobuf.Timestamp", id: 2 } } }, RollbackRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, transaction: { type: "bytes", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } } } }, RunQueryRequest: { oneofs: { queryType: { oneof: ["structuredQuery"] }, consistencySelector: { oneof: ["transaction", "newTransaction", "readTime"] } }, fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, structuredQuery: { type: "StructuredQuery", id: 2 }, transaction: { type: "bytes", id: 5 }, newTransaction: { type: "TransactionOptions", id: 6 }, readTime: { type: "google.protobuf.Timestamp", id: 7 } } }, RunQueryResponse: { oneofs: { continuationSelector: { oneof: ["done"] } }, fields: { transaction: { type: "bytes", id: 2 }, document: { type: "Document", id: 1 }, readTime: { type: "google.protobuf.Timestamp", id: 3 }, skippedResults: { type: "int32", id: 4 }, done: { type: "bool", id: 6 } } }, RunAggregationQueryRequest: { oneofs: { queryType: { oneof: ["structuredAggregationQuery"] }, consistencySelector: { oneof: ["transaction", "newTransaction", "readTime"] } }, fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, structuredAggregationQuery: { type: "StructuredAggregationQuery", id: 2 }, transaction: { type: "bytes", id: 4 }, newTransaction: { type: "TransactionOptions", id: 5 }, readTime: { type: "google.protobuf.Timestamp", id: 6 } } }, RunAggregationQueryResponse: { fields: { result: { type: "AggregationResult", id: 1 }, transaction: { type: "bytes", id: 2 }, readTime: { type: "google.protobuf.Timestamp", id: 3 } } }, PartitionQueryRequest: { oneofs: { queryType: { oneof: ["structuredQuery"] }, consistencySelector: { oneof: ["readTime"] } }, fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, structuredQuery: { type: "StructuredQuery", id: 2 }, partitionCount: { type: "int64", id: 3 }, pageToken: { type: "string", id: 4 }, pageSize: { type: "int32", id: 5 }, readTime: { type: "google.protobuf.Timestamp", id: 6 } } }, PartitionQueryResponse: { fields: { partitions: { rule: "repeated", type: "Cursor", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, WriteRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, streamId: { type: "string", id: 2 }, writes: { rule: "repeated", type: "Write", id: 3 }, streamToken: { type: "bytes", id: 4 }, labels: { keyType: "string", type: "string", id: 5 } } }, WriteResponse: { fields: { streamId: { type: "string", id: 1 }, streamToken: { type: "bytes", id: 2 }, writeResults: { rule: "repeated", type: "WriteResult", id: 3 }, commitTime: { type: "google.protobuf.Timestamp", id: 4 } } }, ListenRequest: { oneofs: { targetChange: { oneof: ["addTarget", "removeTarget"] } }, fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, addTarget: { type: "Target", id: 2 }, removeTarget: { type: "int32", id: 3 }, labels: { keyType: "string", type: "string", id: 4 } } }, ListenResponse: { oneofs: { responseType: { oneof: ["targetChange", "documentChange", "documentDelete", "documentRemove", "filter"] } }, fields: { targetChange: { type: "TargetChange", id: 2 }, documentChange: { type: "DocumentChange", id: 3 }, documentDelete: { type: "DocumentDelete", id: 4 }, documentRemove: { type: "DocumentRemove", id: 6 }, filter: { type: "ExistenceFilter", id: 5 } } }, Target: { oneofs: { targetType: { oneof: ["query", "documents"] }, resumeType: { oneof: ["resumeToken", "readTime"] } }, fields: { query: { type: "QueryTarget", id: 2 }, documents: { type: "DocumentsTarget", id: 3 }, resumeToken: { type: "bytes", id: 4 }, readTime: { type: "google.protobuf.Timestamp", id: 11 }, targetId: { type: "int32", id: 5 }, once: { type: "bool", id: 6 } }, nested: { DocumentsTarget: { fields: { documents: { rule: "repeated", type: "string", id: 2 } } }, QueryTarget: { oneofs: { queryType: { oneof: ["structuredQuery"] } }, fields: { parent: { type: "string", id: 1 }, structuredQuery: { type: "StructuredQuery", id: 2 } } } } }, TargetChange: { fields: { targetChangeType: { type: "TargetChangeType", id: 1 }, targetIds: { rule: "repeated", type: "int32", id: 2 }, cause: { type: "google.rpc.Status", id: 3 }, resumeToken: { type: "bytes", id: 4 }, readTime: { type: "google.protobuf.Timestamp", id: 6 } }, nested: { TargetChangeType: { values: { NO_CHANGE: 0, ADD: 1, REMOVE: 2, CURRENT: 3, RESET: 4 } } } }, ListCollectionIdsRequest: { oneofs: { consistencySelector: { oneof: ["readTime"] } }, fields: { parent: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, pageSize: { type: "int32", id: 2 }, pageToken: { type: "string", id: 3 }, readTime: { type: "google.protobuf.Timestamp", id: 4 } } }, ListCollectionIdsResponse: { fields: { collectionIds: { rule: "repeated", type: "string", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, BatchWriteRequest: { fields: { database: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED" } }, writes: { rule: "repeated", type: "Write", id: 2 }, labels: { keyType: "string", type: "string", id: 3 } } }, BatchWriteResponse: { fields: { writeResults: { rule: "repeated", type: "WriteResult", id: 1 }, status: { rule: "repeated", type: "google.rpc.Status", id: 2 } } }, StructuredQuery: { fields: { select: { type: "Projection", id: 1 }, from: { rule: "repeated", type: "CollectionSelector", id: 2 }, where: { type: "Filter", id: 3 }, orderBy: { rule: "repeated", type: "Order", id: 4 }, startAt: { type: "Cursor", id: 7 }, endAt: { type: "Cursor", id: 8 }, offset: { type: "int32", id: 6 }, limit: { type: "google.protobuf.Int32Value", id: 5 } }, nested: { CollectionSelector: { fields: { collectionId: { type: "string", id: 2 }, allDescendants: { type: "bool", id: 3 } } }, Filter: { oneofs: { filterType: { oneof: ["compositeFilter", "fieldFilter", "unaryFilter"] } }, fields: { compositeFilter: { type: "CompositeFilter", id: 1 }, fieldFilter: { type: "FieldFilter", id: 2 }, unaryFilter: { type: "UnaryFilter", id: 3 } } }, CompositeFilter: { fields: { op: { type: "Operator", id: 1 }, filters: { rule: "repeated", type: "Filter", id: 2 } }, nested: { Operator: { values: { OPERATOR_UNSPECIFIED: 0, AND: 1 } } } }, FieldFilter: { fields: { field: { type: "FieldReference", id: 1 }, op: { type: "Operator", id: 2 }, value: { type: "Value", id: 3 } }, nested: { Operator: { values: { OPERATOR_UNSPECIFIED: 0, LESS_THAN: 1, LESS_THAN_OR_EQUAL: 2, GREATER_THAN: 3, GREATER_THAN_OR_EQUAL: 4, EQUAL: 5, NOT_EQUAL: 6, ARRAY_CONTAINS: 7, IN: 8, ARRAY_CONTAINS_ANY: 9, NOT_IN: 10 } } } }, UnaryFilter: { oneofs: { operandType: { oneof: ["field"] } }, fields: { op: { type: "Operator", id: 1 }, field: { type: "FieldReference", id: 2 } }, nested: { Operator: { values: { OPERATOR_UNSPECIFIED: 0, IS_NAN: 2, IS_NULL: 3, IS_NOT_NAN: 4, IS_NOT_NULL: 5 } } } }, Order: { fields: { field: { type: "FieldReference", id: 1 }, direction: { type: "Direction", id: 2 } } }, Direction: { values: { DIRECTION_UNSPECIFIED: 0, ASCENDING: 1, DESCENDING: 2 } }, FieldReference: { fields: { fieldPath: { type: "string", id: 2 } } }, Projection: { fields: { fields: { rule: "repeated", type: "FieldReference", id: 2 } } } } }, StructuredAggregationQuery: { oneofs: { queryType: { oneof: ["structuredQuery"] } }, fields: { structuredQuery: { type: "StructuredQuery", id: 1 }, aggregations: { rule: "repeated", type: "Aggregation", id: 3, options: { "(google.api.field_behavior)": "OPTIONAL" } } }, nested: { Aggregation: { oneofs: { operator: { oneof: ["count"] } }, fields: { count: { type: "Count", id: 1 }, alias: { type: "string", id: 7, options: { "(google.api.field_behavior)": "OPTIONAL" } } }, nested: { Count: { fields: { upTo: { type: "google.protobuf.Int64Value", id: 1, options: { "(google.api.field_behavior)": "OPTIONAL" } } } } } } } }, Cursor: { fields: { values: { rule: "repeated", type: "Value", id: 1 }, before: { type: "bool", id: 2 } } }, Write: { oneofs: { operation: { oneof: ["update", "delete", "transform"] } }, fields: { update: { type: "Document", id: 1 }, delete: { type: "string", id: 2 }, transform: { type: "DocumentTransform", id: 6 }, updateMask: { type: "DocumentMask", id: 3 }, updateTransforms: { rule: "repeated", type: "DocumentTransform.FieldTransform", id: 7 }, currentDocument: { type: "Precondition", id: 4 } } }, DocumentTransform: { fields: { document: { type: "string", id: 1 }, fieldTransforms: { rule: "repeated", type: "FieldTransform", id: 2 } }, nested: { FieldTransform: { oneofs: { transformType: { oneof: ["setToServerValue", "increment", "maximum", "minimum", "appendMissingElements", "removeAllFromArray"] } }, fields: { fieldPath: { type: "string", id: 1 }, setToServerValue: { type: "ServerValue", id: 2 }, increment: { type: "Value", id: 3 }, maximum: { type: "Value", id: 4 }, minimum: { type: "Value", id: 5 }, appendMissingElements: { type: "ArrayValue", id: 6 }, removeAllFromArray: { type: "ArrayValue", id: 7 } }, nested: { ServerValue: { values: { SERVER_VALUE_UNSPECIFIED: 0, REQUEST_TIME: 1 } } } } } }, WriteResult: { fields: { updateTime: { type: "google.protobuf.Timestamp", id: 1 }, transformResults: { rule: "repeated", type: "Value", id: 2 } } }, DocumentChange: { fields: { document: { type: "Document", id: 1 }, targetIds: { rule: "repeated", type: "int32", id: 5 }, removedTargetIds: { rule: "repeated", type: "int32", id: 6 } } }, DocumentDelete: { fields: { document: { type: "string", id: 1 }, removedTargetIds: { rule: "repeated", type: "int32", id: 6 }, readTime: { type: "google.protobuf.Timestamp", id: 4 } } }, DocumentRemove: { fields: { document: { type: "string", id: 1 }, removedTargetIds: { rule: "repeated", type: "int32", id: 2 }, readTime: { type: "google.protobuf.Timestamp", id: 4 } } }, ExistenceFilter: { fields: { targetId: { type: "int32", id: 1 }, count: { type: "int32", id: 2 } } } } } } }, type: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/type/latlng;latlng", java_multiple_files: true, java_outer_classname: "LatLngProto", java_package: "com.google.type", objc_class_prefix: "GTP" }, nested: { LatLng: { fields: { latitude: { type: "double", id: 1 }, longitude: { type: "double", id: 2 } } } } }, rpc: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/rpc/status;status", java_multiple_files: true, java_outer_classname: "StatusProto", java_package: "com.google.rpc", objc_class_prefix: "RPC" }, nested: { Status: { fields: { code: { type: "int32", id: 1 }, message: { type: "string", id: 2 }, details: { rule: "repeated", type: "google.protobuf.Any", id: 3 } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ResourceProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" }, fieldBehavior: { rule: "repeated", type: "google.api.FieldBehavior", id: 1052, extend: "google.protobuf.FieldOptions" }, FieldBehavior: { values: { FIELD_BEHAVIOR_UNSPECIFIED: 0, OPTIONAL: 1, REQUIRED: 2, OUTPUT_ONLY: 3, INPUT_ONLY: 4, IMMUTABLE: 5, UNORDERED_LIST: 6, NON_EMPTY_DEFAULT: 7 } }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, resourceReference: { type: "google.api.ResourceReference", id: 1055, extend: "google.protobuf.FieldOptions" }, resourceDefinition: { rule: "repeated", type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.FileOptions" }, resource: { type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.MessageOptions" }, ResourceDescriptor: { fields: { type: { type: "string", id: 1 }, pattern: { rule: "repeated", type: "string", id: 2 }, nameField: { type: "string", id: 3 }, history: { type: "History", id: 4 }, plural: { type: "string", id: 5 }, singular: { type: "string", id: 6 }, style: { rule: "repeated", type: "Style", id: 10 } }, nested: { History: { values: { HISTORY_UNSPECIFIED: 0, ORIGINALLY_SINGLE_PATTERN: 1, FUTURE_MULTI_PATTERN: 2 } }, Style: { values: { STYLE_UNSPECIFIED: 0, DECLARATIVE_FRIENDLY: 1 } } } }, ResourceReference: { fields: { type: { type: "string", id: 1 }, childType: { type: "string", id: 2 } } } } } } } } };
  }
});

// node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js
var require_firestore_client2 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FirestoreClient = void 0;
    var stream_1 = require_stream();
    var jsonProtos = require_v1();
    var gapicConfig = require_firestore_client_config();
    var version = require_package4().version;
    var FirestoreClient = class {
      constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        if (!gaxInstance) {
          gaxInstance = require_fallback();
        }
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        this._opts = opts;
        this.auth = this._gaxGrpc.auth;
        this.auth.useJWTAccessWithScope = true;
        this.auth.defaultServicePath = staticMembers.servicePath;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        } else if (opts.fallback === "rest") {
          clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        this.descriptors.page = {
          listDocuments: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "documents"),
          partitionQuery: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "partitions"),
          listCollectionIds: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "collectionIds")
        };
        this.descriptors.stream = {
          batchGetDocuments: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, opts.fallback === "rest"),
          runQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, opts.fallback === "rest"),
          runAggregationQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, opts.fallback === "rest"),
          write: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === "rest"),
          listen: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === "rest")
        };
        this._defaults = this._gaxGrpc.constructSettings("google.firestore.v1.Firestore", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = this._gaxModule.warn;
      }
      initialize() {
        if (this.firestoreStub) {
          return this.firestoreStub;
        }
        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.firestore.v1.Firestore") : this._protos.google.firestore.v1.Firestore, this._opts, this._providedCustomServicePath);
        const firestoreStubMethods = [
          "getDocument",
          "listDocuments",
          "updateDocument",
          "deleteDocument",
          "batchGetDocuments",
          "beginTransaction",
          "commit",
          "rollback",
          "runQuery",
          "runAggregationQuery",
          "partitionQuery",
          "write",
          "listen",
          "listCollectionIds",
          "batchWrite",
          "createDocument"
        ];
        for (const methodName of firestoreStubMethods) {
          const callPromise = this.firestoreStub.then((stub) => (...args) => {
            if (this._terminated) {
              if (methodName in this.descriptors.stream) {
                const stream = new stream_1.PassThrough();
                setImmediate(() => {
                  stream.emit("error", new this._gaxModule.GoogleError("The client has already been closed."));
                });
                return stream;
              }
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.page[methodName] || this.descriptors.stream[methodName] || void 0;
          const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.firestoreStub;
      }
      static get servicePath() {
        return "firestore.googleapis.com";
      }
      static get apiEndpoint() {
        return "firestore.googleapis.com";
      }
      static get port() {
        return 443;
      }
      static get scopes() {
        return [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/datastore"
        ];
      }
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      getDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.getDocument(request, options, callback);
      }
      updateDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          "document.name": (_a = request.document.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.updateDocument(request, options, callback);
      }
      deleteDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.deleteDocument(request, options, callback);
      }
      beginTransaction(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.beginTransaction(request, options, callback);
      }
      commit(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.commit(request, options, callback);
      }
      rollback(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.rollback(request, options, callback);
      }
      batchWrite(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.batchWrite(request, options, callback);
      }
      createDocument(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : "",
          collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ""
        });
        this.initialize();
        return this.innerApiCalls.createDocument(request, options, callback);
      }
      batchGetDocuments(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          database: (_a = request.database) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.batchGetDocuments(request, options);
      }
      runQuery(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.runQuery(request, options);
      }
      runAggregationQuery(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.runAggregationQuery(request, options);
      }
      write(options) {
        this.initialize();
        return this.innerApiCalls.write(null, options);
      }
      listen(options) {
        this.initialize();
        return this.innerApiCalls.listen(null, options);
      }
      listDocuments(request, optionsOrCallback, callback) {
        var _a, _b;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : "",
          collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ""
        });
        this.initialize();
        return this.innerApiCalls.listDocuments(request, options, callback);
      }
      listDocumentsStream(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : "",
          collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ""
        });
        const defaultCallSettings = this._defaults["listDocuments"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);
      }
      listDocumentsAsync(request, options) {
        var _a, _b;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : "",
          collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : ""
        });
        const defaultCallSettings = this._defaults["listDocuments"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls["listDocuments"], request, callSettings);
      }
      partitionQuery(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.partitionQuery(request, options, callback);
      }
      partitionQueryStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["partitionQuery"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);
      }
      partitionQueryAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["partitionQuery"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls["partitionQuery"], request, callSettings);
      }
      listCollectionIds(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.listCollectionIds(request, options, callback);
      }
      listCollectionIdsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listCollectionIds"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);
      }
      listCollectionIdsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listCollectionIds"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls["listCollectionIds"], request, callSettings);
      }
      getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
      }
      listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
      }
      close() {
        if (this.firestoreStub && !this._terminated) {
          return this.firestoreStub.then((stub) => {
            this._terminated = true;
            stub.close();
            this.locationsClient.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.FirestoreClient = FirestoreClient;
  }
});

// node_modules/@google-cloud/firestore/build/src/v1/index.js
var require_v12 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/v1/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FirestoreAdminClient = exports2.FirestoreClient = void 0;
    var firestore_admin_client_1 = require_firestore_admin_client();
    Object.defineProperty(exports2, "FirestoreAdminClient", { enumerable: true, get: function() {
      return firestore_admin_client_1.FirestoreAdminClient;
    } });
    var firestore_client_1 = require_firestore_client2();
    Object.defineProperty(exports2, "FirestoreClient", { enumerable: true, get: function() {
      return firestore_client_1.FirestoreClient;
    } });
    var existingExports = module2.exports;
    module2.exports = firestore_client_1.FirestoreClient;
    module2.exports = Object.assign(module2.exports, existingExports);
  }
});

// node_modules/@google-cloud/firestore/build/src/index.js
var require_src9 = __commonJS({
  "node_modules/@google-cloud/firestore/build/src/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Firestore = exports2.DEFAULT_MAX_TRANSACTION_ATTEMPTS = exports2.MAX_REQUEST_RETRIES = exports2.setLogFunction = exports2.QueryPartition = exports2.CollectionGroup = exports2.GeoPoint = exports2.FieldPath = exports2.DocumentChange = exports2.Timestamp = exports2.Transaction = exports2.WriteResult = exports2.WriteBatch = exports2.FieldValue = exports2.QueryDocumentSnapshot = exports2.DocumentSnapshot = exports2.BulkWriter = exports2.Query = exports2.QuerySnapshot = exports2.DocumentReference = exports2.CollectionReference = void 0;
    var stream_1 = require_stream();
    var url_1 = require_url();
    var backoff_1 = require_backoff();
    var bulk_writer_1 = require_bulk_writer();
    var bundle_1 = require_bundle();
    var convert_1 = require_convert();
    var document_reader_1 = require_document_reader();
    var document_1 = require_document();
    var logger_1 = require_logger();
    var path_1 = require_path3();
    var pool_1 = require_pool2();
    var reference_1 = require_reference();
    var serializer_1 = require_serializer();
    var timestamp_1 = require_timestamp2();
    var transaction_1 = require_transaction();
    var util_1 = require_util5();
    var validate_1 = require_validate();
    var write_batch_1 = require_write_batch();
    var firestore_client_config_json_1 = require_firestore_client_config();
    var serviceConfig = firestore_client_config_json_1.interfaces["google.firestore.v1.Firestore"];
    var collection_group_1 = require_collection_group();
    Object.defineProperty(exports2, "CollectionGroup", { enumerable: true, get: function() {
      return collection_group_1.CollectionGroup;
    } });
    var recursive_delete_1 = require_recursive_delete();
    var reference_2 = require_reference();
    Object.defineProperty(exports2, "CollectionReference", { enumerable: true, get: function() {
      return reference_2.CollectionReference;
    } });
    Object.defineProperty(exports2, "DocumentReference", { enumerable: true, get: function() {
      return reference_2.DocumentReference;
    } });
    Object.defineProperty(exports2, "QuerySnapshot", { enumerable: true, get: function() {
      return reference_2.QuerySnapshot;
    } });
    Object.defineProperty(exports2, "Query", { enumerable: true, get: function() {
      return reference_2.Query;
    } });
    var bulk_writer_2 = require_bulk_writer();
    Object.defineProperty(exports2, "BulkWriter", { enumerable: true, get: function() {
      return bulk_writer_2.BulkWriter;
    } });
    var document_2 = require_document();
    Object.defineProperty(exports2, "DocumentSnapshot", { enumerable: true, get: function() {
      return document_2.DocumentSnapshot;
    } });
    Object.defineProperty(exports2, "QueryDocumentSnapshot", { enumerable: true, get: function() {
      return document_2.QueryDocumentSnapshot;
    } });
    var field_value_1 = require_field_value();
    Object.defineProperty(exports2, "FieldValue", { enumerable: true, get: function() {
      return field_value_1.FieldValue;
    } });
    var write_batch_2 = require_write_batch();
    Object.defineProperty(exports2, "WriteBatch", { enumerable: true, get: function() {
      return write_batch_2.WriteBatch;
    } });
    Object.defineProperty(exports2, "WriteResult", { enumerable: true, get: function() {
      return write_batch_2.WriteResult;
    } });
    var transaction_2 = require_transaction();
    Object.defineProperty(exports2, "Transaction", { enumerable: true, get: function() {
      return transaction_2.Transaction;
    } });
    var timestamp_2 = require_timestamp2();
    Object.defineProperty(exports2, "Timestamp", { enumerable: true, get: function() {
      return timestamp_2.Timestamp;
    } });
    var document_change_1 = require_document_change();
    Object.defineProperty(exports2, "DocumentChange", { enumerable: true, get: function() {
      return document_change_1.DocumentChange;
    } });
    var path_2 = require_path3();
    Object.defineProperty(exports2, "FieldPath", { enumerable: true, get: function() {
      return path_2.FieldPath;
    } });
    var geo_point_1 = require_geo_point();
    Object.defineProperty(exports2, "GeoPoint", { enumerable: true, get: function() {
      return geo_point_1.GeoPoint;
    } });
    var query_partition_1 = require_query_partition();
    Object.defineProperty(exports2, "QueryPartition", { enumerable: true, get: function() {
      return query_partition_1.QueryPartition;
    } });
    var logger_2 = require_logger();
    Object.defineProperty(exports2, "setLogFunction", { enumerable: true, get: function() {
      return logger_2.setLogFunction;
    } });
    var libVersion = require_package4().version;
    (0, logger_1.setLibVersion)(libVersion);
    var CLOUD_RESOURCE_HEADER = "google-cloud-resource-prefix";
    exports2.MAX_REQUEST_RETRIES = 5;
    exports2.DEFAULT_MAX_TRANSACTION_ATTEMPTS = 5;
    var DEFAULT_MAX_IDLE_CHANNELS = 1;
    var MAX_CONCURRENT_REQUESTS_PER_CLIENT = 100;
    var Firestore2 = class {
      constructor(settings) {
        this._settings = {};
        this._settingsFrozen = false;
        this._serializer = null;
        this._projectId = void 0;
        this._databaseId = void 0;
        this.registeredListenersCount = 0;
        this.bulkWritersCount = 0;
        const libraryHeader = {
          libName: "gccl",
          libVersion
        };
        if (settings && settings.firebaseVersion) {
          libraryHeader.libVersion += " fire/" + settings.firebaseVersion;
        }
        this.validateAndApplySettings({ ...settings, ...libraryHeader });
        const retryConfig = serviceConfig.retry_params.default;
        this._backoffSettings = {
          initialDelayMs: retryConfig.initial_retry_delay_millis,
          maxDelayMs: retryConfig.max_retry_delay_millis,
          backoffFactor: retryConfig.retry_delay_multiplier
        };
        const maxIdleChannels = this._settings.maxIdleChannels === void 0 ? DEFAULT_MAX_IDLE_CHANNELS : this._settings.maxIdleChannels;
        this._clientPool = new pool_1.ClientPool(
          MAX_CONCURRENT_REQUESTS_PER_CLIENT,
          maxIdleChannels,
          (requiresGrpc) => {
            var _a;
            let client;
            const useFallback = !this._settings.preferRest || requiresGrpc ? false : "rest";
            let gax;
            if (useFallback) {
              if (!this._gaxFallback) {
                gax = this._gaxFallback = require_fallback();
              } else {
                gax = this._gaxFallback;
              }
            } else {
              if (!this._gax) {
                gax = this._gax = require_fallback();
              } else {
                gax = this._gax;
              }
            }
            if (this._settings.ssl === false) {
              const grpcModule = (_a = this._settings.grpc) !== null && _a !== void 0 ? _a : require_fallback().grpc;
              const sslCreds = grpcModule.credentials.createInsecure();
              const settings2 = {
                sslCreds,
                ...this._settings,
                fallback: useFallback
              };
              if (useFallback) {
                settings2.protocol = "http";
              }
              client = new module2.exports.v1(settings2, gax);
            } else {
              client = new module2.exports.v1({
                ...this._settings,
                fallback: useFallback
              }, gax);
            }
            (0, logger_1.logger)("Firestore", null, "Initialized Firestore GAPIC Client");
            return client;
          },
          (client) => client.close()
        );
        (0, logger_1.logger)("Firestore", null, "Initialized Firestore");
      }
      getBulkWriter() {
        if (!this._bulkWriter) {
          this._bulkWriter = this.bulkWriter();
        }
        return this._bulkWriter;
      }
      settings(settings) {
        (0, validate_1.validateObject)("settings", settings);
        (0, validate_1.validateString)("settings.projectId", settings.projectId, { optional: true });
        (0, validate_1.validateString)("settings.databaseId", settings.databaseId, {
          optional: true
        });
        if (this._settingsFrozen) {
          throw new Error("Firestore has already been initialized. You can only call settings() once, and only before calling any other methods on a Firestore object.");
        }
        const mergedSettings = { ...this._settings, ...settings };
        this.validateAndApplySettings(mergedSettings);
        this._settingsFrozen = true;
      }
      validateAndApplySettings(settings) {
        var _a;
        if (settings.projectId !== void 0) {
          (0, validate_1.validateString)("settings.projectId", settings.projectId);
          this._projectId = settings.projectId;
        }
        if (settings.databaseId !== void 0) {
          (0, validate_1.validateString)("settings.databaseId", settings.databaseId);
          this._databaseId = settings.databaseId;
        }
        let url = null;
        if (process.env.FIRESTORE_EMULATOR_HOST) {
          (0, validate_1.validateHost)("FIRESTORE_EMULATOR_HOST", process.env.FIRESTORE_EMULATOR_HOST);
          settings = {
            ...settings,
            host: process.env.FIRESTORE_EMULATOR_HOST,
            ssl: false
          };
          url = new url_1.URL(`http://${settings.host}`);
        } else if (settings.host !== void 0) {
          (0, validate_1.validateHost)("settings.host", settings.host);
          url = new url_1.URL(`http://${settings.host}`);
        }
        if (url !== null) {
          if (settings.servicePath !== void 0 && settings.servicePath !== url.hostname || settings.apiEndpoint !== void 0 && settings.apiEndpoint !== url.hostname) {
            console.warn(`The provided host (${url.hostname}) in "settings" does not match the existing host (${(_a = settings.servicePath) !== null && _a !== void 0 ? _a : settings.apiEndpoint}). Using the provided host.`);
          }
          settings.servicePath = url.hostname;
          if (url.port !== "" && settings.port === void 0) {
            settings.port = Number(url.port);
          }
          delete settings.host;
          delete settings.apiEndpoint;
        }
        if (settings.ssl !== void 0) {
          (0, validate_1.validateBoolean)("settings.ssl", settings.ssl);
        }
        if (settings.maxIdleChannels !== void 0) {
          (0, validate_1.validateInteger)("settings.maxIdleChannels", settings.maxIdleChannels, {
            minValue: 0
          });
        }
        this._settings = settings;
        this._settings.toJson = function() {
          const temp = Object.assign({}, this);
          if (temp.credentials) {
            temp.credentials = { private_key: "***", client_email: "***" };
          }
          return temp;
        };
        this._serializer = new serializer_1.Serializer(this);
      }
      get projectId() {
        if (this._projectId === void 0) {
          throw new Error("INTERNAL ERROR: Client is not yet ready to issue requests.");
        }
        return this._projectId;
      }
      get databaseId() {
        return this._databaseId || path_1.DEFAULT_DATABASE_ID;
      }
      get formattedName() {
        return `projects/${this.projectId}/databases/${this.databaseId}`;
      }
      doc(documentPath) {
        (0, path_1.validateResourcePath)("documentPath", documentPath);
        const path = path_1.ResourcePath.EMPTY.append(documentPath);
        if (!path.isDocument) {
          throw new Error(`Value for argument "documentPath" must point to a document, but was "${documentPath}". Your path does not contain an even number of components.`);
        }
        return new reference_1.DocumentReference(this, path);
      }
      collection(collectionPath) {
        (0, path_1.validateResourcePath)("collectionPath", collectionPath);
        const path = path_1.ResourcePath.EMPTY.append(collectionPath);
        if (!path.isCollection) {
          throw new Error(`Value for argument "collectionPath" must point to a collection, but was "${collectionPath}". Your path does not contain an odd number of components.`);
        }
        return new reference_1.CollectionReference(this, path);
      }
      collectionGroup(collectionId) {
        if (collectionId.indexOf("/") !== -1) {
          throw new Error(`Invalid collectionId '${collectionId}'. Collection IDs must not contain '/'.`);
        }
        return new collection_group_1.CollectionGroup(this, collectionId, void 0);
      }
      batch() {
        return new write_batch_1.WriteBatch(this);
      }
      bulkWriter(options) {
        return new bulk_writer_1.BulkWriter(this, options);
      }
      snapshot_(documentOrName, readTime, encoding) {
        let convertTimestamp;
        let convertFields;
        if (encoding === void 0 || encoding === "protobufJS") {
          convertTimestamp = (data) => data;
          convertFields = (data) => data;
        } else if (encoding === "json") {
          convertTimestamp = convert_1.timestampFromJson;
          convertFields = convert_1.fieldsFromJson;
        } else {
          throw new Error(`Unsupported encoding format. Expected "json" or "protobufJS", but was "${encoding}".`);
        }
        let ref;
        let document;
        if (typeof documentOrName === "string") {
          ref = new reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName));
          document = new document_1.DocumentSnapshotBuilder(ref);
        } else {
          ref = new reference_1.DocumentReference(this, path_1.QualifiedResourcePath.fromSlashSeparatedString(documentOrName.name));
          document = new document_1.DocumentSnapshotBuilder(ref);
          document.fieldsProto = documentOrName.fields ? convertFields(documentOrName.fields) : {};
          document.createTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.createTime, "documentOrName.createTime"));
          document.updateTime = timestamp_1.Timestamp.fromProto(convertTimestamp(documentOrName.updateTime, "documentOrName.updateTime"));
        }
        if (readTime) {
          document.readTime = timestamp_1.Timestamp.fromProto(convertTimestamp(readTime, "readTime"));
        }
        return document.build();
      }
      bundle(name) {
        return new bundle_1.BundleBuilder(name || (0, util_1.autoId)());
      }
      runTransaction(updateFunction, transactionOptions) {
        (0, validate_1.validateFunction)("updateFunction", updateFunction);
        const tag = (0, util_1.requestTag)();
        let maxAttempts = exports2.DEFAULT_MAX_TRANSACTION_ATTEMPTS;
        let readOnly = false;
        let readTime;
        if (transactionOptions) {
          (0, validate_1.validateObject)("transactionOptions", transactionOptions);
          (0, validate_1.validateBoolean)("transactionOptions.readOnly", transactionOptions.readOnly, { optional: true });
          if (transactionOptions.readOnly) {
            (0, validate_1.validateTimestamp)("transactionOptions.readTime", transactionOptions.readTime, { optional: true });
            readOnly = true;
            readTime = transactionOptions.readTime;
            maxAttempts = 1;
          } else {
            (0, validate_1.validateInteger)("transactionOptions.maxAttempts", transactionOptions.maxAttempts, { optional: true, minValue: 1 });
            maxAttempts = transactionOptions.maxAttempts || exports2.DEFAULT_MAX_TRANSACTION_ATTEMPTS;
          }
        }
        const transaction = new transaction_1.Transaction(this, tag);
        return this.initializeIfNeeded(tag).then(() => transaction.runTransaction(updateFunction, {
          maxAttempts,
          readOnly,
          readTime
        }));
      }
      listCollections() {
        const rootDocument = new reference_1.DocumentReference(this, path_1.ResourcePath.EMPTY);
        return rootDocument.listCollections();
      }
      getAll(...documentRefsOrReadOptions) {
        (0, validate_1.validateMinNumberOfArguments)("Firestore.getAll", documentRefsOrReadOptions, 1);
        const { documents, fieldMask } = (0, transaction_1.parseGetAllArguments)(documentRefsOrReadOptions);
        const tag = (0, util_1.requestTag)();
        const stack = Error().stack;
        return this.initializeIfNeeded(tag).then(() => {
          const reader = new document_reader_1.DocumentReader(this, documents);
          reader.fieldMask = fieldMask || void 0;
          return reader.get(tag);
        }).catch((err) => {
          throw (0, util_1.wrapError)(err, stack);
        });
      }
      registerListener() {
        this.registeredListenersCount += 1;
      }
      unregisterListener() {
        this.registeredListenersCount -= 1;
      }
      _incrementBulkWritersCount() {
        this.bulkWritersCount += 1;
      }
      _decrementBulkWritersCount() {
        this.bulkWritersCount -= 1;
      }
      recursiveDelete(ref, bulkWriter) {
        return this._recursiveDelete(ref, recursive_delete_1.RECURSIVE_DELETE_MAX_PENDING_OPS, recursive_delete_1.RECURSIVE_DELETE_MIN_PENDING_OPS, bulkWriter);
      }
      _recursiveDelete(ref, maxPendingOps, minPendingOps, bulkWriter) {
        const writer = bulkWriter !== null && bulkWriter !== void 0 ? bulkWriter : this.getBulkWriter();
        const deleter = new recursive_delete_1.RecursiveDelete(this, writer, ref, maxPendingOps, minPendingOps);
        return deleter.run();
      }
      terminate() {
        if (this.registeredListenersCount > 0 || this.bulkWritersCount > 0) {
          return Promise.reject(`All onSnapshot() listeners must be unsubscribed, and all BulkWriter instances must be closed before terminating the client. There are ${this.registeredListenersCount} active listeners and ${this.bulkWritersCount} open BulkWriter instances.`);
        }
        return this._clientPool.terminate();
      }
      toJSON() {
        return { projectId: this._projectId };
      }
      async initializeIfNeeded(requestTag) {
        this._settingsFrozen = true;
        if (this._settings.ssl === false) {
          this._settings.customHeaders = {
            Authorization: "Bearer owner",
            ...this._settings.customHeaders
          };
        }
        if (this._projectId === void 0) {
          try {
            this._projectId = await this._clientPool.run(
              requestTag,
              false,
              (gapicClient) => gapicClient.getProjectId()
            );
            (0, logger_1.logger)("Firestore.initializeIfNeeded", null, "Detected project ID: %s", this._projectId);
          } catch (err) {
            (0, logger_1.logger)("Firestore.initializeIfNeeded", null, "Failed to detect project ID: %s", err);
            return Promise.reject(err);
          }
        }
      }
      createCallOptions(methodName, retryCodes) {
        var _a;
        const callOptions = {
          otherArgs: {
            headers: {
              [CLOUD_RESOURCE_HEADER]: this.formattedName,
              ...this._settings.customHeaders,
              ...(_a = this._settings[methodName]) === null || _a === void 0 ? void 0 : _a.customHeaders
            }
          }
        };
        if (retryCodes) {
          const retryParams = (0, util_1.getRetryParams)(methodName);
          callOptions.retry = new (require_fallback()).RetryOptions(retryCodes, retryParams);
        }
        return callOptions;
      }
      async _retry(methodName, requestTag, func) {
        const backoff = new backoff_1.ExponentialBackoff();
        let lastError = void 0;
        for (let attempt = 0; attempt < exports2.MAX_REQUEST_RETRIES; ++attempt) {
          if (lastError) {
            (0, logger_1.logger)("Firestore._retry", requestTag, "Retrying request that failed with error:", lastError);
          }
          try {
            await backoff.backoffAndWait();
            return await func();
          } catch (err) {
            lastError = err;
            if ((0, util_1.isPermanentRpcError)(err, methodName)) {
              break;
            }
          }
        }
        (0, logger_1.logger)("Firestore._retry", requestTag, "Request failed with error:", lastError);
        return Promise.reject(lastError);
      }
      _initializeStream(backendStream, lifetime, requestTag, request) {
        const resultStream = new stream_1.PassThrough({ objectMode: true });
        resultStream.pause();
        let streamInitialized = false;
        return new Promise((resolve, reject) => {
          function streamReady() {
            if (!streamInitialized) {
              streamInitialized = true;
              (0, logger_1.logger)("Firestore._initializeStream", requestTag, "Releasing stream");
              resolve(resultStream);
            }
          }
          function streamEnded() {
            (0, logger_1.logger)("Firestore._initializeStream", requestTag, "Received stream end");
            resultStream.unpipe(backendStream);
            resolve(resultStream);
            lifetime.resolve();
          }
          function streamFailed(err) {
            if (!streamInitialized) {
              (0, logger_1.logger)("Firestore._initializeStream", requestTag, "Received initial error:", err);
              reject(err);
            } else {
              (0, logger_1.logger)("Firestore._initializeStream", requestTag, "Received stream error:", err);
              setImmediate(() => {
                resultStream.emit("error", err);
              });
            }
          }
          backendStream.on("data", () => streamReady());
          backendStream.on("error", (err) => streamFailed(err));
          backendStream.on("end", () => streamEnded());
          backendStream.on("close", () => streamEnded());
          backendStream.on("finish", () => streamEnded());
          backendStream.pipe(resultStream);
          if (request) {
            (0, logger_1.logger)("Firestore._initializeStream", requestTag, "Sending request: %j", request);
            backendStream.write(request, "utf-8", (err) => {
              if (err) {
                streamFailed(err);
              } else {
                (0, logger_1.logger)("Firestore._initializeStream", requestTag, "Marking stream as healthy");
                streamReady();
              }
            });
          }
        });
      }
      request(methodName, request, requestTag, retryCodes) {
        const callOptions = this.createCallOptions(methodName, retryCodes);
        return this._clientPool.run(
          requestTag,
          false,
          async (gapicClient) => {
            try {
              (0, logger_1.logger)("Firestore.request", requestTag, "Sending request: %j", request);
              const [result] = await gapicClient[methodName](request, callOptions);
              (0, logger_1.logger)("Firestore.request", requestTag, "Received response: %j", result);
              return result;
            } catch (err) {
              (0, logger_1.logger)("Firestore.request", requestTag, "Received error:", err);
              return Promise.reject(err);
            }
          }
        );
      }
      requestStream(methodName, bidrectional, request, requestTag) {
        const callOptions = this.createCallOptions(methodName);
        const bidirectional = methodName === "listen";
        return this._retry(methodName, requestTag, () => {
          const result = new util_1.Deferred();
          this._clientPool.run(requestTag, bidrectional, async (gapicClient) => {
            (0, logger_1.logger)("Firestore.requestStream", requestTag, "Sending request: %j", request);
            try {
              const stream = bidirectional ? gapicClient[methodName](callOptions) : gapicClient[methodName](request, callOptions);
              const logStream = new stream_1.Transform({
                objectMode: true,
                transform: (chunk, encoding, callback) => {
                  (0, logger_1.logger)("Firestore.requestStream", requestTag, "Received response: %j", chunk);
                  callback();
                }
              });
              stream.pipe(logStream);
              const lifetime = new util_1.Deferred();
              const resultStream = await this._initializeStream(stream, lifetime, requestTag, bidirectional ? request : void 0);
              resultStream.on("end", () => stream.end());
              result.resolve(resultStream);
              return lifetime.promise;
            } catch (e) {
              result.reject(e);
            }
          });
          return result.promise;
        });
      }
    };
    exports2.Firestore = Firestore2;
    exports2.default = Firestore2;
    var existingExports = module2.exports;
    module2.exports = Firestore2;
    module2.exports = Object.assign(module2.exports, existingExports);
    Object.defineProperty(module2.exports, "v1beta1", {
      get: () => require_v1beta12()
    });
    Object.defineProperty(module2.exports, "v1", {
      get: () => require_v12()
    });
    Object.defineProperty(module2.exports, "GrpcStatus", {
      get: () => require_fallback().Status
    });
  }
});

// node_modules/firebase-admin/lib/firestore/firestore-internal.js
var require_firestore_internal = __commonJS({
  "node_modules/firebase-admin/lib/firestore/firestore-internal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFirestoreOptions = exports2.FirestoreService = void 0;
    var error_1 = require_error();
    var credential_internal_1 = require_credential_internal();
    var validator = require_validator();
    var utils = require_utils();
    var FirestoreService = class {
      constructor(app) {
        this.databases = /* @__PURE__ */ new Map();
        this.appInternal = app;
      }
      getDatabase(databaseId) {
        let database = this.databases.get(databaseId);
        if (database === void 0) {
          database = initFirestore(this.app, databaseId);
          this.databases.set(databaseId, database);
        }
        return database;
      }
      get app() {
        return this.appInternal;
      }
    };
    exports2.FirestoreService = FirestoreService;
    function getFirestoreOptions(app) {
      if (!validator.isNonNullObject(app) || !("options" in app)) {
        throw new error_1.FirebaseFirestoreError({
          code: "invalid-argument",
          message: "First argument passed to admin.firestore() must be a valid Firebase app instance."
        });
      }
      const projectId = utils.getExplicitProjectId(app);
      const credential = app.options.credential;
      const { version: firebaseVersion } = require_package();
      if (credential instanceof credential_internal_1.ServiceAccountCredential) {
        return {
          credentials: {
            private_key: credential.privateKey,
            client_email: credential.clientEmail
          },
          projectId,
          firebaseVersion
        };
      } else if ((0, credential_internal_1.isApplicationDefault)(app.options.credential)) {
        return validator.isNonEmptyString(projectId) ? { projectId, firebaseVersion } : { firebaseVersion };
      }
      throw new error_1.FirebaseFirestoreError({
        code: "invalid-credential",
        message: "Failed to initialize Google Cloud Firestore client with the available credentials. Must initialize the SDK with a certificate credential or application default credentials to use Cloud Firestore API."
      });
    }
    exports2.getFirestoreOptions = getFirestoreOptions;
    function initFirestore(app, databaseId) {
      const options = getFirestoreOptions(app);
      options.databaseId = databaseId;
      let firestoreDatabase;
      try {
        firestoreDatabase = require_src9().Firestore;
      } catch (err) {
        throw new error_1.FirebaseFirestoreError({
          code: "missing-dependencies",
          message: `Failed to import the Cloud Firestore client library for Node.js. Make sure to install the "@google-cloud/firestore" npm package. Original error: ${err}`
        });
      }
      return new firestoreDatabase(options);
    }
  }
});

// node_modules/firebase-admin/lib/firestore/index.js
var require_firestore = __commonJS({
  "node_modules/firebase-admin/lib/firestore/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFirestore = exports2.setLogFunction = exports2.v1 = exports2.WriteResult = exports2.WriteBatch = exports2.Transaction = exports2.Timestamp = exports2.QuerySnapshot = exports2.QueryPartition = exports2.QueryDocumentSnapshot = exports2.Query = exports2.GrpcStatus = exports2.GeoPoint = exports2.Firestore = exports2.FieldValue = exports2.FieldPath = exports2.DocumentSnapshot = exports2.DocumentReference = exports2.CollectionReference = exports2.CollectionGroup = exports2.BundleBuilder = exports2.BulkWriter = void 0;
    var app_1 = require_app();
    var firestore_internal_1 = require_firestore_internal();
    var path_1 = require_path3();
    var firestore_1 = require_src9();
    Object.defineProperty(exports2, "BulkWriter", { enumerable: true, get: function() {
      return firestore_1.BulkWriter;
    } });
    Object.defineProperty(exports2, "BundleBuilder", { enumerable: true, get: function() {
      return firestore_1.BundleBuilder;
    } });
    Object.defineProperty(exports2, "CollectionGroup", { enumerable: true, get: function() {
      return firestore_1.CollectionGroup;
    } });
    Object.defineProperty(exports2, "CollectionReference", { enumerable: true, get: function() {
      return firestore_1.CollectionReference;
    } });
    Object.defineProperty(exports2, "DocumentReference", { enumerable: true, get: function() {
      return firestore_1.DocumentReference;
    } });
    Object.defineProperty(exports2, "DocumentSnapshot", { enumerable: true, get: function() {
      return firestore_1.DocumentSnapshot;
    } });
    Object.defineProperty(exports2, "FieldPath", { enumerable: true, get: function() {
      return firestore_1.FieldPath;
    } });
    Object.defineProperty(exports2, "FieldValue", { enumerable: true, get: function() {
      return firestore_1.FieldValue;
    } });
    Object.defineProperty(exports2, "Firestore", { enumerable: true, get: function() {
      return firestore_1.Firestore;
    } });
    Object.defineProperty(exports2, "GeoPoint", { enumerable: true, get: function() {
      return firestore_1.GeoPoint;
    } });
    Object.defineProperty(exports2, "GrpcStatus", { enumerable: true, get: function() {
      return firestore_1.GrpcStatus;
    } });
    Object.defineProperty(exports2, "Query", { enumerable: true, get: function() {
      return firestore_1.Query;
    } });
    Object.defineProperty(exports2, "QueryDocumentSnapshot", { enumerable: true, get: function() {
      return firestore_1.QueryDocumentSnapshot;
    } });
    Object.defineProperty(exports2, "QueryPartition", { enumerable: true, get: function() {
      return firestore_1.QueryPartition;
    } });
    Object.defineProperty(exports2, "QuerySnapshot", { enumerable: true, get: function() {
      return firestore_1.QuerySnapshot;
    } });
    Object.defineProperty(exports2, "Timestamp", { enumerable: true, get: function() {
      return firestore_1.Timestamp;
    } });
    Object.defineProperty(exports2, "Transaction", { enumerable: true, get: function() {
      return firestore_1.Transaction;
    } });
    Object.defineProperty(exports2, "WriteBatch", { enumerable: true, get: function() {
      return firestore_1.WriteBatch;
    } });
    Object.defineProperty(exports2, "WriteResult", { enumerable: true, get: function() {
      return firestore_1.WriteResult;
    } });
    Object.defineProperty(exports2, "v1", { enumerable: true, get: function() {
      return firestore_1.v1;
    } });
    Object.defineProperty(exports2, "setLogFunction", { enumerable: true, get: function() {
      return firestore_1.setLogFunction;
    } });
    function getFirestore2(appOrDatabaseId, optionalDatabaseId) {
      const app = typeof appOrDatabaseId === "object" ? appOrDatabaseId : (0, app_1.getApp)();
      const databaseId = (typeof appOrDatabaseId === "string" ? appOrDatabaseId : optionalDatabaseId) || path_1.DEFAULT_DATABASE_ID;
      const firebaseApp = app;
      const firestoreService = firebaseApp.getOrInitService("firestore", (app2) => new firestore_internal_1.FirestoreService(app2));
      return firestoreService.getDatabase(databaseId);
    }
    exports2.getFirestore = getFirestore2;
  }
});

// node_modules/firebase-admin/lib/esm/firestore/index.js
var import_firestore = __toESM(require_firestore(), 1);
var BulkWriter = import_firestore.default.BulkWriter;
var BundleBuilder = import_firestore.default.BundleBuilder;
var CollectionGroup = import_firestore.default.CollectionGroup;
var CollectionReference = import_firestore.default.CollectionReference;
var DocumentReference = import_firestore.default.DocumentReference;
var DocumentSnapshot = import_firestore.default.DocumentSnapshot;
var FieldPath = import_firestore.default.FieldPath;
var FieldValue = import_firestore.default.FieldValue;
var Firestore = import_firestore.default.Firestore;
var GeoPoint = import_firestore.default.GeoPoint;
var GrpcStatus = import_firestore.default.GrpcStatus;
var Query = import_firestore.default.Query;
var QueryDocumentSnapshot = import_firestore.default.QueryDocumentSnapshot;
var QueryPartition = import_firestore.default.QueryPartition;
var QuerySnapshot = import_firestore.default.QuerySnapshot;
var Timestamp = import_firestore.default.Timestamp;
var Transaction = import_firestore.default.Transaction;
var WriteBatch = import_firestore.default.WriteBatch;
var WriteResult = import_firestore.default.WriteResult;
var getFirestore = import_firestore.default.getFirestore;
var setLogFunction = import_firestore.default.setLogFunction;
var v1 = import_firestore.default.v1;

// app/lib/server/collections.ts
function getUsersCollection() {
  return getCollectionByName(USERS_COLLECTION);
}
function getOrganizationsCollection() {
  return getCollectionByName(
    ORGANIZATIONS_COLLECTION
  );
}
function getCollectionByName(collection) {
  return getFirestore().collection(collection);
}

// app/lib/server/queries.ts
async function getOrganizationById(organizationId) {
  const organizations = getOrganizationsCollection();
  return organizations.doc(organizationId).get();
}
async function getUserRefById(userId) {
  const users = getUsersCollection();
  return users.doc(userId).get();
}
async function getUserData(userId) {
  const user = await getUserRefById(userId);
  const data = user.data();
  if (data) {
    return {
      ...data,
      id: user.id
    };
  }
}
export {
  getOrganizationById,
  getUserData,
  getUserRefById
};
/*!
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * @module firestore/convert
 * @private
 * @internal
 *
 * This module contains utility functions to convert
 * `firestore.v1.Documents` from Proto3 JSON to their equivalent
 * representation in Protobuf JS. Protobuf JS is the only encoding supported by
 * this client, and dependencies that use Proto3 JSON (such as the Google Cloud
 * Functions SDK) are supported through this conversion and its usage in
 * {@see Firestore#snapshot_}.
 */
/*!
 * @private
 * @internal
 */
/*!
 * A regular expression to verify an absolute Resource Path in Firestore. It
 * extracts the project ID, the database name and the relative resource path
 * if available.
 *
 * @type {RegExp}
 */
/*!
 * A regular expression to verify field paths that are passed to the API as
 * strings. Field paths that do not match this expression have to be provided
 * as a [FieldPath]{@link FieldPath} object.
 *
 * @type {RegExp}
 */
/*!
 * A regular expression to verify whether a field name can be passed to the
 * backend without escaping.
 *
 * @type {RegExp}
 */
/*!
 * Applies this DocumentMask to 'data' and computes the list of field paths
 * that were specified in the mask but are not present in 'data'.
 */
/*!
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * Copyright 2019 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * Copyright 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * Copyright 2021 Google LLC. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * DO NOT REMOVE THE FOLLOWING NAMESPACE DEFINITIONS
 */
/*!
 * Datastore allowed numeric IDs where Firestore only allows strings. Numeric
 * IDs are exposed to Firestore as __idNUM__, so this is the lowest possible
 * negative numeric value expressed in that format.
 *
 * This constant is used to specify startAt/endAt values when querying for all
 * descendants in a single collection.
 */
/*!
 * Denotes whether a provided limit is applied to the beginning or the end of
 * the result set.
 */
/*!
 * Error message for transactional reads that were executed after performing
 * writes.
 */
/*!
 * HTTP header for the resource prefix to improve routing and project isolation
 * by the backend.
 */
/*!
 * How often the operations per second capacity should increase in milliseconds
 * as specified by the 500/50/5 rule.
 */
/*!
 * Idle timeout used to detect Watch streams that stall (see
 * https://github.com/googleapis/nodejs-firestore/issues/1057, b/156308554).
 * Under normal load, the Watch backend will send a TARGET_CHANGE message
 * roughly every 30 seconds. As discussed with the backend team, we reset the
 * Watch stream if we do not receive any message within 120 seconds.
 */
/*!
 * Number of nanoseconds in a millisecond.
 *
 * @type {number}
 */
/*!
 * Sentinel value for a document remove.
 */
/*!
 * Target ID used by watch. Watch uses a fixed target id since we only support
 * one target per stream.
 * @type {number}
 */
/*!
 * The change type for document change events.
 */
/*!
 * The comparator used for document watches (which should always get called with
 * the same document).
 */
/*!
 * The default database ID for this Firestore client. We do not yet expose the
 * ability to use different databases.
 */
/*!
 * The default factor to increase the backup by after each failed attempt.
 */
/*!
 * The default initial backoff time in milliseconds after an error.
 * Set to 1s according to https://cloud.google.com/apis/design/errors.
 */
/*!
 * The default jitter to apply to the exponential backoff used in retries. For
 * example, a factor of 0.3 means a 30% jitter is applied.
 */
/*!
 * The default jitter to distribute the backoff attempts by (0 means no
 * randomization, 1.0 means +/-50% randomization).
 */
/*!
 * The default maximum backoff time in milliseconds.
 */
/*!
 * The default maximum number of pending operations that can be enqueued onto a
 * BulkWriter instance. An operation is considered pending if BulkWriter has
 * sent it via RPC and is awaiting the result. BulkWriter buffers additional
 * writes after this many pending operations in order to avoiding going OOM.
 */
/*!
 * The default number of idle GRPC channel to keep.
 */
/*!
 * The maximum legal value for the "seconds" property of a Timestamp object.
 *
 * This value corresponds to 9999-12-31T23:59:59.999999999Z.
 *
 * @type {number}
 */
/*!
 * The maximum number of concurrent requests supported by a single GRPC channel,
 * as enforced by Google's Frontend. If the SDK issues more than 100 concurrent
 * operations, we need to use more than one GAPIC client since these clients
 * multiplex all requests over a single channel.
 */
/*!
 * The maximum number of operations per second as allowed by the 500/50/5 rule.
 * By default the rate limiter will not exceed this value.
 *
 * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.
 */
/*!
 * The maximum number of retries that will be attempted by backoff
 * before stopping all retry attempts.
 */
/*!
 * The maximum number of writes can be can in a single batch that is being retried.
 */
/*!
 * The maximum number of writes that can be in a single batch.
 */
/*!
 * The minimum legal value for the "seconds" property of a Timestamp object.
 *
 * This value corresponds to 0001-01-01T00:00:00Z.
 *
 * @type {number}
 */
/*!
 * The number of pending BulkWriter operations at which RecursiveDelete
 * starts the next limit query to fetch descendants. By starting the query
 * while there are pending operations, Firestore can improve BulkWriter
 * throughput. This helps prevent BulkWriter from idling while Firestore
 * fetches the next query.
 */
/*!
 * The query limit used for recursive deletes when fetching all descendants of
 * the specified reference to delete. This is done to prevent the query stream
 * from streaming documents faster than Firestore can delete.
 */
/*!
 * The rate by which to increase the capacity as specified by the 500/50/5 rule.
 */
/*!
 * The starting maximum number of operations per second as allowed by the
 * 500/50/5 rule.
 *
 * https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic.
 */
/*!
 * The timeout handler used by `ExponentialBackoff` and `BulkWriter`.
 */
/*!
 * The type order as defined by the backend.
 */
/*!
 * Utility function to compare doubles (using Firestore semantics for NaN).
 * @private
 * @internal
 */
/*! The Firestore library version */
/*! The external function used to emit logs. */
/*! firebase-admin v11.3.0 */
//# sourceMappingURL=/build/_shared/queries-4N2J44B2.js.map
