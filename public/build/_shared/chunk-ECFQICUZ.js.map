{
  "version": 3,
  "sources": ["../../../app/components/auth/EmailPasswordSignInContainer.tsx", "../../../app/components/auth/EmailPasswordSignInForm.tsx"],
  "sourcesContent": ["import { useCallback, useState } from 'react';\n\nimport type { MultiFactorError, Auth } from 'firebase/auth';\nimport {\n  signInWithEmailAndPassword,\n  reauthenticateWithCredential,\n  EmailAuthProvider,\n} from 'firebase/auth';\n\nimport { useAuth } from 'reactfire';\n\nimport MultiFactorAuthChallengeModal from '~/components/auth/MultiFactorAuthChallengeModal';\nimport isMultiFactorError from '~/core/firebase/utils/is-multi-factor-error';\n\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\nimport useRequestState from '~/core/hooks/use-request-state';\n\nimport AuthErrorMessage from '~/components/auth/AuthErrorMessage';\nimport EmailPasswordSignInForm from '~/components/auth/EmailPasswordSignInForm';\n\nimport If from '~/core/ui/If';\n\nconst EmailPasswordSignInContainer: React.FCC<{\n  onSignIn: (idToken: string) => unknown;\n}> = ({ onSignIn }) => {\n  const auth = useAuth();\n  const requestState = useRequestState<void>();\n\n  const [multiFactorAuthError, setMultiFactorAuthError] =\n    useState<Maybe<MultiFactorError>>();\n\n  const isLoading = requestState.state.loading;\n\n  const signInWithCredentials = useCallback(\n    async (params: { email: string; password: string }) => {\n      if (isLoading) {\n        return;\n      }\n\n      requestState.setLoading(true);\n\n      try {\n        const credential = await getCredential(auth, params);\n\n        if (credential) {\n          // using the ID token, we will make a request to initiate the session\n          // to make SSR possible via session cookie\n          const idToken = await credential.user.getIdToken();\n\n          // we notify the parent component that\n          // the user signed in successfully, so they can be redirected\n          onSignIn(idToken);\n        }\n      } catch (error) {\n        if (isMultiFactorError(error)) {\n          setMultiFactorAuthError(error);\n        } else {\n          requestState.setError(error);\n        }\n      }\n    },\n    [isLoading, auth, onSignIn, requestState]\n  );\n\n  return (\n    <>\n      <If condition={requestState.state.error}>\n        <AuthErrorMessage\n          error={getFirebaseErrorCode(requestState.state.error)}\n        />\n      </If>\n\n      <EmailPasswordSignInForm\n        onSubmit={signInWithCredentials}\n        loading={isLoading}\n      />\n\n      <If condition={multiFactorAuthError}>\n        {(error) => (\n          <MultiFactorAuthChallengeModal\n            error={error}\n            isOpen={true}\n            setIsOpen={(isOpen) => {\n              setMultiFactorAuthError(undefined);\n\n              // when the MFA modal gets closed without verification\n              // we reset the state\n              if (!isOpen) {\n                requestState.resetState();\n              }\n            }}\n            onSuccess={async (credential) => {\n              const idToken = await credential.user.getIdToken();\n\n              // we notify the parent component that\n              // the user signed in successfully, so they can be redirected\n              onSignIn(idToken);\n            }}\n          />\n        )}\n      </If>\n    </>\n  );\n};\n\nasync function getCredential(\n  auth: Auth,\n  params: { email: string; password: string }\n) {\n  const { email, password } = params;\n  const user = auth.currentUser;\n\n  if (user) {\n    const credential = EmailAuthProvider.credential(email, password);\n\n    return reauthenticateWithCredential(user, credential);\n  }\n\n  return signInWithEmailAndPassword(auth, email, password);\n}\n\nexport default EmailPasswordSignInContainer;\n", "import { Link } from '@remix-run/react';\nimport { Trans } from 'react-i18next';\nimport { useForm } from 'react-hook-form';\n\nimport TextField from '~/core/ui/TextField';\nimport Button from '~/core/ui/Button';\nimport If from '~/core/ui/If';\n\nconst EmailPasswordSignInForm: React.FCC<{\n  onSubmit: (params: { email: string; password: string }) => unknown;\n  loading: boolean;\n}> = ({ onSubmit, loading }) => {\n  const { register, handleSubmit } = useForm({\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const emailControl = register('email', { required: true });\n  const passwordControl = register('password', { required: true });\n\n  return (\n    <form className={'w-full'} onSubmit={handleSubmit(onSubmit)}>\n      <div className={'flex-col space-y-4'}>\n        <TextField>\n          <TextField.Label>\n            <Trans i18nKey={'common:emailAddress'} />\n\n            <TextField.Input\n              data-cy={'email-input'}\n              required\n              type=\"email\"\n              placeholder={'your@email.com'}\n              innerRef={emailControl.ref}\n              onBlur={emailControl.onBlur}\n              onChange={emailControl.onChange}\n              name={emailControl.name}\n            />\n          </TextField.Label>\n        </TextField>\n\n        <TextField>\n          <TextField.Label>\n            <Trans i18nKey={'common:password'} />\n\n            <TextField.Input\n              required\n              data-cy={'password-input'}\n              type=\"password\"\n              placeholder={''}\n              innerRef={passwordControl.ref}\n              onBlur={passwordControl.onBlur}\n              onChange={passwordControl.onChange}\n              name={passwordControl.name}\n            />\n\n            <div className={'py-0.5 text-xs'}>\n              <Link to={'/auth/password-reset'} className={'hover:underline'}>\n                <Trans i18nKey={'auth:passwordForgottenQuestion'} />\n              </Link>\n            </div>\n          </TextField.Label>\n        </TextField>\n\n        <div>\n          <Button\n            size={'large'}\n            className={'w-full'}\n            color={'primary'}\n            data-cy=\"auth-submit-button\"\n            type=\"submit\"\n            loading={loading}\n          >\n            <If\n              condition={loading}\n              fallback={<Trans i18nKey={'auth:signIn'} />}\n            >\n              <Trans i18nKey={'auth:signingIn'} />\n            </If>\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default EmailPasswordSignInForm;\n"],
  "mappings": "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",
  "names": ["import_react"]
}
