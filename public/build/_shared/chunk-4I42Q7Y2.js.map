{
  "version": 3,
  "sources": ["../../../app/components/IfHasPermissions.tsx"],
  "sourcesContent": ["import type MembershipRole from '~/lib/organizations/types/membership-role';\nimport useCurrentUserRole from '~/lib/organizations/hooks/use-current-user-role';\n\n/**\n * @name IfHasPermissions\n * @description\n * This component can guard the visibility of portions of the page\n * based on the signed-in user's role for the selected organization.\n * This works hierarchically: if the role passed in is 2,\n * then portion will also be permitted to users with a greater role (3...n), but not 0 and 1\n *\n * We recommend to always import the logic handler function from a central\n * place instead of defining inline, to avoid permissions and rules getting\n * messy and scattered in the codebase\n *\n * For example:\n *  - <IfHasPermissions condition={canChangeBilling}>     // GOOD\n *  - <IfHasPermissions condition={(role) => role > 2}>   // BAD\n *\n * @param children\n * @param handler\n * @constructor\n */\nfunction IfHasPermissions({\n  children,\n  condition,\n}: React.PropsWithChildren<{ condition: (role: MembershipRole) => boolean }>) {\n  const currentUserRole = useCurrentUserRole();\n\n  if (currentUserRole === undefined || !condition(currentUserRole)) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n\nexport default IfHasPermissions;\n"],
  "mappings": ";;;;;;;;;;;AAAA;AAuBA,SAAS,iBAAiB;AAAA,EACxB;AAAA,EACA;AACF,GAA8E;AAC5E,QAAM,kBAAkB,mBAAmB;AAE3C,MAAI,oBAAoB,UAAa,CAAC,UAAU,eAAe,GAAG;AAChE,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IAAG;AAAA,KAAH;AAAA;AAAA;AAAA;AAAA,SAAY;AACrB;AAEA,IAAO,2BAAQ;",
  "names": []
}
