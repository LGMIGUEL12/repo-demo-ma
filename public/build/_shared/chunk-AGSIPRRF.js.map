{
  "version": 3,
  "sources": ["../../../app/core/ui/PageLoadingIndicator.tsx", "../../../app/components/auth/OAuthProviders.tsx", "../../../app/core/ui/AuthProviderLogo.tsx", "../../../app/core/ui/AuthProviderButton.tsx", "../../../app/core/firebase/hooks/use-sign-in-with-provider.ts"],
  "sourcesContent": ["import type { PropsWithChildren } from 'react';\nimport { FulfillingBouncingCircleSpinner } from 'react-epic-spinners';\n\nimport LogoImage from '~/core/ui/Logo/LogoImage';\nimport If from '~/core/ui/If';\n\nexport default function PageLoadingIndicator({\n  children,\n  fullPage,\n  displayLogo,\n}: PropsWithChildren<{\n  fullPage?: boolean;\n  displayLogo?: boolean;\n}>) {\n  const useFullPage = fullPage ?? true;\n  const shouldDisplayLogo = displayLogo ?? true;\n\n  return (\n    <div\n      className={`flex flex-col items-center justify-center space-y-6 ${\n        useFullPage\n          ? 'fixed top-0 left-0 z-[100] h-screen w-screen bg-white' +\n            ' dark:bg-black-500'\n          : ''\n      }`}\n    >\n      <If condition={shouldDisplayLogo}>\n        <div className={'my-2'}>\n          <LogoImage />\n        </div>\n      </If>\n\n      <FulfillingBouncingCircleSpinner size={48} color={`currentColor`} />\n\n      <div className={'text-sm font-medium'}>{children}</div>\n    </div>\n  );\n}\n", "import { useCallback, useState } from 'react';\nimport { Trans } from 'react-i18next';\n\nimport type { MultiFactorError, UserCredential, User } from 'firebase/auth';\n\nimport AuthProviderButton from '~/core/ui/AuthProviderButton';\nimport { useSignInWithProvider } from '~/core/firebase/hooks';\nimport getFirebaseErrorCode from '~/core/firebase/utils/get-firebase-error-code';\n\nimport If from '~/core/ui/If';\n\nimport AuthErrorMessage from './AuthErrorMessage';\nimport MultiFactorAuthChallengeModal from '~/components/auth/MultiFactorAuthChallengeModal';\nimport isMultiFactorError from '~/core/firebase/utils/is-multi-factor-error';\nimport PageLoadingIndicator from '~/core/ui/PageLoadingIndicator';\n\nimport configuration from '~/configuration';\n\nconst OAUTH_PROVIDERS = configuration.auth.providers.oAuth;\n\nconst OAuthProviders: React.FCC<{\n  onSignIn: (idToken: string) => unknown;\n}> = ({ onSignIn }) => {\n  const {\n    signInWithProvider,\n    state: signInWithProviderState,\n    resetState,\n  } = useSignInWithProvider();\n\n  // we make the UI \"busy\" until the next page is fully loaded\n  const loading = signInWithProviderState.loading;\n\n  const [multiFactorAuthError, setMultiFactorAuthError] =\n    useState<Maybe<MultiFactorError>>();\n\n  const createSession = useCallback(\n    async (user: User) => {\n      const idToken = await user.getIdToken();\n\n      onSignIn(idToken);\n    },\n    [onSignIn]\n  );\n\n  const onSignInWithProvider = useCallback(\n    async (signInRequest: () => Promise<UserCredential | undefined>) => {\n      try {\n        const credential = await signInRequest();\n\n        if (!credential) {\n          return Promise.reject();\n        }\n\n        await createSession(credential.user);\n      } catch (error) {\n        if (isMultiFactorError(error)) {\n          setMultiFactorAuthError(error as MultiFactorError);\n        } else {\n          throw getFirebaseErrorCode(error);\n        }\n      }\n    },\n    [setMultiFactorAuthError, createSession]\n  );\n\n  if (!OAUTH_PROVIDERS || !OAUTH_PROVIDERS.length) {\n    return null;\n  }\n\n  return (\n    <>\n      <If condition={loading}>\n        <PageLoadingIndicator />\n      </If>\n\n      <div className={'flex w-full flex-1 flex-col space-y-3'}>\n        <div className={'flex-col space-y-2'}>\n          {OAUTH_PROVIDERS.map((OAuthProviderClass) => {\n            const providerInstance = new OAuthProviderClass();\n            const providerId = providerInstance.providerId;\n\n            return (\n              <AuthProviderButton\n                key={providerId}\n                providerId={providerId}\n                onClick={() => {\n                  return onSignInWithProvider(() =>\n                    signInWithProvider(providerInstance)\n                  );\n                }}\n              >\n                <Trans\n                  i18nKey={'auth:signInWithProvider'}\n                  values={{\n                    provider: getProviderName(providerId),\n                  }}\n                />\n              </AuthProviderButton>\n            );\n          })}\n        </div>\n\n        <If condition={signInWithProviderState.error}>\n          {(error) => <AuthErrorMessage error={getFirebaseErrorCode(error)} />}\n        </If>\n      </div>\n\n      <If condition={multiFactorAuthError}>\n        {(error) => (\n          <MultiFactorAuthChallengeModal\n            error={error}\n            isOpen={true}\n            setIsOpen={(isOpen: boolean) => {\n              setMultiFactorAuthError(undefined);\n\n              // when the MFA modal gets closed without verification\n              // we reset the state\n              if (!isOpen) {\n                resetState();\n              }\n            }}\n            onSuccess={async (credential) => {\n              return createSession(credential.user);\n            }}\n          />\n        )}\n      </If>\n    </>\n  );\n};\n\nfunction getProviderName(providerId: string) {\n  const capitalize = (value: string) =>\n    value.slice(0, 1).toUpperCase() + value.slice(1);\n\n  if (providerId.endsWith('.com')) {\n    return capitalize(providerId.split('.com')[0]);\n  }\n\n  return capitalize(providerId);\n}\n\nexport default OAuthProviders;\n", "import {\n  AtSymbolIcon,\n  DevicePhoneMobileIcon,\n} from '@heroicons/react/24/outline';\n\nconst DEFAULT_IMAGE_SIZE = 28;\n\nconst AuthProviderLogo: React.FC<{\n  firebaseProviderId: string;\n  width?: number;\n  height?: number;\n}> = ({ firebaseProviderId, width, height }) => {\n  const image = getOAuthProviderLogos()[firebaseProviderId];\n\n  if (typeof image === `string`) {\n    return (\n      <img\n        loading={'lazy'}\n        src={image}\n        alt={`${firebaseProviderId} logo`}\n        width={width ?? DEFAULT_IMAGE_SIZE}\n        height={height ?? DEFAULT_IMAGE_SIZE}\n      />\n    );\n  }\n\n  return <>{image}</>;\n};\n\nfunction getOAuthProviderLogos(): Record<string, string | JSX.Element> {\n  return {\n    password: <AtSymbolIcon className={'h-7'} />,\n    phone: <DevicePhoneMobileIcon className={'h-7'} />,\n    'google.com': '/assets/images/google.webp',\n    'facebook.com': '/assets/images/facebook.webp',\n    'twitter.com': '/assets/images/twitter.webp',\n    'github.com': '/assets/images/github.webp',\n    'microsoft.com': '/assets/images/microsoft.webp',\n    'apple.com': '/assets/images/apple.webp',\n  };\n}\n\nexport default AuthProviderLogo;\n", "import Button from '../ui/Button';\nimport AuthProviderLogo from '~/core/ui/AuthProviderLogo';\n\nconst AuthProviderButton: React.FCC<{\n  providerId: string;\n  onClick: () => unknown;\n}> = ({ children, providerId, onClick }) => {\n  return (\n    <Button\n      data-cy={'auth-provider-button'}\n      block\n      color={'custom'}\n      size={'large'}\n      className={`AuthProviderButton`}\n      onClick={onClick}\n      data-provider={providerId}\n    >\n      <span className={'absolute left-3 flex items-center justify-start'}>\n        <AuthProviderLogo firebaseProviderId={providerId} />\n      </span>\n\n      <span className={'flex w-full flex-1 items-center'}>\n        <span className={'flex w-full items-center justify-center'}>\n          <span className={'text-current'}>{children}</span>\n        </span>\n      </span>\n    </Button>\n  );\n};\n\nexport default AuthProviderButton;\n", "import { useCallback } from 'react';\n\nimport { useAuth } from 'reactfire';\nimport type { FirebaseError } from 'firebase/app';\nimport type { UserCredential, AuthProvider, Auth } from 'firebase/auth';\n\nimport useRequestState from '~/core/hooks/use-request-state';\n\nexport function useSignInWithProvider() {\n  const auth = useAuth();\n\n  const { state, setLoading, setData, setError, resetState } = useRequestState<\n    UserCredential,\n    FirebaseError\n  >();\n\n  const signInWithProvider = useCallback(\n    async (provider: AuthProvider) => {\n      setLoading(true);\n\n      try {\n        const credential = await getCredential(auth, provider);\n\n        setData(credential);\n\n        return credential;\n      } catch (error) {\n        setError(error as FirebaseError);\n\n        return Promise.reject(error);\n      }\n    },\n    [auth, setData, setError, setLoading]\n  );\n\n  return { signInWithProvider, state, resetState };\n}\n\nasync function getCredential(auth: Auth, provider: AuthProvider) {\n  const user = auth.currentUser;\n\n  const {\n    signInWithPopup,\n    browserPopupRedirectResolver,\n    reauthenticateWithPopup,\n  } = await import('firebase/auth');\n\n  if (user) {\n    return reauthenticateWithPopup(\n      user,\n      provider,\n      browserPopupRedirectResolver\n    );\n  }\n\n  return signInWithPopup(auth, provider, browserPopupRedirectResolver);\n}\n"],
  "mappings": "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",
  "names": ["import_react"]
}
